
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08007780  08007780  0000f780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08007788  08007788  0000f788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000460  20000000  0800778c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013dfc  20000460  08007bec  00010460  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  2001425c  0801b9e8  00010460  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b2ba  00000000  00000000  0001048e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002415  00000000  00000000  0001b748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000046ab  00000000  00000000  0001db5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c80  00000000  00000000  00022208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b20  00000000  00000000  00022e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005e51  00000000  00000000  000239a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004325  00000000  00000000  000297f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0002db1e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002c90  00000000  00000000  0002db90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000460 	.word	0x20000460
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007768 	.word	0x08007768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007768 	.word	0x08007768
 80001d0:	20000464 	.word	0x20000464
 80001d4:	20000460 	.word	0x20000460
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
#define pdTrue 	1

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f005 fe3b 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f005 fe37 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f005 fe33 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	48b1      	ldr	r0, [pc, #708]	; (8000614 <init_SPIx+0x304>)
 8000350:	4619      	mov	r1, r3
 8000352:	f005 fb37 	bl	80059c4 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000376:	48a7      	ldr	r0, [pc, #668]	; (8000614 <init_SPIx+0x304>)
 8000378:	4619      	mov	r1, r3
 800037a:	f005 fb23 	bl	80059c4 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039e:	489d      	ldr	r0, [pc, #628]	; (8000614 <init_SPIx+0x304>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f005 fb0f 	bl	80059c4 <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	489b      	ldr	r0, [pc, #620]	; (8000614 <init_SPIx+0x304>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f005 fc20 	bl	8005bf0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	4898      	ldr	r0, [pc, #608]	; (8000614 <init_SPIx+0x304>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f005 fc1b 	bl	8005bf0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	4896      	ldr	r0, [pc, #600]	; (8000614 <init_SPIx+0x304>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f005 fc16 	bl	8005bf0 <GPIO_PinAFConfig>


	RCC_AHB1PeriphClockCmd(WIZ_HR_GPIO_CLK, ENABLE);
 80003c4:	2004      	movs	r0, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	f005 fde4 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(WIZ_IT_GPIO_CLK, ENABLE);
 80003cc:	2004      	movs	r0, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	f005 fde0 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	
		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003d4:	2310      	movs	r3, #16
 80003d6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003d8:	2301      	movs	r3, #1
 80003da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <init_SPIx+0x304>)
 80003f6:	4619      	mov	r1, r3
 80003f8:	f005 fae4 	bl	80059c4 <GPIO_Init>
	
	CSOFF(); // set PA4 high
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 80003fe:	4a85      	ldr	r2, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 8000400:	8b12      	ldrh	r2, [r2, #24]
 8000402:	b292      	uxth	r2, r2
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	b292      	uxth	r2, r2
 800040a:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = WIZ_HR_PIN;
 800040c:	2320      	movs	r3, #32
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000422:	2301      	movs	r3, #1
 8000424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(WIZ_HR_GPIO_PORT, &GPIO_InitStruct);
 8000428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800042c:	487a      	ldr	r0, [pc, #488]	; (8000618 <init_SPIx+0x308>)
 800042e:	4619      	mov	r1, r3
 8000430:	f005 fac8 	bl	80059c4 <GPIO_Init>
	
	RESET_LOW(); // set PA3 high
 8000434:	4b78      	ldr	r3, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000436:	4a78      	ldr	r2, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000438:	8b12      	ldrh	r2, [r2, #24]
 800043a:	b292      	uxth	r2, r2
 800043c:	f042 0220 	orr.w	r2, r2, #32
 8000440:	b292      	uxth	r2, r2
 8000442:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 8000444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000448:	2101      	movs	r1, #1
 800044a:	f005 fddb 	bl	8006004 <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800044e:	2300      	movs	r3, #0
 8000450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000462:	2300      	movs	r3, #0
 8000464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800046e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000476:	2308      	movs	r3, #8
 8000478:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPIx, &SPI_InitStruct); 
 8000482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000486:	4865      	ldr	r0, [pc, #404]	; (800061c <init_SPIx+0x30c>)
 8000488:	4619      	mov	r1, r3
 800048a:	f005 fdf3 	bl	8006074 <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 800048e:	4863      	ldr	r0, [pc, #396]	; (800061c <init_SPIx+0x30c>)
 8000490:	2101      	movs	r1, #1
 8000492:	f005 fee1 	bl	8006258 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000496:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800049a:	2101      	movs	r1, #1
 800049c:	f005 fd7a 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 80004a0:	485f      	ldr	r0, [pc, #380]	; (8000620 <init_SPIx+0x310>)
 80004a2:	f004 f9a7 	bl	80047f4 <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 80004a6:	485f      	ldr	r0, [pc, #380]	; (8000624 <init_SPIx+0x314>)
 80004a8:	f004 f9a4 	bl	80047f4 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 80004ac:	bf00      	nop
 80004ae:	485c      	ldr	r0, [pc, #368]	; (8000620 <init_SPIx+0x310>)
 80004b0:	f004 fdb0 	bl	8005014 <DMA_GetCmdStatus>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <init_SPIx+0x19e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 80004ba:	bf00      	nop
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <init_SPIx+0x314>)
 80004be:	f004 fda9 	bl	8005014 <DMA_GetCmdStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <init_SPIx+0x1ac>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 fc6b 	bl	8004da8 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <init_SPIx+0x318>)
 80004e2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <init_SPIx+0x31c>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <init_SPIx+0x310>)
 8000510:	4619      	mov	r1, r3
 8000512:	f004 fa85 	bl	8004a20 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 8000516:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800051a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <init_SPIx+0x320>)
 8000522:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000528:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <init_SPIx+0x314>)
 8000530:	4619      	mov	r1, r3
 8000532:	f004 fa75 	bl	8004a20 <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <init_SPIx+0x310>)
 8000538:	2110      	movs	r1, #16
 800053a:	2201      	movs	r2, #1
 800053c:	f004 fde8 	bl	8005110 <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000540:	4838      	ldr	r0, [pc, #224]	; (8000624 <init_SPIx+0x314>)
 8000542:	2110      	movs	r1, #16
 8000544:	2201      	movs	r2, #1
 8000546:	f004 fde3 	bl	8005110 <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <init_SPIx+0x30c>)
 800054c:	2102      	movs	r1, #2
 800054e:	f005 ff81 	bl	8006454 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <init_SPIx+0x30c>)
 8000554:	2101      	movs	r1, #1
 8000556:	f005 ff7d 	bl	8006454 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 800055a:	233b      	movs	r3, #59	; 0x3b
 800055c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;
 800055e:	2306      	movs	r3, #6
 8000560:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000562:	2301      	movs	r3, #1
 8000564:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f8c6 	bl	8004700 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 8000574:	233a      	movs	r3, #58	; 0x3a
 8000576:	733b      	strb	r3, [r7, #12]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;
 8000578:	2306      	movs	r3, #6
 800057a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x2;
 800057c:	2302      	movs	r3, #2
 800057e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f004 f8b9 	bl	8004700 <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800058e:	4823      	ldr	r0, [pc, #140]	; (800061c <init_SPIx+0x30c>)
 8000590:	2102      	movs	r1, #2
 8000592:	2201      	movs	r2, #1
 8000594:	f005 fea2 	bl	80062dc <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <init_SPIx+0x30c>)
 800059a:	2101      	movs	r1, #1
 800059c:	2201      	movs	r2, #1
 800059e:	f005 fe9d 	bl	80062dc <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin */
	GPIO_InitStruct.GPIO_Pin = WIZ_IT_PIN;
 80005a2:	2310      	movs	r3, #16
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(WIZ_IT_GPIO_PORT, &GPIO_InitStruct);	
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <init_SPIx+0x308>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	f005 f9fd 	bl	80059c4 <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2101      	movs	r1, #1
 80005d0:	f005 fd18 	bl	8006004 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(WIZ_IT_EXTI_PORT_SOURCE, WIZ_IT_EXTI_PIN_SOURCE);
 80005d4:	2002      	movs	r0, #2
 80005d6:	2104      	movs	r1, #4
 80005d8:	f005 ff76 	bl	80064c8 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = WIZ_IT_EXTI_LINE;
 80005dc:	2310      	movs	r3, #16
 80005de:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005e0:	2300      	movs	r3, #0
 80005e2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005e4:	230c      	movs	r3, #12
 80005e6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 f8ac 	bl	800574c <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = WIZ_IT_EXTI_IRQn;
 80005f4:	230a      	movs	r3, #10
 80005f6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 5;
 80005f8:	230a      	movs	r3, #10
 80005fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f87a 	bl	8004700 <NVIC_Init>


	
}
 800060c:	3768      	adds	r7, #104	; 0x68
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020800 	.word	0x40020800
 800061c:	40013000 	.word	0x40013000
 8000620:	40026458 	.word	0x40026458
 8000624:	40026440 	.word	0x40026440
 8000628:	4001300c 	.word	0x4001300c
 800062c:	200139d8 	.word	0x200139d8
 8000630:	20013204 	.word	0x20013204

08000634 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 800063a:	491e      	ldr	r1, [pc, #120]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800063c:	f004 fe1e 	bl	800527c <DMA_GetITStatus>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02a      	beq.n	800069c <DMA2_Stream2_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000648:	491a      	ldr	r1, [pc, #104]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800064a:	f004 ffd3 	bl	80055f4 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800064e:	bf00      	nop
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	f005 fea0 	bl	8006398 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <DMA2_Stream2_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000662:	8b12      	ldrh	r2, [r2, #24]
 8000664:	b292      	uxth	r2, r2
 8000666:	f042 0210 	orr.w	r2, r2, #16
 800066a:	b292      	uxth	r2, r2
 800066c:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000670:	2100      	movs	r1, #0
 8000672:	f004 fbcf 	bl	8004e14 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000678:	2100      	movs	r1, #0
 800067a:	f004 fbcb 	bl	8004e14 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 800067e:	f003 f9f5 	bl	8003a6c <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xHigherPriorityTaskWoken = pdFalse;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA2_Stream2_IRQHandler+0x94>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	2100      	movs	r1, #0
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000692:	2300      	movs	r3, #0
 8000694:	f002 fdfc 	bl	8003290 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 8000698:	f003 f9f8 	bl	8003a8c <vPortExitCritical>
  }	

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <DMA2_Stream2_IRQHandler+0x78>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <DMA2_Stream2_IRQHandler+0x98>)
 80006a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40026440 	.word	0x40026440
 80006b4:	10208000 	.word	0x10208000
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40026458 	.word	0x40026458
 80006c4:	2000047c 	.word	0x2000047c
 80006c8:	200131ec 	.word	0x200131ec
 80006cc:	e000ed04 	.word	0xe000ed04

080006d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006d6:	491e      	ldr	r1, [pc, #120]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006d8:	f004 fdd0 	bl	800527c <DMA_GetITStatus>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d02a      	beq.n	8000738 <DMA2_Stream3_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006e6:	f004 ff85 	bl	80055f4 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006ea:	bf00      	nop
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	f005 fe52 	bl	8006398 <SPI_I2S_GetFlagStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0f8      	beq.n	80006ec <DMA2_Stream3_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fe:	8b12      	ldrh	r2, [r2, #24]
 8000700:	b292      	uxth	r2, r2
 8000702:	f042 0210 	orr.w	r2, r2, #16
 8000706:	b292      	uxth	r2, r2
 8000708:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 800070c:	2100      	movs	r1, #0
 800070e:	f004 fb81 	bl	8004e14 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000714:	2100      	movs	r1, #0
 8000716:	f004 fb7d 	bl	8004e14 <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 800071a:	f003 f9a7 	bl	8003a6c <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xHigherPriorityTaskWoken = pdFalse;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <DMA2_Stream3_IRQHandler+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800072e:	2300      	movs	r3, #0
 8000730:	f002 fdae 	bl	8003290 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000734:	f003 f9aa 	bl	8003a8c <vPortExitCritical>
 }
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <DMA2_Stream3_IRQHandler+0x78>
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DMA2_Stream3_IRQHandler+0x98>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40026458 	.word	0x40026458
 8000750:	18008000 	.word	0x18008000
 8000754:	40013000 	.word	0x40013000
 8000758:	40020000 	.word	0x40020000
 800075c:	40026440 	.word	0x40026440
 8000760:	2000047c 	.word	0x2000047c
 8000764:	200131ec 	.word	0x200131ec
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <spi_dma_send>:


/*---------------------------- Matic Knap 25 Jun 2014 ---------------------*/

void spi_dma_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
{
 800076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	460b      	mov	r3, r1
 8000776:	603a      	str	r2, [r7, #0]
 8000778:	4602      	mov	r2, r0
 800077a:	80fa      	strh	r2, [r7, #6]
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	466b      	mov	r3, sp
 8000780:	461e      	mov	r6, r3
		uint8_t buffer[data_len+4];
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	1d19      	adds	r1, r3, #4
 8000786:	1e4b      	subs	r3, r1, #1
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	460b      	mov	r3, r1
 800078c:	461a      	mov	r2, r3
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000796:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800079a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800079e:	460b      	mov	r3, r1
 80007a0:	461a      	mov	r2, r3
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	00dd      	lsls	r5, r3, #3
 80007a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80007ac:	00d4      	lsls	r4, r2, #3
 80007ae:	460b      	mov	r3, r1
 80007b0:	3307      	adds	r3, #7
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	ebad 0d03 	sub.w	sp, sp, r3
 80007ba:	466b      	mov	r3, sp
 80007bc:	3300      	adds	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80007da:	121b      	asrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007f2:	2304      	movs	r3, #4
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <spi_dma_send+0xa4>
			buffer[i] = (data_buf[i-4]);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	440b      	add	r3, r1
 8000808:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
		buffer[3] = (data_len & 0x00ff);

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	1d1a      	adds	r2, r3, #4
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	429a      	cmp	r2, r3
 8000818:	dcee      	bgt.n	80007f8 <spi_dma_send+0x8c>
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	3304      	adds	r3, #4
 800081e:	b29b      	uxth	r3, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <spi_dma_send+0x100>)
 8000822:	4619      	mov	r1, r3
 8000824:	f004 fb82 	bl	8004f2c <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <spi_dma_send+0x100>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <spi_dma_send+0x104>)
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <spi_dma_send+0x104>)
 8000832:	8b52      	ldrh	r2, [r2, #26]
 8000834:	b292      	uxth	r2, r2
 8000836:	f042 0210 	orr.w	r2, r2, #16
 800083a:	b292      	uxth	r2, r2
 800083c:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <spi_dma_send+0x100>)
 8000840:	2101      	movs	r1, #1
 8000842:	f004 fae7 	bl	8004e14 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <spi_dma_send+0x108>)
 8000848:	2101      	movs	r1, #1
 800084a:	f004 fae3 	bl	8004e14 <DMA_Cmd>
		/* Block until the semaphore is given */
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <spi_dma_send+0x10c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800085a:	2300      	movs	r3, #0
 800085c:	f002 fd82 	bl	8003364 <xQueueGenericReceive>
 8000860:	46b5      	mov	sp, r6

	//	CSOFF(); // chip deselect 
			
	
}
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800086a:	bf00      	nop
 800086c:	40026458 	.word	0x40026458
 8000870:	40020000 	.word	0x40020000
 8000874:	40026440 	.word	0x40026440
 8000878:	200131ec 	.word	0x200131ec

0800087c <spi_dma_send2B>:

void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4602      	mov	r2, r0
 8000884:	460b      	mov	r3, r1
 8000886:	80fa      	strh	r2, [r7, #6]
 8000888:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[6];
	uint16_t data_len = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	81fb      	strh	r3, [r7, #14]
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	723b      	strb	r3, [r7, #8]
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	727b      	strb	r3, [r7, #9]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	 buffer[3] = (data_len & 0x00ff);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	72fb      	strb	r3, [r7, #11]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	733b      	strb	r3, [r7, #12]
	 buffer[5] = (data_buf & 0x00ff);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	737b      	strb	r3, [r7, #13]
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <spi_dma_send2B+0x94>)
 80008ca:	2106      	movs	r1, #6
 80008cc:	f004 fb2e 	bl	8004f2c <DMA_SetCurrDataCounter>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <spi_dma_send2B+0x94>)
 80008d2:	f107 0208 	add.w	r2, r7, #8
 80008d6:	60da      	str	r2, [r3, #12]
	CSON(); // chip select 
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008dc:	8b52      	ldrh	r2, [r2, #26]
 80008de:	b292      	uxth	r2, r2
 80008e0:	f042 0210 	orr.w	r2, r2, #16
 80008e4:	b292      	uxth	r2, r2
 80008e6:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <spi_dma_send2B+0x94>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	f004 fa92 	bl	8004e14 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <spi_dma_send2B+0x9c>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	f004 fa8e 	bl	8004e14 <DMA_Cmd>
	/* Block until the semaphore is given */
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <spi_dma_send2B+0xa0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000904:	2300      	movs	r3, #0
 8000906:	f002 fd2d 	bl	8003364 <xQueueGenericReceive>
	
//	CSOFF(); // chip deselect 
			
}
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40026458 	.word	0x40026458
 8000914:	40020000 	.word	0x40020000
 8000918:	40026440 	.word	0x40026440
 800091c:	200131ec 	.word	0x200131ec

08000920 <spi_dma_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	80fa      	strh	r2, [r7, #6]
 800092c:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[5];
		uint16_t data_len=0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	723b      	strb	r3, [r7, #8]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	727b      	strb	r3, [r7, #9]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000948:	121b      	asrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	72bb      	strb	r3, [r7, #10]
		buffer[3] = (data_len & 0x00ff);
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	72fb      	strb	r3, [r7, #11]
		buffer[4] = data_buf ; 
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	733b      	strb	r3, [r7, #12]
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000962:	2105      	movs	r1, #5
 8000964:	f004 fae2 	bl	8004f2c <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <spi_dma_sendByte+0x88>)
 800096a:	f107 0208 	add.w	r2, r7, #8
 800096e:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000974:	8b52      	ldrh	r2, [r2, #26]
 8000976:	b292      	uxth	r2, r2
 8000978:	f042 0210 	orr.w	r2, r2, #16
 800097c:	b292      	uxth	r2, r2
 800097e:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000982:	2101      	movs	r1, #1
 8000984:	f004 fa46 	bl	8004e14 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <spi_dma_sendByte+0x90>)
 800098a:	2101      	movs	r1, #1
 800098c:	f004 fa42 	bl	8004e14 <DMA_Cmd>
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <spi_dma_sendByte+0x94>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	2300      	movs	r3, #0
 800099e:	f002 fce1 	bl	8003364 <xQueueGenericReceive>
				
//		CSOFF(); // chip deselect 
			
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40026458 	.word	0x40026458
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40026440 	.word	0x40026440
 80009b4:	200131ec 	.word	0x200131ec

080009b8 <spi_dma_read>:

		return (data_buf[0] << 8) | data_buf[1];

}
void spi_dma_read(uint16_t address, uint16_t data_len)
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	80f8      	strh	r0, [r7, #6]
 80009c2:	80b9      	strh	r1, [r7, #4]
 80009c4:	4669      	mov	r1, sp
 80009c6:	4688      	mov	r8, r1
		
		/*! spi_dma_read it has to be used with \n
		 * memcpy from bufferRX right after it has recieve \n
		 * data on SPI. */
		
		uint8_t buffer[data_len+4];
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	1d0e      	adds	r6, r1, #4
 80009cc:	1e71      	subs	r1, r6, #1
 80009ce:	6139      	str	r1, [r7, #16]
 80009d0:	4631      	mov	r1, r6
 80009d2:	4608      	mov	r0, r1
 80009d4:	f04f 0100 	mov.w	r1, #0
 80009d8:	00cd      	lsls	r5, r1, #3
 80009da:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80009de:	00c4      	lsls	r4, r0, #3
 80009e0:	4631      	mov	r1, r6
 80009e2:	4608      	mov	r0, r1
 80009e4:	f04f 0100 	mov.w	r1, #0
 80009e8:	00cb      	lsls	r3, r1, #3
 80009ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009ee:	00c2      	lsls	r2, r0, #3
 80009f0:	4633      	mov	r3, r6
 80009f2:	3307      	adds	r3, #7
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	ebad 0d03 	sub.w	sp, sp, r3
 80009fc:	466b      	mov	r3, sp
 80009fe:	3300      	adds	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x00 | (data_len & 0x7f00) >> 8 ));
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a1c:	121b      	asrs	r3, r3, #8
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) buffer[i] = 0x0;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e007      	b.n	8000a42 <spi_dma_read+0x8a>
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dcf2      	bgt.n	8000a32 <spi_dma_read+0x7a>

		DMA_SetCurrDataCounter(SPIx_RX_DMA_STREAM, data_len+4);
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a54:	4619      	mov	r1, r3
 8000a56:	f004 fa69 	bl	8004f2c <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 4+data_len);
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a62:	4619      	mov	r1, r3
 8000a64:	f004 fa62 	bl	8004f2c <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
		SPIx_RX_DMA_STREAM->M0AR =(uint32_t)&bufferRX;	
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <spi_dma_read+0x100>)
 8000a72:	60da      	str	r2, [r3, #12]

		CSON(); // chip select 
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a78:	8b52      	ldrh	r2, [r2, #26]
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	f042 0210 	orr.w	r2, r2, #16
 8000a80:	b292      	uxth	r2, r2
 8000a82:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	f004 f9c4 	bl	8004e14 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f004 f9c0 	bl	8004e14 <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <spi_dma_read+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f002 fc5f 	bl	8003364 <xQueueGenericReceive>
 8000aa6:	46c5      	mov	sp, r8
		//CSOFF(); // chip deselect		

}	
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	40026440 	.word	0x40026440
 8000ab4:	40026458 	.word	0x40026458
 8000ab8:	20013204 	.word	0x20013204
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	200131ec 	.word	0x200131ec

08000ac4 <init_W5200>:
//==================================================================================//
//===	func 	init_W5200							 ===//
//==================================================================================//

void init_W5200(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
	 *
	 * */


	// mac address
	uint8_t address[6] =	{0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 8000aca:	4a55      	ldr	r2, [pc, #340]	; (8000c20 <init_W5200+0x15c>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	8892      	ldrh	r2, [r2, #4]
 8000ad6:	809a      	strh	r2, [r3, #4]
	
	// ip 
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 8000ad8:	4a52      	ldr	r2, [pc, #328]	; (8000c24 <init_W5200+0x160>)
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	6810      	ldr	r0, [r2, #0]
 8000ae0:	6018      	str	r0, [r3, #0]
	// subnet 
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8000ae2:	4a51      	ldr	r2, [pc, #324]	; (8000c28 <init_W5200+0x164>)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
	// gateway
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 8000aec:	4a4f      	ldr	r2, [pc, #316]	; (8000c2c <init_W5200+0x168>)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	6810      	ldr	r0, [r2, #0]
 8000af4:	6018      	str	r0, [r3, #0]
	
	portTickType xLastWakeTime;	
	
	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 8000af6:	2001      	movs	r0, #1
 8000af8:	2100      	movs	r1, #0
 8000afa:	2203      	movs	r2, #3
 8000afc:	f002 fad6 	bl	80030ac <xQueueGenericCreate>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <init_W5200+0x16c>)
 8000b04:	601a      	str	r2, [r3, #0]
	
	xLastWakeTime = xTaskGetTickCount();
 8000b06:	f001 fdd7 	bl	80026b8 <xTaskGetTickCount>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60bb      	str	r3, [r7, #8]

	RESET_HIGH();
 8000b0e:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <init_W5200+0x170>)
 8000b10:	4a48      	ldr	r2, [pc, #288]	; (8000c34 <init_W5200+0x170>)
 8000b12:	8b52      	ldrh	r2, [r2, #26]
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f042 0220 	orr.w	r2, r2, #32
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	835a      	strh	r2, [r3, #26]
	RESET_LOW();	
 8000b1e:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <init_W5200+0x170>)
 8000b20:	4a44      	ldr	r2, [pc, #272]	; (8000c34 <init_W5200+0x170>)
 8000b22:	8b12      	ldrh	r2, [r2, #24]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	831a      	strh	r2, [r3, #24]

	vTaskDelay( 500/portTICK_RATE_MS );		
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f001 fc05 	bl	8002340 <vTaskDelay>
	const portTickType xFrequency = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
	
	// ===================================================//
	//SW reset 
	spi_dma_sendByte(W5200_MR, W5200_MR_RST);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	f7ff feef 	bl	8000920 <spi_dma_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	71fb      	strb	r3, [r7, #7]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 8000b46:	bf00      	nop
		spi_dma_read(W5200_MR, 1);
		memcpy(&data, bufferRX+4, 1);
	}
		
	// PING enable, PPPoE disable 
	spi_dma_sendByte(W5200_MR, 0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f7ff fee8 	bl	8000920 <spi_dma_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_dma_sendByte(W5200_IMR, 0xff);
 8000b50:	2016      	movs	r0, #22
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	f7ff fee4 	bl	8000920 <spi_dma_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_dma_sendByte(W5200_IMR2, 0);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f7ff fee0 	bl	8000920 <spi_dma_sendByte>
	// set timeoput to 200msec
	spi_dma_sendByte(W5200_RTR, 200);
 8000b60:	2017      	movs	r0, #23
 8000b62:	21c8      	movs	r1, #200	; 0xc8
 8000b64:	f7ff fedc 	bl	8000920 <spi_dma_sendByte>
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	f7ff fed8 	bl	8000920 <spi_dma_sendByte>

	int n = 0; 
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

	for (n = 0; n < 8; n++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e02b      	b.n	8000bd2 <init_W5200+0x10e>
	{
		spi_dma_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b86:	331e      	adds	r3, #30
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	f7ff fec7 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b9e:	331f      	adds	r3, #31
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	f7ff febb 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_IMR(n), 0xff);	
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000bb6:	332c      	adds	r3, #44	; 0x2c
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	21ff      	movs	r1, #255	; 0xff
 8000bbe:	f7ff feaf 	bl	8000920 <spi_dma_sendByte>
		socket_flg[n] = 0;
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <init_W5200+0x174>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	ddd0      	ble.n	8000b7a <init_W5200+0xb6>
		socket_flg[n] = 0;
			
	}	
	// =========================================================//
		
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be2:	f001 fb55 	bl	8002290 <vTaskDelayUntil>

	W5200_configure_network(ip, subnet, gw);
 8000be6:	f107 0114 	add.w	r1, r7, #20
 8000bea:	f107 0210 	add.w	r2, r7, #16
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f000 f82c 	bl	8000c54 <W5200_configure_network>
	W5200_set_hardware_address(address);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f81b 	bl	8000c3c <W5200_set_hardware_address>
	
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c10:	f001 fb3e 	bl	8002290 <vTaskDelayUntil>
	// end of initialization W5200 
	// delete task
	
	vTaskDelete ( NULL );
 8000c14:	2000      	movs	r0, #0
 8000c16:	f001 faf5 	bl	8002204 <vTaskDelete>
	
	
	
	
}
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	08007178 	.word	0x08007178
 8000c24:	08007180 	.word	0x08007180
 8000c28:	08007184 	.word	0x08007184
 8000c2c:	08007188 	.word	0x08007188
 8000c30:	200131ec 	.word	0x200131ec
 8000c34:	40020800 	.word	0x40020800
 8000c38:	20000480 	.word	0x20000480

08000c3c <W5200_set_hardware_address>:

//==================================================================================//
//===	func W5200_set_hardware_address
//==================================================================================//
void  W5200_set_hardware_address(const macaddress_t address)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

	/*! Function set wiznet register to address via SPI DMA
	 */

	spi_dma_send(W5200_SHAR, 6, address);
 8000c44:	2009      	movs	r0, #9
 8000c46:	2106      	movs	r1, #6
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	f7ff fd8f 	bl	800076c <spi_dma_send>
}
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <W5200_configure_network>:


void  W5200_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	/*! It configures ip, subnet and gateway */
	spi_dma_send(W5200_SIPR, 4, address);
 8000c60:	200f      	movs	r0, #15
 8000c62:	2104      	movs	r1, #4
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	f7ff fd81 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_SUBR, 4, subnet);
 8000c6a:	2005      	movs	r0, #5
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f7ff fd7c 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_GAR, 4 , gateway);
 8000c74:	2001      	movs	r0, #1
 8000c76:	2104      	movs	r1, #4
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	f7ff fd77 	bl	800076c <spi_dma_send>
}
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <get_CRStatus>:
//==================================================================================//



static uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_CR(sck_fd),1);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	f7ff fe89 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <get_CRStatus+0x34>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	73fb      	strb	r3, [r7, #15]
	return var;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20013208 	.word	0x20013208

08000cbc <get_SRStatus>:


static uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_SR(sck_fd), 1);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	2101      	movs	r1, #1
 8000cda:	f7ff fe6d 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <get_SRStatus+0x34>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	73fb      	strb	r3, [r7, #15]
	return var;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20013208 	.word	0x20013208

08000cf4 <get_TXFSRStatus>:

static uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_FSR(sck_fd), 2);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d0a:	3320      	adds	r3, #32
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	2102      	movs	r1, #2
 8000d12:	f7ff fe51 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <get_TXFSRStatus+0x44>)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	8812      	ldrh	r2, [r2, #0]
 8000d1e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d20:	7b3b      	ldrb	r3, [r7, #12]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	7b7b      	ldrb	r3, [r7, #13]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b29b      	uxth	r3, r3
	
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20013208 	.word	0x20013208

08000d3c <get_TXWRStatus>:

static uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_WR(sck_fd), 2 );
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d52:	3324      	adds	r3, #36	; 0x24
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	2102      	movs	r1, #2
 8000d5a:	f7ff fe2d 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <get_TXWRStatus+0x44>)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	8812      	ldrh	r2, [r2, #0]
 8000d66:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d68:	7b3b      	ldrb	r3, [r7, #12]
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b29b      	uxth	r3, r3

	
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20013208 	.word	0x20013208

08000d84 <get_TXRD>:
static uint16_t get_TXRD(uint8_t sck_fd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_RD(sck_fd), 2);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d9a:	3322      	adds	r3, #34	; 0x22
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	2102      	movs	r1, #2
 8000da2:	f7ff fe09 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <get_TXRD+0x44>)
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	8812      	ldrh	r2, [r2, #0]
 8000dae:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	7b7b      	ldrb	r3, [r7, #13]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	b29b      	uxth	r3, r3
	
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20013208 	.word	0x20013208

08000dcc <set_TXWR>:

static void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	71fa      	strb	r2, [r7, #7]
 8000dd8:	80bb      	strh	r3, [r7, #4]
 	spi_dma_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000de6:	3324      	adds	r3, #36	; 0x24
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f7ff fd44 	bl	800087c <spi_dma_send2B>
}
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop

08000dfc <get_RXRSR>:

static uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RSR(sck_fd), 2);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e12:	3326      	adds	r3, #38	; 0x26
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	2102      	movs	r1, #2
 8000e1a:	f7ff fdcd 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <get_RXRSR+0x44>)
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	8812      	ldrh	r2, [r2, #0]
 8000e26:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e28:	7b3b      	ldrb	r3, [r7, #12]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b29b      	uxth	r3, r3

}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20013208 	.word	0x20013208

08000e44 <get_RXRD>:

static uint16_t get_RXRD(uint8_t sck_fd)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RD(sck_fd), 2 );
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e5a:	3328      	adds	r3, #40	; 0x28
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	2102      	movs	r1, #2
 8000e62:	f7ff fda9 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <get_RXRD+0x44>)
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e70:	7b3b      	ldrb	r3, [r7, #12]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20013208 	.word	0x20013208

08000e8c <set_RXRD>:

static void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	71fa      	strb	r2, [r7, #7]
 8000e98:	80bb      	strh	r3, [r7, #4]
	spi_dma_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ea6:	3328      	adds	r3, #40	; 0x28
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fce4 	bl	800087c <spi_dma_send2B>
}
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <write_memory>:
//		func write_memory 
//===============================================================================================//


void write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60ba      	str	r2, [r7, #8]
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	73fa      	strb	r2, [r7, #15]
 8000ec8:	460a      	mov	r2, r1
 8000eca:	81ba      	strh	r2, [r7, #12]
 8000ecc:	80fb      	strh	r3, [r7, #6]
	*/
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ed4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	8afb      	ldrh	r3, [r7, #22]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000eec:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000eee:	8afa      	ldrh	r2, [r7, #22]
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	441a      	add	r2, r3
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000efc:	3320      	adds	r3, #32
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dd2a      	ble.n	8000f58 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	8afb      	ldrh	r3, [r7, #22]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f18:	827b      	strh	r3, [r7, #18]
		spi_dma_send( memory_addr,upper_size, buf);
 8000f1a:	8aba      	ldrh	r2, [r7, #20]
 8000f1c:	8a7b      	ldrh	r3, [r7, #18]
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f7ff fc22 	bl	800076c <spi_dma_send>
		buf += upper_size;
 8000f28:	8a7b      	ldrh	r3, [r7, #18]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	8a7b      	ldrh	r3, [r7, #18]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	823b      	strh	r3, [r7, #16]
		spi_dma_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	8a3b      	ldrh	r3, [r7, #16]
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	f7ff fc0b 	bl	800076c <spi_dma_send>
 8000f56:	e006      	b.n	8000f66 <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_dma_send( memory_addr,len,  buf);
 8000f58:	8aba      	ldrh	r2, [r7, #20]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	f7ff fc03 	bl	800076c <spi_dma_send>
	}
}
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <read_memory>:
// 			func read_memory
//==================================================================================//


void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60ba      	str	r2, [r7, #8]
 8000f74:	4602      	mov	r2, r0
 8000f76:	73fa      	strb	r2, [r7, #15]
 8000f78:	460a      	mov	r2, r1
 8000f7a:	81ba      	strh	r2, [r7, #12]
 8000f7c:	80fb      	strh	r3, [r7, #6]

	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000f7e:	89bb      	ldrh	r3, [r7, #12]
 8000f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f84:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000f9c:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000f9e:	8afa      	ldrh	r2, [r7, #22]
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fa8:	dd2f      	ble.n	800100a <read_memory+0x9e>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000faa:	8afb      	ldrh	r3, [r7, #22]
 8000fac:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000fb0:	827b      	strh	r3, [r7, #18]
		spi_dma_read( memory_addr,upper_size);
 8000fb2:	8aba      	ldrh	r2, [r7, #20]
 8000fb4:	8a7b      	ldrh	r3, [r7, #18]
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fcfd 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, upper_size);
 8000fbe:	8a7b      	ldrh	r3, [r7, #18]
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	4919      	ldr	r1, [pc, #100]	; (8001028 <read_memory+0xbc>)
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f7ff f909 	bl	80001dc <memcpy>

		buf += upper_size;
 8000fca:	8a7b      	ldrh	r3, [r7, #18]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	8a7b      	ldrh	r3, [r7, #18]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	823b      	strh	r3, [r7, #16]
		spi_dma_read(W5200_SOCKET_RX_BASE(sck_fd), left_size);
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	8a3b      	ldrh	r3, [r7, #16]
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fce1 	bl	80009b8 <spi_dma_read>
		memcpy(buf+upper_size, bufferRX+4, left_size);
 8000ff6:	8a7b      	ldrh	r3, [r7, #18]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	441a      	add	r2, r3
 8000ffc:	8a3b      	ldrh	r3, [r7, #16]
 8000ffe:	4610      	mov	r0, r2
 8001000:	4909      	ldr	r1, [pc, #36]	; (8001028 <read_memory+0xbc>)
 8001002:	461a      	mov	r2, r3
 8001004:	f7ff f8ea 	bl	80001dc <memcpy>
 8001008:	e00b      	b.n	8001022 <read_memory+0xb6>
	}else{

		// copy len size bytes
		spi_dma_read( memory_addr,len);
 800100a:	8aba      	ldrh	r2, [r7, #20]
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fcd1 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, len);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	4903      	ldr	r1, [pc, #12]	; (8001028 <read_memory+0xbc>)
 800101c:	461a      	mov	r2, r3
 800101e:	f7ff f8dd 	bl	80001dc <memcpy>
	}
}
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20013208 	.word	0x20013208

0800102c <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4613      	mov	r3, r2
 8001034:	4602      	mov	r2, r0
 8001036:	71fa      	strb	r2, [r7, #7]
 8001038:	460a      	mov	r2, r1
 800103a:	80ba      	strh	r2, [r7, #4]
 800103c:	71bb      	strb	r3, [r7, #6]
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e00c      	b.n	800105e <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <socket+0x14c>)
 8001048:	5cd3      	ldrb	r3, [r2, r3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d104      	bne.n	8001058 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4a49      	ldr	r2, [pc, #292]	; (8001178 <socket+0x14c>)
 8001052:	2101      	movs	r1, #1
 8001054:	54d1      	strb	r1, [r2, r3]
			break;
 8001056:	e005      	b.n	8001064 <socket+0x38>
{
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	3301      	adds	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d9ef      	bls.n	8001044 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b07      	cmp	r3, #7
 8001068:	d901      	bls.n	800106e <socket+0x42>
 800106a:	23ff      	movs	r3, #255	; 0xff
 800106c:	e07f      	b.n	800116e <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	2b08      	cmp	r3, #8
 8001076:	dd01      	ble.n	800107c <socket+0x50>
 8001078:	23ff      	movs	r3, #255	; 0xff
 800107a:	e078      	b.n	800116e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	2b02      	cmp	r3, #2
 8001084:	d005      	beq.n	8001092 <socket+0x66>
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	b25b      	sxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	da01      	bge.n	8001092 <socket+0x66>
 800108e:	23ff      	movs	r3, #255	; 0xff
 8001090:	e06d      	b.n	800116e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	2b01      	cmp	r3, #1
 800109a:	d006      	beq.n	80010aa <socket+0x7e>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <socket+0x7e>
 80010a6:	23ff      	movs	r3, #255	; 0xff
 80010a8:	e061      	b.n	800116e <socket+0x142>

	// set MODE register
	spi_dma_sendByte(W5200_Sn_MR(sck_fd) , mode);
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fc2f 	bl	8000920 <spi_dma_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	db29      	blt.n	8001124 <socket+0xf8>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	dd02      	ble.n	80010da <socket+0xae>
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d018      	beq.n	800110a <socket+0xde>
 80010d8:	e024      	b.n	8001124 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	737b      	strb	r3, [r7, #13]
		spi_dma_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010f6:	3304      	adds	r3, #4
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4610      	mov	r0, r2
 8001100:	2102      	movs	r1, #2
 8001102:	461a      	mov	r2, r3
 8001104:	f7ff fb32 	bl	800076c <spi_dma_send>
		
		break;
 8001108:	e00c      	b.n	8001124 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_dma_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	b29b      	uxth	r3, r3
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001116:	3314      	adds	r3, #20
 8001118:	b29a      	uxth	r2, r3
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fbfe 	bl	8000920 <spi_dma_sendByte>
	}

	// execute socket open
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	b29b      	uxth	r3, r3
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001130:	3301      	adds	r3, #1
 8001132:	b29b      	uxth	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	2101      	movs	r1, #1
 8001138:	f7ff fbf2 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 800113c:	bf00      	nop
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fd9f 	bl	8000c84 <get_CRStatus>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f8      	bne.n	800113e <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fdb4 	bl	8000cbc <get_SRStatus>
 8001154:	4603      	mov	r3, r0
 8001156:	2b13      	cmp	r3, #19
 8001158:	bf0c      	ite	eq
 800115a:	2300      	moveq	r3, #0
 800115c:	2301      	movne	r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	73bb      	strb	r3, [r7, #14]
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <socket+0x140>
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	e000      	b.n	800116e <socket+0x142>

	// success return
	return sck_fd;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000480 	.word	0x20000480

0800117c <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 800117c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001180:	b08b      	sub	sp, #44	; 0x2c
 8001182:	af00      	add	r7, sp, #0
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	4601      	mov	r1, r0
 8001188:	73f9      	strb	r1, [r7, #15]
 800118a:	81ba      	strh	r2, [r7, #12]
 800118c:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	uint16_t status = get_SRStatus(sck_fd);
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fd93 	bl	8000cbc <get_SRStatus>
 8001196:	4603      	mov	r3, r0
 8001198:	84bb      	strh	r3, [r7, #36]	; 0x24
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b07      	cmp	r3, #7
 800119e:	d804      	bhi.n	80011aa <send+0x2e>
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	4a56      	ldr	r2, [pc, #344]	; (80012fc <send+0x180>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <send+0x34>
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ae:	e0a0      	b.n	80012f2 <send+0x176>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <send+0x40>
 80011b6:	89bb      	ldrh	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <send+0x46>
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c0:	e097      	b.n	80012f2 <send+0x176>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd79 	bl	8000cbc <get_SRStatus>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b17      	cmp	r3, #23
 80011ce:	d001      	beq.n	80011d4 <send+0x58>
 80011d0:	2300      	movs	r3, #0
 80011d2:	e08e      	b.n	80012f2 <send+0x176>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 80011d4:	e004      	b.n	80011e0 <send+0x64>
		if(flag == 1) return 0;	// NONE BLOCKING
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <send+0x64>
 80011dc:	2300      	movs	r3, #0
 80011de:	e088      	b.n	80012f2 <send+0x176>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fd86 	bl	8000cf4 <get_TXFSRStatus>
 80011e8:	4603      	mov	r3, r0
 80011ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f1      	beq.n	80011d6 <send+0x5a>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fda1 	bl	8000d3c <get_TXWRStatus>
 80011fa:	4603      	mov	r3, r0
 80011fc:	847b      	strh	r3, [r7, #34]	; 0x22

	// check write length
	if(send_size > len) send_size = len;
 80011fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001200:	89bb      	ldrh	r3, [r7, #12]
 8001202:	429a      	cmp	r2, r3
 8001204:	d901      	bls.n	800120a <send+0x8e>
 8001206:	89bb      	ldrh	r3, [r7, #12]
 8001208:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 800120a:	7bf9      	ldrb	r1, [r7, #15]
 800120c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800120e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	f7ff fe51 	bl	8000ebc <write_memory>

	// pointer update
	write_ptr += send_size;
 800121a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800121c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800121e:	4413      	add	r3, r2
 8001220:	847b      	strh	r3, [r7, #34]	; 0x22
	set_TXWR(sck_fd, write_ptr);
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fdcf 	bl	8000dcc <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fda7 	bl	8000d84 <get_TXRD>
 8001236:	4603      	mov	r3, r0
 8001238:	843b      	strh	r3, [r7, #32]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fd7d 	bl	8000d3c <get_TXWRStatus>
 8001242:	4603      	mov	r3, r0
 8001244:	83fb      	strh	r3, [r7, #30]
	uint8_t data [write_ptr-start]; 	
 8001246:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001248:	8c3b      	ldrh	r3, [r7, #32]
 800124a:	1ad1      	subs	r1, r2, r3
 800124c:	466b      	mov	r3, sp
 800124e:	461e      	mov	r6, r3
 8001250:	1e4b      	subs	r3, r1, #1
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	460b      	mov	r3, r1
 8001256:	461a      	mov	r2, r3
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001260:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001264:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001268:	460b      	mov	r3, r1
 800126a:	461a      	mov	r2, r3
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	00dd      	lsls	r5, r3, #3
 8001272:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001276:	00d4      	lsls	r4, r2, #3
 8001278:	460b      	mov	r3, r1
 800127a:	3307      	adds	r3, #7
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	ebad 0d03 	sub.w	sp, sp, r3
 8001284:	466b      	mov	r3, sp
 8001286:	3300      	adds	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
	spi_dma_read(start+0x8000, write_ptr-start );
 800128a:	8c3b      	ldrh	r3, [r7, #32]
 800128c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001290:	b29a      	uxth	r2, r3
 8001292:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001294:	8c3b      	ldrh	r3, [r7, #32]
 8001296:	1acb      	subs	r3, r1, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fb8b 	bl	80009b8 <spi_dma_read>
	memcpy(data, bufferRX +4, write_ptr-start);
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80012a6:	8c3b      	ldrh	r3, [r7, #32]
 80012a8:	1acb      	subs	r3, r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	4914      	ldr	r1, [pc, #80]	; (8001300 <send+0x184>)
 80012ae:	461a      	mov	r2, r3
 80012b0:	f7fe ff94 	bl	80001dc <memcpy>

	
	// test function 
	
	// send command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012c0:	3301      	adds	r3, #1
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	2120      	movs	r1, #32
 80012c8:	f7ff fb2a 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 80012cc:	bf00      	nop
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fcd7 	bl	8000c84 <get_CRStatus>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f8      	bne.n	80012ce <send+0x152>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 80012dc:	bf00      	nop
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd4f 	bl	8000d84 <get_TXRD>
 80012e6:	4603      	mov	r3, r0
 80012e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d1f7      	bne.n	80012de <send+0x162>

	return send_size;
 80012ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012f0:	46b5      	mov	sp, r6
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	372c      	adds	r7, #44	; 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012fc:	20000480 	.word	0x20000480
 8001300:	20013208 	.word	0x20013208

08001304 <recv>:
	return code is received data size.
	if received disconnectÂ@from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	4601      	mov	r1, r0
 800130e:	73f9      	strb	r1, [r7, #15]
 8001310:	81ba      	strh	r2, [r7, #12]
 8001312:	80fb      	strh	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b07      	cmp	r3, #7
 8001318:	d804      	bhi.n	8001324 <recv+0x20>
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <recv+0xe0>)
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <recv+0x26>
 8001324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001328:	e057      	b.n	80013da <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <recv+0x32>
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <recv+0x38>
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	e04e      	b.n	80013da <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fcbc 	bl	8000cbc <get_SRStatus>
 8001344:	4603      	mov	r3, r0
 8001346:	2b17      	cmp	r3, #23
 8001348:	d001      	beq.n	800134e <recv+0x4a>
 800134a:	2300      	movs	r3, #0
 800134c:	e045      	b.n	80013da <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800134e:	e004      	b.n	800135a <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <recv+0x56>
 8001356:	2300      	movs	r3, #0
 8001358:	e03f      	b.n	80013da <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fd4d 	bl	8000dfc <get_RXRSR>
 8001362:	4603      	mov	r3, r0
 8001364:	82fb      	strh	r3, [r7, #22]
 8001366:	8afb      	ldrh	r3, [r7, #22]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f1      	beq.n	8001350 <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd68 	bl	8000e44 <get_RXRD>
 8001374:	4603      	mov	r3, r0
 8001376:	82bb      	strh	r3, [r7, #20]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 8001378:	89ba      	ldrh	r2, [r7, #12]
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	429a      	cmp	r2, r3
 800137e:	bf38      	it	cc
 8001380:	4613      	movcc	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	7bf9      	ldrb	r1, [r7, #15]
 8001386:	8aba      	ldrh	r2, [r7, #20]
 8001388:	4608      	mov	r0, r1
 800138a:	4611      	mov	r1, r2
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	f7ff fded 	bl	8000f6c <read_memory>

	// update pointer
	read_ptr += read_len;
 8001392:	8aba      	ldrh	r2, [r7, #20]
 8001394:	8afb      	ldrh	r3, [r7, #22]
 8001396:	4413      	add	r3, r2
 8001398:	82bb      	strh	r3, [r7, #20]
	set_RXRD(sck_fd, read_ptr);
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	8abb      	ldrh	r3, [r7, #20]
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fd73 	bl	8000e8c <set_RXRD>

	// recive command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	2140      	movs	r1, #64	; 0x40
 80013ba:	f7ff fab1 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 80013be:	bf00      	nop
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fc5e 	bl	8000c84 <get_CRStatus>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f8      	bne.n	80013c0 <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 80013ce:	89ba      	ldrh	r2, [r7, #12]
 80013d0:	8afb      	ldrh	r3, [r7, #22]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	bf38      	it	cc
 80013d6:	4613      	movcc	r3, r2
 80013d8:	b29b      	uxth	r3, r3
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000480 	.word	0x20000480

080013e8 <listen>:
//	func listen 
//==================================================================================//


int	listen(int sck_fd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db08      	blt.n	8001408 <listen+0x20>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	dc05      	bgt.n	8001408 <listen+0x20>
 80013fc:	4a22      	ldr	r2, [pc, #136]	; (8001488 <listen+0xa0>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d002      	beq.n	800140e <listen+0x26>
 8001408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140c:	e038      	b.n	8001480 <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fc52 	bl	8000cbc <get_SRStatus>
 8001418:	4603      	mov	r3, r0
 800141a:	2b13      	cmp	r3, #19
 800141c:	d002      	beq.n	8001424 <listen+0x3c>
 800141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001422:	e02d      	b.n	8001480 <listen+0x98>


	uint8_t b;
	spi_dma_read(W5200_Sn_IR(sck_fd), 1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	b29b      	uxth	r3, r3
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b29b      	uxth	r3, r3
 800142c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001430:	3302      	adds	r3, #2
 8001432:	b29b      	uxth	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	2101      	movs	r1, #1
 8001438:	f7ff fabe 	bl	80009b8 <spi_dma_read>
	memcpy(&b, bufferRX + 4, 1);
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <listen+0xa4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	73fb      	strb	r3, [r7, #15]

	// CONNECT command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	b29b      	uxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b29b      	uxth	r3, r3
 800144a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800144e:	3301      	adds	r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	2102      	movs	r1, #2
 8001456:	f7ff fa63 	bl	8000920 <spi_dma_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 800145a:	bf00      	nop
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fc0f 	bl	8000c84 <get_CRStatus>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f7      	bne.n	800145c <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 800146c:	bf00      	nop
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc22 	bl	8000cbc <get_SRStatus>
 8001478:	4603      	mov	r3, r0
 800147a:	2b14      	cmp	r3, #20
 800147c:	d1f7      	bne.n	800146e <listen+0x86>
	 
	return 0;	// listen success complete
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000480 	.word	0x20000480
 800148c:	20013208 	.word	0x20013208

08001490 <locate_interrupt>:

//==================================================================================
////	func locate_interrupt
//==================================================================================
void locate_interrupt()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	*  Function used by interrupt service routine. \n
	* Reads wiznet interrupt registers and identify 
	* interupt plus on which socket interrupt occured. \n
	* It depends on interrupt what follows
	* ****************************************************** */
	uint8_t code = 0x4; 
 8001496:	2304      	movs	r3, #4
 8001498:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_IMR2, 1);
 800149a:	2036      	movs	r0, #54	; 0x36
 800149c:	2101      	movs	r1, #1
 800149e:	f7ff fa8b 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX + 4, 1);
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <locate_interrupt+0x68>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_Sn_IR(code), 1);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014b2:	3302      	adds	r3, #2
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	2101      	movs	r1, #1
 80014ba:	f7ff fa7d 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX +4 , 1);
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <locate_interrupt+0x68>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
       
	
	spi_dma_sendByte(W5200_Sn_IR(0x0), 0xff);
 80014c4:	f244 0002 	movw	r0, #16386	; 0x4002
 80014c8:	21ff      	movs	r1, #255	; 0xff
 80014ca:	f7ff fa29 	bl	8000920 <spi_dma_sendByte>
	switch (code )
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d00a      	beq.n	80014ea <locate_interrupt+0x5a>
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d002      	beq.n	80014de <locate_interrupt+0x4e>
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d008      	beq.n	80014ee <locate_interrupt+0x5e>
			break;
		case 0x4:
			vTaskResume(set_macTaskHandle); 
			break;
		default:
			break;		
 80014dc:	e008      	b.n	80014f0 <locate_interrupt+0x60>
			// do nothing wait for input. 
			break;
		case 0x2:
			break;
		case 0x4:
			vTaskResume(set_macTaskHandle); 
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <locate_interrupt+0x6c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 ffce 	bl	8002484 <vTaskResume>
			break;
 80014e8:	e002      	b.n	80014f0 <locate_interrupt+0x60>
		case 0x1: 
			// connection established 
			// do nothing wait for input. 
			break;
		case 0x2:
			break;
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <locate_interrupt+0x60>
	switch (code )
	{
		case 0x1: 
			// connection established 
			// do nothing wait for input. 
			break;
 80014ee:	bf00      	nop
			vTaskResume(set_macTaskHandle); 
			break;
		default:
			break;		
	}
}
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20013208 	.word	0x20013208
 80014fc:	200141b8 	.word	0x200141b8

08001500 <EXTI4_IRQHandler>:

//==================================================================================
//// EXTI4_IRQHandler
//==================================================================================
void EXTI4_IRQHandler(void) //EXTI0 ISR
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	 * Interuppt service routine for wiznet it locates interrupt and resets 
	 * interrupt line. 
	 * *******************************************************************/
	
	
	if(EXTI_GetITStatus(WIZ_IT_EXTI_LINE) != RESET) //check if EXTI line is asserted
 8001504:	2010      	movs	r0, #16
 8001506:	f004 f9df 	bl	80058c8 <EXTI_GetITStatus>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <EXTI4_IRQHandler+0x1a>
	{
		locate_interrupt();	
 8001510:	f7ff ffbe 	bl	8001490 <locate_interrupt>
		EXTI_ClearFlag(WIZ_IT_EXTI_LINE); //clear interrupt
 8001514:	2010      	movs	r0, #16
 8001516:	f004 f9bd 	bl	8005894 <EXTI_ClearFlag>
 	
	}
}
 800151a:	bd80      	pop	{r7, pc}

0800151c <set_macTask>:
//============================================================================/
// func set_macTask 
//==================================================================================

void set_macTask(void *pvParameters)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
        {

		uint8_t	buf[20], buf1[20]; 
		int len; 
			/*create socket and send byte */
		socket_0 = socket(W5200_Sn_MR_TCP, 80, 0);
 8001524:	2001      	movs	r0, #1
 8001526:	2150      	movs	r1, #80	; 0x50
 8001528:	2200      	movs	r2, #0
 800152a:	f7ff fd7f 	bl	800102c <socket>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <set_macTask+0x58>)
 8001534:	601a      	str	r2, [r3, #0]
		listen(socket_0);
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <set_macTask+0x58>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff54 	bl	80013e8 <listen>

		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(NULL);
 8001540:	2000      	movs	r0, #0
 8001542:	f000 ff25 	bl	8002390 <vTaskSuspend>
		
		// interrupt on W5200 occured 
		// receive data 
		len = recv(socket_0, buf, 20, 0);
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <set_macTask+0x58>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	2214      	movs	r2, #20
 8001556:	2300      	movs	r3, #0
 8001558:	f7ff fed4 	bl	8001304 <recv>
 800155c:	6378      	str	r0, [r7, #52]	; 0x34
		
		// proces data with CLI 
		
		FreeRTOS_CLIProcessCommand ( buf, buf1, 15);
 800155e:	f107 0220 	add.w	r2, r7, #32
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	220f      	movs	r2, #15
 800156c:	f002 fde4 	bl	8004138 <FreeRTOS_CLIProcessCommand>

		

		
	}	
 8001570:	e7d8      	b.n	8001524 <set_macTask+0x8>
 8001572:	bf00      	nop
 8001574:	200131f8 	.word	0x200131f8

08001578 <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1


void init_USARTx(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 800157e:	2020      	movs	r0, #32
 8001580:	2101      	movs	r1, #1
 8001582:	f004 fd3f 	bl	8006004 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 8001586:	2004      	movs	r0, #4
 8001588:	2101      	movs	r1, #1
 800158a:	f004 fd03 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 800158e:	2004      	movs	r0, #4
 8001590:	2101      	movs	r1, #1
 8001592:	f004 fcff 	bl	8005f94 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 8001596:	2040      	movs	r0, #64	; 0x40
 8001598:	2101      	movs	r1, #1
 800159a:	f004 fcfb 	bl	8005f94 <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 800159e:	23c0      	movs	r3, #192	; 0xc0
 80015a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 80015a2:	2302      	movs	r3, #2
 80015a4:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 80015a6:	2303      	movs	r3, #3
 80015a8:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 80015aa:	2300      	movs	r3, #0
 80015ac:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 80015ae:	2301      	movs	r3, #1
 80015b0:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	4829      	ldr	r0, [pc, #164]	; (800165c <init_USARTx+0xe4>)
 80015b8:	4619      	mov	r1, r3
 80015ba:	f004 fa03 	bl	80059c4 <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 80015be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80015c4:	2301      	movs	r3, #1
 80015c6:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80015cc:	2303      	movs	r3, #3
 80015ce:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4821      	ldr	r0, [pc, #132]	; (8001660 <init_USARTx+0xe8>)
 80015da:	4619      	mov	r1, r3
 80015dc:	f004 f9f2 	bl	80059c4 <GPIO_Init>

	DD() // set PG8 high
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <init_USARTx+0xe8>)
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <init_USARTx+0xe8>)
 80015e4:	8b12      	ldrh	r2, [r2, #24]
 80015e6:	b292      	uxth	r2, r2
 80015e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ec:	b292      	uxth	r2, r2
 80015ee:	831a      	strh	r2, [r3, #24]
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 80015f0:	481a      	ldr	r0, [pc, #104]	; (800165c <init_USARTx+0xe4>)
 80015f2:	2106      	movs	r1, #6
 80015f4:	2208      	movs	r2, #8
 80015f6:	f004 fafb 	bl	8005bf0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <init_USARTx+0xe4>)
 80015fc:	2107      	movs	r1, #7
 80015fe:	2208      	movs	r2, #8
 8001600:	f004 faf6 	bl	8005bf0 <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 8001604:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001608:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800160a:	2300      	movs	r3, #0
 800160c:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 800160e:	2300      	movs	r3, #0
 8001610:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8001612:	2300      	movs	r3, #0
 8001614:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001616:	2300      	movs	r3, #0
 8001618:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 800161a:	230c      	movs	r3, #12
 800161c:	827b      	strh	r3, [r7, #18]
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <init_USARTx+0xec>)
 8001624:	4619      	mov	r1, r3
 8001626:	f004 ffe1 	bl	80065ec <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <init_USARTx+0xec>)
 800162c:	f240 5125 	movw	r1, #1317	; 0x525
 8001630:	2201      	movs	r2, #1
 8001632:	f005 f995 	bl	8006960 <USART_ITConfig>
	
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 8001636:	2347      	movs	r3, #71	; 0x47
 8001638:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 4;;// this sets the priority group of the USART1 interrupts
 800163a:	2309      	movs	r3, #9
 800163c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x6;		 // this sets the subpriority inside the group
 800163e:	2306      	movs	r3, #6
 8001640:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8001642:	2301      	movs	r3, #1
 8001644:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f003 f859 	bl	8004700 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <init_USARTx+0xec>)
 8001650:	2101      	movs	r1, #1
 8001652:	f005 f931 	bl	80068b8 <USART_Cmd>
}
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020800 	.word	0x40020800
 8001660:	40021800 	.word	0x40021800
 8001664:	40011400 	.word	0x40011400

08001668 <USART6_IRQHandler>:
	
	
}

// this is the interrupt request handler (IRQ) for ALL USART6 interrupts
void USART6_IRQHandler(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	
	

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USARTx, USART_IT_RXNE) ){
 800166e:	4823      	ldr	r0, [pc, #140]	; (80016fc <USART6_IRQHandler+0x94>)
 8001670:	f240 5125 	movw	r1, #1317	; 0x525
 8001674:	f005 fa32 	bl	8006adc <USART_GetITStatus>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d033      	beq.n	80016e6 <USART6_IRQHandler+0x7e>
		
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USARTx->DR; // the character from the USART1 data register is saved in t
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <USART6_IRQHandler+0x94>)
 8001680:	889b      	ldrh	r3, [r3, #4]
 8001682:	b29b      	uxth	r3, r3
 8001684:	71fb      	strb	r3, [r7, #7]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		xHigherPriorityTaskWoken_usart = pdFalse;
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <USART6_IRQHandler+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

		
		if( (cnt < rx_length  ) && (cnt < MAX_STRLEN) ){ 
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <USART6_IRQHandler+0x9c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <USART6_IRQHandler+0xa0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	da11      	bge.n	80016be <USART6_IRQHandler+0x56>
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <USART6_IRQHandler+0x9c>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <USART6_IRQHandler+0x56>
			received_string[cnt] = t;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <USART6_IRQHandler+0x9c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4a18      	ldr	r2, [pc, #96]	; (800170c <USART6_IRQHandler+0xa4>)
 80016ac:	79f9      	ldrb	r1, [r7, #7]
 80016ae:	54d1      	strb	r1, [r2, r3]
			cnt++;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <USART6_IRQHandler+0x9c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <USART6_IRQHandler+0x9c>)
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e013      	b.n	80016e6 <USART6_IRQHandler+0x7e>
		}
		else{ // otherwise reset the character counter and print the received string
			received_string[cnt] = t; 
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <USART6_IRQHandler+0x9c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <USART6_IRQHandler+0xa4>)
 80016c4:	79f9      	ldrb	r1, [r7, #7]
 80016c6:	54d1      	strb	r1, [r2, r3]
			cnt = 0;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <USART6_IRQHandler+0x9c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		//	USART_ITConfig(USART6, USART_IT_RXNE, DISABLE); 
		taskENTER_CRITICAL();
 80016ce:	f002 f9cd 	bl	8003a6c <vPortEnterCritical>
			xSemaphoreGiveFromISR(xSmphrUSART,&xHigherPriorityTaskWoken_usart );
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <USART6_IRQHandler+0xa8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <USART6_IRQHandler+0x98>)
 80016dc:	2300      	movs	r3, #0
 80016de:	f001 fdd7 	bl	8003290 <xQueueGenericSendFromISR>
		taskEXIT_CRITICAL();
 80016e2:	f002 f9d3 	bl	8003a8c <vPortExitCritical>
			//USART_puts(USART1, received_string);
		}


	}
 portYIELD_FROM_ISR( xHigherPriorityTaskWoken_usart );
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <USART6_IRQHandler+0x98>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <USART6_IRQHandler+0x8e>
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <USART6_IRQHandler+0xac>)
 80016f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016f4:	601a      	str	r2, [r3, #0]
	
}
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40011400 	.word	0x40011400
 8001700:	20000488 	.word	0x20000488
 8001704:	2000048c 	.word	0x2000048c
 8001708:	200141d4 	.word	0x200141d4
 800170c:	200141d8 	.word	0x200141d8
 8001710:	200141a8 	.word	0x200141a8
 8001714:	e000ed04 	.word	0xe000ed04

08001718 <handleVariable_set>:
				int xParamLength,
				xQueueHandle Qhandle,
				uint8_t * Value,
				int xValueLength,
				int socket )
{
 8001718:	b084      	sub	sp, #16
 800171a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001726:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if ( !strncmp ( Param, "speed", 5))
 800172a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800172c:	4958      	ldr	r1, [pc, #352]	; (8001890 <handleVariable_set+0x178>)
 800172e:	2205      	movs	r2, #5
 8001730:	f005 fb84 	bl	8006e3c <strncmp>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80a1 	bne.w	800187e <handleVariable_set+0x166>
	{	
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 800173c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800173e:	3b02      	subs	r3, #2
 8001740:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001742:	4413      	add	r3, r2
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 8001748:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800174a:	f005 fa9d 	bl	8006c88 <atoi>
 800174e:	4603      	mov	r3, r0
 8001750:	b29b      	uxth	r3, r3
 8001752:	807b      	strh	r3, [r7, #2]
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	2b09      	cmp	r3, #9
 8001758:	d902      	bls.n	8001760 <handleVariable_set+0x48>
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	2b64      	cmp	r3, #100	; 0x64
 800175e:	d93f      	bls.n	80017e0 <handleVariable_set+0xc8>
 8001760:	466b      	mov	r3, sp
 8001762:	461e      	mov	r6, r3
		{
			// send error via TCP
			//
			int len = strlen ( Value ) + 11 ; 
 8001764:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001766:	f005 fb39 	bl	8006ddc <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	330b      	adds	r3, #11
 800176e:	60fb      	str	r3, [r7, #12]
			uint8_t buf [len]; //= "Error: speed is out of range!\n\n";
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	1e4b      	subs	r3, r1, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	460b      	mov	r3, r1
 8001778:	461a      	mov	r2, r3
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001782:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001786:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800178a:	460b      	mov	r3, r1
 800178c:	461a      	mov	r2, r3
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	00dd      	lsls	r5, r3, #3
 8001794:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001798:	00d4      	lsls	r4, r2, #3
 800179a:	460b      	mov	r3, r1
 800179c:	3307      	adds	r3, #7
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	ebad 0d03 	sub.w	sp, sp, r3
 80017a6:	466b      	mov	r3, sp
 80017a8:	3300      	adds	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
			sprintf(buf, "Errror : %d\n\n", s1);
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	4610      	mov	r0, r2
 80017b2:	4938      	ldr	r1, [pc, #224]	; (8001894 <handleVariable_set+0x17c>)
 80017b4:	461a      	mov	r2, r3
 80017b6:	f000 faa9 	bl	8001d0c <sprintf>
			buf[11+ 3] = "\0"; 
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <handleVariable_set+0x180>)
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	739a      	strb	r2, [r3, #14]
			send( socket_0, buf, len, 0);
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <handleVariable_set+0x184>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b2d9      	uxtb	r1, r3
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4608      	mov	r0, r1
 80017d0:	4611      	mov	r1, r2
 80017d2:	461a      	mov	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	f7ff fcd1 	bl	800117c <send>

	       		return pdFALSE; 	
 80017da:	2300      	movs	r3, #0
 80017dc:	46b5      	mov	sp, r6
 80017de:	e04f      	b.n	8001880 <handleVariable_set+0x168>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	461a      	mov	r2, r3
 80017e4:	0092      	lsls	r2, r2, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	0091      	lsls	r1, r2, #2
 80017ec:	461a      	mov	r2, r3
 80017ee:	460b      	mov	r3, r1
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	807b      	strh	r3, [r7, #2]
		
		
		// setup telegram 
		
		telegram.data[0] = s1; 
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		telegram.Qcmd = SETDATA;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		

		// send value to setSpeed_task via Queue 
		if ( !xQueueSend ( QSpd_handle, &s1, 500 ) )
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <handleVariable_set+0x188>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	1cbb      	adds	r3, r7, #2
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001812:	2300      	movs	r3, #0
 8001814:	f001 fc8c 	bl	8003130 <xQueueGenericSend>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d11f      	bne.n	800185e <handleVariable_set+0x146>
		{	
					
			if ( ! xQueueReceive ( QSpd_handle, &telegram, 500))
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <handleVariable_set+0x188>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001828:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800182c:	2300      	movs	r3, #0
 800182e:	f001 fd99 	bl	8003364 <xQueueGenericReceive>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d122      	bne.n	800187e <handleVariable_set+0x166>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8001838:	2306      	movs	r3, #6
 800183a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				{	
					uint8_t * buf = "Speed succsesfully set.\n\n";
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <handleVariable_set+0x18c>)
 8001840:	61fb      	str	r3, [r7, #28]
			   		int len = 25; 	
 8001842:	2319      	movs	r3, #25
 8001844:	61bb      	str	r3, [r7, #24]
					send( socket, buf, len, 0);
 8001846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001848:	b2da      	uxtb	r2, r3
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4610      	mov	r0, r2
 8001850:	69f9      	ldr	r1, [r7, #28]
 8001852:	461a      	mov	r2, r3
 8001854:	2300      	movs	r3, #0
 8001856:	f7ff fc91 	bl	800117c <send>

					return pdPASS;
 800185a:	2301      	movs	r3, #1
 800185c:	e010      	b.n	8001880 <handleVariable_set+0x168>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <handleVariable_set+0x190>)
 8001860:	617b      	str	r3, [r7, #20]
	 		int len = 22; 	
 8001862:	2316      	movs	r3, #22
 8001864:	613b      	str	r3, [r7, #16]
			send( socket, buf, len, 0);
 8001866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001868:	b2da      	uxtb	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4610      	mov	r0, r2
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	461a      	mov	r2, r3
 8001874:	2300      	movs	r3, #0
 8001876:	f7ff fc81 	bl	800117c <send>

			return pdFALSE; 	
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <handleVariable_set+0x168>
		}
	}

			return 0; 
 800187e:	2300      	movs	r3, #0

}
 8001880:	4618      	mov	r0, r3
 8001882:	3724      	adds	r7, #36	; 0x24
 8001884:	46bd      	mov	sp, r7
 8001886:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800188a:	b004      	add	sp, #16
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	080071e0 	.word	0x080071e0
 8001894:	080071e8 	.word	0x080071e8
 8001898:	080071f8 	.word	0x080071f8
 800189c:	200131f8 	.word	0x200131f8
 80018a0:	200131fc 	.word	0x200131fc
 80018a4:	080071fc 	.word	0x080071fc
 80018a8:	08007218 	.word	0x08007218

080018ac <prvMotorCommand>:
// prototypes of CLI functions 

portBASE_TYPE prvMotorCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b09d      	sub	sp, #116	; 0x74
 80018b0:	af0a      	add	r7, sp, #40	; 0x28
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	int xOptionLength, xParamLength, xValueLength; 
	QueueTelegram telegram; 
	
	// get option from command line 

	Option = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80018b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	2101      	movs	r1, #1
 80018c0:	461a      	mov	r2, r3
 80018c2:	f002 fcbf 	bl	8004244 <FreeRTOS_CLIGetParameter>
 80018c6:	6478      	str	r0, [r7, #68]	; 0x44
				  	  &xOptionLength // parameter string length
					  
					 );
	// get parameter from command line 
	
	Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80018c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	2102      	movs	r1, #2
 80018d0:	461a      	mov	r2, r3
 80018d2:	f002 fcb7 	bl	8004244 <FreeRTOS_CLIGetParameter>
 80018d6:	6438      	str	r0, [r7, #64]	; 0x40
					  2,  		   // 2nd parameter
				  	  &xParamLength // parameter string length
					  
					 );
	Value = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80018d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	2103      	movs	r1, #3
 80018e0:	461a      	mov	r2, r3
 80018e2:	f002 fcaf 	bl	8004244 <FreeRTOS_CLIGetParameter>
 80018e6:	63f8      	str	r0, [r7, #60]	; 0x3c





	if( !strncmp( Option, "set", 3) ) 
 80018e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80018ea:	491d      	ldr	r1, [pc, #116]	; (8001960 <prvMotorCommand+0xb4>)
 80018ec:	2203      	movs	r2, #3
 80018ee:	f005 faa5 	bl	8006e3c <strncmp>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d11f      	bne.n	8001938 <prvMotorCommand+0x8c>
	{
		
		if ( handleVariable_set ( telegram, 
 80018f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <prvMotorCommand+0xb8>)
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <prvMotorCommand+0xbc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001906:	9403      	str	r4, [sp, #12]
 8001908:	9004      	str	r0, [sp, #16]
 800190a:	9105      	str	r1, [sp, #20]
 800190c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800190e:	9106      	str	r1, [sp, #24]
 8001910:	9207      	str	r2, [sp, #28]
 8001912:	9308      	str	r3, [sp, #32]
 8001914:	466b      	mov	r3, sp
 8001916:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800191a:	ca07      	ldmia	r2, {r0, r1, r2}
 800191c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001926:	f7ff fef7 	bl	8001718 <handleVariable_set>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <prvMotorCommand+0x88>
				           Param, 
					   xParamLength, 
					   QSpd_handle, 
					   Value,
					   xValueLength,  
					   socket_0)) return pdPASS;
 8001930:	2301      	movs	r3, #1
 8001932:	e011      	b.n	8001958 <prvMotorCommand+0xac>
		return pdFALSE;
 8001934:	2300      	movs	r3, #0
 8001936:	e00f      	b.n	8001958 <prvMotorCommand+0xac>

	}
	if (!strncmp ( Option, "get", 3))
 8001938:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800193a:	490c      	ldr	r1, [pc, #48]	; (800196c <prvMotorCommand+0xc0>)
 800193c:	2203      	movs	r2, #3
 800193e:	f005 fa7d 	bl	8006e3c <strncmp>
	{


	}
		
	if (!strncmp ( Option, "stop", 4))
 8001942:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001944:	490a      	ldr	r1, [pc, #40]	; (8001970 <prvMotorCommand+0xc4>)
 8001946:	2204      	movs	r2, #4
 8001948:	f005 fa78 	bl	8006e3c <strncmp>
	{


	}

	if (!strncmp ( Option, "start", 4))
 800194c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800194e:	4909      	ldr	r1, [pc, #36]	; (8001974 <prvMotorCommand+0xc8>)
 8001950:	2204      	movs	r2, #4
 8001952:	f005 fa73 	bl	8006e3c <strncmp>

	}



	return pdFALSE;
 8001956:	2300      	movs	r3, #0


}
 8001958:	4618      	mov	r0, r3
 800195a:	374c      	adds	r7, #76	; 0x4c
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	08007230 	.word	0x08007230
 8001964:	200131fc 	.word	0x200131fc
 8001968:	200131f8 	.word	0x200131f8
 800196c:	08007234 	.word	0x08007234
 8001970:	08007238 	.word	0x08007238
 8001974:	08007240 	.word	0x08007240

08001978 <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <printchar+0x24>
		**str = (char)c;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
		++(*str);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80019a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80019b8:	2400      	movs	r4, #0
 80019ba:	2620      	movs	r6, #32

	if (width > 0) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dd19      	ble.n	80019f6 <prints+0x4e>
		register int len = 0;
 80019c2:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80019c4:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80019c8:	e002      	b.n	80019d0 <prints+0x28>
 80019ca:	3501      	adds	r5, #1
 80019cc:	f108 0801 	add.w	r8, r8, #1
 80019d0:	f898 3000 	ldrb.w	r3, [r8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f8      	bne.n	80019ca <prints+0x22>
		if (len >= width) width = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429d      	cmp	r5, r3
 80019dc:	db02      	blt.n	80019e4 <prints+0x3c>
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	e002      	b.n	80019ea <prints+0x42>
		else width -= len;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1b5b      	subs	r3, r3, r5
 80019e8:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d000      	beq.n	80019f6 <prints+0x4e>
 80019f4:	2630      	movs	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10b      	bne.n	8001a18 <prints+0x70>
		for ( ; width > 0; --width) {
 8001a00:	e007      	b.n	8001a12 <prints+0x6a>
			printchar (out, padchar);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	4631      	mov	r1, r6
 8001a06:	f7ff ffb7 	bl	8001978 <printchar>
			++pc;
 8001a0a:	3401      	adds	r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dcf4      	bgt.n	8001a02 <prints+0x5a>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8001a18:	e009      	b.n	8001a2e <prints+0x86>
		printchar (out, *string);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff ffa9 	bl	8001978 <printchar>
		++pc;
 8001a26:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f1      	bne.n	8001a1a <prints+0x72>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8001a36:	e007      	b.n	8001a48 <prints+0xa0>
		printchar (out, padchar);
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	4631      	mov	r1, r6
 8001a3c:	f7ff ff9c 	bl	8001978 <printchar>
		++pc;
 8001a40:	3401      	adds	r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dcf4      	bgt.n	8001a38 <prints+0x90>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 8001a4e:	4623      	mov	r3, r4
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a5a:	bf00      	nop

08001a5c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8001a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a60:	b089      	sub	sp, #36	; 0x24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8001a6c:	f04f 0900 	mov.w	r9, #0
 8001a70:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
 8001a74:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10d      	bne.n	8001a98 <printi+0x3c>
		print_buf[0] = '0';
 8001a7c:	2330      	movs	r3, #48	; 0x30
 8001a7e:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8001a80:	2300      	movs	r3, #0
 8001a82:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a90:	f7ff ff8a 	bl	80019a8 <prints>
 8001a94:	4603      	mov	r3, r0
 8001a96:	e049      	b.n	8001b2c <printi+0xd0>
	}

	if (sg && b == 10 && i < 0) {
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <printi+0x58>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0a      	cmp	r3, #10
 8001aa2:	d107      	bne.n	8001ab4 <printi+0x58>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da04      	bge.n	8001ab4 <printi+0x58>
		neg = 1;
 8001aaa:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	425b      	negs	r3, r3
 8001ab2:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8001ab4:	f107 0414 	add.w	r4, r7, #20
 8001ab8:	340b      	adds	r4, #11
	*s = '\0';
 8001aba:	2300      	movs	r3, #0
 8001abc:	7023      	strb	r3, [r4, #0]

	while (u) {
 8001abe:	e013      	b.n	8001ae8 <printi+0x8c>
		t = (unsigned int)u % b;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	fbb5 f2f3 	udiv	r2, r5, r3
 8001ac6:	fb03 f302 	mul.w	r3, r3, r2
 8001aca:	1aeb      	subs	r3, r5, r3
 8001acc:	461e      	mov	r6, r3
		if( t >= 10 )
 8001ace:	2e09      	cmp	r6, #9
 8001ad0:	dd02      	ble.n	8001ad8 <printi+0x7c>
			t += letbase - '0' - 10;
 8001ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad4:	3b3a      	subs	r3, #58	; 0x3a
 8001ad6:	441e      	add	r6, r3
		*--s = (char)(t + '0');
 8001ad8:	3c01      	subs	r4, #1
 8001ada:	b2f3      	uxtb	r3, r6
 8001adc:	3330      	adds	r3, #48	; 0x30
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	7023      	strb	r3, [r4, #0]
		u /= b;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8001ae8:	2d00      	cmp	r5, #0
 8001aea:	d1e9      	bne.n	8001ac0 <printi+0x64>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
 8001aec:	f1b9 0f00 	cmp.w	r9, #0
 8001af0:	d014      	beq.n	8001b1c <printi+0xc0>
		if( width && (pad & PAD_ZERO) ) {
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00e      	beq.n	8001b16 <printi+0xba>
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <printi+0xba>
			printchar (out, '-');
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	212d      	movs	r1, #45	; 0x2d
 8001b06:	f7ff ff37 	bl	8001978 <printchar>
			++pc;
 8001b0a:	f108 0801 	add.w	r8, r8, #1
			--width;
 8001b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b10:	3b01      	subs	r3, #1
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
 8001b14:	e002      	b.n	8001b1c <printi+0xc0>
		}
		else {
			*--s = '-';
 8001b16:	3c01      	subs	r4, #1
 8001b18:	232d      	movs	r3, #45	; 0x2d
 8001b1a:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	4621      	mov	r1, r4
 8001b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b24:	f7ff ff40 	bl	80019a8 <prints>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4443      	add	r3, r8
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3724      	adds	r7, #36	; 0x24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b36:	bf00      	nop

08001b38 <print>:

static int print( char **out, const char *format, va_list args )
{
 8001b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3c:	b08a      	sub	sp, #40	; 0x28
 8001b3e:	af04      	add	r7, sp, #16
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8001b46:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8001b48:	e0cc      	b.n	8001ce4 <print+0x1ac>
		if (*format == '%') {
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b25      	cmp	r3, #37	; 0x25
 8001b50:	f040 80be 	bne.w	8001cd0 <print+0x198>
			++format;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8001b5a:	2600      	movs	r6, #0
 8001b5c:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d100      	bne.n	8001b68 <print+0x30>
 8001b66:	e0c2      	b.n	8001cee <print+0x1b6>
			if (*format == '%') goto out;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b25      	cmp	r3, #37	; 0x25
 8001b6e:	d100      	bne.n	8001b72 <print+0x3a>
 8001b70:	e0ae      	b.n	8001cd0 <print+0x198>
			if (*format == '-') {
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b2d      	cmp	r3, #45	; 0x2d
 8001b78:	d104      	bne.n	8001b84 <print+0x4c>
				++format;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8001b80:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8001b82:	e005      	b.n	8001b90 <print+0x58>
 8001b84:	e004      	b.n	8001b90 <print+0x58>
				++format;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8001b8c:	f046 0602 	orr.w	r6, r6, #2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b30      	cmp	r3, #48	; 0x30
 8001b96:	d0f6      	beq.n	8001b86 <print+0x4e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8001b98:	e00b      	b.n	8001bb2 <print+0x7a>
				width *= 10;
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	442b      	add	r3, r5
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	461d      	mov	r5, r3
				width += *format - '0';
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3b30      	subs	r3, #48	; 0x30
 8001baa:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b2f      	cmp	r3, #47	; 0x2f
 8001bb8:	d903      	bls.n	8001bc2 <print+0x8a>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b39      	cmp	r3, #57	; 0x39
 8001bc0:	d9eb      	bls.n	8001b9a <print+0x62>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b73      	cmp	r3, #115	; 0x73
 8001bc8:	d113      	bne.n	8001bf2 <print+0xba>
				register char *s = (char *)va_arg( args, int );
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	1d1a      	adds	r2, r3, #4
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8001bd4:	f1b8 0f00 	cmp.w	r8, #0
 8001bd8:	d001      	beq.n	8001bde <print+0xa6>
 8001bda:	4643      	mov	r3, r8
 8001bdc:	e000      	b.n	8001be0 <print+0xa8>
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <print+0x1d0>)
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	4619      	mov	r1, r3
 8001be4:	462a      	mov	r2, r5
 8001be6:	4633      	mov	r3, r6
 8001be8:	f7ff fede 	bl	80019a8 <prints>
 8001bec:	4603      	mov	r3, r0
 8001bee:	441c      	add	r4, r3
				continue;
 8001bf0:	e075      	b.n	8001cde <print+0x1a6>
			}
			if( *format == 'd' || *format == 'i' ) {
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d003      	beq.n	8001c02 <print+0xca>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b69      	cmp	r3, #105	; 0x69
 8001c00:	d110      	bne.n	8001c24 <print+0xec>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1d1a      	adds	r2, r3, #4
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	9500      	str	r5, [sp, #0]
 8001c0c:	9601      	str	r6, [sp, #4]
 8001c0e:	2261      	movs	r2, #97	; 0x61
 8001c10:	9202      	str	r2, [sp, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	4619      	mov	r1, r3
 8001c16:	220a      	movs	r2, #10
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f7ff ff1f 	bl	8001a5c <printi>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	441c      	add	r4, r3
				continue;
 8001c22:	e05c      	b.n	8001cde <print+0x1a6>
			}
			if( *format == 'x' ) {
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b78      	cmp	r3, #120	; 0x78
 8001c2a:	d110      	bne.n	8001c4e <print+0x116>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1d1a      	adds	r2, r3, #4
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	9500      	str	r5, [sp, #0]
 8001c36:	9601      	str	r6, [sp, #4]
 8001c38:	2261      	movs	r2, #97	; 0x61
 8001c3a:	9202      	str	r2, [sp, #8]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2210      	movs	r2, #16
 8001c42:	2300      	movs	r3, #0
 8001c44:	f7ff ff0a 	bl	8001a5c <printi>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	441c      	add	r4, r3
				continue;
 8001c4c:	e047      	b.n	8001cde <print+0x1a6>
			}
			if( *format == 'X' ) {
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b58      	cmp	r3, #88	; 0x58
 8001c54:	d110      	bne.n	8001c78 <print+0x140>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1d1a      	adds	r2, r3, #4
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	9500      	str	r5, [sp, #0]
 8001c60:	9601      	str	r6, [sp, #4]
 8001c62:	2241      	movs	r2, #65	; 0x41
 8001c64:	9202      	str	r2, [sp, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f7ff fef5 	bl	8001a5c <printi>
 8001c72:	4603      	mov	r3, r0
 8001c74:	441c      	add	r4, r3
				continue;
 8001c76:	e032      	b.n	8001cde <print+0x1a6>
			}
			if( *format == 'u' ) {
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b75      	cmp	r3, #117	; 0x75
 8001c7e:	d110      	bne.n	8001ca2 <print+0x16a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1d1a      	adds	r2, r3, #4
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	9500      	str	r5, [sp, #0]
 8001c8a:	9601      	str	r6, [sp, #4]
 8001c8c:	2261      	movs	r2, #97	; 0x61
 8001c8e:	9202      	str	r2, [sp, #8]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	4619      	mov	r1, r3
 8001c94:	220a      	movs	r2, #10
 8001c96:	2300      	movs	r3, #0
 8001c98:	f7ff fee0 	bl	8001a5c <printi>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	441c      	add	r4, r3
				continue;
 8001ca0:	e01d      	b.n	8001cde <print+0x1a6>
			}
			if( *format == 'c' ) {
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b63      	cmp	r3, #99	; 0x63
 8001ca8:	d119      	bne.n	8001cde <print+0x1a6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1d1a      	adds	r2, r3, #4
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	462a      	mov	r2, r5
 8001cc4:	4633      	mov	r3, r6
 8001cc6:	f7ff fe6f 	bl	80019a8 <prints>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	441c      	add	r4, r3
				continue;
 8001cce:	e006      	b.n	8001cde <print+0x1a6>
			}
		}
		else {
		out:
			printchar (out, *format);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7ff fe4e 	bl	8001978 <printchar>
			++pc;
 8001cdc:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f47f af2e 	bne.w	8001b4a <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <print+0x1c4>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8001cfc:	4623      	mov	r3, r4
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d08:	08007248 	.word	0x08007248

08001d0c <sprintf>:
	va_start( args, format );
	return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8001d0c:	b40e      	push	{r1, r2, r3}
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args, format );
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	60fb      	str	r3, [r7, #12]
	return print( &out, format, args );
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	69f9      	ldr	r1, [r7, #28]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f7ff ff08 	bl	8001b38 <print>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d34:	b003      	add	sp, #12
 8001d36:	4770      	bx	lr

08001d38 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <NVIC_SetPendingIRQ+0x30>)
 8001d44:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001d48:	0952      	lsrs	r2, r2, #5
 8001d4a:	79f9      	ldrb	r1, [r7, #7]
 8001d4c:	f001 011f 	and.w	r1, r1, #31
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f101 	lsl.w	r1, r0, r1
 8001d56:	3240      	adds	r2, #64	; 0x40
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af04      	add	r7, sp, #16
	/*<! Configure the hardware ready to run the test. */
	prvSetupHardware();;
 8001d72:	f000 f831 	bl	8001dd8 <prvSetupHardware>
	
	// ============now register CLI commands ===================
	
	FreeRTOS_CLIRegisterCommand( &xMotorCommand );
 8001d76:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <main+0x54>)
 8001d78:	f002 f9aa 	bl	80040d0 <FreeRTOS_CLIRegisterCommand>
       		

	// =============== register CLI commands ===================

	// create queues 
	QSpd_handle = xQueueCreate(1, sizeof(int));
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	2104      	movs	r1, #4
 8001d80:	2200      	movs	r2, #0
 8001d82:	f001 f993 	bl	80030ac <xQueueGenericCreate>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <main+0x58>)
 8001d8a:	601a      	str	r2, [r3, #0]
	QStatus_handle = xQueueCreate(10, sizeof(int16_t));
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	2102      	movs	r1, #2
 8001d90:	2200      	movs	r2, #0
 8001d92:	f001 f98b 	bl	80030ac <xQueueGenericCreate>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <main+0x5c>)
 8001d9a:	601a      	str	r2, [r3, #0]

/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/

	// echo server task 
	xTaskCreate(set_macTask, "SETMAC", configMINIMAL_STACK_SIZE*5, 
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <main+0x60>)
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2300      	movs	r3, #0
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9303      	str	r3, [sp, #12]
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <main+0x64>)
 8001dae:	4909      	ldr	r1, [pc, #36]	; (8001dd4 <main+0x68>)
 8001db0:	f240 228a 	movw	r2, #650	; 0x28a
 8001db4:	2300      	movs	r3, #0
 8001db6:	f000 f971 	bl	800209c <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8001dba:	f000 fbb1 	bl	8002520 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8001dbe:	e7fe      	b.n	8001dbe <main+0x52>
 8001dc0:	08007628 	.word	0x08007628
 8001dc4:	200131fc 	.word	0x200131fc
 8001dc8:	200141b0 	.word	0x200141b0
 8001dcc:	200141b8 	.word	0x200141b8
 8001dd0:	0800151d 	.word	0x0800151d
 8001dd4:	080072a4 	.word	0x080072a4

08001dd8 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af04      	add	r7, sp, #16
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8001dde:	f000 f8af 	bl	8001f40 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8001de2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001de6:	f002 fc61 	bl	80046ac <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 8001dea:	f7fe fa91 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 8001dee:	f7ff fbc3 	bl	8001578 <init_USARTx>
	 * Function : 		init_W5200 from W5200.c file 
	 * Stack size :		5 times minimial stack size 
	 * Task priority :	main flash task priority + 1 
	 * Parameters 	 :	no parameters (NULL)
	 */  
	xTaskCreate(init_W5200, "init_W5200", configMINIMAL_STACK_SIZE*5, 
 8001df2:	2302      	movs	r3, #2
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9303      	str	r3, [sp, #12]
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <prvSetupHardware+0x3c>)
 8001e04:	4904      	ldr	r1, [pc, #16]	; (8001e18 <prvSetupHardware+0x40>)
 8001e06:	f240 228a 	movw	r2, #650	; 0x28a
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f000 f946 	bl	800209c <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY + 1 , NULL);
	
	
}
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	08000ac5 	.word	0x08000ac5
 8001e18:	080072ac 	.word	0x080072ac

08001e1c <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <vApplicationTickHook+0x20>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <vApplicationTickHook+0x20>)
 8001e28:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8001e2a:	201c      	movs	r0, #28
 8001e2c:	f7ff ff84 	bl	8001d38 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <vApplicationTickHook+0x20>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	4b01      	ldr	r3, [pc, #4]	; (8001e3c <vApplicationTickHook+0x20>)
 8001e38:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000490 	.word	0x20000490

08001e40 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <TIM3_IRQHandler+0x34>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <TIM3_IRQHandler+0x34>)
 8001e4c:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <TIM3_IRQHandler+0x34>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <TIM3_IRQHandler+0x38>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d903      	bls.n	8001e62 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <TIM3_IRQHandler+0x34>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <TIM3_IRQHandler+0x38>)
 8001e60:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <TIM3_IRQHandler+0x34>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <TIM3_IRQHandler+0x34>)
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	20000490 	.word	0x20000490
 8001e78:	20000494 	.word	0x20000494

08001e7c <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <TIM2_IRQHandler+0x20>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <TIM2_IRQHandler+0x20>)
 8001e88:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8001e8a:	201d      	movs	r0, #29
 8001e8c:	f7ff ff54 	bl	8001d38 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <TIM2_IRQHandler+0x20>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	4b01      	ldr	r3, [pc, #4]	; (8001e9c <TIM2_IRQHandler+0x20>)
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000490 	.word	0x20000490

08001ea0 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8001ea4:	f001 fe04 	bl	8003ab0 <ulPortSetInterruptMask>
	for( ;; );
 8001ea8:	e7fe      	b.n	8001ea8 <vApplicationMallocFailedHook+0x8>
 8001eaa:	bf00      	nop

08001eac <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8001ec2:	f001 fdf5 	bl	8003ab0 <ulPortSetInterruptMask>
	for( ;; );
 8001ec6:	e7fe      	b.n	8001ec6 <vApplicationStackOverflowHook+0xe>

08001ec8 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]

}
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <Reset_Handler>:
 8001edc:	2100      	movs	r1, #0
 8001ede:	f000 b804 	b.w	8001eea <LoopCopyDataInit>

08001ee2 <CopyDataInit>:
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <LoopFillZerobss+0x22>)
 8001ee4:	585b      	ldr	r3, [r3, r1]
 8001ee6:	5043      	str	r3, [r0, r1]
 8001ee8:	3104      	adds	r1, #4

08001eea <LoopCopyDataInit>:
 8001eea:	480f      	ldr	r0, [pc, #60]	; (8001f28 <LoopFillZerobss+0x26>)
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <LoopFillZerobss+0x2a>)
 8001eee:	1842      	adds	r2, r0, r1
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f4ff aff6 	bcc.w	8001ee2 <CopyDataInit>
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <LoopFillZerobss+0x2e>)
 8001ef8:	f000 b803 	b.w	8001f02 <LoopFillZerobss>

08001efc <FillZerobss>:
 8001efc:	2300      	movs	r3, #0
 8001efe:	f842 3b04 	str.w	r3, [r2], #4

08001f02 <LoopFillZerobss>:
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <LoopFillZerobss+0x32>)
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f4ff aff9 	bcc.w	8001efc <FillZerobss>
 8001f0a:	480b      	ldr	r0, [pc, #44]	; (8001f38 <LoopFillZerobss+0x36>)
 8001f0c:	6801      	ldr	r1, [r0, #0]
 8001f0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001f12:	6001      	str	r1, [r0, #0]
 8001f14:	f000 f814 	bl	8001f40 <SystemInit>
 8001f18:	f004 feba 	bl	8006c90 <__libc_init_array>
 8001f1c:	f7ff ff26 	bl	8001d6c <main>
 8001f20:	4770      	bx	lr
 8001f22:	0000      	.short	0x0000
 8001f24:	0800778c 	.word	0x0800778c
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000460 	.word	0x20000460
 8001f30:	20000460 	.word	0x20000460
 8001f34:	2001425c 	.word	0x2001425c
 8001f38:	e000ed88 	.word	0xe000ed88

08001f3c <ADC_IRQHandler>:
 8001f3c:	f7ff bffe 	b.w	8001f3c <ADC_IRQHandler>

08001f40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <SystemInit+0x5c>)
 8001f46:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <SystemInit+0x5c>)
 8001f48:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001f4c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <SystemInit+0x60>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <SystemInit+0x60>)
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <SystemInit+0x60>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <SystemInit+0x60>)
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <SystemInit+0x60>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <SystemInit+0x60>)
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <SystemInit+0x64>)
 8001f7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <SystemInit+0x60>)
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <SystemInit+0x60>)
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f86:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SystemInit+0x60>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001f8e:	f000 f80b 	bl	8001fa8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f92:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <SystemInit+0x5c>)
 8001f94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f98:	609a      	str	r2, [r3, #8]
#endif
}
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	e000ed00 	.word	0xe000ed00
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	24003010 	.word	0x24003010

08001fa8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001fb6:	4b35      	ldr	r3, [pc, #212]	; (800208c <SetSysClock+0xe4>)
 8001fb8:	4a34      	ldr	r2, [pc, #208]	; (800208c <SetSysClock+0xe4>)
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fc0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <SetSysClock+0xe4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d103      	bne.n	8001fe0 <SetSysClock+0x38>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fde:	d1f0      	bne.n	8001fc2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <SetSysClock+0xe4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001fec:	2301      	movs	r3, #1
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	e001      	b.n	8001ff6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d142      	bne.n	8002082 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <SetSysClock+0xe4>)
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <SetSysClock+0xe4>)
 8002000:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <SetSysClock+0xe8>)
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <SetSysClock+0xe8>)
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002012:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <SetSysClock+0xe4>)
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <SetSysClock+0xe4>)
 8002018:	6892      	ldr	r2, [r2, #8]
 800201a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <SetSysClock+0xe4>)
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <SetSysClock+0xe4>)
 8002020:	6892      	ldr	r2, [r2, #8]
 8002022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002026:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <SetSysClock+0xe4>)
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <SetSysClock+0xe4>)
 800202c:	6892      	ldr	r2, [r2, #8]
 800202e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8002032:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <SetSysClock+0xe4>)
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <SetSysClock+0xec>)
 8002038:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <SetSysClock+0xe4>)
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <SetSysClock+0xe4>)
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002044:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002046:	bf00      	nop
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <SetSysClock+0xe4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f9      	beq.n	8002048 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <SetSysClock+0xf0>)
 8002056:	f240 6204 	movw	r2, #1540	; 0x604
 800205a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <SetSysClock+0xe4>)
 800205e:	4a0b      	ldr	r2, [pc, #44]	; (800208c <SetSysClock+0xe4>)
 8002060:	6892      	ldr	r2, [r2, #8]
 8002062:	f022 0203 	bic.w	r2, r2, #3
 8002066:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <SetSysClock+0xe4>)
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <SetSysClock+0xe4>)
 800206c:	6892      	ldr	r2, [r2, #8]
 800206e:	f042 0202 	orr.w	r2, r2, #2
 8002072:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002074:	bf00      	nop
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <SetSysClock+0xe4>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d1f9      	bne.n	8002076 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000
 8002094:	07404b19 	.word	0x07404b19
 8002098:	40023c00 	.word	0x40023c00

0800209c <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <xTaskGenericCreate+0x1c>
 80020b2:	f001 fcfd 	bl	8003ab0 <ulPortSetInterruptMask>
 80020b6:	e7fe      	b.n	80020b6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d902      	bls.n	80020c4 <xTaskGenericCreate+0x28>
 80020be:	f001 fcf7 	bl	8003ab0 <ulPortSetInterruptMask>
 80020c2:	e7fe      	b.n	80020c2 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	4618      	mov	r0, r3
 80020c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020ca:	f000 fe8f 	bl	8002dec <prvAllocateTCBAndStack>
 80020ce:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d072      	beq.n	80021bc <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020e0:	3b01      	subs	r3, #1
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f023 0307 	bic.w	r3, r3, #7
 80020ee:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <xTaskGenericCreate+0x64>
 80020fa:	f001 fcd9 	bl	8003ab0 <ulPortSetInterruptMask>
 80020fe:	e7fe      	b.n	80020fe <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	69b8      	ldr	r0, [r7, #24]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210c:	f000 fd78 	bl	8002c00 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	68f9      	ldr	r1, [r7, #12]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	f001 fbd9 	bl	80038cc <pxPortInitialiseStack>
 800211a:	4602      	mov	r2, r0
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 800212c:	f001 fc9e 	bl	8003a6c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002130:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <xTaskGenericCreate+0x150>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <xTaskGenericCreate+0x150>)
 8002138:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <xTaskGenericCreate+0x154>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <xTaskGenericCreate+0x154>)
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <xTaskGenericCreate+0x150>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10f      	bne.n	8002170 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002150:	f000 fd9e 	bl	8002c90 <prvInitialiseTaskLists>
 8002154:	e00c      	b.n	8002170 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <xTaskGenericCreate+0x158>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d108      	bne.n	8002170 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <xTaskGenericCreate+0x154>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	429a      	cmp	r2, r3
 8002168:	d802      	bhi.n	8002170 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <xTaskGenericCreate+0x154>)
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <xTaskGenericCreate+0x15c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <xTaskGenericCreate+0x15c>)
 8002178:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <xTaskGenericCreate+0x15c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <xTaskGenericCreate+0x160>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d903      	bls.n	8002196 <xTaskGenericCreate+0xfa>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <xTaskGenericCreate+0x160>)
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <xTaskGenericCreate+0x164>)
 80021a4:	441a      	add	r2, r3
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	3304      	adds	r3, #4
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f001 fb07 	bl	80037c0 <vListInsertEnd>

			xReturn = pdPASS;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80021b6:	f001 fc69 	bl	8003a8c <vPortExitCritical>
 80021ba:	e002      	b.n	80021c2 <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c0:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10b      	bne.n	80021e0 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <xTaskGenericCreate+0x158>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <xTaskGenericCreate+0x154>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	429a      	cmp	r2, r3
 80021da:	d201      	bcs.n	80021e0 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 80021dc:	f001 fc36 	bl	8003a4c <vPortYield>
			}
		}
	}

	return xReturn;
 80021e0:	69fb      	ldr	r3, [r7, #28]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000570 	.word	0x20000570
 80021f0:	20000498 	.word	0x20000498
 80021f4:	2000057c 	.word	0x2000057c
 80021f8:	20000590 	.word	0x20000590
 80021fc:	20000578 	.word	0x20000578
 8002200:	2000049c 	.word	0x2000049c

08002204 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle xTaskToDelete )
	{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 800220c:	f001 fc2e 	bl	8003a6c <vPortEnterCritical>
		{
			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <vTaskDelete+0x18>
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <vTaskDelete+0x78>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	e000      	b.n	800221e <vTaskDelete+0x1a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3304      	adds	r3, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fb27 	bl	8003878 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3318      	adds	r3, #24
 8002236:	4618      	mov	r0, r3
 8002238:	f001 fb1e 	bl	8003878 <uxListRemove>
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3304      	adds	r3, #4
 8002240:	480f      	ldr	r0, [pc, #60]	; (8002280 <vTaskDelete+0x7c>)
 8002242:	4619      	mov	r1, r3
 8002244:	f001 fabc 	bl	80037c0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <vTaskDelete+0x80>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <vTaskDelete+0x80>)
 8002250:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <vTaskDelete+0x84>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <vTaskDelete+0x84>)
 800225a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800225c:	f001 fc16 	bl	8003a8c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <vTaskDelete+0x88>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <vTaskDelete+0x72>
		{
			if( pxTCB == pxCurrentTCB )
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <vTaskDelete+0x78>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	429a      	cmp	r2, r3
 8002270:	d101      	bne.n	8002276 <vTaskDelete+0x72>
			{
				portYIELD_WITHIN_API();
 8002272:	f001 fbeb 	bl	8003a4c <vPortYield>
			}
		}
	}
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000498 	.word	0x20000498
 8002280:	20000544 	.word	0x20000544
 8002284:	20000558 	.word	0x20000558
 8002288:	20000590 	.word	0x20000590
 800228c:	2000057c 	.word	0x2000057c

08002290 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <vTaskDelayUntil+0x1a>
 80022a4:	f001 fc04 	bl	8003ab0 <ulPortSetInterruptMask>
 80022a8:	e7fe      	b.n	80022a8 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <vTaskDelayUntil+0x26>
 80022b0:	f001 fbfe 	bl	8003ab0 <ulPortSetInterruptMask>
 80022b4:	e7fe      	b.n	80022b4 <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 80022b6:	f000 f96b 	bl	8002590 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <vTaskDelayUntil+0xa8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d90b      	bls.n	80022ec <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d911      	bls.n	8002302 <vTaskDelayUntil+0x72>
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d90d      	bls.n	8002302 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e00a      	b.n	8002302 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d803      	bhi.n	80022fe <vTaskDelayUntil+0x6e>
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d901      	bls.n	8002302 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 80022fe:	2301      	movs	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <vTaskDelayUntil+0xac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3304      	adds	r3, #4
 8002314:	4618      	mov	r0, r3
 8002316:	f001 faaf 	bl	8003878 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 fd30 	bl	8002d80 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002320:	f000 f944 	bl	80025ac <xTaskResumeAll>
 8002324:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 800232c:	f001 fb8e 	bl	8003a4c <vPortYield>
		}
	}
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000574 	.word	0x20000574
 800233c:	20000498 	.word	0x20000498

08002340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d012      	beq.n	8002378 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 8002352:	f000 f91d 	bl	8002590 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <vTaskDelay+0x48>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <vTaskDelay+0x4c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3304      	adds	r3, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fa86 	bl	8003878 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800236c:	68b8      	ldr	r0, [r7, #8]
 800236e:	f000 fd07 	bl	8002d80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002372:	f000 f91b 	bl	80025ac <xTaskResumeAll>
 8002376:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 800237e:	f001 fb65 	bl	8003a4c <vPortYield>
		}
	}
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000574 	.word	0x20000574
 800238c:	20000498 	.word	0x20000498

08002390 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8002398:	f001 fb68 	bl	8003a6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <vTaskSuspend+0x18>
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <vTaskSuspend+0x80>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e000      	b.n	80023aa <vTaskSuspend+0x1a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 fa61 	bl	8003878 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3318      	adds	r3, #24
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 fa58 	bl	8003878 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4811      	ldr	r0, [pc, #68]	; (8002414 <vTaskSuspend+0x84>)
 80023ce:	4619      	mov	r1, r3
 80023d0:	f001 f9f6 	bl	80037c0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 80023d4:	f001 fb5a 	bl	8003a8c <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <vTaskSuspend+0x80>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d112      	bne.n	8002408 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <vTaskSuspend+0x88>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 80023ea:	f001 fb2f 	bl	8003a4c <vPortYield>
 80023ee:	e00b      	b.n	8002408 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <vTaskSuspend+0x84>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <vTaskSuspend+0x8c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d103      	bne.n	8002404 <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <vTaskSuspend+0x80>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e001      	b.n	8002408 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 8002404:	f000 fa40 	bl	8002888 <vTaskSwitchContext>
				}
			}
		}
	}
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000498 	.word	0x20000498
 8002414:	2000055c 	.word	0x2000055c
 8002418:	2000057c 	.word	0x2000057c
 800241c:	20000570 	.word	0x20000570

08002420 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <xTaskIsTaskSuspended+0x1c>
 8002436:	f001 fb3b 	bl	8003ab0 <ulPortSetInterruptMask>
 800243a:	e7fe      	b.n	800243a <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <xTaskIsTaskSuspended+0x5c>)
 8002442:	429a      	cmp	r2, r3
 8002444:	d101      	bne.n	800244a <xTaskIsTaskSuspended+0x2a>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <xTaskIsTaskSuspended+0x2c>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00f      	beq.n	8002470 <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <xTaskIsTaskSuspended+0x60>)
 8002456:	429a      	cmp	r2, r3
 8002458:	d00a      	beq.n	8002470 <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <xTaskIsTaskSuspended+0x46>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <xTaskIsTaskSuspended+0x48>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800246c:	2301      	movs	r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 8002470:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000055c 	.word	0x2000055c
 8002480:	20000530 	.word	0x20000530

08002484 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <vTaskResume+0x18>
 8002496:	f001 fb0b 	bl	8003ab0 <ulPortSetInterruptMask>
 800249a:	e7fe      	b.n	800249a <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d034      	beq.n	800250c <vTaskResume+0x88>
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <vTaskResume+0x90>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d02f      	beq.n	800250c <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 80024ac:	f001 fade 	bl	8003a6c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff ffb5 	bl	8002420 <xTaskIsTaskSuspended>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d125      	bne.n	8002508 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3304      	adds	r3, #4
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 f9d9 	bl	8003878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <vTaskResume+0x94>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d903      	bls.n	80024da <vTaskResume+0x56>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <vTaskResume+0x94>)
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4a0d      	ldr	r2, [pc, #52]	; (800251c <vTaskResume+0x98>)
 80024e8:	441a      	add	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3304      	adds	r3, #4
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f001 f965 	bl	80037c0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <vTaskResume+0x90>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	429a      	cmp	r2, r3
 8002502:	d301      	bcc.n	8002508 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8002504:	f001 faa2 	bl	8003a4c <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8002508:	f001 fac0 	bl	8003a8c <vPortExitCritical>
		}
	}
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000498 	.word	0x20000498
 8002518:	20000578 	.word	0x20000578
 800251c:	2000049c 	.word	0x2000049c

08002520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002526:	2300      	movs	r3, #0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2300      	movs	r3, #0
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	2300      	movs	r3, #0
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2300      	movs	r3, #0
 8002534:	9303      	str	r3, [sp, #12]
 8002536:	4812      	ldr	r0, [pc, #72]	; (8002580 <vTaskStartScheduler+0x60>)
 8002538:	4912      	ldr	r1, [pc, #72]	; (8002584 <vTaskStartScheduler+0x64>)
 800253a:	2282      	movs	r2, #130	; 0x82
 800253c:	2300      	movs	r3, #0
 800253e:	f7ff fdad 	bl	800209c <xTaskGenericCreate>
 8002542:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 800254a:	f001 fb4b 	bl	8003be4 <xTimerCreateTimerTask>
 800254e:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10a      	bne.n	800256c <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002556:	f001 faab 	bl	8003ab0 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <vTaskStartScheduler+0x68>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <vTaskStartScheduler+0x6c>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002566:	f001 fa0b 	bl	8003980 <xPortStartScheduler>
 800256a:	e005      	b.n	8002578 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <vTaskStartScheduler+0x58>
 8002572:	f001 fa9d 	bl	8003ab0 <ulPortSetInterruptMask>
 8002576:	e7fe      	b.n	8002576 <vTaskStartScheduler+0x56>
	}
}
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	08002bdd 	.word	0x08002bdd
 8002584:	080072b8 	.word	0x080072b8
 8002588:	2000057c 	.word	0x2000057c
 800258c:	20000574 	.word	0x20000574

08002590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <vTaskSuspendAll+0x18>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <vTaskSuspendAll+0x18>)
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000580 	.word	0x20000580

080025ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80025b6:	4b38      	ldr	r3, [pc, #224]	; (8002698 <xTaskResumeAll+0xec>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <xTaskResumeAll+0x18>
 80025be:	f001 fa77 	bl	8003ab0 <ulPortSetInterruptMask>
 80025c2:	e7fe      	b.n	80025c2 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80025c4:	f001 fa52 	bl	8003a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80025c8:	4b33      	ldr	r3, [pc, #204]	; (8002698 <xTaskResumeAll+0xec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	1e5a      	subs	r2, r3, #1
 80025ce:	4b32      	ldr	r3, [pc, #200]	; (8002698 <xTaskResumeAll+0xec>)
 80025d0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <xTaskResumeAll+0xec>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d156      	bne.n	8002688 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80025da:	4b30      	ldr	r3, [pc, #192]	; (800269c <xTaskResumeAll+0xf0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d052      	beq.n	8002688 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025e2:	e02f      	b.n	8002644 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <xTaskResumeAll+0xf4>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	3318      	adds	r3, #24
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f941 	bl	8003878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 f93c 	bl	8003878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <xTaskResumeAll+0xf8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d903      	bls.n	8002614 <xTaskResumeAll+0x68>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <xTaskResumeAll+0xf8>)
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <xTaskResumeAll+0xfc>)
 8002622:	441a      	add	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3304      	adds	r3, #4
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f001 f8c8 	bl	80037c0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <xTaskResumeAll+0x100>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <xTaskResumeAll+0x104>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <xTaskResumeAll+0xf4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1cb      	bne.n	80025e4 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <xTaskResumeAll+0x108>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d011      	beq.n	8002678 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002654:	e00c      	b.n	8002670 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8002656:	f000 f841 	bl	80026dc <xTaskIncrementTick>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <xTaskResumeAll+0x104>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <xTaskResumeAll+0x108>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <xTaskResumeAll+0x108>)
 800266e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <xTaskResumeAll+0x108>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ee      	bne.n	8002656 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <xTaskResumeAll+0x104>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d103      	bne.n	8002688 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 8002680:	2301      	movs	r3, #1
 8002682:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8002684:	f001 f9e2 	bl	8003a4c <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8002688:	f001 fa00 	bl	8003a8c <vPortExitCritical>

	return xAlreadyYielded;
 800268c:	687b      	ldr	r3, [r7, #4]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000580 	.word	0x20000580
 800269c:	20000570 	.word	0x20000570
 80026a0:	20000530 	.word	0x20000530
 80026a4:	20000578 	.word	0x20000578
 80026a8:	2000049c 	.word	0x2000049c
 80026ac:	20000498 	.word	0x20000498
 80026b0:	20000588 	.word	0x20000588
 80026b4:	20000584 	.word	0x20000584

080026b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 80026be:	f001 f9d5 	bl	8003a6c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <xTaskGetTickCount+0x20>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 80026c8:	f001 f9e0 	bl	8003a8c <vPortExitCritical>

	return xTicks;
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000574 	.word	0x20000574

080026dc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80026e6:	4b5d      	ldr	r3, [pc, #372]	; (800285c <xTaskIncrementTick+0x180>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 80a4 	bne.w	8002838 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80026f0:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <xTaskIncrementTick+0x184>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	4b5a      	ldr	r3, [pc, #360]	; (8002860 <xTaskIncrementTick+0x184>)
 80026f8:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 80026fa:	4b59      	ldr	r3, [pc, #356]	; (8002860 <xTaskIncrementTick+0x184>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d12e      	bne.n	8002764 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8002706:	4b57      	ldr	r3, [pc, #348]	; (8002864 <xTaskIncrementTick+0x188>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <xTaskIncrementTick+0x3a>
 8002710:	f001 f9ce 	bl	8003ab0 <ulPortSetInterruptMask>
 8002714:	e7fe      	b.n	8002714 <xTaskIncrementTick+0x38>
 8002716:	4b53      	ldr	r3, [pc, #332]	; (8002864 <xTaskIncrementTick+0x188>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	4b52      	ldr	r3, [pc, #328]	; (8002868 <xTaskIncrementTick+0x18c>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <xTaskIncrementTick+0x188>)
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <xTaskIncrementTick+0x18c>)
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <xTaskIncrementTick+0x190>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	4b4e      	ldr	r3, [pc, #312]	; (800286c <xTaskIncrementTick+0x190>)
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <xTaskIncrementTick+0x188>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <xTaskIncrementTick+0x66>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <xTaskIncrementTick+0x68>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <xTaskIncrementTick+0x76>
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <xTaskIncrementTick+0x194>)
 800274a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e008      	b.n	8002764 <xTaskIncrementTick+0x88>
 8002752:	4b44      	ldr	r3, [pc, #272]	; (8002864 <xTaskIncrementTick+0x188>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4b43      	ldr	r3, [pc, #268]	; (8002870 <xTaskIncrementTick+0x194>)
 8002762:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002764:	4b42      	ldr	r3, [pc, #264]	; (8002870 <xTaskIncrementTick+0x194>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	429a      	cmp	r2, r3
 800276c:	d34f      	bcc.n	800280e <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <xTaskIncrementTick+0x188>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <xTaskIncrementTick+0xa0>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <xTaskIncrementTick+0xa2>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8002782:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <xTaskIncrementTick+0x194>)
 8002784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002788:	601a      	str	r2, [r3, #0]
						break;
 800278a:	e040      	b.n	800280e <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <xTaskIncrementTick+0x188>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d203      	bcs.n	80027ac <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <xTaskIncrementTick+0x194>)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
							break;
 80027aa:	e030      	b.n	800280e <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 f861 	bl	8003878 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3318      	adds	r3, #24
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f858 	bl	8003878 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	4b29      	ldr	r3, [pc, #164]	; (8002874 <xTaskIncrementTick+0x198>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d903      	bls.n	80027dc <xTaskIncrementTick+0x100>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <xTaskIncrementTick+0x198>)
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <xTaskIncrementTick+0x19c>)
 80027ea:	441a      	add	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3304      	adds	r3, #4
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f000 ffe4 	bl	80037c0 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <xTaskIncrementTick+0x1a0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8002806:	2301      	movs	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 800280a:	e7b0      	b.n	800276e <xTaskIncrementTick+0x92>
 800280c:	e7af      	b.n	800276e <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <xTaskIncrementTick+0x1a0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	4918      	ldr	r1, [pc, #96]	; (8002878 <xTaskIncrementTick+0x19c>)
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d901      	bls.n	800282a <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8002826:	2301      	movs	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <xTaskIncrementTick+0x1a4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 8002832:	f7ff faf3 	bl	8001e1c <vApplicationTickHook>
 8002836:	e006      	b.n	8002846 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <xTaskIncrementTick+0x1a4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <xTaskIncrementTick+0x1a4>)
 8002840:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8002842:	f7ff faeb 	bl	8001e1c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <xTaskIncrementTick+0x1a8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002852:	697b      	ldr	r3, [r7, #20]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000580 	.word	0x20000580
 8002860:	20000574 	.word	0x20000574
 8002864:	20000528 	.word	0x20000528
 8002868:	2000052c 	.word	0x2000052c
 800286c:	2000058c 	.word	0x2000058c
 8002870:	20000004 	.word	0x20000004
 8002874:	20000578 	.word	0x20000578
 8002878:	2000049c 	.word	0x2000049c
 800287c:	20000498 	.word	0x20000498
 8002880:	20000584 	.word	0x20000584
 8002884:	20000588 	.word	0x20000588

08002888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800288e:	4b35      	ldr	r3, [pc, #212]	; (8002964 <vTaskSwitchContext+0xdc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002896:	4b34      	ldr	r3, [pc, #208]	; (8002968 <vTaskSwitchContext+0xe0>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e05e      	b.n	800295c <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 800289e:	4b32      	ldr	r3, [pc, #200]	; (8002968 <vTaskSwitchContext+0xe0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <vTaskSwitchContext+0xe4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b30      	ldr	r3, [pc, #192]	; (800296c <vTaskSwitchContext+0xe4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d808      	bhi.n	80028c6 <vTaskSwitchContext+0x3e>
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <vTaskSwitchContext+0xe4>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b2c      	ldr	r3, [pc, #176]	; (800296c <vTaskSwitchContext+0xe4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3334      	adds	r3, #52	; 0x34
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f7ff faf9 	bl	8001eb8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <vTaskSwitchContext+0xe4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	4618      	mov	r0, r3
 80028ce:	4928      	ldr	r1, [pc, #160]	; (8002970 <vTaskSwitchContext+0xe8>)
 80028d0:	2214      	movs	r2, #20
 80028d2:	f004 fa05 	bl	8006ce0 <memcmp>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <vTaskSwitchContext+0x68>
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <vTaskSwitchContext+0xe4>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <vTaskSwitchContext+0xe4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3334      	adds	r3, #52	; 0x34
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7ff fae5 	bl	8001eb8 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 80028ee:	e00c      	b.n	800290a <vTaskSwitchContext+0x82>
 80028f0:	e00b      	b.n	800290a <vTaskSwitchContext+0x82>
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <vTaskSwitchContext+0xec>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <vTaskSwitchContext+0x78>
 80028fa:	f001 f8d9 	bl	8003ab0 <ulPortSetInterruptMask>
 80028fe:	e7fe      	b.n	80028fe <vTaskSwitchContext+0x76>
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <vTaskSwitchContext+0xec>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <vTaskSwitchContext+0xec>)
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <vTaskSwitchContext+0xec>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	491a      	ldr	r1, [pc, #104]	; (8002978 <vTaskSwitchContext+0xf0>)
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0e8      	beq.n	80028f2 <vTaskSwitchContext+0x6a>
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <vTaskSwitchContext+0xec>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4a12      	ldr	r2, [pc, #72]	; (8002978 <vTaskSwitchContext+0xf0>)
 800292e:	4413      	add	r3, r2
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3308      	adds	r3, #8
 8002944:	429a      	cmp	r2, r3
 8002946:	d104      	bne.n	8002952 <vTaskSwitchContext+0xca>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <vTaskSwitchContext+0xe4>)
 800295a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000580 	.word	0x20000580
 8002968:	20000588 	.word	0x20000588
 800296c:	20000498 	.word	0x20000498
 8002970:	08007638 	.word	0x08007638
 8002974:	20000578 	.word	0x20000578
 8002978:	2000049c 	.word	0x2000049c

0800297c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <vTaskPlaceOnEventList+0x16>
 800298c:	f001 f890 	bl	8003ab0 <ulPortSetInterruptMask>
 8002990:	e7fe      	b.n	8002990 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <vTaskPlaceOnEventList+0x60>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3318      	adds	r3, #24
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4619      	mov	r1, r3
 800299c:	f000 ff34 	bl	8003808 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <vTaskPlaceOnEventList+0x60>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 ff66 	bl	8003878 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b2:	d107      	bne.n	80029c4 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <vTaskPlaceOnEventList+0x60>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3304      	adds	r3, #4
 80029ba:	4809      	ldr	r0, [pc, #36]	; (80029e0 <vTaskPlaceOnEventList+0x64>)
 80029bc:	4619      	mov	r1, r3
 80029be:	f000 feff 	bl	80037c0 <vListInsertEnd>
 80029c2:	e007      	b.n	80029d4 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <vTaskPlaceOnEventList+0x68>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f9d6 	bl	8002d80 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000498 	.word	0x20000498
 80029e0:	2000055c 	.word	0x2000055c
 80029e4:	20000574 	.word	0x20000574

080029e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <vTaskPlaceOnEventListRestricted+0x16>
 80029f8:	f001 f85a 	bl	8003ab0 <ulPortSetInterruptMask>
 80029fc:	e7fe      	b.n	80029fc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <vTaskPlaceOnEventListRestricted+0x48>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3318      	adds	r3, #24
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4619      	mov	r1, r3
 8002a08:	f000 feda 	bl	80037c0 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <vTaskPlaceOnEventListRestricted+0x48>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 ff30 	bl	8003878 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <vTaskPlaceOnEventListRestricted+0x4c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f9ac 	bl	8002d80 <prvAddCurrentTaskToDelayedList>
	}
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000498 	.word	0x20000498
 8002a34:	20000574 	.word	0x20000574

08002a38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <xTaskRemoveFromEventList+0x1c>
 8002a4e:	f001 f82f 	bl	8003ab0 <ulPortSetInterruptMask>
 8002a52:	e7fe      	b.n	8002a52 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3318      	adds	r3, #24
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 ff0d 	bl	8003878 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <xTaskRemoveFromEventList+0xa0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11d      	bne.n	8002aa2 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 ff04 	bl	8003878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <xTaskRemoveFromEventList+0xa4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d903      	bls.n	8002a84 <xTaskRemoveFromEventList+0x4c>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <xTaskRemoveFromEventList+0xa4>)
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <xTaskRemoveFromEventList+0xa8>)
 8002a92:	441a      	add	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f000 fe90 	bl	80037c0 <vListInsertEnd>
 8002aa0:	e005      	b.n	8002aae <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	480f      	ldr	r0, [pc, #60]	; (8002ae4 <xTaskRemoveFromEventList+0xac>)
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f000 fe89 	bl	80037c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <xTaskRemoveFromEventList+0xb0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d305      	bcc.n	8002ac8 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <xTaskRemoveFromEventList+0xb4>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e001      	b.n	8002acc <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000580 	.word	0x20000580
 8002adc:	20000578 	.word	0x20000578
 8002ae0:	2000049c 	.word	0x2000049c
 8002ae4:	20000530 	.word	0x20000530
 8002ae8:	20000498 	.word	0x20000498
 8002aec:	20000588 	.word	0x20000588

08002af0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <vTaskSetTimeOutState+0x14>
 8002afe:	f000 ffd7 	bl	8003ab0 <ulPortSetInterruptMask>
 8002b02:	e7fe      	b.n	8002b02 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <vTaskSetTimeOutState+0x2c>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <vTaskSetTimeOutState+0x30>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	605a      	str	r2, [r3, #4]
}
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000058c 	.word	0x2000058c
 8002b20:	20000574 	.word	0x20000574

08002b24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <xTaskCheckForTimeOut+0x16>
 8002b34:	f000 ffbc 	bl	8003ab0 <ulPortSetInterruptMask>
 8002b38:	e7fe      	b.n	8002b38 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <xTaskCheckForTimeOut+0x22>
 8002b40:	f000 ffb6 	bl	8003ab0 <ulPortSetInterruptMask>
 8002b44:	e7fe      	b.n	8002b44 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8002b46:	f000 ff91 	bl	8003a6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <xTaskCheckForTimeOut+0x98>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b58:	d102      	bne.n	8002b60 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e026      	b.n	8002bae <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <xTaskCheckForTimeOut+0x9c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d007      	beq.n	8002b7c <xTaskCheckForTimeOut+0x58>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d802      	bhi.n	8002b7c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e018      	b.n	8002bae <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	1ad2      	subs	r2, r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d20e      	bcs.n	8002baa <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1acb      	subs	r3, r1, r3
 8002b98:	441a      	add	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa6 	bl	8002af0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e001      	b.n	8002bae <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bae:	f000 ff6d 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000574 	.word	0x20000574
 8002bc0:	2000058c 	.word	0x2000058c

08002bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <vTaskMissedYield+0x14>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
}
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000588 	.word	0x20000588

08002bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8002be4:	f000 f892 	bl	8002d0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <prvIdleTask+0x20>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d901      	bls.n	8002bf4 <prvIdleTask+0x18>
			{
				taskYIELD();
 8002bf0:	f000 ff2c 	bl	8003a4c <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002bf4:	f7ff f95a 	bl	8001eac <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002bf8:	e7f4      	b.n	8002be4 <prvIdleTask+0x8>
 8002bfa:	bf00      	nop
 8002bfc:	2000049c 	.word	0x2000049c

08002c00 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e012      	b.n	8002c3a <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4413      	add	r3, r2
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	68f9      	ldr	r1, [r7, #12]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	440b      	add	r3, r1
 8002c22:	3330      	adds	r3, #48	; 0x30
 8002c24:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d100      	bne.n	8002c34 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8002c32:	e005      	b.n	8002c40 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3301      	adds	r3, #1
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	d9e9      	bls.n	8002c14 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d901      	bls.n	8002c52 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fda0 	bl	80037a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3318      	adds	r3, #24
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fd9b 	bl	80037a8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1c3 0205 	rsb	r2, r3, #5
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop

08002c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	e00c      	b.n	8002cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4a11      	ldr	r2, [pc, #68]	; (8002cec <prvInitialiseTaskLists+0x5c>)
 8002ca8:	4413      	add	r3, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fd5c 	bl	8003768 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d9ef      	bls.n	8002c9c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <prvInitialiseTaskLists+0x60>)
 8002cbe:	f000 fd53 	bl	8003768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cc2:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <prvInitialiseTaskLists+0x64>)
 8002cc4:	f000 fd50 	bl	8003768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cc8:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <prvInitialiseTaskLists+0x68>)
 8002cca:	f000 fd4d 	bl	8003768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cce:	480b      	ldr	r0, [pc, #44]	; (8002cfc <prvInitialiseTaskLists+0x6c>)
 8002cd0:	f000 fd4a 	bl	8003768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cd4:	480a      	ldr	r0, [pc, #40]	; (8002d00 <prvInitialiseTaskLists+0x70>)
 8002cd6:	f000 fd47 	bl	8003768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <prvInitialiseTaskLists+0x74>)
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <prvInitialiseTaskLists+0x60>)
 8002cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <prvInitialiseTaskLists+0x78>)
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <prvInitialiseTaskLists+0x64>)
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000049c 	.word	0x2000049c
 8002cf0:	20000500 	.word	0x20000500
 8002cf4:	20000514 	.word	0x20000514
 8002cf8:	20000530 	.word	0x20000530
 8002cfc:	20000544 	.word	0x20000544
 8002d00:	2000055c 	.word	0x2000055c
 8002d04:	20000528 	.word	0x20000528
 8002d08:	2000052c 	.word	0x2000052c

08002d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8002d12:	e028      	b.n	8002d66 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002d14:	f7ff fc3c 	bl	8002590 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002d18:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <prvCheckTasksWaitingTermination+0x68>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2300      	movne	r3, #0
 8002d22:	2301      	moveq	r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8002d28:	f7ff fc40 	bl	80025ac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8002d32:	f000 fe9b 	bl	8003a6c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <prvCheckTasksWaitingTermination+0x68>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	3304      	adds	r3, #4
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fd98 	bl	8003878 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <prvCheckTasksWaitingTermination+0x6c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <prvCheckTasksWaitingTermination+0x6c>)
 8002d50:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <prvCheckTasksWaitingTermination+0x70>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <prvCheckTasksWaitingTermination+0x70>)
 8002d5a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002d5c:	f000 fe96 	bl	8003a8c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f000 f875 	bl	8002e50 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <prvCheckTasksWaitingTermination+0x70>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1d2      	bne.n	8002d14 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000544 	.word	0x20000544
 8002d78:	20000570 	.word	0x20000570
 8002d7c:	20000558 	.word	0x20000558

08002d80 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0x58>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <prvAddCurrentTaskToDelayedList+0x5c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d209      	bcs.n	8002dae <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <prvAddCurrentTaskToDelayedList+0x60>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0x58>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f000 fd2e 	bl	8003808 <vListInsert>
 8002dac:	e010      	b.n	8002dd0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <prvAddCurrentTaskToDelayedList+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0x58>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f000 fd24 	bl	8003808 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d202      	bcs.n	8002dd0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000498 	.word	0x20000498
 8002ddc:	20000574 	.word	0x20000574
 8002de0:	2000052c 	.word	0x2000052c
 8002de4:	20000528 	.word	0x20000528
 8002de8:	20000004 	.word	0x20000004

08002dec <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8002df8:	204c      	movs	r0, #76	; 0x4c
 8002dfa:	f001 fadb 	bl	80043b4 <pvPortMalloc>
 8002dfe:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01f      	beq.n	8002e46 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <prvAllocateTCBAndStack+0x2e>
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 facf 	bl	80043b4 <pvPortMalloc>
 8002e16:	4603      	mov	r3, r0
 8002e18:	e000      	b.n	8002e1c <prvAllocateTCBAndStack+0x30>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f001 fb4f 	bl	80044cc <vPortFree>
			pxNewTCB = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e008      	b.n	8002e46 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	21a5      	movs	r1, #165	; 0xa5
 8002e40:	461a      	mov	r2, r3
 8002e42:	f003 ff81 	bl	8006d48 <memset>
		}
	}

	return pxNewTCB;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 fb35 	bl	80044cc <vPortFree>
		vPortFree( pxTCB );
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f001 fb32 	bl	80044cc <vPortFree>
	}
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop

08002e70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <xTaskGetCurrentTaskHandle+0x1c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002e7c:	687b      	ldr	r3, [r7, #4]
	}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000498 	.word	0x20000498

08002e90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <xTaskGetSchedulerState+0x34>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	e008      	b.n	8002eb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <xTaskGetSchedulerState+0x38>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002eac:	2301      	movs	r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	e001      	b.n	8002eb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002eb6:	687b      	ldr	r3, [r7, #4]
	}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	2000057c 	.word	0x2000057c
 8002ec8:	20000580 	.word	0x20000580

08002ecc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d046      	beq.n	8002f6c <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <vTaskPriorityInherit+0xa8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d23f      	bcs.n	8002f6c <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <vTaskPriorityInherit+0xa8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f1c3 0205 	rsb	r2, r3, #5
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6959      	ldr	r1, [r3, #20]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <vTaskPriorityInherit+0xac>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4299      	cmp	r1, r3
 8002f10:	d101      	bne.n	8002f16 <vTaskPriorityInherit+0x4a>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <vTaskPriorityInherit+0x4c>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d022      	beq.n	8002f62 <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fca9 	bl	8003878 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <vTaskPriorityInherit+0xa8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <vTaskPriorityInherit+0xb0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d903      	bls.n	8002f44 <vTaskPriorityInherit+0x78>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <vTaskPriorityInherit+0xb0>)
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <vTaskPriorityInherit+0xac>)
 8002f52:	441a      	add	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f000 fc30 	bl	80037c0 <vListInsertEnd>
 8002f60:	e004      	b.n	8002f6c <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <vTaskPriorityInherit+0xa8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000498 	.word	0x20000498
 8002f78:	2000049c 	.word	0x2000049c
 8002f7c:	20000578 	.word	0x20000578

08002f80 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02c      	beq.n	8002fec <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d026      	beq.n	8002fec <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fc68 	bl	8003878 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	f1c3 0205 	rsb	r2, r3, #5
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <vTaskPriorityDisinherit+0x74>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d903      	bls.n	8002fd0 <vTaskPriorityDisinherit+0x50>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <vTaskPriorityDisinherit+0x74>)
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <vTaskPriorityDisinherit+0x78>)
 8002fde:	441a      	add	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f000 fbea 	bl	80037c0 <vListInsertEnd>
			}
		}
	}
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000578 	.word	0x20000578
 8002ff8:	2000049c 	.word	0x2000049c

08002ffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <xQueueGenericReset+0x1a>
 8003010:	f000 fd4e 	bl	8003ab0 <ulPortSetInterruptMask>
 8003014:	e7fe      	b.n	8003014 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8003016:	f000 fd29 	bl	8003a6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	441a      	add	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	3b01      	subs	r3, #1
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	441a      	add	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003064:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10e      	bne.n	800308a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d014      	beq.n	800309e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3310      	adds	r3, #16
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fcdd 	bl	8002a38 <xTaskRemoveFromEventList>
 800307e:	4603      	mov	r3, r0
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10c      	bne.n	800309e <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8003084:	f000 fce2 	bl	8003a4c <vPortYield>
 8003088:	e009      	b.n	800309e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3310      	adds	r3, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fb6a 	bl	8003768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fb65 	bl	8003768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800309e:	f000 fcf5 	bl	8003a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030a2:	2301      	movs	r3, #1
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d02a      	beq.n	800311a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80030c4:	2050      	movs	r0, #80	; 0x50
 80030c6:	f001 f975 	bl	80043b4 <pvPortMalloc>
 80030ca:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d023      	beq.n	800311a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f001 f968 	bl	80043b4 <pvPortMalloc>
 80030e4:	4602      	mov	r2, r0
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d010      	beq.n	8003114 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030fe:	69b8      	ldr	r0, [r7, #24]
 8003100:	2101      	movs	r1, #1
 8003102:	f7ff ff7b 	bl	8002ffc <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	79fa      	ldrb	r2, [r7, #7]
 800310a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e002      	b.n	800311a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8003114:	69b8      	ldr	r0, [r7, #24]
 8003116:	f001 f9d9 	bl	80044cc <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d102      	bne.n	8003126 <xQueueGenericCreate+0x7a>
 8003120:	f000 fcc6 	bl	8003ab0 <ulPortSetInterruptMask>
 8003124:	e7fe      	b.n	8003124 <xQueueGenericCreate+0x78>

	return xReturn;
 8003126:	69fb      	ldr	r3, [r7, #28]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <xQueueGenericSend+0x22>
 800314c:	f000 fcb0 	bl	8003ab0 <ulPortSetInterruptMask>
 8003150:	e7fe      	b.n	8003150 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <xQueueGenericSend+0x30>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <xQueueGenericSend+0x34>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <xQueueGenericSend+0x36>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <xQueueGenericSend+0x40>
 800316a:	f000 fca1 	bl	8003ab0 <ulPortSetInterruptMask>
 800316e:	e7fe      	b.n	800316e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d103      	bne.n	800317e <xQueueGenericSend+0x4e>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <xQueueGenericSend+0x52>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <xQueueGenericSend+0x54>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <xQueueGenericSend+0x5e>
 8003188:	f000 fc92 	bl	8003ab0 <ulPortSetInterruptMask>
 800318c:	e7fe      	b.n	800318c <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800318e:	f000 fc6d 	bl	8003a6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <xQueueGenericSend+0x74>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d116      	bne.n	80031d2 <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031a4:	69b8      	ldr	r0, [r7, #24]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	f000 f9a9 	bl	8003500 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	3324      	adds	r3, #36	; 0x24
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fc3c 	bl	8002a38 <xTaskRemoveFromEventList>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 80031c6:	f000 fc41 	bl	8003a4c <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031ca:	f000 fc5f 	bl	8003a8c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e059      	b.n	8003286 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031d8:	f000 fc58 	bl	8003a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	e052      	b.n	8003286 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80031e6:	f107 0310 	add.w	r3, r7, #16
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fc80 	bl	8002af0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f4:	f000 fc4a 	bl	8003a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031f8:	f7ff f9ca 	bl	8002590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031fc:	f000 fc36 	bl	8003a6c <vPortEnterCritical>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003208:	d102      	bne.n	8003210 <xQueueGenericSend+0xe0>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003218:	d102      	bne.n	8003220 <xQueueGenericSend+0xf0>
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2200      	movs	r2, #0
 800321e:	649a      	str	r2, [r3, #72]	; 0x48
 8003220:	f000 fc34 	bl	8003a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003224:	f107 0210 	add.w	r2, r7, #16
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7ff fc79 	bl	8002b24 <xTaskCheckForTimeOut>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11e      	bne.n	8003276 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003238:	69b8      	ldr	r0, [r7, #24]
 800323a:	f000 fa51 	bl	80036e0 <prvIsQueueFull>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f103 0210 	add.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f7ff fb94 	bl	800297c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003254:	69b8      	ldr	r0, [r7, #24]
 8003256:	f000 f9e1 	bl	800361c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800325a:	f7ff f9a7 	bl	80025ac <xTaskResumeAll>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10f      	bne.n	8003284 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 8003264:	f000 fbf2 	bl	8003a4c <vPortYield>
 8003268:	e00c      	b.n	8003284 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800326a:	69b8      	ldr	r0, [r7, #24]
 800326c:	f000 f9d6 	bl	800361c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003270:	f7ff f99c 	bl	80025ac <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003274:	e78b      	b.n	800318e <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003276:	69b8      	ldr	r0, [r7, #24]
 8003278:	f000 f9d0 	bl	800361c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800327c:	f7ff f996 	bl	80025ac <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <xQueueGenericSend+0x156>
		}
	}
 8003284:	e783      	b.n	800318e <xQueueGenericSend+0x5e>
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop

08003290 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <xQueueGenericSendFromISR+0x1e>
 80032a8:	f000 fc02 	bl	8003ab0 <ulPortSetInterruptMask>
 80032ac:	e7fe      	b.n	80032ac <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <xQueueGenericSendFromISR+0x2c>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <xQueueGenericSendFromISR+0x30>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <xQueueGenericSendFromISR+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <xQueueGenericSendFromISR+0x3c>
 80032c6:	f000 fbf3 	bl	8003ab0 <ulPortSetInterruptMask>
 80032ca:	e7fe      	b.n	80032ca <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d103      	bne.n	80032da <xQueueGenericSendFromISR+0x4a>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <xQueueGenericSendFromISR+0x4e>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <xQueueGenericSendFromISR+0x50>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <xQueueGenericSendFromISR+0x5a>
 80032e4:	f000 fbe4 	bl	8003ab0 <ulPortSetInterruptMask>
 80032e8:	e7fe      	b.n	80032e8 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ea:	f000 fc4f 	bl	8003b8c <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032ee:	f000 fbdf 	bl	8003ab0 <ulPortSetInterruptMask>
 80032f2:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <xQueueGenericSendFromISR+0x76>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d124      	bne.n	8003350 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003306:	69b8      	ldr	r0, [r7, #24]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	f000 f8f8 	bl	8003500 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003318:	d112      	bne.n	8003340 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d013      	beq.n	800334a <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	3324      	adds	r3, #36	; 0x24
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fb86 	bl	8002a38 <xTaskRemoveFromEventList>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e004      	b.n	800334a <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 800334a:	2301      	movs	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e001      	b.n	8003354 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003354:	6978      	ldr	r0, [r7, #20]
 8003356:	f000 fbb5 	bl	8003ac4 <vPortClearInterruptMask>

	return xReturn;
 800335a:	69fb      	ldr	r3, [r7, #28]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <xQueueGenericReceive+0x22>
 8003380:	f000 fb96 	bl	8003ab0 <ulPortSetInterruptMask>
 8003384:	e7fe      	b.n	8003384 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <xQueueGenericReceive+0x30>
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <xQueueGenericReceive+0x34>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <xQueueGenericReceive+0x36>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <xQueueGenericReceive+0x40>
 800339e:	f000 fb87 	bl	8003ab0 <ulPortSetInterruptMask>
 80033a2:	e7fe      	b.n	80033a2 <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80033a4:	f000 fb62 	bl	8003a6c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03b      	beq.n	8003428 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033b6:	6a38      	ldr	r0, [r7, #32]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	f000 f909 	bl	80035d0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d11c      	bne.n	80033fe <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 80033d6:	f7ff fd4b 	bl	8002e70 <xTaskGetCurrentTaskHandle>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	3310      	adds	r3, #16
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fb23 	bl	8002a38 <xTaskRemoveFromEventList>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d113      	bne.n	8003420 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 80033f8:	f000 fb28 	bl	8003a4c <vPortYield>
 80033fc:	e010      	b.n	8003420 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	3324      	adds	r3, #36	; 0x24
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fb11 	bl	8002a38 <xTaskRemoveFromEventList>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 800341c:	f000 fb16 	bl	8003a4c <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8003420:	f000 fb34 	bl	8003a8c <vPortExitCritical>
				return pdPASS;
 8003424:	2301      	movs	r3, #1
 8003426:	e066      	b.n	80034f6 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800342e:	f000 fb2d 	bl	8003a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003432:	2300      	movs	r3, #0
 8003434:	e05f      	b.n	80034f6 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fb55 	bl	8002af0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 800344a:	f000 fb1f 	bl	8003a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800344e:	f7ff f89f 	bl	8002590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003452:	f000 fb0b 	bl	8003a6c <vPortEnterCritical>
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800345e:	d102      	bne.n	8003466 <xQueueGenericReceive+0x102>
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346e:	d102      	bne.n	8003476 <xQueueGenericReceive+0x112>
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2200      	movs	r2, #0
 8003474:	649a      	str	r2, [r3, #72]	; 0x48
 8003476:	f000 fb09 	bl	8003a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800347a:	f107 0214 	add.w	r2, r7, #20
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f7ff fb4e 	bl	8002b24 <xTaskCheckForTimeOut>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d12b      	bne.n	80034e6 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800348e:	6a38      	ldr	r0, [r7, #32]
 8003490:	f000 f910 	bl	80036b4 <prvIsQueueEmpty>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01f      	beq.n	80034da <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 80034a2:	f000 fae3 	bl	8003a6c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fd0e 	bl	8002ecc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80034b0:	f000 faec 	bl	8003a8c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	f7ff fa5c 	bl	800297c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034c4:	6a38      	ldr	r0, [r7, #32]
 80034c6:	f000 f8a9 	bl	800361c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034ca:	f7ff f86f 	bl	80025ac <xTaskResumeAll>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10f      	bne.n	80034f4 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 80034d4:	f000 faba 	bl	8003a4c <vPortYield>
 80034d8:	e00c      	b.n	80034f4 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034da:	6a38      	ldr	r0, [r7, #32]
 80034dc:	f000 f89e 	bl	800361c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034e0:	f7ff f864 	bl	80025ac <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80034e4:	e75e      	b.n	80033a4 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80034e6:	6a38      	ldr	r0, [r7, #32]
 80034e8:	f000 f898 	bl	800361c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ec:	f7ff f85e 	bl	80025ac <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <xQueueGenericReceive+0x192>
		}
	}
 80034f4:	e756      	b.n	80033a4 <xQueueGenericReceive+0x40>
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3728      	adds	r7, #40	; 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop

08003500 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10c      	bne.n	800352e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d151      	bne.n	80035c0 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd2d 	bl	8002f80 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	e048      	b.n	80035c0 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11a      	bne.n	800356a <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	4610      	mov	r0, r2
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	461a      	mov	r2, r3
 8003542:	f7fc fe4b 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	441a      	add	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d32f      	bcc.n	80035c0 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	e02a      	b.n	80035c0 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4610      	mov	r0, r2
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	461a      	mov	r2, r3
 8003578:	f7fc fe30 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	425b      	negs	r3, r3
 8003586:	441a      	add	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d207      	bcs.n	80035a8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	425b      	negs	r3, r3
 80035a2:	441a      	add	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d108      	bne.n	80035c0 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d019      	beq.n	8003616 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d303      	bcc.n	8003604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	6838      	ldr	r0, [r7, #0]
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	f7fc fde3 	bl	80001dc <memcpy>
	}
}
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003624:	f000 fa22 	bl	8003a6c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003628:	e014      	b.n	8003654 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3324      	adds	r3, #36	; 0x24
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff f9fe 	bl	8002a38 <xTaskRemoveFromEventList>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8003642:	f7ff fabf 	bl	8002bc4 <vTaskMissedYield>
 8003646:	e000      	b.n	800364a <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 8003648:	e008      	b.n	800365c <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	2b00      	cmp	r3, #0
 800365a:	dce6      	bgt.n	800362a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003662:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8003664:	f000 fa12 	bl	8003a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003668:	f000 fa00 	bl	8003a6c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800366c:	e014      	b.n	8003698 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00f      	beq.n	8003696 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3310      	adds	r3, #16
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff f9dc 	bl	8002a38 <xTaskRemoveFromEventList>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8003686:	f7ff fa9d 	bl	8002bc4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
 8003694:	e000      	b.n	8003698 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8003696:	e003      	b.n	80036a0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	2b00      	cmp	r3, #0
 800369e:	dce6      	bgt.n	800366e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036a8:	f000 f9f0 	bl	8003a8c <vPortExitCritical>
}
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop

080036b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80036bc:	f000 f9d6 	bl	8003a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e001      	b.n	80036d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036d2:	f000 f9db 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80036e8:	f000 f9c0 	bl	8003a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d102      	bne.n	80036fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e001      	b.n	8003702 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003702:	f000 f9c3 	bl	8003a8c <vPortExitCritical>

	return xReturn;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800371e:	f000 f9a5 	bl	8003a6c <vPortEnterCritical>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800372a:	d102      	bne.n	8003732 <vQueueWaitForMessageRestricted+0x22>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373a:	d102      	bne.n	8003742 <vQueueWaitForMessageRestricted+0x32>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	649a      	str	r2, [r3, #72]	; 0x48
 8003742:	f000 f9a3 	bl	8003a8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3324      	adds	r3, #36	; 0x24
 8003752:	4618      	mov	r0, r3
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	f7ff f947 	bl	80029e8 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ff5e 	bl	800361c <prvUnlockQueue>
	}
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop

08003768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f103 0208 	add.w	r2, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f103 0208 	add.w	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 0208 	add.w	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
}
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop

080037a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
}
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	601a      	str	r2, [r3, #0]
}
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381e:	d103      	bne.n	8003828 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e00c      	b.n	8003842 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3308      	adds	r3, #8
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e002      	b.n	8003836 <vListInsert+0x2e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d9f6      	bls.n	8003830 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]
}
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6852      	ldr	r2, [r2, #4]
 8003892:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d103      	bne.n	80038ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3b04      	subs	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b04      	subs	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b04      	subs	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 80038f8:	4a0c      	ldr	r2, [pc, #48]	; (800392c <pxPortInitialiseStack+0x60>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b14      	subs	r3, #20
 8003902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3b04      	subs	r3, #4
 800390e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f06f 0202 	mvn.w	r2, #2
 8003916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b20      	subs	r3, #32
 800391c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	08003931 	.word	0x08003931

08003930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <prvTaskExitError+0x1c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393c:	d002      	beq.n	8003944 <prvTaskExitError+0x14>
 800393e:	f000 f8b7 	bl	8003ab0 <ulPortSetInterruptMask>
 8003942:	e7fe      	b.n	8003942 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8003944:	f000 f8b4 	bl	8003ab0 <ulPortSetInterruptMask>
	for( ;; );
 8003948:	e7fe      	b.n	8003948 <prvTaskExitError+0x18>
 800394a:	bf00      	nop
 800394c:	20000008 	.word	0x20000008

08003950 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <pxCurrentTCBConst2>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6808      	ldr	r0, [r1, #0]
 8003956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	f380 8809 	msr	PSP, r0
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f380 8811 	msr	BASEPRI, r0
 8003966:	4770      	bx	lr

08003968 <pxCurrentTCBConst2>:
 8003968:	20000498 	.word	0x20000498

0800396c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800396c:	4803      	ldr	r0, [pc, #12]	; (800397c <prvPortStartFirstTask+0x10>)
 800396e:	6800      	ldr	r0, [r0, #0]
 8003970:	6800      	ldr	r0, [r0, #0]
 8003972:	f380 8808 	msr	MSP, r0
 8003976:	b662      	cpsie	i
 8003978:	df00      	svc	0
 800397a:	bf00      	nop
 800397c:	e000ed08 	.word	0xe000ed08

08003980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <xPortStartScheduler+0xb4>)
 8003988:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <xPortStartScheduler+0xb8>)
 80039ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <xPortStartScheduler+0xbc>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039b4:	e009      	b.n	80039ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <xPortStartScheduler+0xbc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <xPortStartScheduler+0xbc>)
 80039be:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	dbef      	blt.n	80039b6 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039d6:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <xPortStartScheduler+0xbc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	021a      	lsls	r2, r3, #8
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <xPortStartScheduler+0xbc>)
 80039de:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <xPortStartScheduler+0xbc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039e8:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <xPortStartScheduler+0xbc>)
 80039ea:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <xPortStartScheduler+0xc0>)
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <xPortStartScheduler+0xc0>)
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80039fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <xPortStartScheduler+0xc0>)
 8003a02:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <xPortStartScheduler+0xc0>)
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003a0a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a0c:	f000 f89a 	bl	8003b44 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <xPortStartScheduler+0xc4>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a16:	f000 f8af 	bl	8003b78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <xPortStartScheduler+0xc8>)
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <xPortStartScheduler+0xc8>)
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003a24:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a26:	f7ff ffa1 	bl	800396c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	e000e400 	.word	0xe000e400
 8003a38:	20000594 	.word	0x20000594
 8003a3c:	20000598 	.word	0x20000598
 8003a40:	e000ed20 	.word	0xe000ed20
 8003a44:	20000008 	.word	0x20000008
 8003a48:	e000ef34 	.word	0xe000ef34

08003a4c <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <vPortYield+0x1c>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8003a58:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003a5c:	f3bf 8f6f 	isb	sy
}
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8003a70:	f000 f81e 	bl	8003ab0 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <vPortEnterCritical+0x1c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <vPortEnterCritical+0x1c>)
 8003a7c:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8003a7e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003a82:	f3bf 8f6f 	isb	sy
}
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000008 	.word	0x20000008

08003a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <vPortExitCritical+0x20>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <vPortExitCritical+0x20>)
 8003a98:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <vPortExitCritical+0x20>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f000 f80e 	bl	8003ac4 <vPortClearInterruptMask>
	}
}
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000008 	.word	0x20000008

08003ab0 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8003ab0:	f3ef 8011 	mrs	r0, BASEPRI
 8003ab4:	f04f 0150 	mov.w	r1, #80	; 0x50
 8003ab8:	f381 8811 	msr	BASEPRI, r1
 8003abc:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bf00      	nop

08003ac4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8003ac4:	f380 8811 	msr	BASEPRI, r0
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop

08003acc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003acc:	f3ef 8009 	mrs	r0, PSP
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <pxCurrentTCBConst>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f01e 0f10 	tst.w	lr, #16
 8003ad8:	bf08      	it	eq
 8003ada:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ade:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae2:	6010      	str	r0, [r2, #0]
 8003ae4:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ae8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003aec:	f380 8811 	msr	BASEPRI, r0
 8003af0:	f7fe feca 	bl	8002888 <vTaskSwitchContext>
 8003af4:	f04f 0000 	mov.w	r0, #0
 8003af8:	f380 8811 	msr	BASEPRI, r0
 8003afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	6808      	ldr	r0, [r1, #0]
 8003b04:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b08:	f01e 0f10 	tst.w	lr, #16
 8003b0c:	bf08      	it	eq
 8003b0e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b12:	f380 8809 	msr	PSP, r0
 8003b16:	4770      	bx	lr

08003b18 <pxCurrentTCBConst>:
 8003b18:	20000498 	.word	0x20000498

08003b1c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003b20:	f7ff ffc6 	bl	8003ab0 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b24:	f7fe fdda 	bl	80026dc <xTaskIncrementTick>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b2e:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <SysTick_Handler+0x24>)
 8003b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7ff ffc4 	bl	8003ac4 <vPortClearInterruptMask>
}
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8003b48:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <vPortSetupTimerInterrupt+0x24>)
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <vPortSetupTimerInterrupt+0x28>)
 8003b4c:	6811      	ldr	r1, [r2, #0]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <vPortSetupTimerInterrupt+0x2c>)
 8003b50:	fba2 0201 	umull	r0, r2, r2, r1
 8003b54:	0992      	lsrs	r2, r2, #6
 8003b56:	3a01      	subs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <vPortSetupTimerInterrupt+0x30>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
}
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e014 	.word	0xe000e014
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	10624dd3 	.word	0x10624dd3
 8003b74:	e000e010 	.word	0xe000e010

08003b78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b88 <vPortEnableVFP+0x10>
 8003b7c:	6801      	ldr	r1, [r0, #0]
 8003b7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b82:	6001      	str	r1, [r0, #0]
 8003b84:	4770      	bx	lr
 8003b86:	0000      	.short	0x0000
 8003b88:	e000ed88 	.word	0xe000ed88

08003b8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003b92:	f3ef 8305 	mrs	r3, IPSR
 8003b96:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	d90c      	bls.n	8003bb8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <vPortValidateInterruptPriority+0x48>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <vPortValidateInterruptPriority+0x4c>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d202      	bcs.n	8003bb8 <vPortValidateInterruptPriority+0x2c>
 8003bb2:	f7ff ff7d 	bl	8003ab0 <ulPortSetInterruptMask>
 8003bb6:	e7fe      	b.n	8003bb6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <vPortValidateInterruptPriority+0x50>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <vPortValidateInterruptPriority+0x54>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d902      	bls.n	8003bce <vPortValidateInterruptPriority+0x42>
 8003bc8:	f7ff ff72 	bl	8003ab0 <ulPortSetInterruptMask>
 8003bcc:	e7fe      	b.n	8003bcc <vPortValidateInterruptPriority+0x40>
	}
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	e000e3f0 	.word	0xe000e3f0
 8003bd8:	20000594 	.word	0x20000594
 8003bdc:	e000ed0c 	.word	0xe000ed0c
 8003be0:	20000598 	.word	0x20000598

08003be4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003bee:	f000 fa45 	bl	800407c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <xTimerCreateTimerTask+0x4c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00f      	beq.n	8003c1a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	480a      	ldr	r0, [pc, #40]	; (8003c34 <xTimerCreateTimerTask+0x50>)
 8003c0c:	490a      	ldr	r1, [pc, #40]	; (8003c38 <xTimerCreateTimerTask+0x54>)
 8003c0e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c12:	2300      	movs	r3, #0
 8003c14:	f7fe fa42 	bl	800209c <xTaskGenericCreate>
 8003c18:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <xTimerCreateTimerTask+0x42>
 8003c20:	f7ff ff46 	bl	8003ab0 <ulPortSetInterruptMask>
 8003c24:	e7fe      	b.n	8003c24 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8003c26:	687b      	ldr	r3, [r7, #4]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200005cc 	.word	0x200005cc
 8003c34:	08003d39 	.word	0x08003d39
 8003c38:	080072c0 	.word	0x080072c0

08003c3c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <xTimerGenericCommand+0x88>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d030      	beq.n	8003cb8 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11c      	bne.n	8003ca2 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c68:	f7ff f912 	bl	8002e90 <xTaskGetSchedulerState>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10b      	bne.n	8003c8a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <xTimerGenericCommand+0x88>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	f107 0310 	add.w	r3, r7, #16
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c80:	2300      	movs	r3, #0
 8003c82:	f7ff fa55 	bl	8003130 <xQueueGenericSend>
 8003c86:	61f8      	str	r0, [r7, #28]
 8003c88:	e016      	b.n	8003cb8 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <xTimerGenericCommand+0x88>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	f107 0310 	add.w	r3, r7, #16
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	2200      	movs	r2, #0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f7ff fa49 	bl	8003130 <xQueueGenericSend>
 8003c9e:	61f8      	str	r0, [r7, #28]
 8003ca0:	e00a      	b.n	8003cb8 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <xTimerGenericCommand+0x88>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f107 0310 	add.w	r3, r7, #16
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f7ff faed 	bl	8003290 <xQueueGenericSendFromISR>
 8003cb6:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200005cc 	.word	0x200005cc

08003cc8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cd2:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <prvProcessExpiredTimer+0x6c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fdc9 	bl	8003878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d11b      	bne.n	8003d26 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f000 f8a9 	bl	8003e54 <prvInsertTimerInActiveList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d10e      	bne.n	8003d26 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	2100      	movs	r1, #0
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	f7ff ff92 	bl	8003c3c <xTimerGenericCommand>
 8003d18:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <prvProcessExpiredTimer+0x5e>
 8003d20:	f7ff fec6 	bl	8003ab0 <ulPortSetInterruptMask>
 8003d24:	e7fe      	b.n	8003d24 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	4798      	blx	r3
}
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	200005c4 	.word	0x200005c4

08003d38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f83f 	bl	8003dc8 <prvGetNextExpireTime>
 8003d4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	4619      	mov	r1, r3
 8003d52:	f000 f803 	bl	8003d5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d56:	f000 f8bf 	bl	8003ed8 <prvProcessReceivedCommands>
	}
 8003d5a:	e7f1      	b.n	8003d40 <prvTimerTask+0x8>

08003d5c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d66:	f7fe fc13 	bl	8002590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f84e 	bl	8003e10 <prvSampleTimeNow>
 8003d74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11e      	bne.n	8003dba <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <prvProcessTimerOrBlockTask+0x3c>
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d806      	bhi.n	8003d98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d8a:	f7fe fc0f 	bl	80025ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	f7ff ff99 	bl	8003cc8 <prvProcessExpiredTimer>
 8003d96:	e012      	b.n	8003dbe <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <prvProcessTimerOrBlockTask+0x68>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1acb      	subs	r3, r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7ff fcb3 	bl	8003710 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8003daa:	f7fe fbff 	bl	80025ac <xTaskResumeAll>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8003db4:	f7ff fe4a 	bl	8003a4c <vPortYield>
 8003db8:	e001      	b.n	8003dbe <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8003dba:	f7fe fbf7 	bl	80025ac <xTaskResumeAll>
		}
	}
}
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	200005cc 	.word	0x200005cc

08003dc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <prvGetNextExpireTime+0x44>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2300      	movne	r3, #0
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <prvGetNextExpireTime+0x44>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e001      	b.n	8003dfe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	200005c4 	.word	0x200005c4

08003e10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e18:	f7fe fc4e 	bl	80026b8 <xTaskGetTickCount>
 8003e1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <prvSampleTimeNow+0x40>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d208      	bcs.n	8003e3a <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <prvSampleTimeNow+0x40>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f8cb 	bl	8003fc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e002      	b.n	8003e40 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <prvSampleTimeNow+0x40>)
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003e46:	68fb      	ldr	r3, [r7, #12]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	200005d0 	.word	0x200005d0

08003e54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d812      	bhi.n	8003ea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	1ad2      	subs	r2, r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e01b      	b.n	8003ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <prvInsertTimerInActiveList+0x7c>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7ff fcb5 	bl	8003808 <vListInsert>
 8003e9e:	e012      	b.n	8003ec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d206      	bcs.n	8003eb6 <prvInsertTimerInActiveList+0x62>
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e007      	b.n	8003ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <prvInsertTimerInActiveList+0x80>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f7ff fca1 	bl	8003808 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ec6:	697b      	ldr	r3, [r7, #20]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	200005c8 	.word	0x200005c8
 8003ed4:	200005c4 	.word	0x200005c4

08003ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ede:	e060      	b.n	8003fa2 <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fcc1 	bl	8003878 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff89 	bl	8003e10 <prvSampleTimeNow>
 8003efe:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d84c      	bhi.n	8003fa0 <prvProcessReceivedCommands+0xc8>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <prvProcessReceivedCommands+0x34>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003fa1 	.word	0x08003fa1
 8003f14:	08003f6f 	.word	0x08003f6f
 8003f18:	08003f99 	.word	0x08003f99
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	69f8      	ldr	r0, [r7, #28]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	f7ff ff92 	bl	8003e54 <prvInsertTimerInActiveList>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d11a      	bne.n	8003f6c <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	69f8      	ldr	r0, [r7, #28]
 8003f3c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d112      	bne.n	8003f6c <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	9200      	str	r2, [sp, #0]
 8003f52:	69f8      	ldr	r0, [r7, #28]
 8003f54:	2100      	movs	r1, #0
 8003f56:	461a      	mov	r2, r3
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f7ff fe6f 	bl	8003c3c <xTimerGenericCommand>
 8003f5e:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <prvProcessReceivedCommands+0x94>
 8003f66:	f7ff fda3 	bl	8003ab0 <ulPortSetInterruptMask>
 8003f6a:	e7fe      	b.n	8003f6a <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 8003f6c:	e019      	b.n	8003fa2 <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <prvProcessReceivedCommands+0xaa>
 8003f7c:	f7ff fd98 	bl	8003ab0 <ulPortSetInterruptMask>
 8003f80:	e7fe      	b.n	8003f80 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4413      	add	r3, r2
 8003f8a:	69f8      	ldr	r0, [r7, #28]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f7ff ff5f 	bl	8003e54 <prvInsertTimerInActiveList>
				break;
 8003f96:	e004      	b.n	8003fa2 <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8003f98:	69f8      	ldr	r0, [r7, #28]
 8003f9a:	f000 fa97 	bl	80044cc <vPortFree>
				break;
 8003f9e:	e000      	b.n	8003fa2 <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 8003fa0:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <prvProcessReceivedCommands+0xec>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f7ff f9d7 	bl	8003364 <xQueueGenericReceive>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d191      	bne.n	8003ee0 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200005cc 	.word	0x200005cc

08003fc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	; 0x28
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fd0:	e03d      	b.n	800404e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fd2:	4b28      	ldr	r3, [pc, #160]	; (8004074 <prvSwitchTimerLists+0xac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <prvSwitchTimerLists+0xac>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fc44 	bl	8003878 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	69b8      	ldr	r0, [r7, #24]
 8003ff6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d126      	bne.n	800404e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	429a      	cmp	r2, r3
 8004010:	d90e      	bls.n	8004030 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <prvSwitchTimerLists+0xac>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	3304      	adds	r3, #4
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7ff fbed 	bl	8003808 <vListInsert>
 800402e:	e00e      	b.n	800404e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	69b8      	ldr	r0, [r7, #24]
 8004036:	2100      	movs	r1, #0
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	2300      	movs	r3, #0
 800403c:	f7ff fdfe 	bl	8003c3c <xTimerGenericCommand>
 8004040:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <prvSwitchTimerLists+0x86>
 8004048:	f7ff fd32 	bl	8003ab0 <ulPortSetInterruptMask>
 800404c:	e7fe      	b.n	800404c <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <prvSwitchTimerLists+0xac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1bc      	bne.n	8003fd2 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <prvSwitchTimerLists+0xac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <prvSwitchTimerLists+0xb0>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <prvSwitchTimerLists+0xac>)
 8004064:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004066:	4b04      	ldr	r3, [pc, #16]	; (8004078 <prvSwitchTimerLists+0xb0>)
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]
}
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	200005c4 	.word	0x200005c4
 8004078:	200005c8 	.word	0x200005c8

0800407c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004080:	f7ff fcf4 	bl	8003a6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <prvCheckForValidListAndQueue+0x40>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 800408c:	480c      	ldr	r0, [pc, #48]	; (80040c0 <prvCheckForValidListAndQueue+0x44>)
 800408e:	f7ff fb6b 	bl	8003768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004092:	480c      	ldr	r0, [pc, #48]	; (80040c4 <prvCheckForValidListAndQueue+0x48>)
 8004094:	f7ff fb68 	bl	8003768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <prvCheckForValidListAndQueue+0x4c>)
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <prvCheckForValidListAndQueue+0x44>)
 800409c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <prvCheckForValidListAndQueue+0x50>)
 80040a0:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <prvCheckForValidListAndQueue+0x48>)
 80040a2:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 80040a4:	200a      	movs	r0, #10
 80040a6:	210c      	movs	r1, #12
 80040a8:	2200      	movs	r2, #0
 80040aa:	f7fe ffff 	bl	80030ac <xQueueGenericCreate>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b02      	ldr	r3, [pc, #8]	; (80040bc <prvCheckForValidListAndQueue+0x40>)
 80040b2:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 80040b4:	f7ff fcea 	bl	8003a8c <vPortExitCritical>
}
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200005cc 	.word	0x200005cc
 80040c0:	2000059c 	.word	0x2000059c
 80040c4:	200005b0 	.word	0x200005b0
 80040c8:	200005c4 	.word	0x200005c4
 80040cc:	200005c8 	.word	0x200005c8

080040d0 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <FreeRTOS_CLIRegisterCommand+0x18>
 80040e2:	f7ff fce5 	bl	8003ab0 <ulPortSetInterruptMask>
 80040e6:	e7fe      	b.n	80040e6 <FreeRTOS_CLIRegisterCommand+0x16>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80040e8:	2008      	movs	r0, #8
 80040ea:	f000 f963 	bl	80043b4 <pvPortMalloc>
 80040ee:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <FreeRTOS_CLIRegisterCommand+0x2c>
 80040f6:	f7ff fcdb 	bl	8003ab0 <ulPortSetInterruptMask>
 80040fa:	e7fe      	b.n	80040fa <FreeRTOS_CLIRegisterCommand+0x2a>

	if( pxNewListItem != NULL )
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <FreeRTOS_CLIRegisterCommand+0x58>
	{
		taskENTER_CRITICAL();
 8004102:	f7ff fcb3 	bl	8003a6c <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <FreeRTOS_CLIRegisterCommand+0x64>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <FreeRTOS_CLIRegisterCommand+0x64>)
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 8004120:	f7ff fcb4 	bl	8003a8c <vPortExitCritical>

		xReturn = pdPASS;
 8004124:	2301      	movs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004128:	68fb      	ldr	r3, [r7, #12]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000014 	.word	0x20000014

08004138 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
portBASE_TYPE xReturn = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8004148:	4b3a      	ldr	r3, [pc, #232]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d141      	bne.n	80041d4 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004150:	4b38      	ldr	r3, [pc, #224]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004152:	4a39      	ldr	r2, [pc, #228]	; (8004238 <FreeRTOS_CLIProcessCommand+0x100>)
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e039      	b.n	80041cc <FreeRTOS_CLIProcessCommand+0x94>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004162:	69b8      	ldr	r0, [r7, #24]
 8004164:	f002 fe3a 	bl	8006ddc <strlen>
 8004168:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	4413      	add	r3, r2
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b25b      	sxtb	r3, r3
 8004174:	2b20      	cmp	r3, #32
 8004176:	d005      	beq.n	8004184 <FreeRTOS_CLIProcessCommand+0x4c>
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4413      	add	r3, r2
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11e      	bne.n	80041c2 <FreeRTOS_CLIProcessCommand+0x8a>
			{
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	69b9      	ldr	r1, [r7, #24]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	f002 fe57 	bl	8006e3c <strncmp>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <FreeRTOS_CLIProcessCommand+0x8a>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8004194:	4b27      	ldr	r3, [pc, #156]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	7b1b      	ldrb	r3, [r3, #12]
 800419c:	b25b      	sxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db0e      	blt.n	80041c0 <FreeRTOS_CLIProcessCommand+0x88>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f8d8 	bl	8004358 <prvGetNumberOfParameters>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	7b1b      	ldrb	r3, [r3, #12]
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d002      	beq.n	80041c0 <FreeRTOS_CLIProcessCommand+0x88>
						{
							xReturn = pdFALSE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 80041be:	e009      	b.n	80041d4 <FreeRTOS_CLIProcessCommand+0x9c>
 80041c0:	e008      	b.n	80041d4 <FreeRTOS_CLIProcessCommand+0x9c>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1c1      	bne.n	8004158 <FreeRTOS_CLIProcessCommand+0x20>
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <FreeRTOS_CLIProcessCommand+0xbc>
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d108      	bne.n	80041f4 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80041e2:	68b8      	ldr	r0, [r7, #8]
 80041e4:	4915      	ldr	r1, [pc, #84]	; (800423c <FreeRTOS_CLIProcessCommand+0x104>)
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	f002 fe82 	bl	8006ef0 <strncpy>
		pxCommand = NULL;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e01a      	b.n	800422a <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00f      	beq.n	800421c <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	68b8      	ldr	r0, [r7, #8]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4798      	blx	r3
 800420c:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8004214:	4b07      	ldr	r3, [pc, #28]	; (8004234 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e006      	b.n	800422a <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( ( char * ) pcWriteBuffer, ( const char * const ) "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800421c:	68b8      	ldr	r0, [r7, #8]
 800421e:	4908      	ldr	r1, [pc, #32]	; (8004240 <FreeRTOS_CLIProcessCommand+0x108>)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	f002 fe65 	bl	8006ef0 <strncpy>
		xReturn = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800422a:	69fb      	ldr	r3, [r7, #28]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200005d4 	.word	0x200005d4
 8004238:	2000000c 	.word	0x2000000c
 800423c:	08007300 	.word	0x08007300
 8004240:	08007358 	.word	0x08007358

08004244 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const int8_t *FreeRTOS_CLIGetParameter( const int8_t *pcCommandString, unsigned portBASE_TYPE uxWantedParameter, portBASE_TYPE *pxParameterStringLength )
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
unsigned portBASE_TYPE uxParametersFound = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
const int8_t *pcReturn = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 800425e:	e041      	b.n	80042e4 <FreeRTOS_CLIGetParameter+0xa0>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004260:	e002      	b.n	8004268 <FreeRTOS_CLIGetParameter+0x24>
		{
			pcCommandString++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3301      	adds	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <FreeRTOS_CLIGetParameter+0x36>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b25b      	sxtb	r3, r3
 8004276:	2b20      	cmp	r3, #32
 8004278:	d1f3      	bne.n	8004262 <FreeRTOS_CLIGetParameter+0x1e>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800427a:	e002      	b.n	8004282 <FreeRTOS_CLIGetParameter+0x3e>
		{
			pcCommandString++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <FreeRTOS_CLIGetParameter+0x50>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	d0f3      	beq.n	800427c <FreeRTOS_CLIGetParameter+0x38>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d022      	beq.n	80042e2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3301      	adds	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d11c      	bne.n	80042e4 <FreeRTOS_CLIGetParameter+0xa0>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80042ae:	e007      	b.n	80042c0 <FreeRTOS_CLIGetParameter+0x7c>
				{
					( *pxParameterStringLength )++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <FreeRTOS_CLIGetParameter+0x8e>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b25b      	sxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d1ee      	bne.n	80042b0 <FreeRTOS_CLIGetParameter+0x6c>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <FreeRTOS_CLIGetParameter+0x9c>
				{
					pcReturn = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
				}

				break;
 80042de:	e005      	b.n	80042ec <FreeRTOS_CLIGetParameter+0xa8>
 80042e0:	e004      	b.n	80042ec <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 80042e2:	e003      	b.n	80042ec <FreeRTOS_CLIGetParameter+0xa8>
unsigned portBASE_TYPE uxParametersFound = 0;
const int8_t *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3b9      	bcc.n	8004260 <FreeRTOS_CLIGetParameter+0x1c>
		{
			break;
		}
	}

	return pcReturn;
 80042ec:	693b      	ldr	r3, [r7, #16]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop

080042fc <prvHelpCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
signed portBASE_TYPE xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <prvHelpCommand+0x54>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <prvHelpCommand+0x54>)
 8004312:	4a10      	ldr	r2, [pc, #64]	; (8004354 <prvHelpCommand+0x58>)
 8004314:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8004316:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <prvHelpCommand+0x54>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	4619      	mov	r1, r3
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	f002 fde4 	bl	8006ef0 <strncpy>
	pxCommand = pxCommand->pxNext;
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <prvHelpCommand+0x54>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <prvHelpCommand+0x54>)
 8004330:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <prvHelpCommand+0x54>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e001      	b.n	8004344 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004344:	697b      	ldr	r3, [r7, #20]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200005d8 	.word	0x200005d8
 8004354:	2000000c 	.word	0x2000000c

08004358 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8004368:	e012      	b.n	8004390 <prvGetNumberOfParameters+0x38>
	{
		if( ( *pcCommandString ) == ' ' )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	b25b      	sxtb	r3, r3
 8004370:	2b20      	cmp	r3, #32
 8004372:	d108      	bne.n	8004386 <prvGetNumberOfParameters+0x2e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d007      	beq.n	800438a <prvGetNumberOfParameters+0x32>
			{
				cParameters++;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3301      	adds	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	e001      	b.n	800438a <prvGetNumberOfParameters+0x32>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3301      	adds	r3, #1
 800438e:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e8      	bne.n	800436a <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <prvGetNumberOfParameters+0x4c>
	{
		cParameters--;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	b25b      	sxtb	r3, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80043c0:	f7fe f8e6 	bl	8002590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <pvPortMalloc+0x108>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043cc:	f000 f8c8 	bl	8004560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043d0:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <pvPortMalloc+0x10c>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d163      	bne.n	80044a4 <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 80043e2:	2308      	movs	r3, #8
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	3308      	adds	r3, #8
 80043fc:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d04f      	beq.n	80044a4 <pvPortMalloc+0xf0>
 8004404:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <pvPortMalloc+0x110>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d84a      	bhi.n	80044a4 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800440e:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <pvPortMalloc+0x114>)
 8004410:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004412:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <pvPortMalloc+0x114>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004418:	e004      	b.n	8004424 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d203      	bcs.n	8004436 <pvPortMalloc+0x82>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f1      	bne.n	800441a <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <pvPortMalloc+0x108>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	429a      	cmp	r2, r3
 800443e:	d031      	beq.n	80044a4 <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2308      	movs	r3, #8
 8004446:	4413      	add	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	2308      	movs	r3, #8
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	429a      	cmp	r2, r3
 8004460:	d90f      	bls.n	8004482 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1ad2      	subs	r2, r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800447c:	68b8      	ldr	r0, [r7, #8]
 800447e:	f000 f8bd 	bl	80045fc <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <pvPortMalloc+0x110>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <pvPortMalloc+0x110>)
 800448e:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <pvPortMalloc+0x10c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	431a      	orrs	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 80044a4:	f7fe f882 	bl	80025ac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80044ae:	f7fd fcf7 	bl	8001ea0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200131e4 	.word	0x200131e4
 80044c0:	200131e8 	.word	0x200131e8
 80044c4:	20000018 	.word	0x20000018
 80044c8:	200131dc 	.word	0x200131dc

080044cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d038      	beq.n	8004550 <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80044de:	2308      	movs	r3, #8
 80044e0:	425b      	negs	r3, r3
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <vPortFree+0x8c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <vPortFree+0x34>
 80044fa:	f7ff fad9 	bl	8003ab0 <ulPortSetInterruptMask>
 80044fe:	e7fe      	b.n	80044fe <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <vPortFree+0x42>
 8004508:	f7ff fad2 	bl	8003ab0 <ulPortSetInterruptMask>
 800450c:	e7fe      	b.n	800450c <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <vPortFree+0x8c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d019      	beq.n	8004550 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d115      	bne.n	8004550 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <vPortFree+0x8c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	43db      	mvns	r3, r3
 800452e:	401a      	ands	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004534:	f7fe f82c 	bl	8002590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	4b07      	ldr	r3, [pc, #28]	; (800455c <vPortFree+0x90>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	441a      	add	r2, r3
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <vPortFree+0x90>)
 8004544:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 8004546:	68b8      	ldr	r0, [r7, #8]
 8004548:	f000 f858 	bl	80045fc <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 800454c:	f7fe f82e 	bl	80025ac <xTaskResumeAll>
			}
		}
	}
}
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200131e8 	.word	0x200131e8
 800455c:	20000018 	.word	0x20000018

08004560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <prvHeapInit+0x84>)
 8004568:	f023 0307 	bic.w	r3, r3, #7
 800456c:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800456e:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <prvHeapInit+0x88>)
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004574:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <prvHeapInit+0x88>)
 8004576:	2200      	movs	r2, #0
 8004578:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 800457a:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <prvHeapInit+0x8c>)
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 8004582:	2308      	movs	r3, #8
 8004584:	425b      	negs	r3, r3
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <prvHeapInit+0x90>)
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <prvHeapInit+0x90>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <prvHeapInit+0x44>
 800459e:	f7ff fa87 	bl	8003ab0 <ulPortSetInterruptMask>
 80045a2:	e7fe      	b.n	80045a2 <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <prvHeapInit+0x90>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2200      	movs	r2, #0
 80045aa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <prvHeapInit+0x90>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <prvHeapInit+0x8c>)
 80045ba:	2308      	movs	r3, #8
 80045bc:	1ad2      	subs	r2, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <prvHeapInit+0x90>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvHeapInit+0x94>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	2308      	movs	r3, #8
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <prvHeapInit+0x94>)
 80045d4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <prvHeapInit+0x98>)
 80045d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045dc:	601a      	str	r2, [r3, #0]
}
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200005e4 	.word	0x200005e4
 80045e8:	200131dc 	.word	0x200131dc
 80045ec:	00012bf8 	.word	0x00012bf8
 80045f0:	200131e4 	.word	0x200131e4
 80045f4:	20000018 	.word	0x20000018
 80045f8:	200131e8 	.word	0x200131e8

080045fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <prvInsertBlockIntoFreeList+0xa8>)
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e002      	b.n	8004610 <prvInsertBlockIntoFreeList+0x14>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d3f7      	bcc.n	800460a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	441a      	add	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d108      	bne.n	800463e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	441a      	add	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	441a      	add	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d118      	bne.n	8004684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <prvInsertBlockIntoFreeList+0xac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d00d      	beq.n	800467a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	441a      	add	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e008      	b.n	800468c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <prvInsertBlockIntoFreeList+0xac>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e003      	b.n	800468c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d002      	beq.n	800469a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]
	}
}
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	200131dc 	.word	0x200131dc
 80046a8:	200131e4 	.word	0x200131e4

080046ac <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046ba:	d013      	beq.n	80046e4 <NVIC_PriorityGroupConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046c2:	d00f      	beq.n	80046e4 <NVIC_PriorityGroupConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80046ca:	d00b      	beq.n	80046e4 <NVIC_PriorityGroupConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d007      	beq.n	80046e4 <NVIC_PriorityGroupConfig+0x38>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046da:	d003      	beq.n	80046e4 <NVIC_PriorityGroupConfig+0x38>
 80046dc:	4806      	ldr	r0, [pc, #24]	; (80046f8 <NVIC_PriorityGroupConfig+0x4c>)
 80046de:	2173      	movs	r1, #115	; 0x73
 80046e0:	f7fd fbf2 	bl	8001ec8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80046e4:	4a05      	ldr	r2, [pc, #20]	; (80046fc <NVIC_PriorityGroupConfig+0x50>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f0:	60d3      	str	r3, [r2, #12]
}
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	080073a8 	.word	0x080073a8
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	2300      	movs	r3, #0
 800470e:	73bb      	strb	r3, [r7, #14]
 8004710:	230f      	movs	r3, #15
 8004712:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	78db      	ldrb	r3, [r3, #3]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <NVIC_Init+0x2c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d003      	beq.n	800472c <NVIC_Init+0x2c>
 8004724:	4830      	ldr	r0, [pc, #192]	; (80047e8 <NVIC_Init+0xe8>)
 8004726:	2187      	movs	r1, #135	; 0x87
 8004728:	f7fd fbce 	bl	8001ec8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b0f      	cmp	r3, #15
 8004732:	d903      	bls.n	800473c <NVIC_Init+0x3c>
 8004734:	482c      	ldr	r0, [pc, #176]	; (80047e8 <NVIC_Init+0xe8>)
 8004736:	2188      	movs	r1, #136	; 0x88
 8004738:	f7fd fbc6 	bl	8001ec8 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	2b0f      	cmp	r3, #15
 8004742:	d903      	bls.n	800474c <NVIC_Init+0x4c>
 8004744:	4828      	ldr	r0, [pc, #160]	; (80047e8 <NVIC_Init+0xe8>)
 8004746:	2189      	movs	r1, #137	; 0x89
 8004748:	f7fd fbbe 	bl	8001ec8 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	78db      	ldrb	r3, [r3, #3]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d037      	beq.n	80047c4 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004754:	4b25      	ldr	r3, [pc, #148]	; (80047ec <NVIC_Init+0xec>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	f1c3 0304 	rsb	r3, r3, #4
 8004768:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800476a:	7b7a      	ldrb	r2, [r7, #13]
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	fa42 f303 	asr.w	r3, r2, r3
 8004772:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	461a      	mov	r2, r3
 800477a:	7bbb      	ldrb	r3, [r7, #14]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	789a      	ldrb	r2, [r3, #2]
 8004786:	7b7b      	ldrb	r3, [r7, #13]
 8004788:	4013      	ands	r3, r2
 800478a:	b2da      	uxtb	r2, r3
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	4313      	orrs	r3, r2
 8004790:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004798:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <NVIC_Init+0xf0>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <NVIC_Init+0xf0>)
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	0952      	lsrs	r2, r2, #5
 80047ae:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	7809      	ldrb	r1, [r1, #0]
 80047b4:	f001 011f 	and.w	r1, r1, #31
 80047b8:	2001      	movs	r0, #1
 80047ba:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80047be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80047c2:	e00e      	b.n	80047e2 <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <NVIC_Init+0xf0>)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	7812      	ldrb	r2, [r2, #0]
 80047ca:	0952      	lsrs	r2, r2, #5
 80047cc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	7809      	ldrb	r1, [r1, #0]
 80047d2:	f001 011f 	and.w	r1, r1, #31
 80047d6:	2001      	movs	r0, #1
 80047d8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80047dc:	3220      	adds	r2, #32
 80047de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	080073a8 	.word	0x080073a8
 80047ec:	e000ed00 	.word	0xe000ed00
 80047f0:	e000e100 	.word	0xe000e100

080047f4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4b72      	ldr	r3, [pc, #456]	; (80049c8 <DMA_DeInit+0x1d4>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d03f      	beq.n	8004884 <DMA_DeInit+0x90>
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4b71      	ldr	r3, [pc, #452]	; (80049cc <DMA_DeInit+0x1d8>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d03b      	beq.n	8004884 <DMA_DeInit+0x90>
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <DMA_DeInit+0x1dc>)
 8004810:	429a      	cmp	r2, r3
 8004812:	d037      	beq.n	8004884 <DMA_DeInit+0x90>
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <DMA_DeInit+0x1e0>)
 8004818:	429a      	cmp	r2, r3
 800481a:	d033      	beq.n	8004884 <DMA_DeInit+0x90>
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	4b6e      	ldr	r3, [pc, #440]	; (80049d8 <DMA_DeInit+0x1e4>)
 8004820:	429a      	cmp	r2, r3
 8004822:	d02f      	beq.n	8004884 <DMA_DeInit+0x90>
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4b6d      	ldr	r3, [pc, #436]	; (80049dc <DMA_DeInit+0x1e8>)
 8004828:	429a      	cmp	r2, r3
 800482a:	d02b      	beq.n	8004884 <DMA_DeInit+0x90>
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4b6c      	ldr	r3, [pc, #432]	; (80049e0 <DMA_DeInit+0x1ec>)
 8004830:	429a      	cmp	r2, r3
 8004832:	d027      	beq.n	8004884 <DMA_DeInit+0x90>
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4b6b      	ldr	r3, [pc, #428]	; (80049e4 <DMA_DeInit+0x1f0>)
 8004838:	429a      	cmp	r2, r3
 800483a:	d023      	beq.n	8004884 <DMA_DeInit+0x90>
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <DMA_DeInit+0x1f4>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d01f      	beq.n	8004884 <DMA_DeInit+0x90>
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4b69      	ldr	r3, [pc, #420]	; (80049ec <DMA_DeInit+0x1f8>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d01b      	beq.n	8004884 <DMA_DeInit+0x90>
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4b68      	ldr	r3, [pc, #416]	; (80049f0 <DMA_DeInit+0x1fc>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d017      	beq.n	8004884 <DMA_DeInit+0x90>
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4b67      	ldr	r3, [pc, #412]	; (80049f4 <DMA_DeInit+0x200>)
 8004858:	429a      	cmp	r2, r3
 800485a:	d013      	beq.n	8004884 <DMA_DeInit+0x90>
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <DMA_DeInit+0x204>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d00f      	beq.n	8004884 <DMA_DeInit+0x90>
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	4b65      	ldr	r3, [pc, #404]	; (80049fc <DMA_DeInit+0x208>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d00b      	beq.n	8004884 <DMA_DeInit+0x90>
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4b64      	ldr	r3, [pc, #400]	; (8004a00 <DMA_DeInit+0x20c>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d007      	beq.n	8004884 <DMA_DeInit+0x90>
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <DMA_DeInit+0x210>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d003      	beq.n	8004884 <DMA_DeInit+0x90>
 800487c:	4862      	ldr	r0, [pc, #392]	; (8004a08 <DMA_DeInit+0x214>)
 800487e:	21bf      	movs	r1, #191	; 0xbf
 8004880:	f7fd fb22 	bl	8001ec8 <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 0201 	bic.w	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2221      	movs	r2, #33	; 0x21
 80048b2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4b44      	ldr	r3, [pc, #272]	; (80049c8 <DMA_DeInit+0x1d4>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d103      	bne.n	80048c4 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <DMA_DeInit+0x218>)
 80048be:	223d      	movs	r2, #61	; 0x3d
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	e07e      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4b41      	ldr	r3, [pc, #260]	; (80049cc <DMA_DeInit+0x1d8>)
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d104      	bne.n	80048d6 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80048cc:	4b4f      	ldr	r3, [pc, #316]	; (8004a0c <DMA_DeInit+0x218>)
 80048ce:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	e075      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <DMA_DeInit+0x1dc>)
 80048da:	429a      	cmp	r2, r3
 80048dc:	d104      	bne.n	80048e8 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80048de:	4b4b      	ldr	r3, [pc, #300]	; (8004a0c <DMA_DeInit+0x218>)
 80048e0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80048e4:	609a      	str	r2, [r3, #8]
 80048e6:	e06c      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4b3a      	ldr	r3, [pc, #232]	; (80049d4 <DMA_DeInit+0x1e0>)
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d104      	bne.n	80048fa <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80048f0:	4b46      	ldr	r3, [pc, #280]	; (8004a0c <DMA_DeInit+0x218>)
 80048f2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e063      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <DMA_DeInit+0x1e4>)
 80048fe:	429a      	cmp	r2, r3
 8004900:	d103      	bne.n	800490a <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8004902:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <DMA_DeInit+0x218>)
 8004904:	4a42      	ldr	r2, [pc, #264]	; (8004a10 <DMA_DeInit+0x21c>)
 8004906:	60da      	str	r2, [r3, #12]
 8004908:	e05b      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4b33      	ldr	r3, [pc, #204]	; (80049dc <DMA_DeInit+0x1e8>)
 800490e:	429a      	cmp	r2, r3
 8004910:	d103      	bne.n	800491a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8004912:	4b3e      	ldr	r3, [pc, #248]	; (8004a0c <DMA_DeInit+0x218>)
 8004914:	4a3f      	ldr	r2, [pc, #252]	; (8004a14 <DMA_DeInit+0x220>)
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e053      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <DMA_DeInit+0x1ec>)
 800491e:	429a      	cmp	r2, r3
 8004920:	d103      	bne.n	800492a <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8004922:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <DMA_DeInit+0x218>)
 8004924:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <DMA_DeInit+0x224>)
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e04b      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <DMA_DeInit+0x1f0>)
 800492e:	429a      	cmp	r2, r3
 8004930:	d104      	bne.n	800493c <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8004932:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <DMA_DeInit+0x218>)
 8004934:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	e042      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <DMA_DeInit+0x1f4>)
 8004940:	429a      	cmp	r2, r3
 8004942:	d103      	bne.n	800494c <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8004944:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <DMA_DeInit+0x228>)
 8004946:	223d      	movs	r2, #61	; 0x3d
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	e03a      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4b27      	ldr	r3, [pc, #156]	; (80049ec <DMA_DeInit+0x1f8>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d104      	bne.n	800495e <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <DMA_DeInit+0x228>)
 8004956:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	e031      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <DMA_DeInit+0x1fc>)
 8004962:	429a      	cmp	r2, r3
 8004964:	d104      	bne.n	8004970 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <DMA_DeInit+0x228>)
 8004968:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800496c:	609a      	str	r2, [r3, #8]
 800496e:	e028      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <DMA_DeInit+0x200>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d104      	bne.n	8004982 <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8004978:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <DMA_DeInit+0x228>)
 800497a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	e01f      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4b1c      	ldr	r3, [pc, #112]	; (80049f8 <DMA_DeInit+0x204>)
 8004986:	429a      	cmp	r2, r3
 8004988:	d103      	bne.n	8004992 <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <DMA_DeInit+0x228>)
 800498c:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <DMA_DeInit+0x21c>)
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e017      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <DMA_DeInit+0x208>)
 8004996:	429a      	cmp	r2, r3
 8004998:	d103      	bne.n	80049a2 <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <DMA_DeInit+0x228>)
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <DMA_DeInit+0x220>)
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	e00f      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <DMA_DeInit+0x20c>)
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d103      	bne.n	80049b2 <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80049aa:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <DMA_DeInit+0x228>)
 80049ac:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <DMA_DeInit+0x224>)
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e007      	b.n	80049c2 <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <DMA_DeInit+0x210>)
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d103      	bne.n	80049c2 <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80049ba:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <DMA_DeInit+0x228>)
 80049bc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80049c0:	60da      	str	r2, [r3, #12]
    }
  }
}
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40026010 	.word	0x40026010
 80049cc:	40026028 	.word	0x40026028
 80049d0:	40026040 	.word	0x40026040
 80049d4:	40026058 	.word	0x40026058
 80049d8:	40026070 	.word	0x40026070
 80049dc:	40026088 	.word	0x40026088
 80049e0:	400260a0 	.word	0x400260a0
 80049e4:	400260b8 	.word	0x400260b8
 80049e8:	40026410 	.word	0x40026410
 80049ec:	40026428 	.word	0x40026428
 80049f0:	40026440 	.word	0x40026440
 80049f4:	40026458 	.word	0x40026458
 80049f8:	40026470 	.word	0x40026470
 80049fc:	40026488 	.word	0x40026488
 8004a00:	400264a0 	.word	0x400264a0
 8004a04:	400264b8 	.word	0x400264b8
 8004a08:	080073f0 	.word	0x080073f0
 8004a0c:	40026000 	.word	0x40026000
 8004a10:	2000003d 	.word	0x2000003d
 8004a14:	20000f40 	.word	0x20000f40
 8004a18:	203d0000 	.word	0x203d0000
 8004a1c:	40026400 	.word	0x40026400

08004a20 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4b98      	ldr	r3, [pc, #608]	; (8004c94 <DMA_Init+0x274>)
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d040      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4b97      	ldr	r3, [pc, #604]	; (8004c98 <DMA_Init+0x278>)
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d03c      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4b96      	ldr	r3, [pc, #600]	; (8004c9c <DMA_Init+0x27c>)
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d038      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4b95      	ldr	r3, [pc, #596]	; (8004ca0 <DMA_Init+0x280>)
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d034      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4b94      	ldr	r3, [pc, #592]	; (8004ca4 <DMA_Init+0x284>)
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d030      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4b93      	ldr	r3, [pc, #588]	; (8004ca8 <DMA_Init+0x288>)
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d02c      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4b92      	ldr	r3, [pc, #584]	; (8004cac <DMA_Init+0x28c>)
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d028      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4b91      	ldr	r3, [pc, #580]	; (8004cb0 <DMA_Init+0x290>)
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d024      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4b90      	ldr	r3, [pc, #576]	; (8004cb4 <DMA_Init+0x294>)
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d020      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4b8f      	ldr	r3, [pc, #572]	; (8004cb8 <DMA_Init+0x298>)
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d01c      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4b8e      	ldr	r3, [pc, #568]	; (8004cbc <DMA_Init+0x29c>)
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d018      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4b8d      	ldr	r3, [pc, #564]	; (8004cc0 <DMA_Init+0x2a0>)
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d014      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4b8c      	ldr	r3, [pc, #560]	; (8004cc4 <DMA_Init+0x2a4>)
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d010      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4b8b      	ldr	r3, [pc, #556]	; (8004cc8 <DMA_Init+0x2a8>)
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d00c      	beq.n	8004ab8 <DMA_Init+0x98>
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4b8a      	ldr	r3, [pc, #552]	; (8004ccc <DMA_Init+0x2ac>)
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d008      	beq.n	8004ab8 <DMA_Init+0x98>
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4b89      	ldr	r3, [pc, #548]	; (8004cd0 <DMA_Init+0x2b0>)
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d004      	beq.n	8004ab8 <DMA_Init+0x98>
 8004aae:	4889      	ldr	r0, [pc, #548]	; (8004cd4 <DMA_Init+0x2b4>)
 8004ab0:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8004ab4:	f7fd fa08 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d027      	beq.n	8004b10 <DMA_Init+0xf0>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac8:	d022      	beq.n	8004b10 <DMA_Init+0xf0>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad2:	d01d      	beq.n	8004b10 <DMA_Init+0xf0>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004adc:	d018      	beq.n	8004b10 <DMA_Init+0xf0>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae6:	d013      	beq.n	8004b10 <DMA_Init+0xf0>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004af0:	d00e      	beq.n	8004b10 <DMA_Init+0xf0>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004afa:	d009      	beq.n	8004b10 <DMA_Init+0xf0>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004b04:	d004      	beq.n	8004b10 <DMA_Init+0xf0>
 8004b06:	4873      	ldr	r0, [pc, #460]	; (8004cd4 <DMA_Init+0x2b4>)
 8004b08:	f240 113d 	movw	r1, #317	; 0x13d
 8004b0c:	f7fd f9dc 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00c      	beq.n	8004b32 <DMA_Init+0x112>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d008      	beq.n	8004b32 <DMA_Init+0x112>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d004      	beq.n	8004b32 <DMA_Init+0x112>
 8004b28:	486a      	ldr	r0, [pc, #424]	; (8004cd4 <DMA_Init+0x2b4>)
 8004b2a:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004b2e:	f7fd f9cb 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <DMA_Init+0x124>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d304      	bcc.n	8004b4e <DMA_Init+0x12e>
 8004b44:	4863      	ldr	r0, [pc, #396]	; (8004cd4 <DMA_Init+0x2b4>)
 8004b46:	f240 113f 	movw	r1, #319	; 0x13f
 8004b4a:	f7fd f9bd 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b56:	d008      	beq.n	8004b6a <DMA_Init+0x14a>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <DMA_Init+0x14a>
 8004b60:	485c      	ldr	r0, [pc, #368]	; (8004cd4 <DMA_Init+0x2b4>)
 8004b62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b66:	f7fd f9af 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b72:	d008      	beq.n	8004b86 <DMA_Init+0x166>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <DMA_Init+0x166>
 8004b7c:	4855      	ldr	r0, [pc, #340]	; (8004cd4 <DMA_Init+0x2b4>)
 8004b7e:	f240 1141 	movw	r1, #321	; 0x141
 8004b82:	f7fd f9a1 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <DMA_Init+0x18c>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b96:	d009      	beq.n	8004bac <DMA_Init+0x18c>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	d004      	beq.n	8004bac <DMA_Init+0x18c>
 8004ba2:	484c      	ldr	r0, [pc, #304]	; (8004cd4 <DMA_Init+0x2b4>)
 8004ba4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004ba8:	f7fd f98e 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <DMA_Init+0x1b2>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d009      	beq.n	8004bd2 <DMA_Init+0x1b2>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc6:	d004      	beq.n	8004bd2 <DMA_Init+0x1b2>
 8004bc8:	4842      	ldr	r0, [pc, #264]	; (8004cd4 <DMA_Init+0x2b4>)
 8004bca:	f240 1143 	movw	r1, #323	; 0x143
 8004bce:	f7fd f97b 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <DMA_Init+0x1ce>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d004      	beq.n	8004bee <DMA_Init+0x1ce>
 8004be4:	483b      	ldr	r0, [pc, #236]	; (8004cd4 <DMA_Init+0x2b4>)
 8004be6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004bea:	f7fd f96d 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d013      	beq.n	8004c1e <DMA_Init+0x1fe>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d00e      	beq.n	8004c1e <DMA_Init+0x1fe>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c08:	d009      	beq.n	8004c1e <DMA_Init+0x1fe>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c12:	d004      	beq.n	8004c1e <DMA_Init+0x1fe>
 8004c14:	482f      	ldr	r0, [pc, #188]	; (8004cd4 <DMA_Init+0x2b4>)
 8004c16:	f240 1145 	movw	r1, #325	; 0x145
 8004c1a:	f7fd f955 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <DMA_Init+0x218>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d004      	beq.n	8004c38 <DMA_Init+0x218>
 8004c2e:	4829      	ldr	r0, [pc, #164]	; (8004cd4 <DMA_Init+0x2b4>)
 8004c30:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004c34:	f7fd f948 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d010      	beq.n	8004c62 <DMA_Init+0x242>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d00c      	beq.n	8004c62 <DMA_Init+0x242>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d008      	beq.n	8004c62 <DMA_Init+0x242>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d004      	beq.n	8004c62 <DMA_Init+0x242>
 8004c58:	481e      	ldr	r0, [pc, #120]	; (8004cd4 <DMA_Init+0x2b4>)
 8004c5a:	f240 1147 	movw	r1, #327	; 0x147
 8004c5e:	f7fd f933 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d036      	beq.n	8004cd8 <DMA_Init+0x2b8>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c72:	d031      	beq.n	8004cd8 <DMA_Init+0x2b8>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c7c:	d02c      	beq.n	8004cd8 <DMA_Init+0x2b8>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c86:	d027      	beq.n	8004cd8 <DMA_Init+0x2b8>
 8004c88:	4812      	ldr	r0, [pc, #72]	; (8004cd4 <DMA_Init+0x2b4>)
 8004c8a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c8e:	f7fd f91b 	bl	8001ec8 <assert_failed>
 8004c92:	e021      	b.n	8004cd8 <DMA_Init+0x2b8>
 8004c94:	40026010 	.word	0x40026010
 8004c98:	40026028 	.word	0x40026028
 8004c9c:	40026040 	.word	0x40026040
 8004ca0:	40026058 	.word	0x40026058
 8004ca4:	40026070 	.word	0x40026070
 8004ca8:	40026088 	.word	0x40026088
 8004cac:	400260a0 	.word	0x400260a0
 8004cb0:	400260b8 	.word	0x400260b8
 8004cb4:	40026410 	.word	0x40026410
 8004cb8:	40026428 	.word	0x40026428
 8004cbc:	40026440 	.word	0x40026440
 8004cc0:	40026458 	.word	0x40026458
 8004cc4:	40026470 	.word	0x40026470
 8004cc8:	40026488 	.word	0x40026488
 8004ccc:	400264a0 	.word	0x400264a0
 8004cd0:	400264b8 	.word	0x400264b8
 8004cd4:	080073f0 	.word	0x080073f0
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <DMA_Init+0x2e8>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce8:	d00e      	beq.n	8004d08 <DMA_Init+0x2e8>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf2:	d009      	beq.n	8004d08 <DMA_Init+0x2e8>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cfc:	d004      	beq.n	8004d08 <DMA_Init+0x2e8>
 8004cfe:	4828      	ldr	r0, [pc, #160]	; (8004da0 <DMA_Init+0x380>)
 8004d00:	f240 1149 	movw	r1, #329	; 0x149
 8004d04:	f7fd f8e0 	bl	8001ec8 <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <DMA_Init+0x384>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004d24:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004d30:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004d3c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004d48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	4313      	orrs	r3, r2
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]
}
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	080073f0 	.word	0x080073f0
 8004da4:	f01c803f 	.word	0xf01c803f

08004da8 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <DMA_Cmd+0xd4>)
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d040      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4b30      	ldr	r3, [pc, #192]	; (8004eec <DMA_Cmd+0xd8>)
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d03c      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <DMA_Cmd+0xdc>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d038      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <DMA_Cmd+0xe0>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d034      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <DMA_Cmd+0xe4>)
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d030      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4b2c      	ldr	r3, [pc, #176]	; (8004efc <DMA_Cmd+0xe8>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d02c      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <DMA_Cmd+0xec>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d028      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <DMA_Cmd+0xf0>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d024      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <DMA_Cmd+0xf4>)
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d020      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <DMA_Cmd+0xf8>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d01c      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <DMA_Cmd+0xfc>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d018      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <DMA_Cmd+0x100>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d014      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <DMA_Cmd+0x104>)
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d010      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <DMA_Cmd+0x108>)
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d00c      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <DMA_Cmd+0x10c>)
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d008      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <DMA_Cmd+0x110>)
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d004      	beq.n	8004eaa <DMA_Cmd+0x96>
 8004ea0:	4821      	ldr	r0, [pc, #132]	; (8004f28 <DMA_Cmd+0x114>)
 8004ea2:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ea6:	f7fd f80f 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <DMA_Cmd+0xac>
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d004      	beq.n	8004ec0 <DMA_Cmd+0xac>
 8004eb6:	481c      	ldr	r0, [pc, #112]	; (8004f28 <DMA_Cmd+0x114>)
 8004eb8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004ebc:	f7fd f804 	bl	8001ec8 <assert_failed>

  if (NewState != DISABLE)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e005      	b.n	8004ee0 <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f023 0201 	bic.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	601a      	str	r2, [r3, #0]
  }
}
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40026010 	.word	0x40026010
 8004eec:	40026028 	.word	0x40026028
 8004ef0:	40026040 	.word	0x40026040
 8004ef4:	40026058 	.word	0x40026058
 8004ef8:	40026070 	.word	0x40026070
 8004efc:	40026088 	.word	0x40026088
 8004f00:	400260a0 	.word	0x400260a0
 8004f04:	400260b8 	.word	0x400260b8
 8004f08:	40026410 	.word	0x40026410
 8004f0c:	40026428 	.word	0x40026428
 8004f10:	40026440 	.word	0x40026440
 8004f14:	40026458 	.word	0x40026458
 8004f18:	40026470 	.word	0x40026470
 8004f1c:	40026488 	.word	0x40026488
 8004f20:	400264a0 	.word	0x400264a0
 8004f24:	400264b8 	.word	0x400264b8
 8004f28:	080073f0 	.word	0x080073f0

08004f2c <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <DMA_SetCurrDataCounter+0xa4>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d040      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <DMA_SetCurrDataCounter+0xa8>)
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d03c      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <DMA_SetCurrDataCounter+0xac>)
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d038      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <DMA_SetCurrDataCounter+0xb0>)
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d034      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <DMA_SetCurrDataCounter+0xb4>)
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d030      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <DMA_SetCurrDataCounter+0xb8>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d02c      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	4b1f      	ldr	r3, [pc, #124]	; (8004fe8 <DMA_SetCurrDataCounter+0xbc>)
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d028      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <DMA_SetCurrDataCounter+0xc0>)
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d024      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <DMA_SetCurrDataCounter+0xc4>)
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d020      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <DMA_SetCurrDataCounter+0xc8>)
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d01c      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <DMA_SetCurrDataCounter+0xcc>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d018      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <DMA_SetCurrDataCounter+0xd0>)
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d014      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4b19      	ldr	r3, [pc, #100]	; (8005000 <DMA_SetCurrDataCounter+0xd4>)
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d010      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <DMA_SetCurrDataCounter+0xd8>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d00c      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4b17      	ldr	r3, [pc, #92]	; (8005008 <DMA_SetCurrDataCounter+0xdc>)
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d008      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4b16      	ldr	r3, [pc, #88]	; (800500c <DMA_SetCurrDataCounter+0xe0>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d004      	beq.n	8004fc2 <DMA_SetCurrDataCounter+0x96>
 8004fb8:	4815      	ldr	r0, [pc, #84]	; (8005010 <DMA_SetCurrDataCounter+0xe4>)
 8004fba:	f240 2175 	movw	r1, #629	; 0x275
 8004fbe:	f7fc ff83 	bl	8001ec8 <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8004fc2:	887a      	ldrh	r2, [r7, #2]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	605a      	str	r2, [r3, #4]
}
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40026010 	.word	0x40026010
 8004fd4:	40026028 	.word	0x40026028
 8004fd8:	40026040 	.word	0x40026040
 8004fdc:	40026058 	.word	0x40026058
 8004fe0:	40026070 	.word	0x40026070
 8004fe4:	40026088 	.word	0x40026088
 8004fe8:	400260a0 	.word	0x400260a0
 8004fec:	400260b8 	.word	0x400260b8
 8004ff0:	40026410 	.word	0x40026410
 8004ff4:	40026428 	.word	0x40026428
 8004ff8:	40026440 	.word	0x40026440
 8004ffc:	40026458 	.word	0x40026458
 8005000:	40026470 	.word	0x40026470
 8005004:	40026488 	.word	0x40026488
 8005008:	400264a0 	.word	0x400264a0
 800500c:	400264b8 	.word	0x400264b8
 8005010:	080073f0 	.word	0x080073f0

08005014 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <DMA_GetCmdStatus+0xb8>)
 8005024:	429a      	cmp	r2, r3
 8005026:	d040      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <DMA_GetCmdStatus+0xbc>)
 800502c:	429a      	cmp	r2, r3
 800502e:	d03c      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <DMA_GetCmdStatus+0xc0>)
 8005034:	429a      	cmp	r2, r3
 8005036:	d038      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <DMA_GetCmdStatus+0xc4>)
 800503c:	429a      	cmp	r2, r3
 800503e:	d034      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <DMA_GetCmdStatus+0xc8>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d030      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <DMA_GetCmdStatus+0xcc>)
 800504c:	429a      	cmp	r2, r3
 800504e:	d02c      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <DMA_GetCmdStatus+0xd0>)
 8005054:	429a      	cmp	r2, r3
 8005056:	d028      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4b23      	ldr	r3, [pc, #140]	; (80050e8 <DMA_GetCmdStatus+0xd4>)
 800505c:	429a      	cmp	r2, r3
 800505e:	d024      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <DMA_GetCmdStatus+0xd8>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d020      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4b21      	ldr	r3, [pc, #132]	; (80050f0 <DMA_GetCmdStatus+0xdc>)
 800506c:	429a      	cmp	r2, r3
 800506e:	d01c      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <DMA_GetCmdStatus+0xe0>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d018      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <DMA_GetCmdStatus+0xe4>)
 800507c:	429a      	cmp	r2, r3
 800507e:	d014      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <DMA_GetCmdStatus+0xe8>)
 8005084:	429a      	cmp	r2, r3
 8005086:	d010      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <DMA_GetCmdStatus+0xec>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d00c      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <DMA_GetCmdStatus+0xf0>)
 8005094:	429a      	cmp	r2, r3
 8005096:	d008      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <DMA_GetCmdStatus+0xf4>)
 800509c:	429a      	cmp	r2, r3
 800509e:	d004      	beq.n	80050aa <DMA_GetCmdStatus+0x96>
 80050a0:	481a      	ldr	r0, [pc, #104]	; (800510c <DMA_GetCmdStatus+0xf8>)
 80050a2:	f240 31a2 	movw	r1, #930	; 0x3a2
 80050a6:	f7fc ff0f 	bl	8001ec8 <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
 80050ba:	e001      	b.n	80050c0 <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80050bc:	2300      	movs	r3, #0
 80050be:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40026010 	.word	0x40026010
 80050d0:	40026028 	.word	0x40026028
 80050d4:	40026040 	.word	0x40026040
 80050d8:	40026058 	.word	0x40026058
 80050dc:	40026070 	.word	0x40026070
 80050e0:	40026088 	.word	0x40026088
 80050e4:	400260a0 	.word	0x400260a0
 80050e8:	400260b8 	.word	0x400260b8
 80050ec:	40026410 	.word	0x40026410
 80050f0:	40026428 	.word	0x40026428
 80050f4:	40026440 	.word	0x40026440
 80050f8:	40026458 	.word	0x40026458
 80050fc:	40026470 	.word	0x40026470
 8005100:	40026488 	.word	0x40026488
 8005104:	400264a0 	.word	0x400264a0
 8005108:	400264b8 	.word	0x400264b8
 800510c:	080073f0 	.word	0x080073f0

08005110 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4b45      	ldr	r3, [pc, #276]	; (8005238 <DMA_ITConfig+0x128>)
 8005122:	429a      	cmp	r2, r3
 8005124:	d040      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4b44      	ldr	r3, [pc, #272]	; (800523c <DMA_ITConfig+0x12c>)
 800512a:	429a      	cmp	r2, r3
 800512c:	d03c      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4b43      	ldr	r3, [pc, #268]	; (8005240 <DMA_ITConfig+0x130>)
 8005132:	429a      	cmp	r2, r3
 8005134:	d038      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4b42      	ldr	r3, [pc, #264]	; (8005244 <DMA_ITConfig+0x134>)
 800513a:	429a      	cmp	r2, r3
 800513c:	d034      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4b41      	ldr	r3, [pc, #260]	; (8005248 <DMA_ITConfig+0x138>)
 8005142:	429a      	cmp	r2, r3
 8005144:	d030      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4b40      	ldr	r3, [pc, #256]	; (800524c <DMA_ITConfig+0x13c>)
 800514a:	429a      	cmp	r2, r3
 800514c:	d02c      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <DMA_ITConfig+0x140>)
 8005152:	429a      	cmp	r2, r3
 8005154:	d028      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4b3e      	ldr	r3, [pc, #248]	; (8005254 <DMA_ITConfig+0x144>)
 800515a:	429a      	cmp	r2, r3
 800515c:	d024      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <DMA_ITConfig+0x148>)
 8005162:	429a      	cmp	r2, r3
 8005164:	d020      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4b3c      	ldr	r3, [pc, #240]	; (800525c <DMA_ITConfig+0x14c>)
 800516a:	429a      	cmp	r2, r3
 800516c:	d01c      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <DMA_ITConfig+0x150>)
 8005172:	429a      	cmp	r2, r3
 8005174:	d018      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <DMA_ITConfig+0x154>)
 800517a:	429a      	cmp	r2, r3
 800517c:	d014      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4b39      	ldr	r3, [pc, #228]	; (8005268 <DMA_ITConfig+0x158>)
 8005182:	429a      	cmp	r2, r3
 8005184:	d010      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4b38      	ldr	r3, [pc, #224]	; (800526c <DMA_ITConfig+0x15c>)
 800518a:	429a      	cmp	r2, r3
 800518c:	d00c      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4b37      	ldr	r3, [pc, #220]	; (8005270 <DMA_ITConfig+0x160>)
 8005192:	429a      	cmp	r2, r3
 8005194:	d008      	beq.n	80051a8 <DMA_ITConfig+0x98>
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4b36      	ldr	r3, [pc, #216]	; (8005274 <DMA_ITConfig+0x164>)
 800519a:	429a      	cmp	r2, r3
 800519c:	d004      	beq.n	80051a8 <DMA_ITConfig+0x98>
 800519e:	4836      	ldr	r0, [pc, #216]	; (8005278 <DMA_ITConfig+0x168>)
 80051a0:	f240 414f 	movw	r1, #1103	; 0x44f
 80051a4:	f7fc fe90 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <DMA_ITConfig+0xa8>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <DMA_ITConfig+0xb2>
 80051b8:	482f      	ldr	r0, [pc, #188]	; (8005278 <DMA_ITConfig+0x168>)
 80051ba:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80051be:	f7fc fe83 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <DMA_ITConfig+0xc8>
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d004      	beq.n	80051d8 <DMA_ITConfig+0xc8>
 80051ce:	482a      	ldr	r0, [pc, #168]	; (8005278 <DMA_ITConfig+0x168>)
 80051d0:	f240 4151 	movw	r1, #1105	; 0x451
 80051d4:	f7fc fe78 	bl	8001ec8 <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00f      	beq.n	8005202 <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d006      	beq.n	80051f6 <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	615a      	str	r2, [r3, #20]
 80051f4:	e005      	b.n	8005202 <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b80      	cmp	r3, #128	; 0x80
 8005206:	d014      	beq.n	8005232 <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 031e 	and.w	r3, r3, #30
 8005218:	431a      	orrs	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e008      	b.n	8005232 <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 031e 	and.w	r3, r3, #30
 800522a:	43db      	mvns	r3, r3
 800522c:	401a      	ands	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40026010 	.word	0x40026010
 800523c:	40026028 	.word	0x40026028
 8005240:	40026040 	.word	0x40026040
 8005244:	40026058 	.word	0x40026058
 8005248:	40026070 	.word	0x40026070
 800524c:	40026088 	.word	0x40026088
 8005250:	400260a0 	.word	0x400260a0
 8005254:	400260b8 	.word	0x400260b8
 8005258:	40026410 	.word	0x40026410
 800525c:	40026428 	.word	0x40026428
 8005260:	40026440 	.word	0x40026440
 8005264:	40026458 	.word	0x40026458
 8005268:	40026470 	.word	0x40026470
 800526c:	40026488 	.word	0x40026488
 8005270:	400264a0 	.word	0x400264a0
 8005274:	400264b8 	.word	0x400264b8
 8005278:	080073f0 	.word	0x080073f0

0800527c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4b97      	ldr	r3, [pc, #604]	; (80054f4 <DMA_GetITStatus+0x278>)
 8005296:	429a      	cmp	r2, r3
 8005298:	d040      	beq.n	800531c <DMA_GetITStatus+0xa0>
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4b96      	ldr	r3, [pc, #600]	; (80054f8 <DMA_GetITStatus+0x27c>)
 800529e:	429a      	cmp	r2, r3
 80052a0:	d03c      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4b95      	ldr	r3, [pc, #596]	; (80054fc <DMA_GetITStatus+0x280>)
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d038      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4b94      	ldr	r3, [pc, #592]	; (8005500 <DMA_GetITStatus+0x284>)
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d034      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4b93      	ldr	r3, [pc, #588]	; (8005504 <DMA_GetITStatus+0x288>)
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d030      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4b92      	ldr	r3, [pc, #584]	; (8005508 <DMA_GetITStatus+0x28c>)
 80052be:	429a      	cmp	r2, r3
 80052c0:	d02c      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	4b91      	ldr	r3, [pc, #580]	; (800550c <DMA_GetITStatus+0x290>)
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d028      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4b90      	ldr	r3, [pc, #576]	; (8005510 <DMA_GetITStatus+0x294>)
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d024      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4b8f      	ldr	r3, [pc, #572]	; (8005514 <DMA_GetITStatus+0x298>)
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d020      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4b8e      	ldr	r3, [pc, #568]	; (8005518 <DMA_GetITStatus+0x29c>)
 80052de:	429a      	cmp	r2, r3
 80052e0:	d01c      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4b8d      	ldr	r3, [pc, #564]	; (800551c <DMA_GetITStatus+0x2a0>)
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d018      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4b8c      	ldr	r3, [pc, #560]	; (8005520 <DMA_GetITStatus+0x2a4>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d014      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4b8b      	ldr	r3, [pc, #556]	; (8005524 <DMA_GetITStatus+0x2a8>)
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d010      	beq.n	800531c <DMA_GetITStatus+0xa0>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4b8a      	ldr	r3, [pc, #552]	; (8005528 <DMA_GetITStatus+0x2ac>)
 80052fe:	429a      	cmp	r2, r3
 8005300:	d00c      	beq.n	800531c <DMA_GetITStatus+0xa0>
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4b89      	ldr	r3, [pc, #548]	; (800552c <DMA_GetITStatus+0x2b0>)
 8005306:	429a      	cmp	r2, r3
 8005308:	d008      	beq.n	800531c <DMA_GetITStatus+0xa0>
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4b88      	ldr	r3, [pc, #544]	; (8005530 <DMA_GetITStatus+0x2b4>)
 800530e:	429a      	cmp	r2, r3
 8005310:	d004      	beq.n	800531c <DMA_GetITStatus+0xa0>
 8005312:	4888      	ldr	r0, [pc, #544]	; (8005534 <DMA_GetITStatus+0x2b8>)
 8005314:	f240 4187 	movw	r1, #1159	; 0x487
 8005318:	f7fc fdd6 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	4b86      	ldr	r3, [pc, #536]	; (8005538 <DMA_GetITStatus+0x2bc>)
 8005320:	429a      	cmp	r2, r3
 8005322:	f000 80a9 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4b84      	ldr	r3, [pc, #528]	; (800553c <DMA_GetITStatus+0x2c0>)
 800532a:	429a      	cmp	r2, r3
 800532c:	f000 80a4 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	4b83      	ldr	r3, [pc, #524]	; (8005540 <DMA_GetITStatus+0x2c4>)
 8005334:	429a      	cmp	r2, r3
 8005336:	f000 809f 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	4b81      	ldr	r3, [pc, #516]	; (8005544 <DMA_GetITStatus+0x2c8>)
 800533e:	429a      	cmp	r2, r3
 8005340:	f000 809a 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	4b80      	ldr	r3, [pc, #512]	; (8005548 <DMA_GetITStatus+0x2cc>)
 8005348:	429a      	cmp	r2, r3
 800534a:	f000 8095 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	4b7e      	ldr	r3, [pc, #504]	; (800554c <DMA_GetITStatus+0x2d0>)
 8005352:	429a      	cmp	r2, r3
 8005354:	f000 8090 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	4b7d      	ldr	r3, [pc, #500]	; (8005550 <DMA_GetITStatus+0x2d4>)
 800535c:	429a      	cmp	r2, r3
 800535e:	f000 808b 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	4b7b      	ldr	r3, [pc, #492]	; (8005554 <DMA_GetITStatus+0x2d8>)
 8005366:	429a      	cmp	r2, r3
 8005368:	f000 8086 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	4b7a      	ldr	r3, [pc, #488]	; (8005558 <DMA_GetITStatus+0x2dc>)
 8005370:	429a      	cmp	r2, r3
 8005372:	f000 8081 	beq.w	8005478 <DMA_GetITStatus+0x1fc>
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	4b78      	ldr	r3, [pc, #480]	; (800555c <DMA_GetITStatus+0x2e0>)
 800537a:	429a      	cmp	r2, r3
 800537c:	d07c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4b77      	ldr	r3, [pc, #476]	; (8005560 <DMA_GetITStatus+0x2e4>)
 8005382:	429a      	cmp	r2, r3
 8005384:	d078      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	4b76      	ldr	r3, [pc, #472]	; (8005564 <DMA_GetITStatus+0x2e8>)
 800538a:	429a      	cmp	r2, r3
 800538c:	d074      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	4b75      	ldr	r3, [pc, #468]	; (8005568 <DMA_GetITStatus+0x2ec>)
 8005392:	429a      	cmp	r2, r3
 8005394:	d070      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	4b74      	ldr	r3, [pc, #464]	; (800556c <DMA_GetITStatus+0x2f0>)
 800539a:	429a      	cmp	r2, r3
 800539c:	d06c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	4b73      	ldr	r3, [pc, #460]	; (8005570 <DMA_GetITStatus+0x2f4>)
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d068      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	4b72      	ldr	r3, [pc, #456]	; (8005574 <DMA_GetITStatus+0x2f8>)
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d064      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	4b71      	ldr	r3, [pc, #452]	; (8005578 <DMA_GetITStatus+0x2fc>)
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d060      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	4b70      	ldr	r3, [pc, #448]	; (800557c <DMA_GetITStatus+0x300>)
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d05c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	4b6f      	ldr	r3, [pc, #444]	; (8005580 <DMA_GetITStatus+0x304>)
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d058      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	4b6e      	ldr	r3, [pc, #440]	; (8005584 <DMA_GetITStatus+0x308>)
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d054      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	4b6d      	ldr	r3, [pc, #436]	; (8005588 <DMA_GetITStatus+0x30c>)
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d050      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	4b6c      	ldr	r3, [pc, #432]	; (800558c <DMA_GetITStatus+0x310>)
 80053da:	429a      	cmp	r2, r3
 80053dc:	d04c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	4b6b      	ldr	r3, [pc, #428]	; (8005590 <DMA_GetITStatus+0x314>)
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d048      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	4b6a      	ldr	r3, [pc, #424]	; (8005594 <DMA_GetITStatus+0x318>)
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d044      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	4b69      	ldr	r3, [pc, #420]	; (8005598 <DMA_GetITStatus+0x31c>)
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d040      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	4b68      	ldr	r3, [pc, #416]	; (800559c <DMA_GetITStatus+0x320>)
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d03c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4b67      	ldr	r3, [pc, #412]	; (80055a0 <DMA_GetITStatus+0x324>)
 8005402:	429a      	cmp	r2, r3
 8005404:	d038      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <DMA_GetITStatus+0x328>)
 800540a:	429a      	cmp	r2, r3
 800540c:	d034      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	4b65      	ldr	r3, [pc, #404]	; (80055a8 <DMA_GetITStatus+0x32c>)
 8005412:	429a      	cmp	r2, r3
 8005414:	d030      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	4b64      	ldr	r3, [pc, #400]	; (80055ac <DMA_GetITStatus+0x330>)
 800541a:	429a      	cmp	r2, r3
 800541c:	d02c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	4b63      	ldr	r3, [pc, #396]	; (80055b0 <DMA_GetITStatus+0x334>)
 8005422:	429a      	cmp	r2, r3
 8005424:	d028      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4b62      	ldr	r3, [pc, #392]	; (80055b4 <DMA_GetITStatus+0x338>)
 800542a:	429a      	cmp	r2, r3
 800542c:	d024      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <DMA_GetITStatus+0x33c>)
 8005432:	429a      	cmp	r2, r3
 8005434:	d020      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	4b60      	ldr	r3, [pc, #384]	; (80055bc <DMA_GetITStatus+0x340>)
 800543a:	429a      	cmp	r2, r3
 800543c:	d01c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	4b5f      	ldr	r3, [pc, #380]	; (80055c0 <DMA_GetITStatus+0x344>)
 8005442:	429a      	cmp	r2, r3
 8005444:	d018      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	4b5e      	ldr	r3, [pc, #376]	; (80055c4 <DMA_GetITStatus+0x348>)
 800544a:	429a      	cmp	r2, r3
 800544c:	d014      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	4b5d      	ldr	r3, [pc, #372]	; (80055c8 <DMA_GetITStatus+0x34c>)
 8005452:	429a      	cmp	r2, r3
 8005454:	d010      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	4b5c      	ldr	r3, [pc, #368]	; (80055cc <DMA_GetITStatus+0x350>)
 800545a:	429a      	cmp	r2, r3
 800545c:	d00c      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	4b5b      	ldr	r3, [pc, #364]	; (80055d0 <DMA_GetITStatus+0x354>)
 8005462:	429a      	cmp	r2, r3
 8005464:	d008      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	4b5a      	ldr	r3, [pc, #360]	; (80055d4 <DMA_GetITStatus+0x358>)
 800546a:	429a      	cmp	r2, r3
 800546c:	d004      	beq.n	8005478 <DMA_GetITStatus+0x1fc>
 800546e:	4831      	ldr	r0, [pc, #196]	; (8005534 <DMA_GetITStatus+0x2b8>)
 8005470:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8005474:	f7fc fd28 	bl	8001ec8 <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4b57      	ldr	r3, [pc, #348]	; (80055d8 <DMA_GetITStatus+0x35c>)
 800547c:	429a      	cmp	r2, r3
 800547e:	d802      	bhi.n	8005486 <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005480:	4b56      	ldr	r3, [pc, #344]	; (80055dc <DMA_GetITStatus+0x360>)
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	e001      	b.n	800548a <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005486:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <DMA_GetITStatus+0x364>)
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005490:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	0adb      	lsrs	r3, r3, #11
 800549c:	f003 031e 	and.w	r3, r3, #30
 80054a0:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	e004      	b.n	80054b8 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e002      	b.n	80054d0 <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80054d6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80054da:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d07e      	beq.n	80055e4 <DMA_GetITStatus+0x368>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d07b      	beq.n	80055e4 <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
 80054f0:	e07a      	b.n	80055e8 <DMA_GetITStatus+0x36c>
 80054f2:	bf00      	nop
 80054f4:	40026010 	.word	0x40026010
 80054f8:	40026028 	.word	0x40026028
 80054fc:	40026040 	.word	0x40026040
 8005500:	40026058 	.word	0x40026058
 8005504:	40026070 	.word	0x40026070
 8005508:	40026088 	.word	0x40026088
 800550c:	400260a0 	.word	0x400260a0
 8005510:	400260b8 	.word	0x400260b8
 8005514:	40026410 	.word	0x40026410
 8005518:	40026428 	.word	0x40026428
 800551c:	40026440 	.word	0x40026440
 8005520:	40026458 	.word	0x40026458
 8005524:	40026470 	.word	0x40026470
 8005528:	40026488 	.word	0x40026488
 800552c:	400264a0 	.word	0x400264a0
 8005530:	400264b8 	.word	0x400264b8
 8005534:	080073f0 	.word	0x080073f0
 8005538:	10008020 	.word	0x10008020
 800553c:	10004010 	.word	0x10004010
 8005540:	10002008 	.word	0x10002008
 8005544:	10001004 	.word	0x10001004
 8005548:	90000001 	.word	0x90000001
 800554c:	10008800 	.word	0x10008800
 8005550:	10004400 	.word	0x10004400
 8005554:	10002200 	.word	0x10002200
 8005558:	10001100 	.word	0x10001100
 800555c:	90000040 	.word	0x90000040
 8005560:	10208000 	.word	0x10208000
 8005564:	10104000 	.word	0x10104000
 8005568:	10082000 	.word	0x10082000
 800556c:	10041000 	.word	0x10041000
 8005570:	90010000 	.word	0x90010000
 8005574:	18008000 	.word	0x18008000
 8005578:	14004000 	.word	0x14004000
 800557c:	12002000 	.word	0x12002000
 8005580:	11001000 	.word	0x11001000
 8005584:	90400000 	.word	0x90400000
 8005588:	20008020 	.word	0x20008020
 800558c:	20004010 	.word	0x20004010
 8005590:	20002008 	.word	0x20002008
 8005594:	20001004 	.word	0x20001004
 8005598:	a0000001 	.word	0xa0000001
 800559c:	20008800 	.word	0x20008800
 80055a0:	20004400 	.word	0x20004400
 80055a4:	20002200 	.word	0x20002200
 80055a8:	20001100 	.word	0x20001100
 80055ac:	a0000040 	.word	0xa0000040
 80055b0:	20208000 	.word	0x20208000
 80055b4:	20104000 	.word	0x20104000
 80055b8:	20082000 	.word	0x20082000
 80055bc:	20041000 	.word	0x20041000
 80055c0:	a0010000 	.word	0xa0010000
 80055c4:	28008000 	.word	0x28008000
 80055c8:	24004000 	.word	0x24004000
 80055cc:	22002000 	.word	0x22002000
 80055d0:	21001000 	.word	0x21001000
 80055d4:	a0400000 	.word	0xa0400000
 80055d8:	4002640f 	.word	0x4002640f
 80055dc:	40026000 	.word	0x40026000
 80055e0:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80055e4:	2300      	movs	r3, #0
 80055e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop

080055f4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4b3d      	ldr	r3, [pc, #244]	; (80056f8 <DMA_ClearITPendingBit+0x104>)
 8005602:	429a      	cmp	r2, r3
 8005604:	d040      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4b3c      	ldr	r3, [pc, #240]	; (80056fc <DMA_ClearITPendingBit+0x108>)
 800560a:	429a      	cmp	r2, r3
 800560c:	d03c      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <DMA_ClearITPendingBit+0x10c>)
 8005612:	429a      	cmp	r2, r3
 8005614:	d038      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4b3a      	ldr	r3, [pc, #232]	; (8005704 <DMA_ClearITPendingBit+0x110>)
 800561a:	429a      	cmp	r2, r3
 800561c:	d034      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <DMA_ClearITPendingBit+0x114>)
 8005622:	429a      	cmp	r2, r3
 8005624:	d030      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4b38      	ldr	r3, [pc, #224]	; (800570c <DMA_ClearITPendingBit+0x118>)
 800562a:	429a      	cmp	r2, r3
 800562c:	d02c      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4b37      	ldr	r3, [pc, #220]	; (8005710 <DMA_ClearITPendingBit+0x11c>)
 8005632:	429a      	cmp	r2, r3
 8005634:	d028      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <DMA_ClearITPendingBit+0x120>)
 800563a:	429a      	cmp	r2, r3
 800563c:	d024      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4b35      	ldr	r3, [pc, #212]	; (8005718 <DMA_ClearITPendingBit+0x124>)
 8005642:	429a      	cmp	r2, r3
 8005644:	d020      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4b34      	ldr	r3, [pc, #208]	; (800571c <DMA_ClearITPendingBit+0x128>)
 800564a:	429a      	cmp	r2, r3
 800564c:	d01c      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4b33      	ldr	r3, [pc, #204]	; (8005720 <DMA_ClearITPendingBit+0x12c>)
 8005652:	429a      	cmp	r2, r3
 8005654:	d018      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4b32      	ldr	r3, [pc, #200]	; (8005724 <DMA_ClearITPendingBit+0x130>)
 800565a:	429a      	cmp	r2, r3
 800565c:	d014      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	4b31      	ldr	r3, [pc, #196]	; (8005728 <DMA_ClearITPendingBit+0x134>)
 8005662:	429a      	cmp	r2, r3
 8005664:	d010      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	4b30      	ldr	r3, [pc, #192]	; (800572c <DMA_ClearITPendingBit+0x138>)
 800566a:	429a      	cmp	r2, r3
 800566c:	d00c      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <DMA_ClearITPendingBit+0x13c>)
 8005672:	429a      	cmp	r2, r3
 8005674:	d008      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4b2e      	ldr	r3, [pc, #184]	; (8005734 <DMA_ClearITPendingBit+0x140>)
 800567a:	429a      	cmp	r2, r3
 800567c:	d004      	beq.n	8005688 <DMA_ClearITPendingBit+0x94>
 800567e:	482e      	ldr	r0, [pc, #184]	; (8005738 <DMA_ClearITPendingBit+0x144>)
 8005680:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8005684:	f7fc fc20 	bl	8001ec8 <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800568e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005692:	d00c      	beq.n	80056ae <DMA_ClearITPendingBit+0xba>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <DMA_ClearITPendingBit+0xba>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <DMA_ClearITPendingBit+0xba>
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	4b25      	ldr	r3, [pc, #148]	; (800573c <DMA_ClearITPendingBit+0x148>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <DMA_ClearITPendingBit+0xc4>
 80056ae:	4822      	ldr	r0, [pc, #136]	; (8005738 <DMA_ClearITPendingBit+0x144>)
 80056b0:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 80056b4:	f7fc fc08 	bl	8001ec8 <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4b21      	ldr	r3, [pc, #132]	; (8005740 <DMA_ClearITPendingBit+0x14c>)
 80056bc:	429a      	cmp	r2, r3
 80056be:	d802      	bhi.n	80056c6 <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80056c0:	4b20      	ldr	r3, [pc, #128]	; (8005744 <DMA_ClearITPendingBit+0x150>)
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e001      	b.n	80056ca <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <DMA_ClearITPendingBit+0x154>)
 80056c8:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80056da:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	60d3      	str	r3, [r2, #12]
 80056e2:	e006      	b.n	80056f2 <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80056ea:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	6093      	str	r3, [r2, #8]
  }   
}
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40026010 	.word	0x40026010
 80056fc:	40026028 	.word	0x40026028
 8005700:	40026040 	.word	0x40026040
 8005704:	40026058 	.word	0x40026058
 8005708:	40026070 	.word	0x40026070
 800570c:	40026088 	.word	0x40026088
 8005710:	400260a0 	.word	0x400260a0
 8005714:	400260b8 	.word	0x400260b8
 8005718:	40026410 	.word	0x40026410
 800571c:	40026428 	.word	0x40026428
 8005720:	40026440 	.word	0x40026440
 8005724:	40026458 	.word	0x40026458
 8005728:	40026470 	.word	0x40026470
 800572c:	40026488 	.word	0x40026488
 8005730:	400264a0 	.word	0x400264a0
 8005734:	400264b8 	.word	0x400264b8
 8005738:	080073f0 	.word	0x080073f0
 800573c:	40820082 	.word	0x40820082
 8005740:	4002640f 	.word	0x4002640f
 8005744:	40026000 	.word	0x40026000
 8005748:	40026400 	.word	0x40026400

0800574c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	791b      	ldrb	r3, [r3, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <EXTI_Init+0x24>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	791b      	ldrb	r3, [r3, #4]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d003      	beq.n	8005770 <EXTI_Init+0x24>
 8005768:	4848      	ldr	r0, [pc, #288]	; (800588c <EXTI_Init+0x140>)
 800576a:	217c      	movs	r1, #124	; 0x7c
 800576c:	f7fc fbac 	bl	8001ec8 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	795b      	ldrb	r3, [r3, #5]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d00b      	beq.n	8005790 <EXTI_Init+0x44>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	795b      	ldrb	r3, [r3, #5]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	d007      	beq.n	8005790 <EXTI_Init+0x44>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	795b      	ldrb	r3, [r3, #5]
 8005784:	2b10      	cmp	r3, #16
 8005786:	d003      	beq.n	8005790 <EXTI_Init+0x44>
 8005788:	4840      	ldr	r0, [pc, #256]	; (800588c <EXTI_Init+0x140>)
 800578a:	217d      	movs	r1, #125	; 0x7d
 800578c:	f7fc fb9c 	bl	8001ec8 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	0ddb      	lsrs	r3, r3, #23
 8005796:	05db      	lsls	r3, r3, #23
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <EXTI_Init+0x58>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <EXTI_Init+0x60>
 80057a4:	4839      	ldr	r0, [pc, #228]	; (800588c <EXTI_Init+0x140>)
 80057a6:	217e      	movs	r1, #126	; 0x7e
 80057a8:	f7fc fb8e 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	799b      	ldrb	r3, [r3, #6]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <EXTI_Init+0x78>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	799b      	ldrb	r3, [r3, #6]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d003      	beq.n	80057c4 <EXTI_Init+0x78>
 80057bc:	4833      	ldr	r0, [pc, #204]	; (800588c <EXTI_Init+0x140>)
 80057be:	217f      	movs	r1, #127	; 0x7f
 80057c0:	f7fc fb82 	bl	8001ec8 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 80057c4:	4b32      	ldr	r3, [pc, #200]	; (8005890 <EXTI_Init+0x144>)
 80057c6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	799b      	ldrb	r3, [r3, #6]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d04d      	beq.n	800586c <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80057d0:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <EXTI_Init+0x144>)
 80057d2:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <EXTI_Init+0x144>)
 80057d4:	6811      	ldr	r1, [r2, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	43d2      	mvns	r2, r2
 80057dc:	400a      	ands	r2, r1
 80057de:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80057e0:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <EXTI_Init+0x144>)
 80057e2:	4a2b      	ldr	r2, [pc, #172]	; (8005890 <EXTI_Init+0x144>)
 80057e4:	6851      	ldr	r1, [r2, #4]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	43d2      	mvns	r2, r2
 80057ec:	400a      	ands	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	791b      	ldrb	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	6811      	ldr	r1, [r2, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005808:	4b21      	ldr	r3, [pc, #132]	; (8005890 <EXTI_Init+0x144>)
 800580a:	4a21      	ldr	r2, [pc, #132]	; (8005890 <EXTI_Init+0x144>)
 800580c:	6891      	ldr	r1, [r2, #8]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	43d2      	mvns	r2, r2
 8005814:	400a      	ands	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005818:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <EXTI_Init+0x144>)
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <EXTI_Init+0x144>)
 800581c:	68d1      	ldr	r1, [r2, #12]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	43d2      	mvns	r2, r2
 8005824:	400a      	ands	r2, r1
 8005826:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	795b      	ldrb	r3, [r3, #5]
 800582c:	2b10      	cmp	r3, #16
 800582e:	d10e      	bne.n	800584e <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8005830:	4b17      	ldr	r3, [pc, #92]	; (8005890 <EXTI_Init+0x144>)
 8005832:	4a17      	ldr	r2, [pc, #92]	; (8005890 <EXTI_Init+0x144>)
 8005834:	6891      	ldr	r1, [r2, #8]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <EXTI_Init+0x144>)
 8005840:	4a13      	ldr	r2, [pc, #76]	; (8005890 <EXTI_Init+0x144>)
 8005842:	68d1      	ldr	r1, [r2, #12]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	60da      	str	r2, [r3, #12]
 800584c:	e01b      	b.n	8005886 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <EXTI_Init+0x144>)
 8005850:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	795b      	ldrb	r3, [r3, #5]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	6811      	ldr	r1, [r2, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e00c      	b.n	8005886 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	791b      	ldrb	r3, [r3, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	6811      	ldr	r1, [r2, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	43d2      	mvns	r2, r2
 8005882:	400a      	ands	r2, r1
 8005884:	601a      	str	r2, [r3, #0]
  }
}
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	08007440 	.word	0x08007440
 8005890:	40013c00 	.word	0x40013c00

08005894 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	0ddb      	lsrs	r3, r3, #23
 80058a0:	05db      	lsls	r3, r3, #23
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <EXTI_ClearFlag+0x18>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <EXTI_ClearFlag+0x20>
 80058ac:	4804      	ldr	r0, [pc, #16]	; (80058c0 <EXTI_ClearFlag+0x2c>)
 80058ae:	21f6      	movs	r1, #246	; 0xf6
 80058b0:	f7fc fb0a 	bl	8001ec8 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <EXTI_ClearFlag+0x30>)
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	615a      	str	r2, [r3, #20]
}
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	08007440 	.word	0x08007440
 80058c4:	40013c00 	.word	0x40013c00

080058c8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d055      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d052      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d04f      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d04c      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d049      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d046      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d043      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d040      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590e:	d03c      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005916:	d038      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591e:	d034      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005926:	d030      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592e:	d02c      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005936:	d028      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800593e:	d024      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005946:	d020      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594e:	d01c      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005956:	d018      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800595e:	d014      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005966:	d010      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	d00c      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005976:	d008      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800597e:	d004      	beq.n	800598a <EXTI_GetITStatus+0xc2>
 8005980:	480e      	ldr	r0, [pc, #56]	; (80059bc <EXTI_GetITStatus+0xf4>)
 8005982:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005986:	f7fc fa9f 	bl	8001ec8 <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <EXTI_GetITStatus+0xf8>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4013      	ands	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <EXTI_GetITStatus+0xf8>)
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <EXTI_GetITStatus+0xe4>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
 80059aa:	e001      	b.n	80059b0 <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	08007440 	.word	0x08007440
 80059c0:	40013c00 	.word	0x40013c00

080059c4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4b7a      	ldr	r3, [pc, #488]	; (8005bc8 <GPIO_Init+0x204>)
 80059de:	429a      	cmp	r2, r3
 80059e0:	d023      	beq.n	8005a2a <GPIO_Init+0x66>
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4b79      	ldr	r3, [pc, #484]	; (8005bcc <GPIO_Init+0x208>)
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d01f      	beq.n	8005a2a <GPIO_Init+0x66>
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4b78      	ldr	r3, [pc, #480]	; (8005bd0 <GPIO_Init+0x20c>)
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d01b      	beq.n	8005a2a <GPIO_Init+0x66>
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4b77      	ldr	r3, [pc, #476]	; (8005bd4 <GPIO_Init+0x210>)
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d017      	beq.n	8005a2a <GPIO_Init+0x66>
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <GPIO_Init+0x214>)
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d013      	beq.n	8005a2a <GPIO_Init+0x66>
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4b75      	ldr	r3, [pc, #468]	; (8005bdc <GPIO_Init+0x218>)
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d00f      	beq.n	8005a2a <GPIO_Init+0x66>
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4b74      	ldr	r3, [pc, #464]	; (8005be0 <GPIO_Init+0x21c>)
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d00b      	beq.n	8005a2a <GPIO_Init+0x66>
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4b73      	ldr	r3, [pc, #460]	; (8005be4 <GPIO_Init+0x220>)
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d007      	beq.n	8005a2a <GPIO_Init+0x66>
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4b72      	ldr	r3, [pc, #456]	; (8005be8 <GPIO_Init+0x224>)
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d003      	beq.n	8005a2a <GPIO_Init+0x66>
 8005a22:	4872      	ldr	r0, [pc, #456]	; (8005bec <GPIO_Init+0x228>)
 8005a24:	21bb      	movs	r1, #187	; 0xbb
 8005a26:	f7fc fa4f 	bl	8001ec8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <GPIO_Init+0x76>
 8005a32:	486e      	ldr	r0, [pc, #440]	; (8005bec <GPIO_Init+0x228>)
 8005a34:	21bc      	movs	r1, #188	; 0xbc
 8005a36:	f7fc fa47 	bl	8001ec8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	791b      	ldrb	r3, [r3, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00f      	beq.n	8005a62 <GPIO_Init+0x9e>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	791b      	ldrb	r3, [r3, #4]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d00b      	beq.n	8005a62 <GPIO_Init+0x9e>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d007      	beq.n	8005a62 <GPIO_Init+0x9e>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	791b      	ldrb	r3, [r3, #4]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d003      	beq.n	8005a62 <GPIO_Init+0x9e>
 8005a5a:	4864      	ldr	r0, [pc, #400]	; (8005bec <GPIO_Init+0x228>)
 8005a5c:	21bd      	movs	r1, #189	; 0xbd
 8005a5e:	f7fc fa33 	bl	8001ec8 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	79db      	ldrb	r3, [r3, #7]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <GPIO_Init+0xbe>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	79db      	ldrb	r3, [r3, #7]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d007      	beq.n	8005a82 <GPIO_Init+0xbe>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	79db      	ldrb	r3, [r3, #7]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d003      	beq.n	8005a82 <GPIO_Init+0xbe>
 8005a7a:	485c      	ldr	r0, [pc, #368]	; (8005bec <GPIO_Init+0x228>)
 8005a7c:	21be      	movs	r1, #190	; 0xbe
 8005a7e:	f7fc fa23 	bl	8001ec8 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e097      	b.n	8005bb8 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	f040 8086 	bne.w	8005bb2 <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2103      	movs	r1, #3
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d003      	beq.n	8005ae4 <GPIO_Init+0x120>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	791b      	ldrb	r3, [r3, #4]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d14e      	bne.n	8005b82 <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	795b      	ldrb	r3, [r3, #5]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00f      	beq.n	8005b0c <GPIO_Init+0x148>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	795b      	ldrb	r3, [r3, #5]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d00b      	beq.n	8005b0c <GPIO_Init+0x148>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	795b      	ldrb	r3, [r3, #5]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d007      	beq.n	8005b0c <GPIO_Init+0x148>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	795b      	ldrb	r3, [r3, #5]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d003      	beq.n	8005b0c <GPIO_Init+0x148>
 8005b04:	4839      	ldr	r0, [pc, #228]	; (8005bec <GPIO_Init+0x228>)
 8005b06:	21d0      	movs	r1, #208	; 0xd0
 8005b08:	f7fc f9de 	bl	8001ec8 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	2103      	movs	r1, #3
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	401a      	ands	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	795b      	ldrb	r3, [r3, #5]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	799b      	ldrb	r3, [r3, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <GPIO_Init+0x18e>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	799b      	ldrb	r3, [r3, #6]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d003      	beq.n	8005b52 <GPIO_Init+0x18e>
 8005b4a:	4828      	ldr	r0, [pc, #160]	; (8005bec <GPIO_Init+0x228>)
 8005b4c:	21d7      	movs	r1, #215	; 0xd7
 8005b4e:	f7fc f9bb 	bl	8001ec8 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	799b      	ldrb	r3, [r3, #6]
 8005b70:	4619      	mov	r1, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2103      	movs	r1, #3
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	401a      	ands	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	79db      	ldrb	r3, [r3, #7]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	f67f af64 	bls.w	8005a88 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40020000 	.word	0x40020000
 8005bcc:	40020400 	.word	0x40020400
 8005bd0:	40020800 	.word	0x40020800
 8005bd4:	40020c00 	.word	0x40020c00
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	40021400 	.word	0x40021400
 8005be0:	40021800 	.word	0x40021800
 8005be4:	40021c00 	.word	0x40021c00
 8005be8:	40022000 	.word	0x40022000
 8005bec:	08007490 	.word	0x08007490

08005bf0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	807a      	strh	r2, [r7, #2]
 8005bfe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4b83      	ldr	r3, [pc, #524]	; (8005e18 <GPIO_PinAFConfig+0x228>)
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d024      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4b82      	ldr	r3, [pc, #520]	; (8005e1c <GPIO_PinAFConfig+0x22c>)
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d020      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4b81      	ldr	r3, [pc, #516]	; (8005e20 <GPIO_PinAFConfig+0x230>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d01c      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4b80      	ldr	r3, [pc, #512]	; (8005e24 <GPIO_PinAFConfig+0x234>)
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d018      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4b7f      	ldr	r3, [pc, #508]	; (8005e28 <GPIO_PinAFConfig+0x238>)
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d014      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4b7e      	ldr	r3, [pc, #504]	; (8005e2c <GPIO_PinAFConfig+0x23c>)
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d010      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4b7d      	ldr	r3, [pc, #500]	; (8005e30 <GPIO_PinAFConfig+0x240>)
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d00c      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4b7c      	ldr	r3, [pc, #496]	; (8005e34 <GPIO_PinAFConfig+0x244>)
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d008      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <GPIO_PinAFConfig+0x248>)
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d004      	beq.n	8005c5a <GPIO_PinAFConfig+0x6a>
 8005c50:	487a      	ldr	r0, [pc, #488]	; (8005e3c <GPIO_PinAFConfig+0x24c>)
 8005c52:	f240 2117 	movw	r1, #535	; 0x217
 8005c56:	f7fc f937 	bl	8001ec8 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8005c5a:	887b      	ldrh	r3, [r7, #2]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d031      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d02e      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d02b      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c6c:	887b      	ldrh	r3, [r7, #2]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d028      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d025      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	d022      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c7e:	887b      	ldrh	r3, [r7, #2]
 8005c80:	2b06      	cmp	r3, #6
 8005c82:	d01f      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c84:	887b      	ldrh	r3, [r7, #2]
 8005c86:	2b07      	cmp	r3, #7
 8005c88:	d01c      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c8a:	887b      	ldrh	r3, [r7, #2]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d019      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c90:	887b      	ldrh	r3, [r7, #2]
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	d016      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	2b0a      	cmp	r3, #10
 8005c9a:	d013      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005c9c:	887b      	ldrh	r3, [r7, #2]
 8005c9e:	2b0b      	cmp	r3, #11
 8005ca0:	d010      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	d00d      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005ca8:	887b      	ldrh	r3, [r7, #2]
 8005caa:	2b0d      	cmp	r3, #13
 8005cac:	d00a      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005cae:	887b      	ldrh	r3, [r7, #2]
 8005cb0:	2b0e      	cmp	r3, #14
 8005cb2:	d007      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d004      	beq.n	8005cc4 <GPIO_PinAFConfig+0xd4>
 8005cba:	4860      	ldr	r0, [pc, #384]	; (8005e3c <GPIO_PinAFConfig+0x24c>)
 8005cbc:	f44f 7106 	mov.w	r1, #536	; 0x218
 8005cc0:	f7fc f902 	bl	8001ec8 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8005cc4:	787b      	ldrb	r3, [r7, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d06d      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005cca:	787b      	ldrb	r3, [r7, #1]
 8005ccc:	2b09      	cmp	r3, #9
 8005cce:	d06a      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005cd0:	787b      	ldrb	r3, [r7, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d067      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005cd6:	787b      	ldrb	r3, [r7, #1]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d064      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005cdc:	787b      	ldrb	r3, [r7, #1]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d061      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005ce2:	787b      	ldrb	r3, [r7, #1]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05e      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005ce8:	787b      	ldrb	r3, [r7, #1]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d05b      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005cee:	787b      	ldrb	r3, [r7, #1]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d058      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005cf4:	787b      	ldrb	r3, [r7, #1]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d055      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005cfa:	787b      	ldrb	r3, [r7, #1]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d052      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d00:	787b      	ldrb	r3, [r7, #1]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d04f      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d06:	787b      	ldrb	r3, [r7, #1]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d04c      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d0c:	787b      	ldrb	r3, [r7, #1]
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d049      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d12:	787b      	ldrb	r3, [r7, #1]
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d046      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d18:	787b      	ldrb	r3, [r7, #1]
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d043      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d1e:	787b      	ldrb	r3, [r7, #1]
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d040      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d24:	787b      	ldrb	r3, [r7, #1]
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d03d      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d2a:	787b      	ldrb	r3, [r7, #1]
 8005d2c:	2b09      	cmp	r3, #9
 8005d2e:	d03a      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d30:	787b      	ldrb	r3, [r7, #1]
 8005d32:	2b06      	cmp	r3, #6
 8005d34:	d037      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d36:	787b      	ldrb	r3, [r7, #1]
 8005d38:	2b09      	cmp	r3, #9
 8005d3a:	d034      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d3c:	787b      	ldrb	r3, [r7, #1]
 8005d3e:	2b07      	cmp	r3, #7
 8005d40:	d031      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d42:	787b      	ldrb	r3, [r7, #1]
 8005d44:	2b07      	cmp	r3, #7
 8005d46:	d02e      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d48:	787b      	ldrb	r3, [r7, #1]
 8005d4a:	2b07      	cmp	r3, #7
 8005d4c:	d02b      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d4e:	787b      	ldrb	r3, [r7, #1]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d028      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d54:	787b      	ldrb	r3, [r7, #1]
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d025      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d5a:	787b      	ldrb	r3, [r7, #1]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d022      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d60:	787b      	ldrb	r3, [r7, #1]
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d01f      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d66:	787b      	ldrb	r3, [r7, #1]
 8005d68:	2b09      	cmp	r3, #9
 8005d6a:	d01c      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d6c:	787b      	ldrb	r3, [r7, #1]
 8005d6e:	2b0a      	cmp	r3, #10
 8005d70:	d019      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d72:	787b      	ldrb	r3, [r7, #1]
 8005d74:	2b0a      	cmp	r3, #10
 8005d76:	d016      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d78:	787b      	ldrb	r3, [r7, #1]
 8005d7a:	2b0b      	cmp	r3, #11
 8005d7c:	d013      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d7e:	787b      	ldrb	r3, [r7, #1]
 8005d80:	2b0c      	cmp	r3, #12
 8005d82:	d010      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d84:	787b      	ldrb	r3, [r7, #1]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d00d      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d8a:	787b      	ldrb	r3, [r7, #1]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d00a      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d90:	787b      	ldrb	r3, [r7, #1]
 8005d92:	2b0d      	cmp	r3, #13
 8005d94:	d007      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d96:	787b      	ldrb	r3, [r7, #1]
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d004      	beq.n	8005da6 <GPIO_PinAFConfig+0x1b6>
 8005d9c:	4827      	ldr	r0, [pc, #156]	; (8005e3c <GPIO_PinAFConfig+0x24c>)
 8005d9e:	f240 2119 	movw	r1, #537	; 0x219
 8005da2:	f7fc f891 	bl	8001ec8 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005da6:	787a      	ldrb	r2, [r7, #1]
 8005da8:	887b      	ldrh	r3, [r7, #2]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005db6:	887b      	ldrh	r3, [r7, #2]
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	887b      	ldrh	r3, [r7, #2]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3108      	adds	r1, #8
 8005dca:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005dce:	887b      	ldrh	r3, [r7, #2]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	200f      	movs	r0, #15
 8005dd8:	fa00 f303 	lsl.w	r3, r0, r3
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	4019      	ands	r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3208      	adds	r2, #8
 8005de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	08db      	lsrs	r3, r3, #3
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3208      	adds	r2, #8
 8005df4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005dfe:	887b      	ldrh	r3, [r7, #2]
 8005e00:	08db      	lsrs	r3, r3, #3
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3208      	adds	r2, #8
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40020000 	.word	0x40020000
 8005e1c:	40020400 	.word	0x40020400
 8005e20:	40020800 	.word	0x40020800
 8005e24:	40020c00 	.word	0x40020c00
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40021400 	.word	0x40021400
 8005e30:	40021800 	.word	0x40021800
 8005e34:	40021c00 	.word	0x40021c00
 8005e38:	40022000 	.word	0x40022000
 8005e3c:	08007490 	.word	0x08007490

08005e40 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	2302      	movs	r3, #2
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005e60:	4b48      	ldr	r3, [pc, #288]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 030c 	and.w	r3, r3, #12
 8005e68:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d007      	beq.n	8005e80 <RCC_GetClocksFreq+0x40>
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d009      	beq.n	8005e88 <RCC_GetClocksFreq+0x48>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d13f      	bne.n	8005ef8 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a43      	ldr	r2, [pc, #268]	; (8005f88 <RCC_GetClocksFreq+0x148>)
 8005e7c:	601a      	str	r2, [r3, #0]
      break;
 8005e7e:	e03f      	b.n	8005f00 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a42      	ldr	r2, [pc, #264]	; (8005f8c <RCC_GetClocksFreq+0x14c>)
 8005e84:	601a      	str	r2, [r3, #0]
      break;
 8005e86:	e03b      	b.n	8005f00 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005e88:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e90:	0d9b      	lsrs	r3, r3, #22
 8005e92:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e94:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e9c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00d      	beq.n	8005ec0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005ea4:	4a39      	ldr	r2, [pc, #228]	; (8005f8c <RCC_GetClocksFreq+0x14c>)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eac:	4b35      	ldr	r3, [pc, #212]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005eae:	6859      	ldr	r1, [r3, #4]
 8005eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005eb4:	400b      	ands	r3, r1
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	fb03 f302 	mul.w	r3, r3, r2
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e00c      	b.n	8005eda <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005ec0:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <RCC_GetClocksFreq+0x148>)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ec8:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005eca:	6859      	ldr	r1, [r3, #4]
 8005ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ed0:	400b      	ands	r3, r1
 8005ed2:	099b      	lsrs	r3, r3, #6
 8005ed4:	fb03 f302 	mul.w	r3, r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005eda:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
      break;
 8005ef6:	e003      	b.n	8005f00 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a23      	ldr	r2, [pc, #140]	; (8005f88 <RCC_GetClocksFreq+0x148>)
 8005efc:	601a      	str	r2, [r3, #0]
      break;
 8005efe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8005f00:	4b20      	ldr	r3, [pc, #128]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f08:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005f10:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <RCC_GetClocksFreq+0x150>)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4413      	add	r3, r2
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	40da      	lsrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8005f28:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005f30:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	0a9b      	lsrs	r3, r3, #10
 8005f36:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <RCC_GetClocksFreq+0x150>)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	40da      	lsrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <RCC_GetClocksFreq+0x144>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	0b5b      	lsrs	r3, r3, #13
 8005f5e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005f60:	4a0b      	ldr	r2, [pc, #44]	; (8005f90 <RCC_GetClocksFreq+0x150>)
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	4413      	add	r3, r2
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	40da      	lsrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60da      	str	r2, [r3, #12]
}
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	00f42400 	.word	0x00f42400
 8005f8c:	017d7840 	.word	0x017d7840
 8005f90:	2000001c 	.word	0x2000001c

08005f94 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <RCC_AHB1PeriphClockCmd+0x64>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <RCC_AHB1PeriphClockCmd+0x1c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <RCC_AHB1PeriphClockCmd+0x26>
 8005fb0:	4812      	ldr	r0, [pc, #72]	; (8005ffc <RCC_AHB1PeriphClockCmd+0x68>)
 8005fb2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005fb6:	f7fb ff87 	bl	8001ec8 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <RCC_AHB1PeriphClockCmd+0x3c>
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d004      	beq.n	8005fd0 <RCC_AHB1PeriphClockCmd+0x3c>
 8005fc6:	480d      	ldr	r0, [pc, #52]	; (8005ffc <RCC_AHB1PeriphClockCmd+0x68>)
 8005fc8:	f240 4142 	movw	r1, #1090	; 0x442
 8005fcc:	f7fb ff7c 	bl	8001ec8 <assert_failed>
  if (NewState != DISABLE)
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <RCC_AHB1PeriphClockCmd+0x6c>)
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <RCC_AHB1PeriphClockCmd+0x6c>)
 8005fda:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe2:	e006      	b.n	8005ff2 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <RCC_AHB1PeriphClockCmd+0x6c>)
 8005fe6:	4a06      	ldr	r2, [pc, #24]	; (8006000 <RCC_AHB1PeriphClockCmd+0x6c>)
 8005fe8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	43d2      	mvns	r2, r2
 8005fee:	400a      	ands	r2, r1
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	818bee00 	.word	0x818bee00
 8005ffc:	080074e0 	.word	0x080074e0
 8006000:	40023800 	.word	0x40023800

08006004 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <RCC_APB2PeriphClockCmd+0x64>)
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <RCC_APB2PeriphClockCmd+0x1c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <RCC_APB2PeriphClockCmd+0x26>
 8006020:	4812      	ldr	r0, [pc, #72]	; (800606c <RCC_APB2PeriphClockCmd+0x68>)
 8006022:	f240 41d5 	movw	r1, #1237	; 0x4d5
 8006026:	f7fb ff4f 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <RCC_APB2PeriphClockCmd+0x3c>
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d004      	beq.n	8006040 <RCC_APB2PeriphClockCmd+0x3c>
 8006036:	480d      	ldr	r0, [pc, #52]	; (800606c <RCC_APB2PeriphClockCmd+0x68>)
 8006038:	f240 41d6 	movw	r1, #1238	; 0x4d6
 800603c:	f7fb ff44 	bl	8001ec8 <assert_failed>

  if (NewState != DISABLE)
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d006      	beq.n	8006054 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8006046:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <RCC_APB2PeriphClockCmd+0x6c>)
 8006048:	4a09      	ldr	r2, [pc, #36]	; (8006070 <RCC_APB2PeriphClockCmd+0x6c>)
 800604a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	430a      	orrs	r2, r1
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
 8006052:	e006      	b.n	8006062 <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <RCC_APB2PeriphClockCmd+0x6c>)
 8006056:	4a06      	ldr	r2, [pc, #24]	; (8006070 <RCC_APB2PeriphClockCmd+0x6c>)
 8006058:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	43d2      	mvns	r2, r2
 800605e:	400a      	ands	r2, r1
 8006060:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	fff8a0cc 	.word	0xfff8a0cc
 800606c:	080074e0 	.word	0x080074e0
 8006070:	40023800 	.word	0x40023800

08006074 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4b70      	ldr	r3, [pc, #448]	; (8006248 <SPI_Init+0x1d4>)
 8006086:	429a      	cmp	r2, r3
 8006088:	d00c      	beq.n	80060a4 <SPI_Init+0x30>
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4b6f      	ldr	r3, [pc, #444]	; (800624c <SPI_Init+0x1d8>)
 800608e:	429a      	cmp	r2, r3
 8006090:	d008      	beq.n	80060a4 <SPI_Init+0x30>
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4b6e      	ldr	r3, [pc, #440]	; (8006250 <SPI_Init+0x1dc>)
 8006096:	429a      	cmp	r2, r3
 8006098:	d004      	beq.n	80060a4 <SPI_Init+0x30>
 800609a:	486e      	ldr	r0, [pc, #440]	; (8006254 <SPI_Init+0x1e0>)
 800609c:	f44f 7183 	mov.w	r1, #262	; 0x106
 80060a0:	f7fb ff12 	bl	8001ec8 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d013      	beq.n	80060d4 <SPI_Init+0x60>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b4:	d00e      	beq.n	80060d4 <SPI_Init+0x60>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060be:	d009      	beq.n	80060d4 <SPI_Init+0x60>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060c8:	d004      	beq.n	80060d4 <SPI_Init+0x60>
 80060ca:	4862      	ldr	r0, [pc, #392]	; (8006254 <SPI_Init+0x1e0>)
 80060cc:	f240 1109 	movw	r1, #265	; 0x109
 80060d0:	f7fb fefa 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	885b      	ldrh	r3, [r3, #2]
 80060d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060dc:	d008      	beq.n	80060f0 <SPI_Init+0x7c>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	885b      	ldrh	r3, [r3, #2]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <SPI_Init+0x7c>
 80060e6:	485b      	ldr	r0, [pc, #364]	; (8006254 <SPI_Init+0x1e0>)
 80060e8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80060ec:	f7fb feec 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	889b      	ldrh	r3, [r3, #4]
 80060f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f8:	d008      	beq.n	800610c <SPI_Init+0x98>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	889b      	ldrh	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <SPI_Init+0x98>
 8006102:	4854      	ldr	r0, [pc, #336]	; (8006254 <SPI_Init+0x1e0>)
 8006104:	f240 110b 	movw	r1, #267	; 0x10b
 8006108:	f7fb fede 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	88db      	ldrh	r3, [r3, #6]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <SPI_Init+0xb2>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	88db      	ldrh	r3, [r3, #6]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d004      	beq.n	8006126 <SPI_Init+0xb2>
 800611c:	484d      	ldr	r0, [pc, #308]	; (8006254 <SPI_Init+0x1e0>)
 800611e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8006122:	f7fb fed1 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	891b      	ldrh	r3, [r3, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <SPI_Init+0xcc>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	891b      	ldrh	r3, [r3, #8]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d004      	beq.n	8006140 <SPI_Init+0xcc>
 8006136:	4847      	ldr	r0, [pc, #284]	; (8006254 <SPI_Init+0x1e0>)
 8006138:	f240 110d 	movw	r1, #269	; 0x10d
 800613c:	f7fb fec4 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	895b      	ldrh	r3, [r3, #10]
 8006144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006148:	d008      	beq.n	800615c <SPI_Init+0xe8>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	895b      	ldrh	r3, [r3, #10]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <SPI_Init+0xe8>
 8006152:	4840      	ldr	r0, [pc, #256]	; (8006254 <SPI_Init+0x1e0>)
 8006154:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006158:	f7fb feb6 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	899b      	ldrh	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d020      	beq.n	80061a6 <SPI_Init+0x132>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	899b      	ldrh	r3, [r3, #12]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d01c      	beq.n	80061a6 <SPI_Init+0x132>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	899b      	ldrh	r3, [r3, #12]
 8006170:	2b10      	cmp	r3, #16
 8006172:	d018      	beq.n	80061a6 <SPI_Init+0x132>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	899b      	ldrh	r3, [r3, #12]
 8006178:	2b18      	cmp	r3, #24
 800617a:	d014      	beq.n	80061a6 <SPI_Init+0x132>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	899b      	ldrh	r3, [r3, #12]
 8006180:	2b20      	cmp	r3, #32
 8006182:	d010      	beq.n	80061a6 <SPI_Init+0x132>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	899b      	ldrh	r3, [r3, #12]
 8006188:	2b28      	cmp	r3, #40	; 0x28
 800618a:	d00c      	beq.n	80061a6 <SPI_Init+0x132>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	899b      	ldrh	r3, [r3, #12]
 8006190:	2b30      	cmp	r3, #48	; 0x30
 8006192:	d008      	beq.n	80061a6 <SPI_Init+0x132>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	899b      	ldrh	r3, [r3, #12]
 8006198:	2b38      	cmp	r3, #56	; 0x38
 800619a:	d004      	beq.n	80061a6 <SPI_Init+0x132>
 800619c:	482d      	ldr	r0, [pc, #180]	; (8006254 <SPI_Init+0x1e0>)
 800619e:	f240 110f 	movw	r1, #271	; 0x10f
 80061a2:	f7fb fe91 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	89db      	ldrh	r3, [r3, #14]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <SPI_Init+0x14c>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	89db      	ldrh	r3, [r3, #14]
 80061b2:	2b80      	cmp	r3, #128	; 0x80
 80061b4:	d004      	beq.n	80061c0 <SPI_Init+0x14c>
 80061b6:	4827      	ldr	r0, [pc, #156]	; (8006254 <SPI_Init+0x1e0>)
 80061b8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80061bc:	f7fb fe84 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	8a1b      	ldrh	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <SPI_Init+0x15e>
 80061c8:	4822      	ldr	r0, [pc, #136]	; (8006254 <SPI_Init+0x1e0>)
 80061ca:	f240 1111 	movw	r1, #273	; 0x111
 80061ce:	f7fb fe7b 	bl	8001ec8 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80061de:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	885b      	ldrh	r3, [r3, #2]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80061f0:	4313      	orrs	r3, r2
 80061f2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80061f8:	4313      	orrs	r3, r2
 80061fa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006200:	4313      	orrs	r3, r2
 8006202:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006208:	4313      	orrs	r3, r2
 800620a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006210:	4313      	orrs	r3, r2
 8006212:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006218:	4313      	orrs	r3, r2
 800621a:	b29a      	uxth	r2, r3
 800621c:	89fb      	ldrh	r3, [r7, #14]
 800621e:	4313      	orrs	r3, r2
 8006220:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	89fa      	ldrh	r2, [r7, #14]
 8006226:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8b9b      	ldrh	r3, [r3, #28]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	8a1a      	ldrh	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	821a      	strh	r2, [r3, #16]
}
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40013000 	.word	0x40013000
 800624c:	40003800 	.word	0x40003800
 8006250:	40003c00 	.word	0x40003c00
 8006254:	08007530 	.word	0x08007530

08006258 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <SPI_Cmd+0x74>)
 8006268:	429a      	cmp	r2, r3
 800626a:	d00c      	beq.n	8006286 <SPI_Cmd+0x2e>
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <SPI_Cmd+0x78>)
 8006270:	429a      	cmp	r2, r3
 8006272:	d008      	beq.n	8006286 <SPI_Cmd+0x2e>
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <SPI_Cmd+0x7c>)
 8006278:	429a      	cmp	r2, r3
 800627a:	d004      	beq.n	8006286 <SPI_Cmd+0x2e>
 800627c:	4816      	ldr	r0, [pc, #88]	; (80062d8 <SPI_Cmd+0x80>)
 800627e:	f240 2101 	movw	r1, #513	; 0x201
 8006282:	f7fb fe21 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <SPI_Cmd+0x44>
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d004      	beq.n	800629c <SPI_Cmd+0x44>
 8006292:	4811      	ldr	r0, [pc, #68]	; (80062d8 <SPI_Cmd+0x80>)
 8006294:	f240 2102 	movw	r1, #514	; 0x202
 8006298:	f7fb fe16 	bl	8001ec8 <assert_failed>
  if (NewState != DISABLE)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e007      	b.n	80062c4 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	801a      	strh	r2, [r3, #0]
  }
}
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40013000 	.word	0x40013000
 80062d0:	40003800 	.word	0x40003800
 80062d4:	40003c00 	.word	0x40003c00
 80062d8:	08007530 	.word	0x08007530

080062dc <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	460a      	mov	r2, r1
 80062e8:	807a      	strh	r2, [r7, #2]
 80062ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	4b25      	ldr	r3, [pc, #148]	; (8006384 <SPI_I2S_DMACmd+0xa8>)
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d014      	beq.n	800631e <SPI_I2S_DMACmd+0x42>
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4b24      	ldr	r3, [pc, #144]	; (8006388 <SPI_I2S_DMACmd+0xac>)
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d010      	beq.n	800631e <SPI_I2S_DMACmd+0x42>
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	4b23      	ldr	r3, [pc, #140]	; (800638c <SPI_I2S_DMACmd+0xb0>)
 8006300:	429a      	cmp	r2, r3
 8006302:	d00c      	beq.n	800631e <SPI_I2S_DMACmd+0x42>
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4b22      	ldr	r3, [pc, #136]	; (8006390 <SPI_I2S_DMACmd+0xb4>)
 8006308:	429a      	cmp	r2, r3
 800630a:	d008      	beq.n	800631e <SPI_I2S_DMACmd+0x42>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8006312:	d004      	beq.n	800631e <SPI_I2S_DMACmd+0x42>
 8006314:	481f      	ldr	r0, [pc, #124]	; (8006394 <SPI_I2S_DMACmd+0xb8>)
 8006316:	f240 31d9 	movw	r1, #985	; 0x3d9
 800631a:	f7fb fdd5 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800631e:	787b      	ldrb	r3, [r7, #1]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <SPI_I2S_DMACmd+0x58>
 8006324:	787b      	ldrb	r3, [r7, #1]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d004      	beq.n	8006334 <SPI_I2S_DMACmd+0x58>
 800632a:	481a      	ldr	r0, [pc, #104]	; (8006394 <SPI_I2S_DMACmd+0xb8>)
 800632c:	f240 31da 	movw	r1, #986	; 0x3da
 8006330:	f7fb fdca 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 8006334:	887a      	ldrh	r2, [r7, #2]
 8006336:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <SPI_I2S_DMACmd+0x6a>
 8006340:	887b      	ldrh	r3, [r7, #2]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <SPI_I2S_DMACmd+0x74>
 8006346:	4813      	ldr	r0, [pc, #76]	; (8006394 <SPI_I2S_DMACmd+0xb8>)
 8006348:	f240 31db 	movw	r1, #987	; 0x3db
 800634c:	f7fb fdbc 	bl	8001ec8 <assert_failed>

  if (NewState != DISABLE)
 8006350:	787b      	ldrb	r3, [r7, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	889b      	ldrh	r3, [r3, #4]
 800635a:	b29a      	uxth	r2, r3
 800635c:	887b      	ldrh	r3, [r7, #2]
 800635e:	4313      	orrs	r3, r2
 8006360:	b29a      	uxth	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	809a      	strh	r2, [r3, #4]
 8006366:	e009      	b.n	800637c <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	889b      	ldrh	r3, [r3, #4]
 800636c:	b29a      	uxth	r2, r3
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	43db      	mvns	r3, r3
 8006372:	b29b      	uxth	r3, r3
 8006374:	4013      	ands	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	809a      	strh	r2, [r3, #4]
  }
}
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40013000 	.word	0x40013000
 8006388:	40003800 	.word	0x40003800
 800638c:	40003c00 	.word	0x40003c00
 8006390:	40003400 	.word	0x40003400
 8006394:	08007530 	.word	0x08007530

08006398 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80063a4:	2300      	movs	r3, #0
 80063a6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4b25      	ldr	r3, [pc, #148]	; (8006440 <SPI_I2S_GetFlagStatus+0xa8>)
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d014      	beq.n	80063da <SPI_I2S_GetFlagStatus+0x42>
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <SPI_I2S_GetFlagStatus+0xac>)
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d010      	beq.n	80063da <SPI_I2S_GetFlagStatus+0x42>
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <SPI_I2S_GetFlagStatus+0xb0>)
 80063bc:	429a      	cmp	r2, r3
 80063be:	d00c      	beq.n	80063da <SPI_I2S_GetFlagStatus+0x42>
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4b22      	ldr	r3, [pc, #136]	; (800644c <SPI_I2S_GetFlagStatus+0xb4>)
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d008      	beq.n	80063da <SPI_I2S_GetFlagStatus+0x42>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80063ce:	d004      	beq.n	80063da <SPI_I2S_GetFlagStatus+0x42>
 80063d0:	481f      	ldr	r0, [pc, #124]	; (8006450 <SPI_I2S_GetFlagStatus+0xb8>)
 80063d2:	f240 4173 	movw	r1, #1139	; 0x473
 80063d6:	f7fb fd77 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	2b80      	cmp	r3, #128	; 0x80
 80063de:	d01d      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d01a      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d017      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 80063ec:	887b      	ldrh	r3, [r7, #2]
 80063ee:	2b10      	cmp	r3, #16
 80063f0:	d014      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 80063f2:	887b      	ldrh	r3, [r7, #2]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d011      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 80063f8:	887b      	ldrh	r3, [r7, #2]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d00e      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d00b      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 8006404:	887b      	ldrh	r3, [r7, #2]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d008      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 800640a:	887b      	ldrh	r3, [r7, #2]
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	d004      	beq.n	800641c <SPI_I2S_GetFlagStatus+0x84>
 8006412:	480f      	ldr	r0, [pc, #60]	; (8006450 <SPI_I2S_GetFlagStatus+0xb8>)
 8006414:	f240 4174 	movw	r1, #1140	; 0x474
 8006418:	f7fb fd56 	bl	8001ec8 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	891b      	ldrh	r3, [r3, #8]
 8006420:	b29a      	uxth	r2, r3
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	4013      	ands	r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
 8006430:	e001      	b.n	8006436 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40013000 	.word	0x40013000
 8006444:	40003800 	.word	0x40003800
 8006448:	40003c00 	.word	0x40003c00
 800644c:	40003400 	.word	0x40003400
 8006450:	08007530 	.word	0x08007530

08006454 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <SPI_I2S_ClearFlag+0x60>)
 8006464:	429a      	cmp	r2, r3
 8006466:	d014      	beq.n	8006492 <SPI_I2S_ClearFlag+0x3e>
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <SPI_I2S_ClearFlag+0x64>)
 800646c:	429a      	cmp	r2, r3
 800646e:	d010      	beq.n	8006492 <SPI_I2S_ClearFlag+0x3e>
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <SPI_I2S_ClearFlag+0x68>)
 8006474:	429a      	cmp	r2, r3
 8006476:	d00c      	beq.n	8006492 <SPI_I2S_ClearFlag+0x3e>
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <SPI_I2S_ClearFlag+0x6c>)
 800647c:	429a      	cmp	r2, r3
 800647e:	d008      	beq.n	8006492 <SPI_I2S_ClearFlag+0x3e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8006486:	d004      	beq.n	8006492 <SPI_I2S_ClearFlag+0x3e>
 8006488:	480e      	ldr	r0, [pc, #56]	; (80064c4 <SPI_I2S_ClearFlag+0x70>)
 800648a:	f240 419b 	movw	r1, #1179	; 0x49b
 800648e:	f7fb fd1b 	bl	8001ec8 <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 8006492:	887b      	ldrh	r3, [r7, #2]
 8006494:	2b10      	cmp	r3, #16
 8006496:	d004      	beq.n	80064a2 <SPI_I2S_ClearFlag+0x4e>
 8006498:	480a      	ldr	r0, [pc, #40]	; (80064c4 <SPI_I2S_ClearFlag+0x70>)
 800649a:	f240 419c 	movw	r1, #1180	; 0x49c
 800649e:	f7fb fd13 	bl	8001ec8 <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80064a2:	887b      	ldrh	r3, [r7, #2]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	811a      	strh	r2, [r3, #8]
}
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40013000 	.word	0x40013000
 80064b8:	40003800 	.word	0x40003800
 80064bc:	40003c00 	.word	0x40003c00
 80064c0:	40003400 	.word	0x40003400
 80064c4:	08007530 	.word	0x08007530

080064c8 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	71fa      	strb	r2, [r7, #7]
 80064d4:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d018      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d015      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d012      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d00f      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d00c      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	2b06      	cmp	r3, #6
 8006502:	d009      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	2b07      	cmp	r3, #7
 8006508:	d006      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d003      	beq.n	8006518 <SYSCFG_EXTILineConfig+0x50>
 8006510:	4834      	ldr	r0, [pc, #208]	; (80065e4 <SYSCFG_EXTILineConfig+0x11c>)
 8006512:	217c      	movs	r1, #124	; 0x7c
 8006514:	f7fb fcd8 	bl	8001ec8 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8006518:	79bb      	ldrb	r3, [r7, #6]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d030      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 800651e:	79bb      	ldrb	r3, [r7, #6]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d02d      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006524:	79bb      	ldrb	r3, [r7, #6]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d02a      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 800652a:	79bb      	ldrb	r3, [r7, #6]
 800652c:	2b03      	cmp	r3, #3
 800652e:	d027      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006530:	79bb      	ldrb	r3, [r7, #6]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d024      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006536:	79bb      	ldrb	r3, [r7, #6]
 8006538:	2b05      	cmp	r3, #5
 800653a:	d021      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 800653c:	79bb      	ldrb	r3, [r7, #6]
 800653e:	2b06      	cmp	r3, #6
 8006540:	d01e      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006542:	79bb      	ldrb	r3, [r7, #6]
 8006544:	2b07      	cmp	r3, #7
 8006546:	d01b      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006548:	79bb      	ldrb	r3, [r7, #6]
 800654a:	2b08      	cmp	r3, #8
 800654c:	d018      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 800654e:	79bb      	ldrb	r3, [r7, #6]
 8006550:	2b09      	cmp	r3, #9
 8006552:	d015      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006554:	79bb      	ldrb	r3, [r7, #6]
 8006556:	2b0a      	cmp	r3, #10
 8006558:	d012      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	2b0b      	cmp	r3, #11
 800655e:	d00f      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006560:	79bb      	ldrb	r3, [r7, #6]
 8006562:	2b0c      	cmp	r3, #12
 8006564:	d00c      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006566:	79bb      	ldrb	r3, [r7, #6]
 8006568:	2b0d      	cmp	r3, #13
 800656a:	d009      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 800656c:	79bb      	ldrb	r3, [r7, #6]
 800656e:	2b0e      	cmp	r3, #14
 8006570:	d006      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006572:	79bb      	ldrb	r3, [r7, #6]
 8006574:	2b0f      	cmp	r3, #15
 8006576:	d003      	beq.n	8006580 <SYSCFG_EXTILineConfig+0xb8>
 8006578:	481a      	ldr	r0, [pc, #104]	; (80065e4 <SYSCFG_EXTILineConfig+0x11c>)
 800657a:	217d      	movs	r1, #125	; 0x7d
 800657c:	f7fb fca4 	bl	8001ec8 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8006580:	79bb      	ldrb	r3, [r7, #6]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	220f      	movs	r2, #15
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8006590:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <SYSCFG_EXTILineConfig+0x120>)
 8006592:	79ba      	ldrb	r2, [r7, #6]
 8006594:	0892      	lsrs	r2, r2, #2
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	4913      	ldr	r1, [pc, #76]	; (80065e8 <SYSCFG_EXTILineConfig+0x120>)
 800659a:	79b8      	ldrb	r0, [r7, #6]
 800659c:	0880      	lsrs	r0, r0, #2
 800659e:	b2c0      	uxtb	r0, r0
 80065a0:	3002      	adds	r0, #2
 80065a2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	43c9      	mvns	r1, r1
 80065aa:	4001      	ands	r1, r0
 80065ac:	3202      	adds	r2, #2
 80065ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <SYSCFG_EXTILineConfig+0x120>)
 80065b4:	79ba      	ldrb	r2, [r7, #6]
 80065b6:	0892      	lsrs	r2, r2, #2
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	490b      	ldr	r1, [pc, #44]	; (80065e8 <SYSCFG_EXTILineConfig+0x120>)
 80065bc:	79b8      	ldrb	r0, [r7, #6]
 80065be:	0880      	lsrs	r0, r0, #2
 80065c0:	b2c0      	uxtb	r0, r0
 80065c2:	3002      	adds	r0, #2
 80065c4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80065c8:	79fc      	ldrb	r4, [r7, #7]
 80065ca:	79b9      	ldrb	r1, [r7, #6]
 80065cc:	f001 0103 	and.w	r1, r1, #3
 80065d0:	0089      	lsls	r1, r1, #2
 80065d2:	fa04 f101 	lsl.w	r1, r4, r1
 80065d6:	4301      	orrs	r1, r0
 80065d8:	3202      	adds	r2, #2
 80065da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd90      	pop	{r4, r7, pc}
 80065e4:	08007580 	.word	0x08007580
 80065e8:	40013800 	.word	0x40013800

080065ec <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	; 0x28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80065f6:	2300      	movs	r3, #0
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
 80065fa:	2300      	movs	r3, #0
 80065fc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4b97      	ldr	r3, [pc, #604]	; (8006868 <USART_Init+0x27c>)
 800660a:	429a      	cmp	r2, r3
 800660c:	d017      	beq.n	800663e <USART_Init+0x52>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	4b96      	ldr	r3, [pc, #600]	; (800686c <USART_Init+0x280>)
 8006612:	429a      	cmp	r2, r3
 8006614:	d013      	beq.n	800663e <USART_Init+0x52>
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4b95      	ldr	r3, [pc, #596]	; (8006870 <USART_Init+0x284>)
 800661a:	429a      	cmp	r2, r3
 800661c:	d00f      	beq.n	800663e <USART_Init+0x52>
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4b94      	ldr	r3, [pc, #592]	; (8006874 <USART_Init+0x288>)
 8006622:	429a      	cmp	r2, r3
 8006624:	d00b      	beq.n	800663e <USART_Init+0x52>
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4b93      	ldr	r3, [pc, #588]	; (8006878 <USART_Init+0x28c>)
 800662a:	429a      	cmp	r2, r3
 800662c:	d007      	beq.n	800663e <USART_Init+0x52>
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4b92      	ldr	r3, [pc, #584]	; (800687c <USART_Init+0x290>)
 8006632:	429a      	cmp	r2, r3
 8006634:	d003      	beq.n	800663e <USART_Init+0x52>
 8006636:	4892      	ldr	r0, [pc, #584]	; (8006880 <USART_Init+0x294>)
 8006638:	21eb      	movs	r1, #235	; 0xeb
 800663a:	f7fb fc45 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d004      	beq.n	8006650 <USART_Init+0x64>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b8e      	ldr	r3, [pc, #568]	; (8006884 <USART_Init+0x298>)
 800664c:	429a      	cmp	r2, r3
 800664e:	d903      	bls.n	8006658 <USART_Init+0x6c>
 8006650:	488b      	ldr	r0, [pc, #556]	; (8006880 <USART_Init+0x294>)
 8006652:	21ec      	movs	r1, #236	; 0xec
 8006654:	f7fb fc38 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	889b      	ldrh	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <USART_Init+0x86>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	889b      	ldrh	r3, [r3, #4]
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006668:	d003      	beq.n	8006672 <USART_Init+0x86>
 800666a:	4885      	ldr	r0, [pc, #532]	; (8006880 <USART_Init+0x294>)
 800666c:	21ed      	movs	r1, #237	; 0xed
 800666e:	f7fb fc2b 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d012      	beq.n	80066a0 <USART_Init+0xb4>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	88db      	ldrh	r3, [r3, #6]
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	d00d      	beq.n	80066a0 <USART_Init+0xb4>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	88db      	ldrh	r3, [r3, #6]
 8006688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668c:	d008      	beq.n	80066a0 <USART_Init+0xb4>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	88db      	ldrh	r3, [r3, #6]
 8006692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006696:	d003      	beq.n	80066a0 <USART_Init+0xb4>
 8006698:	4879      	ldr	r0, [pc, #484]	; (8006880 <USART_Init+0x294>)
 800669a:	21ee      	movs	r1, #238	; 0xee
 800669c:	f7fb fc14 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	891b      	ldrh	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00d      	beq.n	80066c4 <USART_Init+0xd8>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	891b      	ldrh	r3, [r3, #8]
 80066ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b0:	d008      	beq.n	80066c4 <USART_Init+0xd8>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	891b      	ldrh	r3, [r3, #8]
 80066b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066ba:	d003      	beq.n	80066c4 <USART_Init+0xd8>
 80066bc:	4870      	ldr	r0, [pc, #448]	; (8006880 <USART_Init+0x294>)
 80066be:	21ef      	movs	r1, #239	; 0xef
 80066c0:	f7fb fc02 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	895b      	ldrh	r3, [r3, #10]
 80066c8:	461a      	mov	r2, r3
 80066ca:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <USART_Init+0xf0>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <USART_Init+0xf8>
 80066dc:	4868      	ldr	r0, [pc, #416]	; (8006880 <USART_Init+0x294>)
 80066de:	21f0      	movs	r1, #240	; 0xf0
 80066e0:	f7fb fbf2 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	899b      	ldrh	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d012      	beq.n	8006712 <USART_Init+0x126>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	899b      	ldrh	r3, [r3, #12]
 80066f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f4:	d00d      	beq.n	8006712 <USART_Init+0x126>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	899b      	ldrh	r3, [r3, #12]
 80066fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fe:	d008      	beq.n	8006712 <USART_Init+0x126>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	899b      	ldrh	r3, [r3, #12]
 8006704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006708:	d003      	beq.n	8006712 <USART_Init+0x126>
 800670a:	485d      	ldr	r0, [pc, #372]	; (8006880 <USART_Init+0x294>)
 800670c:	21f1      	movs	r1, #241	; 0xf1
 800670e:	f7fb fbdb 	bl	8001ec8 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	899b      	ldrh	r3, [r3, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d013      	beq.n	8006742 <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4b52      	ldr	r3, [pc, #328]	; (8006868 <USART_Init+0x27c>)
 800671e:	429a      	cmp	r2, r3
 8006720:	d00f      	beq.n	8006742 <USART_Init+0x156>
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4b51      	ldr	r3, [pc, #324]	; (800686c <USART_Init+0x280>)
 8006726:	429a      	cmp	r2, r3
 8006728:	d00b      	beq.n	8006742 <USART_Init+0x156>
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4b50      	ldr	r3, [pc, #320]	; (8006870 <USART_Init+0x284>)
 800672e:	429a      	cmp	r2, r3
 8006730:	d007      	beq.n	8006742 <USART_Init+0x156>
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4b51      	ldr	r3, [pc, #324]	; (800687c <USART_Init+0x290>)
 8006736:	429a      	cmp	r2, r3
 8006738:	d003      	beq.n	8006742 <USART_Init+0x156>
 800673a:	4851      	ldr	r0, [pc, #324]	; (8006880 <USART_Init+0x294>)
 800673c:	21f6      	movs	r1, #246	; 0xf6
 800673e:	f7fb fbc3 	bl	8001ec8 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	8a1b      	ldrh	r3, [r3, #16]
 8006746:	b29b      	uxth	r3, r3
 8006748:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006750:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	88db      	ldrh	r3, [r3, #6]
 8006756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006758:	4313      	orrs	r3, r2
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	b29a      	uxth	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	899b      	ldrh	r3, [r3, #12]
 8006768:	b29b      	uxth	r3, r3
 800676a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006772:	f023 030c 	bic.w	r3, r3, #12
 8006776:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	889a      	ldrh	r2, [r3, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	891b      	ldrh	r3, [r3, #8]
 8006780:	4313      	orrs	r3, r2
 8006782:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006788:	4313      	orrs	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678e:	4313      	orrs	r3, r2
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8a9b      	ldrh	r3, [r3, #20]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	899b      	ldrh	r3, [r3, #12]
 80067ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b0:	4313      	orrs	r3, r2
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fb3d 	bl	8005e40 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4b27      	ldr	r3, [pc, #156]	; (8006868 <USART_Init+0x27c>)
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d003      	beq.n	80067d6 <USART_Init+0x1ea>
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4b2a      	ldr	r3, [pc, #168]	; (800687c <USART_Init+0x290>)
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d102      	bne.n	80067dc <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	e001      	b.n	80067e0 <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	899b      	ldrh	r3, [r3, #12]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da0c      	bge.n	8006808 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009a      	lsls	r2, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	e00b      	b.n	8006820 <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8006808:	6a3a      	ldr	r2, [r7, #32]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009a      	lsls	r2, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	4b19      	ldr	r3, [pc, #100]	; (8006888 <USART_Init+0x29c>)
 8006824:	fba3 1302 	umull	r1, r3, r3, r2
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	091b      	lsrs	r3, r3, #4
 8006832:	2264      	movs	r2, #100	; 0x64
 8006834:	fb02 f303 	mul.w	r3, r2, r3
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	899b      	ldrh	r3, [r3, #12]
 8006842:	b29b      	uxth	r3, r3
 8006844:	b29b      	uxth	r3, r3
 8006846:	b21b      	sxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	da1f      	bge.n	800688c <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <USART_Init+0x29c>)
 8006856:	fba3 1302 	umull	r1, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	4313      	orrs	r3, r2
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
 8006866:	e01e      	b.n	80068a6 <USART_Init+0x2ba>
 8006868:	40011000 	.word	0x40011000
 800686c:	40004400 	.word	0x40004400
 8006870:	40004800 	.word	0x40004800
 8006874:	40004c00 	.word	0x40004c00
 8006878:	40005000 	.word	0x40005000
 800687c:	40011400 	.word	0x40011400
 8006880:	080075d4 	.word	0x080075d4
 8006884:	007270e0 	.word	0x007270e0
 8006888:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <USART_Init+0x2c8>)
 8006896:	fba3 1302 	umull	r1, r3, r3, r2
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	4313      	orrs	r3, r2
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	811a      	strh	r2, [r3, #8]
}
 80068ae:	3728      	adds	r7, #40	; 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	51eb851f 	.word	0x51eb851f

080068b8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4b1f      	ldr	r3, [pc, #124]	; (8006944 <USART_Cmd+0x8c>)
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d018      	beq.n	80068fe <USART_Cmd+0x46>
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <USART_Cmd+0x90>)
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d014      	beq.n	80068fe <USART_Cmd+0x46>
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	4b1d      	ldr	r3, [pc, #116]	; (800694c <USART_Cmd+0x94>)
 80068d8:	429a      	cmp	r2, r3
 80068da:	d010      	beq.n	80068fe <USART_Cmd+0x46>
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4b1c      	ldr	r3, [pc, #112]	; (8006950 <USART_Cmd+0x98>)
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d00c      	beq.n	80068fe <USART_Cmd+0x46>
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <USART_Cmd+0x9c>)
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d008      	beq.n	80068fe <USART_Cmd+0x46>
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <USART_Cmd+0xa0>)
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d004      	beq.n	80068fe <USART_Cmd+0x46>
 80068f4:	4819      	ldr	r0, [pc, #100]	; (800695c <USART_Cmd+0xa4>)
 80068f6:	f240 119b 	movw	r1, #411	; 0x19b
 80068fa:	f7fb fae5 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d007      	beq.n	8006914 <USART_Cmd+0x5c>
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d004      	beq.n	8006914 <USART_Cmd+0x5c>
 800690a:	4814      	ldr	r0, [pc, #80]	; (800695c <USART_Cmd+0xa4>)
 800690c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8006910:	f7fb fada 	bl	8001ec8 <assert_failed>
  
  if (NewState != DISABLE)
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d008      	beq.n	800692c <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	899b      	ldrh	r3, [r3, #12]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	819a      	strh	r2, [r3, #12]
 800692a:	e007      	b.n	800693c <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	899b      	ldrh	r3, [r3, #12]
 8006930:	b29b      	uxth	r3, r3
 8006932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	819a      	strh	r2, [r3, #12]
  }
}
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40011000 	.word	0x40011000
 8006948:	40004400 	.word	0x40004400
 800694c:	40004800 	.word	0x40004800
 8006950:	40004c00 	.word	0x40004c00
 8006954:	40005000 	.word	0x40005000
 8006958:	40011400 	.word	0x40011400
 800695c:	080075d4 	.word	0x080075d4

08006960 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	460a      	mov	r2, r1
 800696c:	807a      	strh	r2, [r7, #2]
 800696e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	2300      	movs	r3, #0
 800697a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	4b4f      	ldr	r3, [pc, #316]	; (8006ac0 <USART_ITConfig+0x160>)
 8006984:	429a      	cmp	r2, r3
 8006986:	d018      	beq.n	80069ba <USART_ITConfig+0x5a>
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4b4e      	ldr	r3, [pc, #312]	; (8006ac4 <USART_ITConfig+0x164>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d014      	beq.n	80069ba <USART_ITConfig+0x5a>
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4b4d      	ldr	r3, [pc, #308]	; (8006ac8 <USART_ITConfig+0x168>)
 8006994:	429a      	cmp	r2, r3
 8006996:	d010      	beq.n	80069ba <USART_ITConfig+0x5a>
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	4b4c      	ldr	r3, [pc, #304]	; (8006acc <USART_ITConfig+0x16c>)
 800699c:	429a      	cmp	r2, r3
 800699e:	d00c      	beq.n	80069ba <USART_ITConfig+0x5a>
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4b4b      	ldr	r3, [pc, #300]	; (8006ad0 <USART_ITConfig+0x170>)
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d008      	beq.n	80069ba <USART_ITConfig+0x5a>
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <USART_ITConfig+0x174>)
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d004      	beq.n	80069ba <USART_ITConfig+0x5a>
 80069b0:	4849      	ldr	r0, [pc, #292]	; (8006ad8 <USART_ITConfig+0x178>)
 80069b2:	f240 41bd 	movw	r1, #1213	; 0x4bd
 80069b6:	f7fb fa87 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 80069ba:	887b      	ldrh	r3, [r7, #2]
 80069bc:	2b28      	cmp	r3, #40	; 0x28
 80069be:	d025      	beq.n	8006a0c <USART_ITConfig+0xac>
 80069c0:	887a      	ldrh	r2, [r7, #2]
 80069c2:	f240 7327 	movw	r3, #1831	; 0x727
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d020      	beq.n	8006a0c <USART_ITConfig+0xac>
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	f240 6326 	movw	r3, #1574	; 0x626
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d01b      	beq.n	8006a0c <USART_ITConfig+0xac>
 80069d4:	887a      	ldrh	r2, [r7, #2]
 80069d6:	f240 5325 	movw	r3, #1317	; 0x525
 80069da:	429a      	cmp	r2, r3
 80069dc:	d016      	beq.n	8006a0c <USART_ITConfig+0xac>
 80069de:	887a      	ldrh	r2, [r7, #2]
 80069e0:	f240 4324 	movw	r3, #1060	; 0x424
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d011      	beq.n	8006a0c <USART_ITConfig+0xac>
 80069e8:	887a      	ldrh	r2, [r7, #2]
 80069ea:	f640 0346 	movw	r3, #2118	; 0x846
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d00c      	beq.n	8006a0c <USART_ITConfig+0xac>
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	f640 136a 	movw	r3, #2410	; 0x96a
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d007      	beq.n	8006a0c <USART_ITConfig+0xac>
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	2b60      	cmp	r3, #96	; 0x60
 8006a00:	d004      	beq.n	8006a0c <USART_ITConfig+0xac>
 8006a02:	4835      	ldr	r0, [pc, #212]	; (8006ad8 <USART_ITConfig+0x178>)
 8006a04:	f240 41be 	movw	r1, #1214	; 0x4be
 8006a08:	f7fb fa5e 	bl	8001ec8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006a0c:	787b      	ldrb	r3, [r7, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <USART_ITConfig+0xc2>
 8006a12:	787b      	ldrb	r3, [r7, #1]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d004      	beq.n	8006a22 <USART_ITConfig+0xc2>
 8006a18:	482f      	ldr	r0, [pc, #188]	; (8006ad8 <USART_ITConfig+0x178>)
 8006a1a:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8006a1e:	f7fb fa53 	bl	8001ec8 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 8006a22:	887a      	ldrh	r2, [r7, #2]
 8006a24:	f640 136a 	movw	r3, #2410	; 0x96a
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d114      	bne.n	8006a56 <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <USART_ITConfig+0x160>)
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d010      	beq.n	8006a56 <USART_ITConfig+0xf6>
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4b23      	ldr	r3, [pc, #140]	; (8006ac4 <USART_ITConfig+0x164>)
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d00c      	beq.n	8006a56 <USART_ITConfig+0xf6>
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <USART_ITConfig+0x168>)
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d008      	beq.n	8006a56 <USART_ITConfig+0xf6>
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4b23      	ldr	r3, [pc, #140]	; (8006ad4 <USART_ITConfig+0x174>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d004      	beq.n	8006a56 <USART_ITConfig+0xf6>
 8006a4c:	4822      	ldr	r0, [pc, #136]	; (8006ad8 <USART_ITConfig+0x178>)
 8006a4e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a52:	f7fb fa39 	bl	8001ec8 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8006a5a:	887b      	ldrh	r3, [r7, #2]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d103      	bne.n	8006a84 <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e009      	b.n	8006a98 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d103      	bne.n	8006a92 <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e002      	b.n	8006a98 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	3314      	adds	r3, #20
 8006a96:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8006a98:	787b      	ldrb	r3, [r7, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	6811      	ldr	r1, [r2, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e006      	b.n	8006aba <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	6811      	ldr	r1, [r2, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	43d2      	mvns	r2, r2
 8006ab6:	400a      	ands	r2, r1
 8006ab8:	601a      	str	r2, [r3, #0]
  }
}
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40011000 	.word	0x40011000
 8006ac4:	40004400 	.word	0x40004400
 8006ac8:	40004800 	.word	0x40004800
 8006acc:	40004c00 	.word	0x40004c00
 8006ad0:	40005000 	.word	0x40005000
 8006ad4:	40011400 	.word	0x40011400
 8006ad8:	080075d4 	.word	0x080075d4

08006adc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	2300      	movs	r3, #0
 8006af2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8006af4:	2300      	movs	r3, #0
 8006af6:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4b5c      	ldr	r3, [pc, #368]	; (8006c6c <USART_GetITStatus+0x190>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d018      	beq.n	8006b32 <USART_GetITStatus+0x56>
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	4b5b      	ldr	r3, [pc, #364]	; (8006c70 <USART_GetITStatus+0x194>)
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d014      	beq.n	8006b32 <USART_GetITStatus+0x56>
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4b5a      	ldr	r3, [pc, #360]	; (8006c74 <USART_GetITStatus+0x198>)
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d010      	beq.n	8006b32 <USART_GetITStatus+0x56>
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	4b59      	ldr	r3, [pc, #356]	; (8006c78 <USART_GetITStatus+0x19c>)
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d00c      	beq.n	8006b32 <USART_GetITStatus+0x56>
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	4b58      	ldr	r3, [pc, #352]	; (8006c7c <USART_GetITStatus+0x1a0>)
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d008      	beq.n	8006b32 <USART_GetITStatus+0x56>
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4b57      	ldr	r3, [pc, #348]	; (8006c80 <USART_GetITStatus+0x1a4>)
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d004      	beq.n	8006b32 <USART_GetITStatus+0x56>
 8006b28:	4856      	ldr	r0, [pc, #344]	; (8006c84 <USART_GetITStatus+0x1a8>)
 8006b2a:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8006b2e:	f7fb f9cb 	bl	8001ec8 <assert_failed>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8006b32:	887b      	ldrh	r3, [r7, #2]
 8006b34:	2b28      	cmp	r3, #40	; 0x28
 8006b36:	d037      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b38:	887a      	ldrh	r2, [r7, #2]
 8006b3a:	f240 7327 	movw	r3, #1831	; 0x727
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d032      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b42:	887a      	ldrh	r2, [r7, #2]
 8006b44:	f240 6326 	movw	r3, #1574	; 0x626
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d02d      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b4c:	887a      	ldrh	r2, [r7, #2]
 8006b4e:	f240 5325 	movw	r3, #1317	; 0x525
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d028      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	f240 4324 	movw	r3, #1060	; 0x424
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d023      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b60:	887a      	ldrh	r2, [r7, #2]
 8006b62:	f640 0346 	movw	r3, #2118	; 0x846
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d01e      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b6a:	887a      	ldrh	r2, [r7, #2]
 8006b6c:	f640 136a 	movw	r3, #2410	; 0x96a
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d019      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b74:	887b      	ldrh	r3, [r7, #2]
 8006b76:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8006b7a:	d015      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b7c:	887a      	ldrh	r2, [r7, #2]
 8006b7e:	f240 3325 	movw	r3, #805	; 0x325
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d010      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b86:	887b      	ldrh	r3, [r7, #2]
 8006b88:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8006b8c:	d00c      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8006b94:	d008      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b96:	887b      	ldrh	r3, [r7, #2]
 8006b98:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8006b9c:	d004      	beq.n	8006ba8 <USART_GetITStatus+0xcc>
 8006b9e:	4839      	ldr	r0, [pc, #228]	; (8006c84 <USART_GetITStatus+0x1a8>)
 8006ba0:	f240 5151 	movw	r1, #1361	; 0x551
 8006ba4:	f7fb f990 	bl	8001ec8 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 8006ba8:	887a      	ldrh	r2, [r7, #2]
 8006baa:	f640 136a 	movw	r3, #2410	; 0x96a
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d114      	bne.n	8006bdc <USART_GetITStatus+0x100>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <USART_GetITStatus+0x190>)
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d010      	beq.n	8006bdc <USART_GetITStatus+0x100>
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	4b2c      	ldr	r3, [pc, #176]	; (8006c70 <USART_GetITStatus+0x194>)
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d00c      	beq.n	8006bdc <USART_GetITStatus+0x100>
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <USART_GetITStatus+0x198>)
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d008      	beq.n	8006bdc <USART_GetITStatus+0x100>
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4b2c      	ldr	r3, [pc, #176]	; (8006c80 <USART_GetITStatus+0x1a4>)
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d004      	beq.n	8006bdc <USART_GetITStatus+0x100>
 8006bd2:	482c      	ldr	r0, [pc, #176]	; (8006c84 <USART_GetITStatus+0x1a8>)
 8006bd4:	f240 5156 	movw	r1, #1366	; 0x556
 8006bd8:	f7fb f976 	bl	8001ec8 <assert_failed>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8006bdc:	887b      	ldrh	r3, [r7, #2]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8006be6:	887b      	ldrh	r3, [r7, #2]
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d106      	bne.n	8006c0c <USART_GetITStatus+0x130>
  {
    itmask &= USARTx->CR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	899b      	ldrh	r3, [r3, #12]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4013      	ands	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e00f      	b.n	8006c2c <USART_GetITStatus+0x150>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d106      	bne.n	8006c20 <USART_GetITStatus+0x144>
  {
    itmask &= USARTx->CR2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	8a1b      	ldrh	r3, [r3, #16]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e005      	b.n	8006c2c <USART_GetITStatus+0x150>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8a9b      	ldrh	r3, [r3, #20]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8006c2c:	887b      	ldrh	r3, [r7, #2]
 8006c2e:	0a1b      	lsrs	r3, r3, #8
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4013      	ands	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <USART_GetITStatus+0x180>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USART_GetITStatus+0x180>
  {
    bitstatus = SET;
 8006c56:	2301      	movs	r3, #1
 8006c58:	74fb      	strb	r3, [r7, #19]
 8006c5a:	e001      	b.n	8006c60 <USART_GetITStatus+0x184>
  }
  else
  {
    bitstatus = RESET;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40011000 	.word	0x40011000
 8006c70:	40004400 	.word	0x40004400
 8006c74:	40004800 	.word	0x40004800
 8006c78:	40004c00 	.word	0x40004c00
 8006c7c:	40005000 	.word	0x40005000
 8006c80:	40011400 	.word	0x40011400
 8006c84:	080075d4 	.word	0x080075d4

08006c88 <atoi>:
 8006c88:	2100      	movs	r1, #0
 8006c8a:	220a      	movs	r2, #10
 8006c8c:	f000 b9ec 	b.w	8007068 <strtol>

08006c90 <__libc_init_array>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	4e0f      	ldr	r6, [pc, #60]	; (8006cd0 <__libc_init_array+0x40>)
 8006c94:	4d0f      	ldr	r5, [pc, #60]	; (8006cd4 <__libc_init_array+0x44>)
 8006c96:	1b76      	subs	r6, r6, r5
 8006c98:	10b6      	asrs	r6, r6, #2
 8006c9a:	d007      	beq.n	8006cac <__libc_init_array+0x1c>
 8006c9c:	3d04      	subs	r5, #4
 8006c9e:	2400      	movs	r4, #0
 8006ca0:	3401      	adds	r4, #1
 8006ca2:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8006ca6:	4798      	blx	r3
 8006ca8:	42a6      	cmp	r6, r4
 8006caa:	d1f9      	bne.n	8006ca0 <__libc_init_array+0x10>
 8006cac:	4e0a      	ldr	r6, [pc, #40]	; (8006cd8 <__libc_init_array+0x48>)
 8006cae:	4d0b      	ldr	r5, [pc, #44]	; (8006cdc <__libc_init_array+0x4c>)
 8006cb0:	1b76      	subs	r6, r6, r5
 8006cb2:	f000 fd59 	bl	8007768 <_init>
 8006cb6:	10b6      	asrs	r6, r6, #2
 8006cb8:	d008      	beq.n	8006ccc <__libc_init_array+0x3c>
 8006cba:	3d04      	subs	r5, #4
 8006cbc:	2400      	movs	r4, #0
 8006cbe:	3401      	adds	r4, #1
 8006cc0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8006cc4:	4798      	blx	r3
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d1f9      	bne.n	8006cbe <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}
 8006cce:	bf00      	nop
 8006cd0:	08007780 	.word	0x08007780
 8006cd4:	08007780 	.word	0x08007780
 8006cd8:	08007788 	.word	0x08007788
 8006cdc:	08007780 	.word	0x08007780

08006ce0 <memcmp>:
 8006ce0:	2a03      	cmp	r2, #3
 8006ce2:	b470      	push	{r4, r5, r6}
 8006ce4:	d928      	bls.n	8006d38 <memcmp+0x58>
 8006ce6:	ea40 0301 	orr.w	r3, r0, r1
 8006cea:	079b      	lsls	r3, r3, #30
 8006cec:	d013      	beq.n	8006d16 <memcmp+0x36>
 8006cee:	7805      	ldrb	r5, [r0, #0]
 8006cf0:	780c      	ldrb	r4, [r1, #0]
 8006cf2:	42a5      	cmp	r5, r4
 8006cf4:	d124      	bne.n	8006d40 <memcmp+0x60>
 8006cf6:	3a01      	subs	r2, #1
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e005      	b.n	8006d08 <memcmp+0x28>
 8006cfc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d04:	42a5      	cmp	r5, r4
 8006d06:	d11b      	bne.n	8006d40 <memcmp+0x60>
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	f103 0301 	add.w	r3, r3, #1
 8006d0e:	d1f5      	bne.n	8006cfc <memcmp+0x1c>
 8006d10:	2000      	movs	r0, #0
 8006d12:	bc70      	pop	{r4, r5, r6}
 8006d14:	4770      	bx	lr
 8006d16:	460c      	mov	r4, r1
 8006d18:	4603      	mov	r3, r0
 8006d1a:	6825      	ldr	r5, [r4, #0]
 8006d1c:	681e      	ldr	r6, [r3, #0]
 8006d1e:	42ae      	cmp	r6, r5
 8006d20:	4621      	mov	r1, r4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f104 0404 	add.w	r4, r4, #4
 8006d28:	f103 0304 	add.w	r3, r3, #4
 8006d2c:	d104      	bne.n	8006d38 <memcmp+0x58>
 8006d2e:	3a04      	subs	r2, #4
 8006d30:	2a03      	cmp	r2, #3
 8006d32:	4618      	mov	r0, r3
 8006d34:	4621      	mov	r1, r4
 8006d36:	d8f0      	bhi.n	8006d1a <memcmp+0x3a>
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d1d8      	bne.n	8006cee <memcmp+0xe>
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	e7e8      	b.n	8006d12 <memcmp+0x32>
 8006d40:	1b28      	subs	r0, r5, r4
 8006d42:	bc70      	pop	{r4, r5, r6}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop

08006d48 <memset>:
 8006d48:	b4f0      	push	{r4, r5, r6, r7}
 8006d4a:	0784      	lsls	r4, r0, #30
 8006d4c:	d043      	beq.n	8006dd6 <memset+0x8e>
 8006d4e:	1e54      	subs	r4, r2, #1
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	d03e      	beq.n	8006dd2 <memset+0x8a>
 8006d54:	b2cd      	uxtb	r5, r1
 8006d56:	4603      	mov	r3, r0
 8006d58:	e003      	b.n	8006d62 <memset+0x1a>
 8006d5a:	1e62      	subs	r2, r4, #1
 8006d5c:	2c00      	cmp	r4, #0
 8006d5e:	d038      	beq.n	8006dd2 <memset+0x8a>
 8006d60:	4614      	mov	r4, r2
 8006d62:	f803 5b01 	strb.w	r5, [r3], #1
 8006d66:	079a      	lsls	r2, r3, #30
 8006d68:	d1f7      	bne.n	8006d5a <memset+0x12>
 8006d6a:	2c03      	cmp	r4, #3
 8006d6c:	d92a      	bls.n	8006dc4 <memset+0x7c>
 8006d6e:	b2cd      	uxtb	r5, r1
 8006d70:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006d74:	2c0f      	cmp	r4, #15
 8006d76:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006d7a:	d915      	bls.n	8006da8 <memset+0x60>
 8006d7c:	f1a4 0710 	sub.w	r7, r4, #16
 8006d80:	093f      	lsrs	r7, r7, #4
 8006d82:	f103 0610 	add.w	r6, r3, #16
 8006d86:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6015      	str	r5, [r2, #0]
 8006d8e:	6055      	str	r5, [r2, #4]
 8006d90:	6095      	str	r5, [r2, #8]
 8006d92:	60d5      	str	r5, [r2, #12]
 8006d94:	3210      	adds	r2, #16
 8006d96:	42b2      	cmp	r2, r6
 8006d98:	d1f8      	bne.n	8006d8c <memset+0x44>
 8006d9a:	f004 040f 	and.w	r4, r4, #15
 8006d9e:	3701      	adds	r7, #1
 8006da0:	2c03      	cmp	r4, #3
 8006da2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8006da6:	d90d      	bls.n	8006dc4 <memset+0x7c>
 8006da8:	461e      	mov	r6, r3
 8006daa:	4622      	mov	r2, r4
 8006dac:	3a04      	subs	r2, #4
 8006dae:	2a03      	cmp	r2, #3
 8006db0:	f846 5b04 	str.w	r5, [r6], #4
 8006db4:	d8fa      	bhi.n	8006dac <memset+0x64>
 8006db6:	1f22      	subs	r2, r4, #4
 8006db8:	f022 0203 	bic.w	r2, r2, #3
 8006dbc:	3204      	adds	r2, #4
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f004 0403 	and.w	r4, r4, #3
 8006dc4:	b12c      	cbz	r4, 8006dd2 <memset+0x8a>
 8006dc6:	b2c9      	uxtb	r1, r1
 8006dc8:	441c      	add	r4, r3
 8006dca:	f803 1b01 	strb.w	r1, [r3], #1
 8006dce:	42a3      	cmp	r3, r4
 8006dd0:	d1fb      	bne.n	8006dca <memset+0x82>
 8006dd2:	bcf0      	pop	{r4, r5, r6, r7}
 8006dd4:	4770      	bx	lr
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	4603      	mov	r3, r0
 8006dda:	e7c6      	b.n	8006d6a <memset+0x22>

08006ddc <strlen>:
 8006ddc:	f020 0103 	bic.w	r1, r0, #3
 8006de0:	f010 0003 	ands.w	r0, r0, #3
 8006de4:	f1c0 0000 	rsb	r0, r0, #0
 8006de8:	f851 3b04 	ldr.w	r3, [r1], #4
 8006dec:	f100 0c04 	add.w	ip, r0, #4
 8006df0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006df4:	f06f 0200 	mvn.w	r2, #0
 8006df8:	bf1c      	itt	ne
 8006dfa:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006dfe:	4313      	orrne	r3, r2
 8006e00:	f04f 0c01 	mov.w	ip, #1
 8006e04:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006e08:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006e0c:	eba3 020c 	sub.w	r2, r3, ip
 8006e10:	ea22 0203 	bic.w	r2, r2, r3
 8006e14:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006e18:	bf04      	itt	eq
 8006e1a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006e1e:	3004      	addeq	r0, #4
 8006e20:	d0f4      	beq.n	8006e0c <strlen+0x30>
 8006e22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e26:	bf1f      	itttt	ne
 8006e28:	3001      	addne	r0, #1
 8006e2a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006e2e:	3001      	addne	r0, #1
 8006e30:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006e34:	bf18      	it	ne
 8006e36:	3001      	addne	r0, #1
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop

08006e3c <strncmp>:
 8006e3c:	b430      	push	{r4, r5}
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d04a      	beq.n	8006ed8 <strncmp+0x9c>
 8006e42:	ea40 0301 	orr.w	r3, r0, r1
 8006e46:	f013 0303 	ands.w	r3, r3, #3
 8006e4a:	d12d      	bne.n	8006ea8 <strncmp+0x6c>
 8006e4c:	2a03      	cmp	r2, #3
 8006e4e:	d92b      	bls.n	8006ea8 <strncmp+0x6c>
 8006e50:	6804      	ldr	r4, [r0, #0]
 8006e52:	680d      	ldr	r5, [r1, #0]
 8006e54:	42ac      	cmp	r4, r5
 8006e56:	d127      	bne.n	8006ea8 <strncmp+0x6c>
 8006e58:	3a04      	subs	r2, #4
 8006e5a:	d03d      	beq.n	8006ed8 <strncmp+0x9c>
 8006e5c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8006e60:	ea25 0404 	bic.w	r4, r5, r4
 8006e64:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8006e68:	d13c      	bne.n	8006ee4 <strncmp+0xa8>
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	e00e      	b.n	8006e8e <strncmp+0x52>
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	6864      	ldr	r4, [r4, #4]
 8006e74:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	ea25 0503 	bic.w	r5, r5, r3
 8006e7e:	d113      	bne.n	8006ea8 <strncmp+0x6c>
 8006e80:	3a04      	subs	r2, #4
 8006e82:	d029      	beq.n	8006ed8 <strncmp+0x9c>
 8006e84:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8006e88:	d129      	bne.n	8006ede <strncmp+0xa2>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	2a03      	cmp	r2, #3
 8006e90:	f100 0004 	add.w	r0, r0, #4
 8006e94:	f101 0104 	add.w	r1, r1, #4
 8006e98:	d8ea      	bhi.n	8006e70 <strncmp+0x34>
 8006e9a:	1e55      	subs	r5, r2, #1
 8006e9c:	b92a      	cbnz	r2, 8006eaa <strncmp+0x6e>
 8006e9e:	7918      	ldrb	r0, [r3, #4]
 8006ea0:	7922      	ldrb	r2, [r4, #4]
 8006ea2:	1a80      	subs	r0, r0, r2
 8006ea4:	bc30      	pop	{r4, r5}
 8006ea6:	4770      	bx	lr
 8006ea8:	1e55      	subs	r5, r2, #1
 8006eaa:	7803      	ldrb	r3, [r0, #0]
 8006eac:	780a      	ldrb	r2, [r1, #0]
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d11a      	bne.n	8006ee8 <strncmp+0xac>
 8006eb2:	b1dd      	cbz	r5, 8006eec <strncmp+0xb0>
 8006eb4:	b1b3      	cbz	r3, 8006ee4 <strncmp+0xa8>
 8006eb6:	1c6c      	adds	r4, r5, #1
 8006eb8:	440c      	add	r4, r1
 8006eba:	1c8b      	adds	r3, r1, #2
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	e004      	b.n	8006eca <strncmp+0x8e>
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d00c      	beq.n	8006ede <strncmp+0xa2>
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d0ec      	beq.n	8006ea4 <strncmp+0x68>
 8006eca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ece:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006ed2:	4290      	cmp	r0, r2
 8006ed4:	d0f4      	beq.n	8006ec0 <strncmp+0x84>
 8006ed6:	e7e4      	b.n	8006ea2 <strncmp+0x66>
 8006ed8:	4610      	mov	r0, r2
 8006eda:	bc30      	pop	{r4, r5}
 8006edc:	4770      	bx	lr
 8006ede:	2000      	movs	r0, #0
 8006ee0:	bc30      	pop	{r4, r5}
 8006ee2:	4770      	bx	lr
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	e7dd      	b.n	8006ea4 <strncmp+0x68>
 8006ee8:	4618      	mov	r0, r3
 8006eea:	e7da      	b.n	8006ea2 <strncmp+0x66>
 8006eec:	4628      	mov	r0, r5
 8006eee:	e7d9      	b.n	8006ea4 <strncmp+0x68>

08006ef0 <strncpy>:
 8006ef0:	ea40 0301 	orr.w	r3, r0, r1
 8006ef4:	079b      	lsls	r3, r3, #30
 8006ef6:	b470      	push	{r4, r5, r6}
 8006ef8:	d12a      	bne.n	8006f50 <strncpy+0x60>
 8006efa:	2a03      	cmp	r2, #3
 8006efc:	d928      	bls.n	8006f50 <strncpy+0x60>
 8006efe:	460c      	mov	r4, r1
 8006f00:	4603      	mov	r3, r0
 8006f02:	4621      	mov	r1, r4
 8006f04:	f854 5b04 	ldr.w	r5, [r4], #4
 8006f08:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8006f0c:	ea26 0605 	bic.w	r6, r6, r5
 8006f10:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8006f14:	d105      	bne.n	8006f22 <strncpy+0x32>
 8006f16:	3a04      	subs	r2, #4
 8006f18:	2a03      	cmp	r2, #3
 8006f1a:	f843 5b04 	str.w	r5, [r3], #4
 8006f1e:	4621      	mov	r1, r4
 8006f20:	d8ef      	bhi.n	8006f02 <strncpy+0x12>
 8006f22:	b19a      	cbz	r2, 8006f4c <strncpy+0x5c>
 8006f24:	780c      	ldrb	r4, [r1, #0]
 8006f26:	701c      	strb	r4, [r3, #0]
 8006f28:	3a01      	subs	r2, #1
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b13c      	cbz	r4, 8006f3e <strncpy+0x4e>
 8006f2e:	b16a      	cbz	r2, 8006f4c <strncpy+0x5c>
 8006f30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f34:	f803 4b01 	strb.w	r4, [r3], #1
 8006f38:	3a01      	subs	r2, #1
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	d1f7      	bne.n	8006f2e <strncpy+0x3e>
 8006f3e:	b12a      	cbz	r2, 8006f4c <strncpy+0x5c>
 8006f40:	441a      	add	r2, r3
 8006f42:	2100      	movs	r1, #0
 8006f44:	f803 1b01 	strb.w	r1, [r3], #1
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d1fb      	bne.n	8006f44 <strncpy+0x54>
 8006f4c:	bc70      	pop	{r4, r5, r6}
 8006f4e:	4770      	bx	lr
 8006f50:	4603      	mov	r3, r0
 8006f52:	e7e6      	b.n	8006f22 <strncpy+0x32>

08006f54 <_strtol_r>:
 8006f54:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f58:	4c42      	ldr	r4, [pc, #264]	; (8007064 <_strtol_r+0x110>)
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	f8d4 c000 	ldr.w	ip, [r4]
 8006f60:	9001      	str	r0, [sp, #4]
 8006f62:	460e      	mov	r6, r1
 8006f64:	e000      	b.n	8006f68 <_strtol_r+0x14>
 8006f66:	4626      	mov	r6, r4
 8006f68:	4634      	mov	r4, r6
 8006f6a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006f6e:	eb0c 0005 	add.w	r0, ip, r5
 8006f72:	7840      	ldrb	r0, [r0, #1]
 8006f74:	f000 0008 	and.w	r0, r0, #8
 8006f78:	f000 0aff 	and.w	sl, r0, #255	; 0xff
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1f2      	bne.n	8006f66 <_strtol_r+0x12>
 8006f80:	2d2d      	cmp	r5, #45	; 0x2d
 8006f82:	d05b      	beq.n	800703c <_strtol_r+0xe8>
 8006f84:	2d2b      	cmp	r5, #43	; 0x2b
 8006f86:	bf04      	itt	eq
 8006f88:	7875      	ldrbeq	r5, [r6, #1]
 8006f8a:	1cb4      	addeq	r4, r6, #2
 8006f8c:	f033 0010 	bics.w	r0, r3, #16
 8006f90:	d03c      	beq.n	800700c <_strtol_r+0xb8>
 8006f92:	4699      	mov	r9, r3
 8006f94:	f1ba 0f00 	cmp.w	sl, #0
 8006f98:	bf0c      	ite	eq
 8006f9a:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
 8006f9e:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
 8006fa2:	fbbb f8f9 	udiv	r8, fp, r9
 8006fa6:	2700      	movs	r7, #0
 8006fa8:	fb09 bb18 	mls	fp, r9, r8, fp
 8006fac:	4638      	mov	r0, r7
 8006fae:	e00c      	b.n	8006fca <_strtol_r+0x76>
 8006fb0:	3d30      	subs	r5, #48	; 0x30
 8006fb2:	42ab      	cmp	r3, r5
 8006fb4:	dd19      	ble.n	8006fea <_strtol_r+0x96>
 8006fb6:	1c7e      	adds	r6, r7, #1
 8006fb8:	d005      	beq.n	8006fc6 <_strtol_r+0x72>
 8006fba:	4540      	cmp	r0, r8
 8006fbc:	d823      	bhi.n	8007006 <_strtol_r+0xb2>
 8006fbe:	d020      	beq.n	8007002 <_strtol_r+0xae>
 8006fc0:	fb09 5000 	mla	r0, r9, r0, r5
 8006fc4:	2701      	movs	r7, #1
 8006fc6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006fca:	eb0c 0605 	add.w	r6, ip, r5
 8006fce:	7876      	ldrb	r6, [r6, #1]
 8006fd0:	f016 0f04 	tst.w	r6, #4
 8006fd4:	d1ec      	bne.n	8006fb0 <_strtol_r+0x5c>
 8006fd6:	f016 0603 	ands.w	r6, r6, #3
 8006fda:	d006      	beq.n	8006fea <_strtol_r+0x96>
 8006fdc:	2e01      	cmp	r6, #1
 8006fde:	bf14      	ite	ne
 8006fe0:	2657      	movne	r6, #87	; 0x57
 8006fe2:	2637      	moveq	r6, #55	; 0x37
 8006fe4:	1bad      	subs	r5, r5, r6
 8006fe6:	42ab      	cmp	r3, r5
 8006fe8:	dce5      	bgt.n	8006fb6 <_strtol_r+0x62>
 8006fea:	1c7b      	adds	r3, r7, #1
 8006fec:	d015      	beq.n	800701a <_strtol_r+0xc6>
 8006fee:	f1ba 0f00 	cmp.w	sl, #0
 8006ff2:	d121      	bne.n	8007038 <_strtol_r+0xe4>
 8006ff4:	b10a      	cbz	r2, 8006ffa <_strtol_r+0xa6>
 8006ff6:	b9ef      	cbnz	r7, 8007034 <_strtol_r+0xe0>
 8006ff8:	6011      	str	r1, [r2, #0]
 8006ffa:	b002      	add	sp, #8
 8006ffc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007000:	4770      	bx	lr
 8007002:	455d      	cmp	r5, fp
 8007004:	dddc      	ble.n	8006fc0 <_strtol_r+0x6c>
 8007006:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800700a:	e7dc      	b.n	8006fc6 <_strtol_r+0x72>
 800700c:	2d30      	cmp	r5, #48	; 0x30
 800700e:	d01a      	beq.n	8007046 <_strtol_r+0xf2>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1be      	bne.n	8006f92 <_strtol_r+0x3e>
 8007014:	230a      	movs	r3, #10
 8007016:	4699      	mov	r9, r3
 8007018:	e7bc      	b.n	8006f94 <_strtol_r+0x40>
 800701a:	9901      	ldr	r1, [sp, #4]
 800701c:	f1ba 0f00 	cmp.w	sl, #0
 8007020:	f04f 0322 	mov.w	r3, #34	; 0x22
 8007024:	bf0c      	ite	eq
 8007026:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800702a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800702e:	600b      	str	r3, [r1, #0]
 8007030:	2a00      	cmp	r2, #0
 8007032:	d0e2      	beq.n	8006ffa <_strtol_r+0xa6>
 8007034:	1e61      	subs	r1, r4, #1
 8007036:	e7df      	b.n	8006ff8 <_strtol_r+0xa4>
 8007038:	4240      	negs	r0, r0
 800703a:	e7db      	b.n	8006ff4 <_strtol_r+0xa0>
 800703c:	1cb4      	adds	r4, r6, #2
 800703e:	7875      	ldrb	r5, [r6, #1]
 8007040:	f04f 0a01 	mov.w	sl, #1
 8007044:	e7a2      	b.n	8006f8c <_strtol_r+0x38>
 8007046:	7820      	ldrb	r0, [r4, #0]
 8007048:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800704c:	2858      	cmp	r0, #88	; 0x58
 800704e:	d003      	beq.n	8007058 <_strtol_r+0x104>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d19e      	bne.n	8006f92 <_strtol_r+0x3e>
 8007054:	2308      	movs	r3, #8
 8007056:	e79c      	b.n	8006f92 <_strtol_r+0x3e>
 8007058:	2310      	movs	r3, #16
 800705a:	7865      	ldrb	r5, [r4, #1]
 800705c:	4699      	mov	r9, r3
 800705e:	3402      	adds	r4, #2
 8007060:	e798      	b.n	8006f94 <_strtol_r+0x40>
 8007062:	bf00      	nop
 8007064:	2000045c 	.word	0x2000045c

08007068 <strtol>:
 8007068:	b430      	push	{r4, r5}
 800706a:	4c04      	ldr	r4, [pc, #16]	; (800707c <strtol+0x14>)
 800706c:	460d      	mov	r5, r1
 800706e:	4613      	mov	r3, r2
 8007070:	4601      	mov	r1, r0
 8007072:	462a      	mov	r2, r5
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	bc30      	pop	{r4, r5}
 8007078:	f7ff bf6c 	b.w	8006f54 <_strtol_r>
 800707c:	20000458 	.word	0x20000458

08007080 <register_fini>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <register_fini+0xc>)
 8007082:	b113      	cbz	r3, 800708a <register_fini+0xa>
 8007084:	4802      	ldr	r0, [pc, #8]	; (8007090 <register_fini+0x10>)
 8007086:	f000 b805 	b.w	8007094 <atexit>
 800708a:	4770      	bx	lr
 800708c:	00000000 	.word	0x00000000
 8007090:	080070a1 	.word	0x080070a1

08007094 <atexit>:
 8007094:	4601      	mov	r1, r0
 8007096:	2000      	movs	r0, #0
 8007098:	4602      	mov	r2, r0
 800709a:	4603      	mov	r3, r0
 800709c:	f000 b818 	b.w	80070d0 <__register_exitproc>

080070a0 <__libc_fini_array>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d09      	ldr	r5, [pc, #36]	; (80070c8 <__libc_fini_array+0x28>)
 80070a4:	4c09      	ldr	r4, [pc, #36]	; (80070cc <__libc_fini_array+0x2c>)
 80070a6:	1b64      	subs	r4, r4, r5
 80070a8:	10a4      	asrs	r4, r4, #2
 80070aa:	bf18      	it	ne
 80070ac:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 80070b0:	d005      	beq.n	80070be <__libc_fini_array+0x1e>
 80070b2:	3c01      	subs	r4, #1
 80070b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80070b8:	4798      	blx	r3
 80070ba:	2c00      	cmp	r4, #0
 80070bc:	d1f9      	bne.n	80070b2 <__libc_fini_array+0x12>
 80070be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c2:	f000 bb57 	b.w	8007774 <_fini>
 80070c6:	bf00      	nop
 80070c8:	08007788 	.word	0x08007788
 80070cc:	0800778c 	.word	0x0800778c

080070d0 <__register_exitproc>:
 80070d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d2:	4c27      	ldr	r4, [pc, #156]	; (8007170 <__register_exitproc+0xa0>)
 80070d4:	6826      	ldr	r6, [r4, #0]
 80070d6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80070da:	b085      	sub	sp, #20
 80070dc:	4607      	mov	r7, r0
 80070de:	2c00      	cmp	r4, #0
 80070e0:	d041      	beq.n	8007166 <__register_exitproc+0x96>
 80070e2:	6865      	ldr	r5, [r4, #4]
 80070e4:	2d1f      	cmp	r5, #31
 80070e6:	dd1e      	ble.n	8007126 <__register_exitproc+0x56>
 80070e8:	4822      	ldr	r0, [pc, #136]	; (8007174 <__register_exitproc+0xa4>)
 80070ea:	b918      	cbnz	r0, 80070f4 <__register_exitproc+0x24>
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f0:	b005      	add	sp, #20
 80070f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80070f8:	9103      	str	r1, [sp, #12]
 80070fa:	9202      	str	r2, [sp, #8]
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	f3af 8000 	nop.w
 8007102:	9903      	ldr	r1, [sp, #12]
 8007104:	9a02      	ldr	r2, [sp, #8]
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	4604      	mov	r4, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	d0ee      	beq.n	80070ec <__register_exitproc+0x1c>
 800710e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8007112:	6025      	str	r5, [r4, #0]
 8007114:	2000      	movs	r0, #0
 8007116:	6060      	str	r0, [r4, #4]
 8007118:	4605      	mov	r5, r0
 800711a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800711e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8007122:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8007126:	b93f      	cbnz	r7, 8007138 <__register_exitproc+0x68>
 8007128:	1cab      	adds	r3, r5, #2
 800712a:	2000      	movs	r0, #0
 800712c:	3501      	adds	r5, #1
 800712e:	6065      	str	r5, [r4, #4]
 8007130:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8007134:	b005      	add	sp, #20
 8007136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007138:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 800713c:	f04f 0c01 	mov.w	ip, #1
 8007140:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8007144:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8007148:	fa0c f205 	lsl.w	r2, ip, r5
 800714c:	4316      	orrs	r6, r2
 800714e:	2f02      	cmp	r7, #2
 8007150:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8007154:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8007158:	d1e6      	bne.n	8007128 <__register_exitproc+0x58>
 800715a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800715e:	431a      	orrs	r2, r3
 8007160:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8007164:	e7e0      	b.n	8007128 <__register_exitproc+0x58>
 8007166:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 800716a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800716e:	e7b8      	b.n	80070e2 <__register_exitproc+0x12>
 8007170:	08007660 	.word	0x08007660
 8007174:	00000000 	.word	0x00000000
 8007178:	ccbbaadd 	.word	0xccbbaadd
 800717c:	00002211 	.word	0x00002211
 8007180:	0800a8c0 	.word	0x0800a8c0
 8007184:	00ffffff 	.word	0x00ffffff
 8007188:	0100a8c0 	.word	0x0100a8c0
 800718c:	6f746f6d 	.word	0x6f746f6d
 8007190:	00000072 	.word	0x00000072
 8007194:	6f746f6d 	.word	0x6f746f6d
 8007198:	5b202072 	.word	0x5b202072
 800719c:	6974706f 	.word	0x6974706f
 80071a0:	5d736e6f 	.word	0x5d736e6f
 80071a4:	705ba0c2 	.word	0x705ba0c2
 80071a8:	6d617261 	.word	0x6d617261
 80071ac:	72657465 	.word	0x72657465
 80071b0:	a0c25d73 	.word	0xa0c25d73
 80071b4:	6f43203a 	.word	0x6f43203a
 80071b8:	6f72746e 	.word	0x6f72746e
 80071bc:	6d20736c 	.word	0x6d20736c
 80071c0:	726f746f 	.word	0x726f746f
 80071c4:	65707320 	.word	0x65707320
 80071c8:	202c6465 	.word	0x202c6465
 80071cc:	2c6d7072 	.word	0x2c6d7072
 80071d0:	63746520 	.word	0x63746520
 80071d4:	2e202c2e 	.word	0x2e202c2e
 80071d8:	0a0d202e 	.word	0x0a0d202e
 80071dc:	00000000 	.word	0x00000000
 80071e0:	65657073 	.word	0x65657073
 80071e4:	00000064 	.word	0x00000064
 80071e8:	72727245 	.word	0x72727245
 80071ec:	3a20726f 	.word	0x3a20726f
 80071f0:	0a642520 	.word	0x0a642520
 80071f4:	0000000a 	.word	0x0000000a
 80071f8:	00000000 	.word	0x00000000
 80071fc:	65657053 	.word	0x65657053
 8007200:	75732064 	.word	0x75732064
 8007204:	65736363 	.word	0x65736363
 8007208:	6c756673 	.word	0x6c756673
 800720c:	7320796c 	.word	0x7320796c
 8007210:	0a2e7465 	.word	0x0a2e7465
 8007214:	0000000a 	.word	0x0000000a
 8007218:	6f727245 	.word	0x6f727245
 800721c:	65732072 	.word	0x65732072
 8007220:	6e69646e 	.word	0x6e69646e
 8007224:	75512067 	.word	0x75512067
 8007228:	21657565 	.word	0x21657565
 800722c:	00000a0a 	.word	0x00000a0a
 8007230:	00746573 	.word	0x00746573
 8007234:	00746567 	.word	0x00746567
 8007238:	706f7473 	.word	0x706f7473
 800723c:	00000000 	.word	0x00000000
 8007240:	72617473 	.word	0x72617473
 8007244:	00000074 	.word	0x00000074
 8007248:	6c756e28 	.word	0x6c756e28
 800724c:	0000296c 	.word	0x0000296c
 8007250:	6f746f6d 	.word	0x6f746f6d
 8007254:	00000072 	.word	0x00000072
 8007258:	6f746f6d 	.word	0x6f746f6d
 800725c:	5b202072 	.word	0x5b202072
 8007260:	6974706f 	.word	0x6974706f
 8007264:	5d736e6f 	.word	0x5d736e6f
 8007268:	705ba0c2 	.word	0x705ba0c2
 800726c:	6d617261 	.word	0x6d617261
 8007270:	72657465 	.word	0x72657465
 8007274:	a0c25d73 	.word	0xa0c25d73
 8007278:	6f43203a 	.word	0x6f43203a
 800727c:	6f72746e 	.word	0x6f72746e
 8007280:	6d20736c 	.word	0x6d20736c
 8007284:	726f746f 	.word	0x726f746f
 8007288:	65707320 	.word	0x65707320
 800728c:	202c6465 	.word	0x202c6465
 8007290:	2c6d7072 	.word	0x2c6d7072
 8007294:	63746520 	.word	0x63746520
 8007298:	2e202c2e 	.word	0x2e202c2e
 800729c:	0a0d202e 	.word	0x0a0d202e
 80072a0:	00000000 	.word	0x00000000
 80072a4:	4d544553 	.word	0x4d544553
 80072a8:	00004341 	.word	0x00004341
 80072ac:	74696e69 	.word	0x74696e69
 80072b0:	3235575f 	.word	0x3235575f
 80072b4:	00003030 	.word	0x00003030
 80072b8:	454c4449 	.word	0x454c4449
 80072bc:	00000000 	.word	0x00000000
 80072c0:	20726d54 	.word	0x20726d54
 80072c4:	00637653 	.word	0x00637653
 80072c8:	706c6568 	.word	0x706c6568
 80072cc:	00000000 	.word	0x00000000
 80072d0:	65680a0d 	.word	0x65680a0d
 80072d4:	0d3a706c 	.word	0x0d3a706c
 80072d8:	694c200a 	.word	0x694c200a
 80072dc:	20737473 	.word	0x20737473
 80072e0:	206c6c61 	.word	0x206c6c61
 80072e4:	20656874 	.word	0x20656874
 80072e8:	69676572 	.word	0x69676572
 80072ec:	72657473 	.word	0x72657473
 80072f0:	63206465 	.word	0x63206465
 80072f4:	616d6d6f 	.word	0x616d6d6f
 80072f8:	0d73646e 	.word	0x0d73646e
 80072fc:	000a0d0a 	.word	0x000a0d0a
 8007300:	6f636e49 	.word	0x6f636e49
 8007304:	63657272 	.word	0x63657272
 8007308:	6f632074 	.word	0x6f632074
 800730c:	6e616d6d 	.word	0x6e616d6d
 8007310:	61702064 	.word	0x61702064
 8007314:	656d6172 	.word	0x656d6172
 8007318:	28726574 	.word	0x28726574
 800731c:	202e2973 	.word	0x202e2973
 8007320:	746e4520 	.word	0x746e4520
 8007324:	22207265 	.word	0x22207265
 8007328:	706c6568 	.word	0x706c6568
 800732c:	6f742022 	.word	0x6f742022
 8007330:	65697620 	.word	0x65697620
 8007334:	20612077 	.word	0x20612077
 8007338:	7473696c 	.word	0x7473696c
 800733c:	20666f20 	.word	0x20666f20
 8007340:	69617661 	.word	0x69617661
 8007344:	6c62616c 	.word	0x6c62616c
 8007348:	6f632065 	.word	0x6f632065
 800734c:	6e616d6d 	.word	0x6e616d6d
 8007350:	0d2e7364 	.word	0x0d2e7364
 8007354:	000a0d0a 	.word	0x000a0d0a
 8007358:	6d6d6f43 	.word	0x6d6d6f43
 800735c:	20646e61 	.word	0x20646e61
 8007360:	20746f6e 	.word	0x20746f6e
 8007364:	6f636572 	.word	0x6f636572
 8007368:	73696e67 	.word	0x73696e67
 800736c:	202e6465 	.word	0x202e6465
 8007370:	746e4520 	.word	0x746e4520
 8007374:	27207265 	.word	0x27207265
 8007378:	706c6568 	.word	0x706c6568
 800737c:	6f742027 	.word	0x6f742027
 8007380:	65697620 	.word	0x65697620
 8007384:	20612077 	.word	0x20612077
 8007388:	7473696c 	.word	0x7473696c
 800738c:	20666f20 	.word	0x20666f20
 8007390:	69617661 	.word	0x69617661
 8007394:	6c62616c 	.word	0x6c62616c
 8007398:	6f632065 	.word	0x6f632065
 800739c:	6e616d6d 	.word	0x6e616d6d
 80073a0:	0d2e7364 	.word	0x0d2e7364
 80073a4:	000a0d0a 	.word	0x000a0d0a
 80073a8:	2f707041 	.word	0x2f707041
 80073ac:	334d5453 	.word	0x334d5453
 80073b0:	2d344632 	.word	0x2d344632
 80073b4:	63736944 	.word	0x63736944
 80073b8:	7265766f 	.word	0x7265766f
 80073bc:	694c2f79 	.word	0x694c2f79
 80073c0:	72617262 	.word	0x72617262
 80073c4:	2f736569 	.word	0x2f736569
 80073c8:	334d5453 	.word	0x334d5453
 80073cc:	78344632 	.word	0x78344632
 80073d0:	74535f78 	.word	0x74535f78
 80073d4:	72655064 	.word	0x72655064
 80073d8:	5f687069 	.word	0x5f687069
 80073dc:	76697244 	.word	0x76697244
 80073e0:	732f7265 	.word	0x732f7265
 80073e4:	6d2f6372 	.word	0x6d2f6372
 80073e8:	2e637369 	.word	0x2e637369
 80073ec:	00000063 	.word	0x00000063
 80073f0:	2f707041 	.word	0x2f707041
 80073f4:	334d5453 	.word	0x334d5453
 80073f8:	2d344632 	.word	0x2d344632
 80073fc:	63736944 	.word	0x63736944
 8007400:	7265766f 	.word	0x7265766f
 8007404:	694c2f79 	.word	0x694c2f79
 8007408:	72617262 	.word	0x72617262
 800740c:	2f736569 	.word	0x2f736569
 8007410:	334d5453 	.word	0x334d5453
 8007414:	78344632 	.word	0x78344632
 8007418:	74535f78 	.word	0x74535f78
 800741c:	72655064 	.word	0x72655064
 8007420:	5f687069 	.word	0x5f687069
 8007424:	76697244 	.word	0x76697244
 8007428:	732f7265 	.word	0x732f7265
 800742c:	732f6372 	.word	0x732f6372
 8007430:	32336d74 	.word	0x32336d74
 8007434:	78783466 	.word	0x78783466
 8007438:	616d645f 	.word	0x616d645f
 800743c:	0000632e 	.word	0x0000632e
 8007440:	2f707041 	.word	0x2f707041
 8007444:	334d5453 	.word	0x334d5453
 8007448:	2d344632 	.word	0x2d344632
 800744c:	63736944 	.word	0x63736944
 8007450:	7265766f 	.word	0x7265766f
 8007454:	694c2f79 	.word	0x694c2f79
 8007458:	72617262 	.word	0x72617262
 800745c:	2f736569 	.word	0x2f736569
 8007460:	334d5453 	.word	0x334d5453
 8007464:	78344632 	.word	0x78344632
 8007468:	74535f78 	.word	0x74535f78
 800746c:	72655064 	.word	0x72655064
 8007470:	5f687069 	.word	0x5f687069
 8007474:	76697244 	.word	0x76697244
 8007478:	732f7265 	.word	0x732f7265
 800747c:	732f6372 	.word	0x732f6372
 8007480:	32336d74 	.word	0x32336d74
 8007484:	78783466 	.word	0x78783466
 8007488:	7478655f 	.word	0x7478655f
 800748c:	00632e69 	.word	0x00632e69
 8007490:	2f707041 	.word	0x2f707041
 8007494:	334d5453 	.word	0x334d5453
 8007498:	2d344632 	.word	0x2d344632
 800749c:	63736944 	.word	0x63736944
 80074a0:	7265766f 	.word	0x7265766f
 80074a4:	694c2f79 	.word	0x694c2f79
 80074a8:	72617262 	.word	0x72617262
 80074ac:	2f736569 	.word	0x2f736569
 80074b0:	334d5453 	.word	0x334d5453
 80074b4:	78344632 	.word	0x78344632
 80074b8:	74535f78 	.word	0x74535f78
 80074bc:	72655064 	.word	0x72655064
 80074c0:	5f687069 	.word	0x5f687069
 80074c4:	76697244 	.word	0x76697244
 80074c8:	732f7265 	.word	0x732f7265
 80074cc:	732f6372 	.word	0x732f6372
 80074d0:	32336d74 	.word	0x32336d74
 80074d4:	78783466 	.word	0x78783466
 80074d8:	6970675f 	.word	0x6970675f
 80074dc:	00632e6f 	.word	0x00632e6f
 80074e0:	2f707041 	.word	0x2f707041
 80074e4:	334d5453 	.word	0x334d5453
 80074e8:	2d344632 	.word	0x2d344632
 80074ec:	63736944 	.word	0x63736944
 80074f0:	7265766f 	.word	0x7265766f
 80074f4:	694c2f79 	.word	0x694c2f79
 80074f8:	72617262 	.word	0x72617262
 80074fc:	2f736569 	.word	0x2f736569
 8007500:	334d5453 	.word	0x334d5453
 8007504:	78344632 	.word	0x78344632
 8007508:	74535f78 	.word	0x74535f78
 800750c:	72655064 	.word	0x72655064
 8007510:	5f687069 	.word	0x5f687069
 8007514:	76697244 	.word	0x76697244
 8007518:	732f7265 	.word	0x732f7265
 800751c:	732f6372 	.word	0x732f6372
 8007520:	32336d74 	.word	0x32336d74
 8007524:	78783466 	.word	0x78783466
 8007528:	6363725f 	.word	0x6363725f
 800752c:	0000632e 	.word	0x0000632e
 8007530:	2f707041 	.word	0x2f707041
 8007534:	334d5453 	.word	0x334d5453
 8007538:	2d344632 	.word	0x2d344632
 800753c:	63736944 	.word	0x63736944
 8007540:	7265766f 	.word	0x7265766f
 8007544:	694c2f79 	.word	0x694c2f79
 8007548:	72617262 	.word	0x72617262
 800754c:	2f736569 	.word	0x2f736569
 8007550:	334d5453 	.word	0x334d5453
 8007554:	78344632 	.word	0x78344632
 8007558:	74535f78 	.word	0x74535f78
 800755c:	72655064 	.word	0x72655064
 8007560:	5f687069 	.word	0x5f687069
 8007564:	76697244 	.word	0x76697244
 8007568:	732f7265 	.word	0x732f7265
 800756c:	732f6372 	.word	0x732f6372
 8007570:	32336d74 	.word	0x32336d74
 8007574:	78783466 	.word	0x78783466
 8007578:	6970735f 	.word	0x6970735f
 800757c:	0000632e 	.word	0x0000632e
 8007580:	2f707041 	.word	0x2f707041
 8007584:	334d5453 	.word	0x334d5453
 8007588:	2d344632 	.word	0x2d344632
 800758c:	63736944 	.word	0x63736944
 8007590:	7265766f 	.word	0x7265766f
 8007594:	694c2f79 	.word	0x694c2f79
 8007598:	72617262 	.word	0x72617262
 800759c:	2f736569 	.word	0x2f736569
 80075a0:	334d5453 	.word	0x334d5453
 80075a4:	78344632 	.word	0x78344632
 80075a8:	74535f78 	.word	0x74535f78
 80075ac:	72655064 	.word	0x72655064
 80075b0:	5f687069 	.word	0x5f687069
 80075b4:	76697244 	.word	0x76697244
 80075b8:	732f7265 	.word	0x732f7265
 80075bc:	732f6372 	.word	0x732f6372
 80075c0:	32336d74 	.word	0x32336d74
 80075c4:	78783466 	.word	0x78783466
 80075c8:	7379735f 	.word	0x7379735f
 80075cc:	2e676663 	.word	0x2e676663
 80075d0:	00000063 	.word	0x00000063
 80075d4:	2f707041 	.word	0x2f707041
 80075d8:	334d5453 	.word	0x334d5453
 80075dc:	2d344632 	.word	0x2d344632
 80075e0:	63736944 	.word	0x63736944
 80075e4:	7265766f 	.word	0x7265766f
 80075e8:	694c2f79 	.word	0x694c2f79
 80075ec:	72617262 	.word	0x72617262
 80075f0:	2f736569 	.word	0x2f736569
 80075f4:	334d5453 	.word	0x334d5453
 80075f8:	78344632 	.word	0x78344632
 80075fc:	74535f78 	.word	0x74535f78
 8007600:	72655064 	.word	0x72655064
 8007604:	5f687069 	.word	0x5f687069
 8007608:	76697244 	.word	0x76697244
 800760c:	732f7265 	.word	0x732f7265
 8007610:	732f6372 	.word	0x732f6372
 8007614:	32336d74 	.word	0x32336d74
 8007618:	78783466 	.word	0x78783466
 800761c:	6173755f 	.word	0x6173755f
 8007620:	632e7472 	.word	0x632e7472
 8007624:	00000000 	.word	0x00000000

08007628 <xMotorCommand>:
 8007628:	08007250 08007258 080018ad 00000004     Pr..Xr..........

08007638 <ucExpectedStackBytes.8478>:
 8007638:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8007648:	a5a5a5a5                                ....

0800764c <xHelpCommand>:
 800764c:	080072c8 080072d0 080042fd 00000000     .r...r...B......
 800765c:	00000043                                C...

08007660 <_global_impure_ptr>:
 8007660:	20000030                                0.. 

08007664 <_ctype_>:
 8007664:	20202000 20202020 28282020 20282828     .         ((((( 
 8007674:	20202020 20202020 20202020 20202020                     
 8007684:	10108820 10101010 10101010 10101010      ...............
 8007694:	04040410 04040404 10040404 10101010     ................
 80076a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80076b4:	01010101 01010101 01010101 10101010     ................
 80076c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80076d4:	02020202 02020202 02020202 10101010     ................
 80076e4:	00000020 00000000 00000000 00000000      ...............
 80076f4:	00000000 00000000 00000000 00000000     ................
 8007704:	00000000 00000000 00000000 00000000     ................
 8007714:	00000000 00000000 00000000 00000000     ................
 8007724:	00000000 00000000 00000000 00000000     ................
 8007734:	00000000 00000000 00000000 00000000     ................
 8007744:	00000000 00000000 00000000 00000000     ................
 8007754:	00000000 00000000 00000000 00000000     ................
 8007764:	00000000                                ....

08007768 <_init>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr

08007774 <_fini>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr
