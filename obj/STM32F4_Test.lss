
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ec  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08009874  08009874  00011874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800987c  0800987c  0001187c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000470  20000000  08009880  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013fcc  20000470  08009cf0  00018470  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  2001443c  0801dcbc  00018470  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00018470  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000bbfc  00000000  00000000  0001849e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000026d8  00000000  00000000  0002409a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000498f  00000000  00000000  00026772  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d00  00000000  00000000  0002b101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bc0  00000000  00000000  0002be01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000063eb  00000000  00000000  0002c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000043f8  00000000  00000000  00032dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  000371a4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002e80  00000000  00000000  00037214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000470 	.word	0x20000470
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800985c 	.word	0x0800985c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800985c 	.word	0x0800985c
 80001d0:	20000474 	.word	0x20000474
 80001d4:	20000470 	.word	0x20000470
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
#define pdTrue 	1

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f007 fb31 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f007 fb2d 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f007 fb29 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	48b1      	ldr	r0, [pc, #708]	; (8000614 <init_SPIx+0x304>)
 8000350:	4619      	mov	r1, r3
 8000352:	f007 f82d 	bl	80073b0 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000376:	48a7      	ldr	r0, [pc, #668]	; (8000614 <init_SPIx+0x304>)
 8000378:	4619      	mov	r1, r3
 800037a:	f007 f819 	bl	80073b0 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039e:	489d      	ldr	r0, [pc, #628]	; (8000614 <init_SPIx+0x304>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f007 f805 	bl	80073b0 <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	489b      	ldr	r0, [pc, #620]	; (8000614 <init_SPIx+0x304>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f007 f916 	bl	80075dc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	4898      	ldr	r0, [pc, #608]	; (8000614 <init_SPIx+0x304>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f007 f911 	bl	80075dc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	4896      	ldr	r0, [pc, #600]	; (8000614 <init_SPIx+0x304>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f007 f90c 	bl	80075dc <GPIO_PinAFConfig>


	RCC_AHB1PeriphClockCmd(WIZ_HR_GPIO_CLK, ENABLE);
 80003c4:	2004      	movs	r0, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	f007 fada 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(WIZ_IT_GPIO_CLK, ENABLE);
 80003cc:	2004      	movs	r0, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	f007 fad6 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	
		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003d4:	2310      	movs	r3, #16
 80003d6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003d8:	2301      	movs	r3, #1
 80003da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <init_SPIx+0x304>)
 80003f6:	4619      	mov	r1, r3
 80003f8:	f006 ffda 	bl	80073b0 <GPIO_Init>
	
	CSOFF(); // set PA4 high
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 80003fe:	4a85      	ldr	r2, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 8000400:	8b12      	ldrh	r2, [r2, #24]
 8000402:	b292      	uxth	r2, r2
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	b292      	uxth	r2, r2
 800040a:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = WIZ_HR_PIN;
 800040c:	2320      	movs	r3, #32
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000422:	2301      	movs	r3, #1
 8000424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(WIZ_HR_GPIO_PORT, &GPIO_InitStruct);
 8000428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800042c:	487a      	ldr	r0, [pc, #488]	; (8000618 <init_SPIx+0x308>)
 800042e:	4619      	mov	r1, r3
 8000430:	f006 ffbe 	bl	80073b0 <GPIO_Init>
	
	RESET_LOW(); // set PA3 high
 8000434:	4b78      	ldr	r3, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000436:	4a78      	ldr	r2, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000438:	8b12      	ldrh	r2, [r2, #24]
 800043a:	b292      	uxth	r2, r2
 800043c:	f042 0220 	orr.w	r2, r2, #32
 8000440:	b292      	uxth	r2, r2
 8000442:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 8000444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000448:	2101      	movs	r1, #1
 800044a:	f007 fad1 	bl	80079f0 <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800044e:	2300      	movs	r3, #0
 8000450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000462:	2300      	movs	r3, #0
 8000464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800046e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000476:	2308      	movs	r3, #8
 8000478:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPIx, &SPI_InitStruct); 
 8000482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000486:	4865      	ldr	r0, [pc, #404]	; (800061c <init_SPIx+0x30c>)
 8000488:	4619      	mov	r1, r3
 800048a:	f007 fae9 	bl	8007a60 <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 800048e:	4863      	ldr	r0, [pc, #396]	; (800061c <init_SPIx+0x30c>)
 8000490:	2101      	movs	r1, #1
 8000492:	f007 fbd7 	bl	8007c44 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000496:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800049a:	2101      	movs	r1, #1
 800049c:	f007 fa70 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 80004a0:	485f      	ldr	r0, [pc, #380]	; (8000620 <init_SPIx+0x310>)
 80004a2:	f005 fe9d 	bl	80061e0 <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 80004a6:	485f      	ldr	r0, [pc, #380]	; (8000624 <init_SPIx+0x314>)
 80004a8:	f005 fe9a 	bl	80061e0 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 80004ac:	bf00      	nop
 80004ae:	485c      	ldr	r0, [pc, #368]	; (8000620 <init_SPIx+0x310>)
 80004b0:	f006 faa6 	bl	8006a00 <DMA_GetCmdStatus>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <init_SPIx+0x19e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 80004ba:	bf00      	nop
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <init_SPIx+0x314>)
 80004be:	f006 fa9f 	bl	8006a00 <DMA_GetCmdStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <init_SPIx+0x1ac>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f006 f961 	bl	8006794 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <init_SPIx+0x318>)
 80004e2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <init_SPIx+0x31c>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <init_SPIx+0x310>)
 8000510:	4619      	mov	r1, r3
 8000512:	f005 ff7b 	bl	800640c <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 8000516:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800051a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <init_SPIx+0x320>)
 8000522:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000528:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <init_SPIx+0x314>)
 8000530:	4619      	mov	r1, r3
 8000532:	f005 ff6b 	bl	800640c <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <init_SPIx+0x310>)
 8000538:	2110      	movs	r1, #16
 800053a:	2201      	movs	r2, #1
 800053c:	f006 fade 	bl	8006afc <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000540:	4838      	ldr	r0, [pc, #224]	; (8000624 <init_SPIx+0x314>)
 8000542:	2110      	movs	r1, #16
 8000544:	2201      	movs	r2, #1
 8000546:	f006 fad9 	bl	8006afc <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <init_SPIx+0x30c>)
 800054c:	2102      	movs	r1, #2
 800054e:	f007 fc77 	bl	8007e40 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <init_SPIx+0x30c>)
 8000554:	2101      	movs	r1, #1
 8000556:	f007 fc73 	bl	8007e40 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 800055a:	233b      	movs	r3, #59	; 0x3b
 800055c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;
 800055e:	2306      	movs	r3, #6
 8000560:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000562:	2301      	movs	r3, #1
 8000564:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fdbc 	bl	80060ec <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 8000574:	233a      	movs	r3, #58	; 0x3a
 8000576:	733b      	strb	r3, [r7, #12]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;
 8000578:	2306      	movs	r3, #6
 800057a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 800057c:	2301      	movs	r3, #1
 800057e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f005 fdaf 	bl	80060ec <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800058e:	4823      	ldr	r0, [pc, #140]	; (800061c <init_SPIx+0x30c>)
 8000590:	2102      	movs	r1, #2
 8000592:	2201      	movs	r2, #1
 8000594:	f007 fb98 	bl	8007cc8 <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <init_SPIx+0x30c>)
 800059a:	2101      	movs	r1, #1
 800059c:	2201      	movs	r2, #1
 800059e:	f007 fb93 	bl	8007cc8 <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin */
	GPIO_InitStruct.GPIO_Pin = WIZ_IT_PIN;
 80005a2:	2310      	movs	r3, #16
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(WIZ_IT_GPIO_PORT, &GPIO_InitStruct);	
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <init_SPIx+0x308>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	f006 fef3 	bl	80073b0 <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2101      	movs	r1, #1
 80005d0:	f007 fa0e 	bl	80079f0 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(WIZ_IT_EXTI_PORT_SOURCE, WIZ_IT_EXTI_PIN_SOURCE);
 80005d4:	2002      	movs	r0, #2
 80005d6:	2104      	movs	r1, #4
 80005d8:	f007 fc6c 	bl	8007eb4 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = WIZ_IT_EXTI_LINE;
 80005dc:	2310      	movs	r3, #16
 80005de:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005e0:	2300      	movs	r3, #0
 80005e2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005e4:	230c      	movs	r3, #12
 80005e6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 fda2 	bl	8007138 <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = WIZ_IT_EXTI_IRQn;
 80005f4:	230a      	movs	r3, #10
 80005f6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 5;
 80005f8:	230a      	movs	r3, #10
 80005fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fd70 	bl	80060ec <NVIC_Init>


	
}
 800060c:	3768      	adds	r7, #104	; 0x68
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020800 	.word	0x40020800
 800061c:	40013000 	.word	0x40013000
 8000620:	40026458 	.word	0x40026458
 8000624:	40026440 	.word	0x40026440
 8000628:	4001300c 	.word	0x4001300c
 800062c:	20013a00 	.word	0x20013a00
 8000630:	20013228 	.word	0x20013228

08000634 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 800063a:	491e      	ldr	r1, [pc, #120]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800063c:	f006 fb14 	bl	8006c68 <DMA_GetITStatus>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02a      	beq.n	800069c <DMA2_Stream2_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000648:	491a      	ldr	r1, [pc, #104]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800064a:	f006 fcc9 	bl	8006fe0 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800064e:	bf00      	nop
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	f007 fb96 	bl	8007d84 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <DMA2_Stream2_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000662:	8b12      	ldrh	r2, [r2, #24]
 8000664:	b292      	uxth	r2, r2
 8000666:	f042 0210 	orr.w	r2, r2, #16
 800066a:	b292      	uxth	r2, r2
 800066c:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000670:	2100      	movs	r1, #0
 8000672:	f006 f8c5 	bl	8006800 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000678:	2100      	movs	r1, #0
 800067a:	f006 f8c1 	bl	8006800 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 800067e:	f004 fd1d 	bl	80050bc <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xHigherPriorityTaskWoken = pdFalse;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA2_Stream2_IRQHandler+0x94>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	2100      	movs	r1, #0
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000692:	2300      	movs	r3, #0
 8000694:	f004 f924 	bl	80048e0 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 8000698:	f004 fd20 	bl	80050dc <vPortExitCritical>
  }	
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <DMA2_Stream2_IRQHandler+0x78>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <DMA2_Stream2_IRQHandler+0x98>)
 80006a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40026440 	.word	0x40026440
 80006b4:	10208000 	.word	0x10208000
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40026458 	.word	0x40026458
 80006c4:	2000048c 	.word	0x2000048c
 80006c8:	20013214 	.word	0x20013214
 80006cc:	e000ed04 	.word	0xe000ed04

080006d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006d6:	491e      	ldr	r1, [pc, #120]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006d8:	f006 fac6 	bl	8006c68 <DMA_GetITStatus>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d02a      	beq.n	8000738 <DMA2_Stream3_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006e6:	f006 fc7b 	bl	8006fe0 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006ea:	bf00      	nop
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	f007 fb48 	bl	8007d84 <SPI_I2S_GetFlagStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0f8      	beq.n	80006ec <DMA2_Stream3_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fe:	8b12      	ldrh	r2, [r2, #24]
 8000700:	b292      	uxth	r2, r2
 8000702:	f042 0210 	orr.w	r2, r2, #16
 8000706:	b292      	uxth	r2, r2
 8000708:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 800070c:	2100      	movs	r1, #0
 800070e:	f006 f877 	bl	8006800 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000714:	2100      	movs	r1, #0
 8000716:	f006 f873 	bl	8006800 <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 800071a:	f004 fccf 	bl	80050bc <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xHigherPriorityTaskWoken = pdFalse;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <DMA2_Stream3_IRQHandler+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800072e:	2300      	movs	r3, #0
 8000730:	f004 f8d6 	bl	80048e0 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000734:	f004 fcd2 	bl	80050dc <vPortExitCritical>
 }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <DMA2_Stream3_IRQHandler+0x78>
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DMA2_Stream3_IRQHandler+0x98>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40026458 	.word	0x40026458
 8000750:	18008000 	.word	0x18008000
 8000754:	40013000 	.word	0x40013000
 8000758:	40020000 	.word	0x40020000
 800075c:	40026440 	.word	0x40026440
 8000760:	2000048c 	.word	0x2000048c
 8000764:	20013214 	.word	0x20013214
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <spi_dma_send>:


/*---------------------------- Matic Knap 25 Jun 2014 ---------------------*/

void spi_dma_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
{
 800076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	460b      	mov	r3, r1
 8000776:	603a      	str	r2, [r7, #0]
 8000778:	4602      	mov	r2, r0
 800077a:	80fa      	strh	r2, [r7, #6]
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	466b      	mov	r3, sp
 8000780:	461e      	mov	r6, r3
		uint8_t buffer[data_len+4];
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	1d19      	adds	r1, r3, #4
 8000786:	1e4b      	subs	r3, r1, #1
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	460b      	mov	r3, r1
 800078c:	461a      	mov	r2, r3
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000796:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800079a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800079e:	460b      	mov	r3, r1
 80007a0:	461a      	mov	r2, r3
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	00dd      	lsls	r5, r3, #3
 80007a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80007ac:	00d4      	lsls	r4, r2, #3
 80007ae:	460b      	mov	r3, r1
 80007b0:	3307      	adds	r3, #7
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	ebad 0d03 	sub.w	sp, sp, r3
 80007ba:	466b      	mov	r3, sp
 80007bc:	3300      	adds	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80007da:	121b      	asrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007f2:	2304      	movs	r3, #4
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <spi_dma_send+0xa4>
			buffer[i] = (data_buf[i-4]);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	440b      	add	r3, r1
 8000808:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
		buffer[3] = (data_len & 0x00ff);

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	1d1a      	adds	r2, r3, #4
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	429a      	cmp	r2, r3
 8000818:	dcee      	bgt.n	80007f8 <spi_dma_send+0x8c>
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	3304      	adds	r3, #4
 800081e:	b29b      	uxth	r3, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <spi_dma_send+0x100>)
 8000822:	4619      	mov	r1, r3
 8000824:	f006 f878 	bl	8006918 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <spi_dma_send+0x100>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <spi_dma_send+0x104>)
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <spi_dma_send+0x104>)
 8000832:	8b52      	ldrh	r2, [r2, #26]
 8000834:	b292      	uxth	r2, r2
 8000836:	f042 0210 	orr.w	r2, r2, #16
 800083a:	b292      	uxth	r2, r2
 800083c:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <spi_dma_send+0x100>)
 8000840:	2101      	movs	r1, #1
 8000842:	f005 ffdd 	bl	8006800 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <spi_dma_send+0x108>)
 8000848:	2101      	movs	r1, #1
 800084a:	f005 ffd9 	bl	8006800 <DMA_Cmd>
		/* Block until the semaphore is given */
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <spi_dma_send+0x10c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800085a:	2300      	movs	r3, #0
 800085c:	f004 f8aa 	bl	80049b4 <xQueueGenericReceive>
 8000860:	46b5      	mov	sp, r6

	//	CSOFF(); // chip deselect 
			
	
}
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800086a:	bf00      	nop
 800086c:	40026458 	.word	0x40026458
 8000870:	40020000 	.word	0x40020000
 8000874:	40026440 	.word	0x40026440
 8000878:	20013214 	.word	0x20013214

0800087c <spi_dma_send2B>:

void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4602      	mov	r2, r0
 8000884:	460b      	mov	r3, r1
 8000886:	80fa      	strh	r2, [r7, #6]
 8000888:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[6];
	uint16_t data_len = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	81fb      	strh	r3, [r7, #14]
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	723b      	strb	r3, [r7, #8]
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	727b      	strb	r3, [r7, #9]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	 buffer[3] = (data_len & 0x00ff);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	72fb      	strb	r3, [r7, #11]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	733b      	strb	r3, [r7, #12]
	 buffer[5] = (data_buf & 0x00ff);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	737b      	strb	r3, [r7, #13]
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <spi_dma_send2B+0x94>)
 80008ca:	2106      	movs	r1, #6
 80008cc:	f006 f824 	bl	8006918 <DMA_SetCurrDataCounter>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <spi_dma_send2B+0x94>)
 80008d2:	f107 0208 	add.w	r2, r7, #8
 80008d6:	60da      	str	r2, [r3, #12]
	CSON(); // chip select 
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008dc:	8b52      	ldrh	r2, [r2, #26]
 80008de:	b292      	uxth	r2, r2
 80008e0:	f042 0210 	orr.w	r2, r2, #16
 80008e4:	b292      	uxth	r2, r2
 80008e6:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <spi_dma_send2B+0x94>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	f005 ff88 	bl	8006800 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <spi_dma_send2B+0x9c>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	f005 ff84 	bl	8006800 <DMA_Cmd>
	/* Block until the semaphore is given */
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <spi_dma_send2B+0xa0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000904:	2300      	movs	r3, #0
 8000906:	f004 f855 	bl	80049b4 <xQueueGenericReceive>
	
//	CSOFF(); // chip deselect 
			
}
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40026458 	.word	0x40026458
 8000914:	40020000 	.word	0x40020000
 8000918:	40026440 	.word	0x40026440
 800091c:	20013214 	.word	0x20013214

08000920 <spi_dma_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	80fa      	strh	r2, [r7, #6]
 800092c:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[5];
		uint16_t data_len=0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	723b      	strb	r3, [r7, #8]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	727b      	strb	r3, [r7, #9]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000948:	121b      	asrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	72bb      	strb	r3, [r7, #10]
		buffer[3] = (data_len & 0x00ff);
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	72fb      	strb	r3, [r7, #11]
		buffer[4] = data_buf ; 
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	733b      	strb	r3, [r7, #12]
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000962:	2105      	movs	r1, #5
 8000964:	f005 ffd8 	bl	8006918 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <spi_dma_sendByte+0x88>)
 800096a:	f107 0208 	add.w	r2, r7, #8
 800096e:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000974:	8b52      	ldrh	r2, [r2, #26]
 8000976:	b292      	uxth	r2, r2
 8000978:	f042 0210 	orr.w	r2, r2, #16
 800097c:	b292      	uxth	r2, r2
 800097e:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000982:	2101      	movs	r1, #1
 8000984:	f005 ff3c 	bl	8006800 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <spi_dma_sendByte+0x90>)
 800098a:	2101      	movs	r1, #1
 800098c:	f005 ff38 	bl	8006800 <DMA_Cmd>
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <spi_dma_sendByte+0x94>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	2300      	movs	r3, #0
 800099e:	f004 f809 	bl	80049b4 <xQueueGenericReceive>
				
//		CSOFF(); // chip deselect 
			
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40026458 	.word	0x40026458
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40026440 	.word	0x40026440
 80009b4:	20013214 	.word	0x20013214

080009b8 <spi_dma_read>:

		return (data_buf[0] << 8) | data_buf[1];

}
void spi_dma_read(uint16_t address, uint16_t data_len)
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	80f8      	strh	r0, [r7, #6]
 80009c2:	80b9      	strh	r1, [r7, #4]
 80009c4:	4669      	mov	r1, sp
 80009c6:	4688      	mov	r8, r1
		
		/*! spi_dma_read it has to be used with \n
		 * memcpy from bufferRX right after it has recieve \n
		 * data on SPI. */
		
		uint8_t buffer[data_len+4];
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	1d0e      	adds	r6, r1, #4
 80009cc:	1e71      	subs	r1, r6, #1
 80009ce:	6139      	str	r1, [r7, #16]
 80009d0:	4631      	mov	r1, r6
 80009d2:	4608      	mov	r0, r1
 80009d4:	f04f 0100 	mov.w	r1, #0
 80009d8:	00cd      	lsls	r5, r1, #3
 80009da:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80009de:	00c4      	lsls	r4, r0, #3
 80009e0:	4631      	mov	r1, r6
 80009e2:	4608      	mov	r0, r1
 80009e4:	f04f 0100 	mov.w	r1, #0
 80009e8:	00cb      	lsls	r3, r1, #3
 80009ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009ee:	00c2      	lsls	r2, r0, #3
 80009f0:	4633      	mov	r3, r6
 80009f2:	3307      	adds	r3, #7
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	ebad 0d03 	sub.w	sp, sp, r3
 80009fc:	466b      	mov	r3, sp
 80009fe:	3300      	adds	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x00 | (data_len & 0x7f00) >> 8 ));
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a1c:	121b      	asrs	r3, r3, #8
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) buffer[i] = 0x0;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e007      	b.n	8000a42 <spi_dma_read+0x8a>
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dcf2      	bgt.n	8000a32 <spi_dma_read+0x7a>

		DMA_SetCurrDataCounter(SPIx_RX_DMA_STREAM, data_len+4);
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a54:	4619      	mov	r1, r3
 8000a56:	f005 ff5f 	bl	8006918 <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 4+data_len);
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a62:	4619      	mov	r1, r3
 8000a64:	f005 ff58 	bl	8006918 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
		SPIx_RX_DMA_STREAM->M0AR =(uint32_t)&bufferRX;	
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <spi_dma_read+0x100>)
 8000a72:	60da      	str	r2, [r3, #12]

		CSON(); // chip select 
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a78:	8b52      	ldrh	r2, [r2, #26]
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	f042 0210 	orr.w	r2, r2, #16
 8000a80:	b292      	uxth	r2, r2
 8000a82:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	f005 feba 	bl	8006800 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f005 feb6 	bl	8006800 <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <spi_dma_read+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f003 ff87 	bl	80049b4 <xQueueGenericReceive>
 8000aa6:	46c5      	mov	sp, r8
		//CSOFF(); // chip deselect		

}	
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	40026440 	.word	0x40026440
 8000ab4:	40026458 	.word	0x40026458
 8000ab8:	20013228 	.word	0x20013228
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	20013214 	.word	0x20013214

08000ac4 <init_W5200>:
//==================================================================================//
//===	func 	init_W5200							 ===//
//==================================================================================//

void init_W5200(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
	 *
	 * */


	// mac address
	uint8_t address[6] =	{0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 8000aca:	4a5c      	ldr	r2, [pc, #368]	; (8000c3c <init_W5200+0x178>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	8892      	ldrh	r2, [r2, #4]
 8000ad6:	809a      	strh	r2, [r3, #4]
	
	// ip 
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 8000ad8:	4a59      	ldr	r2, [pc, #356]	; (8000c40 <init_W5200+0x17c>)
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	6810      	ldr	r0, [r2, #0]
 8000ae0:	6018      	str	r0, [r3, #0]
	// subnet 
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8000ae2:	4a58      	ldr	r2, [pc, #352]	; (8000c44 <init_W5200+0x180>)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
	// gateway
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 8000aec:	4a56      	ldr	r2, [pc, #344]	; (8000c48 <init_W5200+0x184>)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	6810      	ldr	r0, [r2, #0]
 8000af4:	6018      	str	r0, [r3, #0]
	
	portTickType xLastWakeTime;	
	
	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 8000af6:	2001      	movs	r0, #1
 8000af8:	2100      	movs	r1, #0
 8000afa:	2203      	movs	r2, #3
 8000afc:	f003 fdfe 	bl	80046fc <xQueueGenericCreate>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b52      	ldr	r3, [pc, #328]	; (8000c4c <init_W5200+0x188>)
 8000b04:	601a      	str	r2, [r3, #0]

//	vTaskSuspend(set_macTaskHandle);
	
	xLastWakeTime = xTaskGetTickCount();
 8000b06:	f002 ff73 	bl	80039f0 <xTaskGetTickCount>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60bb      	str	r3, [r7, #8]

	RESET_HIGH();
 8000b0e:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <init_W5200+0x18c>)
 8000b10:	4a4f      	ldr	r2, [pc, #316]	; (8000c50 <init_W5200+0x18c>)
 8000b12:	8b52      	ldrh	r2, [r2, #26]
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f042 0220 	orr.w	r2, r2, #32
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	835a      	strh	r2, [r3, #26]
	RESET_LOW();	
 8000b1e:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <init_W5200+0x18c>)
 8000b20:	4a4b      	ldr	r2, [pc, #300]	; (8000c50 <init_W5200+0x18c>)
 8000b22:	8b12      	ldrh	r2, [r2, #24]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	831a      	strh	r2, [r3, #24]

	vTaskDelay( 500/portTICK_RATE_MS );		
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f002 fda1 	bl	8003678 <vTaskDelay>
	const portTickType xFrequency = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
	
	// ===================================================//
	//SW reset 
	spi_dma_sendByte(W5200_MR, W5200_MR_RST);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	f7ff feef 	bl	8000920 <spi_dma_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	71fb      	strb	r3, [r7, #7]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 8000b46:	bf00      	nop
		spi_dma_read(W5200_MR, 1);
		memcpy(&data, bufferRX+4, 1);
	}
		
	// PING enable, PPPoE disable 
	spi_dma_sendByte(W5200_MR, 0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f7ff fee8 	bl	8000920 <spi_dma_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_dma_sendByte(W5200_IMR, 0xff);
 8000b50:	2016      	movs	r0, #22
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	f7ff fee4 	bl	8000920 <spi_dma_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_dma_sendByte(W5200_IMR2, 0);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f7ff fee0 	bl	8000920 <spi_dma_sendByte>
	// set timeoput to 200msec
	spi_dma_sendByte(W5200_RTR, 200);
 8000b60:	2017      	movs	r0, #23
 8000b62:	21c8      	movs	r1, #200	; 0xc8
 8000b64:	f7ff fedc 	bl	8000920 <spi_dma_sendByte>
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	f7ff fed8 	bl	8000920 <spi_dma_sendByte>

	int n = 0; 
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

	for (n = 0; n < 8; n++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e02b      	b.n	8000bd2 <init_W5200+0x10e>
	{
		spi_dma_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b86:	331e      	adds	r3, #30
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	f7ff fec7 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b9e:	331f      	adds	r3, #31
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	f7ff febb 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_IMR(n), 0xff);	
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000bb6:	332c      	adds	r3, #44	; 0x2c
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	21ff      	movs	r1, #255	; 0xff
 8000bbe:	f7ff feaf 	bl	8000920 <spi_dma_sendByte>
		socket_flg[n] = 0;
 8000bc2:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <init_W5200+0x190>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	ddd0      	ble.n	8000b7a <init_W5200+0xb6>
		socket_flg[n] = 0;
			
	}	
	// =========================================================//
		
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be2:	f002 fcf1 	bl	80035c8 <vTaskDelayUntil>

	W5200_configure_network(ip, subnet, gw);
 8000be6:	f107 0114 	add.w	r1, r7, #20
 8000bea:	f107 0210 	add.w	r2, r7, #16
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f000 f83c 	bl	8000c74 <W5200_configure_network>
	W5200_set_hardware_address(address);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f82b 	bl	8000c5c <W5200_set_hardware_address>
	
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c10:	f002 fcda 	bl	80035c8 <vTaskDelayUntil>
	// end of initialization W5200 
	// delete task

	// unblock set_macTask
	
	socket_0 = socket(W5200_Sn_MR_TCP, 80, 0);
 8000c14:	2001      	movs	r0, #1
 8000c16:	2150      	movs	r1, #80	; 0x50
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f000 fa17 	bl	800104c <socket>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <init_W5200+0x194>)
 8000c24:	601a      	str	r2, [r3, #0]
	listen(socket_0);
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <init_W5200+0x194>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fbfe 	bl	800142c <listen>


//	vTaskResume( set_macTaskHandle); 

	vTaskDelete ( NULL );
 8000c30:	2000      	movs	r0, #0
 8000c32:	f002 fc83 	bl	800353c <vTaskDelete>
	
	
	
	
}
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	08008d10 	.word	0x08008d10
 8000c40:	08008d18 	.word	0x08008d18
 8000c44:	08008d1c 	.word	0x08008d1c
 8000c48:	08008d20 	.word	0x08008d20
 8000c4c:	20013214 	.word	0x20013214
 8000c50:	40020800 	.word	0x40020800
 8000c54:	20000490 	.word	0x20000490
 8000c58:	2001321c 	.word	0x2001321c

08000c5c <W5200_set_hardware_address>:

//==================================================================================//
//===	func W5200_set_hardware_address
//==================================================================================//
void  W5200_set_hardware_address(const macaddress_t address)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

	/*! Function set wiznet register to address via SPI DMA
	 */

	spi_dma_send(W5200_SHAR, 6, address);
 8000c64:	2009      	movs	r0, #9
 8000c66:	2106      	movs	r1, #6
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	f7ff fd7f 	bl	800076c <spi_dma_send>
}
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <W5200_configure_network>:


void  W5200_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	/*! It configures ip, subnet and gateway */
	spi_dma_send(W5200_SIPR, 4, address);
 8000c80:	200f      	movs	r0, #15
 8000c82:	2104      	movs	r1, #4
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	f7ff fd71 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_SUBR, 4, subnet);
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f7ff fd6c 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_GAR, 4 , gateway);
 8000c94:	2001      	movs	r0, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	f7ff fd67 	bl	800076c <spi_dma_send>
}
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <get_CRStatus>:
//==================================================================================//



static uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_CR(sck_fd),1);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	f7ff fe79 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <get_CRStatus+0x34>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]
	return var;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2001322c 	.word	0x2001322c

08000cdc <get_SRStatus>:


static uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_SR(sck_fd), 1);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f7ff fe5d 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <get_SRStatus+0x34>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	73fb      	strb	r3, [r7, #15]
	return var;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2001322c 	.word	0x2001322c

08000d14 <get_TXFSRStatus>:

static uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_FSR(sck_fd), 2);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d2a:	3320      	adds	r3, #32
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	2102      	movs	r1, #2
 8000d32:	f7ff fe41 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <get_TXFSRStatus+0x44>)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	8812      	ldrh	r2, [r2, #0]
 8000d3e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
	
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2001322c 	.word	0x2001322c

08000d5c <get_TXWRStatus>:

static uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_WR(sck_fd), 2 );
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d72:	3324      	adds	r3, #36	; 0x24
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	2102      	movs	r1, #2
 8000d7a:	f7ff fe1d 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <get_TXWRStatus+0x44>)
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d88:	7b3b      	ldrb	r3, [r7, #12]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b29b      	uxth	r3, r3

	
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2001322c 	.word	0x2001322c

08000da4 <get_TXRD>:
static uint16_t get_TXRD(uint8_t sck_fd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_RD(sck_fd), 2);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000dba:	3322      	adds	r3, #34	; 0x22
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	f7ff fdf9 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <get_TXRD+0x44>)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	8812      	ldrh	r2, [r2, #0]
 8000dce:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000dd0:	7b3b      	ldrb	r3, [r7, #12]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b29b      	uxth	r3, r3
	
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2001322c 	.word	0x2001322c

08000dec <set_TXWR>:

static void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	71fa      	strb	r2, [r7, #7]
 8000df8:	80bb      	strh	r3, [r7, #4]
 	spi_dma_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e06:	3324      	adds	r3, #36	; 0x24
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff fd34 	bl	800087c <spi_dma_send2B>
}
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop

08000e1c <get_RXRSR>:

static uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RSR(sck_fd), 2);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e32:	3326      	adds	r3, #38	; 0x26
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	2102      	movs	r1, #2
 8000e3a:	f7ff fdbd 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <get_RXRSR+0x44>)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	8812      	ldrh	r2, [r2, #0]
 8000e46:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b29b      	uxth	r3, r3

}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2001322c 	.word	0x2001322c

08000e64 <get_RXRD>:

static uint16_t get_RXRD(uint8_t sck_fd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RD(sck_fd), 2 );
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e7a:	3328      	adds	r3, #40	; 0x28
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	2102      	movs	r1, #2
 8000e82:	f7ff fd99 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <get_RXRD+0x44>)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	8812      	ldrh	r2, [r2, #0]
 8000e8e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e90:	7b3b      	ldrb	r3, [r7, #12]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b29b      	uxth	r3, r3
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2001322c 	.word	0x2001322c

08000eac <set_RXRD>:

static void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	71fa      	strb	r2, [r7, #7]
 8000eb8:	80bb      	strh	r3, [r7, #4]
	spi_dma_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ec6:	3328      	adds	r3, #40	; 0x28
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fcd4 	bl	800087c <spi_dma_send2B>
}
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop

08000edc <write_memory>:
//		func write_memory 
//===============================================================================================//


void write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60ba      	str	r2, [r7, #8]
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	73fa      	strb	r2, [r7, #15]
 8000ee8:	460a      	mov	r2, r1
 8000eea:	81ba      	strh	r2, [r7, #12]
 8000eec:	80fb      	strh	r3, [r7, #6]
	*/
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000eee:	89bb      	ldrh	r3, [r7, #12]
 8000ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ef4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	8afb      	ldrh	r3, [r7, #22]
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f0c:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000f0e:	8afa      	ldrh	r2, [r7, #22]
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	441a      	add	r2, r3
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f1c:	3320      	adds	r3, #32
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dd2a      	ble.n	8000f78 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f38:	827b      	strh	r3, [r7, #18]
		spi_dma_send( memory_addr,upper_size, buf);
 8000f3a:	8aba      	ldrh	r2, [r7, #20]
 8000f3c:	8a7b      	ldrh	r3, [r7, #18]
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f7ff fc12 	bl	800076c <spi_dma_send>
		buf += upper_size;
 8000f48:	8a7b      	ldrh	r3, [r7, #18]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	8a7b      	ldrh	r3, [r7, #18]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	823b      	strh	r3, [r7, #16]
		spi_dma_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	8a3b      	ldrh	r3, [r7, #16]
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	f7ff fbfb 	bl	800076c <spi_dma_send>
 8000f76:	e006      	b.n	8000f86 <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_dma_send( memory_addr,len,  buf);
 8000f78:	8aba      	ldrh	r2, [r7, #20]
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	f7ff fbf3 	bl	800076c <spi_dma_send>
	}
}
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <read_memory>:
// 			func read_memory
//==================================================================================//


void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60ba      	str	r2, [r7, #8]
 8000f94:	4602      	mov	r2, r0
 8000f96:	73fa      	strb	r2, [r7, #15]
 8000f98:	460a      	mov	r2, r1
 8000f9a:	81ba      	strh	r2, [r7, #12]
 8000f9c:	80fb      	strh	r3, [r7, #6]

	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000f9e:	89bb      	ldrh	r3, [r7, #12]
 8000fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	8afb      	ldrh	r3, [r7, #22]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fbc:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000fbe:	8afa      	ldrh	r2, [r7, #22]
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fc8:	dd2f      	ble.n	800102a <read_memory+0x9e>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000fca:	8afb      	ldrh	r3, [r7, #22]
 8000fcc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000fd0:	827b      	strh	r3, [r7, #18]
		spi_dma_read( memory_addr,upper_size);
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8a7b      	ldrh	r3, [r7, #18]
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fced 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, upper_size);
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	68b8      	ldr	r0, [r7, #8]
 8000fe2:	4919      	ldr	r1, [pc, #100]	; (8001048 <read_memory+0xbc>)
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f7ff f8f9 	bl	80001dc <memcpy>

		buf += upper_size;
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000ff2:	88fa      	ldrh	r2, [r7, #6]
 8000ff4:	8a7b      	ldrh	r3, [r7, #18]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	823b      	strh	r3, [r7, #16]
		spi_dma_read(W5200_SOCKET_RX_BASE(sck_fd), left_size);
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	b29b      	uxth	r3, r3
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800100a:	b29a      	uxth	r2, r3
 800100c:	8a3b      	ldrh	r3, [r7, #16]
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fcd1 	bl	80009b8 <spi_dma_read>
		memcpy(buf+upper_size, bufferRX+4, left_size);
 8001016:	8a7b      	ldrh	r3, [r7, #18]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	441a      	add	r2, r3
 800101c:	8a3b      	ldrh	r3, [r7, #16]
 800101e:	4610      	mov	r0, r2
 8001020:	4909      	ldr	r1, [pc, #36]	; (8001048 <read_memory+0xbc>)
 8001022:	461a      	mov	r2, r3
 8001024:	f7ff f8da 	bl	80001dc <memcpy>
 8001028:	e00b      	b.n	8001042 <read_memory+0xb6>
	}else{

		// copy len size bytes
		spi_dma_read( memory_addr,len);
 800102a:	8aba      	ldrh	r2, [r7, #20]
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fcc1 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, len);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	4903      	ldr	r1, [pc, #12]	; (8001048 <read_memory+0xbc>)
 800103c:	461a      	mov	r2, r3
 800103e:	f7ff f8cd 	bl	80001dc <memcpy>
	}
}
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2001322c 	.word	0x2001322c

0800104c <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4613      	mov	r3, r2
 8001054:	4602      	mov	r2, r0
 8001056:	71fa      	strb	r2, [r7, #7]
 8001058:	460a      	mov	r2, r1
 800105a:	80ba      	strh	r2, [r7, #4]
 800105c:	71bb      	strb	r3, [r7, #6]
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e00c      	b.n	800107e <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <socket+0x14c>)
 8001068:	5cd3      	ldrb	r3, [r2, r3]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d104      	bne.n	8001078 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <socket+0x14c>)
 8001072:	2101      	movs	r1, #1
 8001074:	54d1      	strb	r1, [r2, r3]
			break;
 8001076:	e005      	b.n	8001084 <socket+0x38>
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d9ef      	bls.n	8001064 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b07      	cmp	r3, #7
 8001088:	d901      	bls.n	800108e <socket+0x42>
 800108a:	23ff      	movs	r3, #255	; 0xff
 800108c:	e07f      	b.n	800118e <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	2b08      	cmp	r3, #8
 8001096:	dd01      	ble.n	800109c <socket+0x50>
 8001098:	23ff      	movs	r3, #255	; 0xff
 800109a:	e078      	b.n	800118e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d005      	beq.n	80010b2 <socket+0x66>
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <socket+0x66>
 80010ae:	23ff      	movs	r3, #255	; 0xff
 80010b0:	e06d      	b.n	800118e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d006      	beq.n	80010ca <socket+0x7e>
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <socket+0x7e>
 80010c6:	23ff      	movs	r3, #255	; 0xff
 80010c8:	e061      	b.n	800118e <socket+0x142>

	// set MODE register
	spi_dma_sendByte(W5200_Sn_MR(sck_fd) , mode);
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fc1f 	bl	8000920 <spi_dma_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	db29      	blt.n	8001144 <socket+0xf8>
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	dd02      	ble.n	80010fa <socket+0xae>
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d018      	beq.n	800112a <socket+0xde>
 80010f8:	e024      	b.n	8001144 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	737b      	strb	r3, [r7, #13]
		spi_dma_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	b29b      	uxth	r3, r3
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001116:	3304      	adds	r3, #4
 8001118:	b29a      	uxth	r2, r3
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4610      	mov	r0, r2
 8001120:	2102      	movs	r1, #2
 8001122:	461a      	mov	r2, r3
 8001124:	f7ff fb22 	bl	800076c <spi_dma_send>
		
		break;
 8001128:	e00c      	b.n	8001144 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_dma_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b29b      	uxth	r3, r3
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b29b      	uxth	r3, r3
 8001132:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001136:	3314      	adds	r3, #20
 8001138:	b29a      	uxth	r2, r3
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fbee 	bl	8000920 <spi_dma_sendByte>
	}

	// execute socket open
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	b29b      	uxth	r3, r3
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b29b      	uxth	r3, r3
 800114c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001150:	3301      	adds	r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	2101      	movs	r1, #1
 8001158:	f7ff fbe2 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 800115c:	bf00      	nop
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd9f 	bl	8000ca4 <get_CRStatus>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f8      	bne.n	800115e <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fdb4 	bl	8000cdc <get_SRStatus>
 8001174:	4603      	mov	r3, r0
 8001176:	2b13      	cmp	r3, #19
 8001178:	bf0c      	ite	eq
 800117a:	2300      	moveq	r3, #0
 800117c:	2301      	movne	r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73bb      	strb	r3, [r7, #14]
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <socket+0x140>
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	e000      	b.n	800118e <socket+0x142>

	// success return
	return sck_fd;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000490 	.word	0x20000490

0800119c <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 800119c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a0:	b08b      	sub	sp, #44	; 0x2c
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4601      	mov	r1, r0
 80011a8:	73f9      	strb	r1, [r7, #15]
 80011aa:	81ba      	strh	r2, [r7, #12]
 80011ac:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	
	/// get real len 
	int i = 0; 
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]

	while ( buf[i] != '\0' && i < len) i++; 
 80011b2:	e002      	b.n	80011ba <send+0x1e>
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	3301      	adds	r3, #1
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <send+0x32>
 80011c6:	89ba      	ldrh	r2, [r7, #12]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dcf2      	bgt.n	80011b4 <send+0x18>

	len = i;
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	81bb      	strh	r3, [r7, #12]
	
	uint16_t status = get_SRStatus(sck_fd);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd81 	bl	8000cdc <get_SRStatus>
 80011da:	4603      	mov	r3, r0
 80011dc:	83fb      	strh	r3, [r7, #30]

	
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	d804      	bhi.n	80011ee <send+0x52>
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4a56      	ldr	r2, [pc, #344]	; (8001340 <send+0x1a4>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <send+0x58>
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f2:	e0a0      	b.n	8001336 <send+0x19a>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <send+0x64>
 80011fa:	89bb      	ldrh	r3, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <send+0x6a>
 8001200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001204:	e097      	b.n	8001336 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fd67 	bl	8000cdc <get_SRStatus>
 800120e:	4603      	mov	r3, r0
 8001210:	2b17      	cmp	r3, #23
 8001212:	d001      	beq.n	8001218 <send+0x7c>
 8001214:	2300      	movs	r3, #0
 8001216:	e08e      	b.n	8001336 <send+0x19a>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001218:	e004      	b.n	8001224 <send+0x88>
		if(flag == 1) return 0;	// NONE BLOCKING
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <send+0x88>
 8001220:	2300      	movs	r3, #0
 8001222:	e088      	b.n	8001336 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fd74 	bl	8000d14 <get_TXFSRStatus>
 800122c:	4603      	mov	r3, r0
 800122e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f1      	beq.n	800121a <send+0x7e>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd8f 	bl	8000d5c <get_TXWRStatus>
 800123e:	4603      	mov	r3, r0
 8001240:	83bb      	strh	r3, [r7, #28]

	// check write length
	if(send_size > len) send_size = len;
 8001242:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001244:	89bb      	ldrh	r3, [r7, #12]
 8001246:	429a      	cmp	r2, r3
 8001248:	d901      	bls.n	800124e <send+0xb2>
 800124a:	89bb      	ldrh	r3, [r7, #12]
 800124c:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 800124e:	7bf9      	ldrb	r1, [r7, #15]
 8001250:	8bba      	ldrh	r2, [r7, #28]
 8001252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	f7ff fe3f 	bl	8000edc <write_memory>

	// pointer update
	write_ptr += send_size;
 800125e:	8bba      	ldrh	r2, [r7, #28]
 8001260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001262:	4413      	add	r3, r2
 8001264:	83bb      	strh	r3, [r7, #28]
	set_TXWR(sck_fd, write_ptr);
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	8bbb      	ldrh	r3, [r7, #28]
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fdbd 	bl	8000dec <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fd95 	bl	8000da4 <get_TXRD>
 800127a:	4603      	mov	r3, r0
 800127c:	837b      	strh	r3, [r7, #26]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd6b 	bl	8000d5c <get_TXWRStatus>
 8001286:	4603      	mov	r3, r0
 8001288:	833b      	strh	r3, [r7, #24]
	uint8_t data [write_ptr-start]; 	
 800128a:	8bba      	ldrh	r2, [r7, #28]
 800128c:	8b7b      	ldrh	r3, [r7, #26]
 800128e:	1ad1      	subs	r1, r2, r3
 8001290:	466b      	mov	r3, sp
 8001292:	461e      	mov	r6, r3
 8001294:	1e4b      	subs	r3, r1, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	460b      	mov	r3, r1
 800129a:	461a      	mov	r2, r3
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80012a4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80012a8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80012ac:	460b      	mov	r3, r1
 80012ae:	461a      	mov	r2, r3
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	00dd      	lsls	r5, r3, #3
 80012b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80012ba:	00d4      	lsls	r4, r2, #3
 80012bc:	460b      	mov	r3, r1
 80012be:	3307      	adds	r3, #7
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	ebad 0d03 	sub.w	sp, sp, r3
 80012c8:	466b      	mov	r3, sp
 80012ca:	3300      	adds	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
	spi_dma_read(start+0x8000, write_ptr-start );
 80012ce:	8b7b      	ldrh	r3, [r7, #26]
 80012d0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	8bb9      	ldrh	r1, [r7, #28]
 80012d8:	8b7b      	ldrh	r3, [r7, #26]
 80012da:	1acb      	subs	r3, r1, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fb69 	bl	80009b8 <spi_dma_read>
	memcpy(data, bufferRX +4, write_ptr-start);
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	8bb9      	ldrh	r1, [r7, #28]
 80012ea:	8b7b      	ldrh	r3, [r7, #26]
 80012ec:	1acb      	subs	r3, r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	4914      	ldr	r1, [pc, #80]	; (8001344 <send+0x1a8>)
 80012f2:	461a      	mov	r2, r3
 80012f4:	f7fe ff72 	bl	80001dc <memcpy>

	
	// test function 
	
	// send command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	2120      	movs	r1, #32
 800130c:	f7ff fb08 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001310:	bf00      	nop
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fcc5 	bl	8000ca4 <get_CRStatus>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f8      	bne.n	8001312 <send+0x176>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 8001320:	bf00      	nop
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd3d 	bl	8000da4 <get_TXRD>
 800132a:	4603      	mov	r3, r0
 800132c:	8bba      	ldrh	r2, [r7, #28]
 800132e:	429a      	cmp	r2, r3
 8001330:	d1f7      	bne.n	8001322 <send+0x186>

	return send_size;
 8001332:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001334:	46b5      	mov	sp, r6
}
 8001336:	4618      	mov	r0, r3
 8001338:	372c      	adds	r7, #44	; 0x2c
 800133a:	46bd      	mov	sp, r7
 800133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001340:	20000490 	.word	0x20000490
 8001344:	2001322c 	.word	0x2001322c

08001348 <recv>:
	return code is received data size.
	if received disconnect from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	4601      	mov	r1, r0
 8001352:	73f9      	strb	r1, [r7, #15]
 8001354:	81ba      	strh	r2, [r7, #12]
 8001356:	80fb      	strh	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b07      	cmp	r3, #7
 800135c:	d804      	bhi.n	8001368 <recv+0x20>
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <recv+0xe0>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d002      	beq.n	800136e <recv+0x26>
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136c:	e057      	b.n	800141e <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <recv+0x32>
 8001374:	89bb      	ldrh	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <recv+0x38>
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137e:	e04e      	b.n	800141e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fcaa 	bl	8000cdc <get_SRStatus>
 8001388:	4603      	mov	r3, r0
 800138a:	2b17      	cmp	r3, #23
 800138c:	d001      	beq.n	8001392 <recv+0x4a>
 800138e:	2300      	movs	r3, #0
 8001390:	e045      	b.n	800141e <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8001392:	e004      	b.n	800139e <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <recv+0x56>
 800139a:	2300      	movs	r3, #0
 800139c:	e03f      	b.n	800141e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fd3b 	bl	8000e1c <get_RXRSR>
 80013a6:	4603      	mov	r3, r0
 80013a8:	82fb      	strh	r3, [r7, #22]
 80013aa:	8afb      	ldrh	r3, [r7, #22]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f1      	beq.n	8001394 <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fd56 	bl	8000e64 <get_RXRD>
 80013b8:	4603      	mov	r3, r0
 80013ba:	82bb      	strh	r3, [r7, #20]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 80013bc:	89ba      	ldrh	r2, [r7, #12]
 80013be:	8afb      	ldrh	r3, [r7, #22]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	bf38      	it	cc
 80013c4:	4613      	movcc	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	7bf9      	ldrb	r1, [r7, #15]
 80013ca:	8aba      	ldrh	r2, [r7, #20]
 80013cc:	4608      	mov	r0, r1
 80013ce:	4611      	mov	r1, r2
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	f7ff fddb 	bl	8000f8c <read_memory>

	// update pointer
	read_ptr += read_len;
 80013d6:	8aba      	ldrh	r2, [r7, #20]
 80013d8:	8afb      	ldrh	r3, [r7, #22]
 80013da:	4413      	add	r3, r2
 80013dc:	82bb      	strh	r3, [r7, #20]
	set_RXRD(sck_fd, read_ptr);
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	8abb      	ldrh	r3, [r7, #20]
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fd61 	bl	8000eac <set_RXRD>

	// recive command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	f7ff fa8f 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001402:	bf00      	nop
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc4c 	bl	8000ca4 <get_CRStatus>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f8      	bne.n	8001404 <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 8001412:	89ba      	ldrh	r2, [r7, #12]
 8001414:	8afb      	ldrh	r3, [r7, #22]
 8001416:	429a      	cmp	r2, r3
 8001418:	bf38      	it	cc
 800141a:	4613      	movcc	r3, r2
 800141c:	b29b      	uxth	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000490 	.word	0x20000490

0800142c <listen>:
//	func listen 
//==================================================================================//


int	listen(int sck_fd)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db08      	blt.n	800144c <listen+0x20>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b07      	cmp	r3, #7
 800143e:	dc05      	bgt.n	800144c <listen+0x20>
 8001440:	4a22      	ldr	r2, [pc, #136]	; (80014cc <listen+0xa0>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d002      	beq.n	8001452 <listen+0x26>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001450:	e038      	b.n	80014c4 <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fc40 	bl	8000cdc <get_SRStatus>
 800145c:	4603      	mov	r3, r0
 800145e:	2b13      	cmp	r3, #19
 8001460:	d002      	beq.n	8001468 <listen+0x3c>
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001466:	e02d      	b.n	80014c4 <listen+0x98>


	uint8_t b;
	spi_dma_read(W5200_Sn_IR(sck_fd), 1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	b29b      	uxth	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b29b      	uxth	r3, r3
 8001470:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001474:	3302      	adds	r3, #2
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	2101      	movs	r1, #1
 800147c:	f7ff fa9c 	bl	80009b8 <spi_dma_read>
	memcpy(&b, bufferRX + 4, 1);
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <listen+0xa4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	73fb      	strb	r3, [r7, #15]

	// CONNECT command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	b29b      	uxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001492:	3301      	adds	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	2102      	movs	r1, #2
 800149a:	f7ff fa41 	bl	8000920 <spi_dma_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 800149e:	bf00      	nop
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fbfd 	bl	8000ca4 <get_CRStatus>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f7      	bne.n	80014a0 <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 80014b0:	bf00      	nop
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fc10 	bl	8000cdc <get_SRStatus>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b14      	cmp	r3, #20
 80014c0:	d1f7      	bne.n	80014b2 <listen+0x86>
	 
	return 0;	// listen success complete
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000490 	.word	0x20000490
 80014d0:	2001322c 	.word	0x2001322c

080014d4 <locate_interrupt>:

//==================================================================================
////	func locate_interrupt
//==================================================================================
void locate_interrupt()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	* interupt plus on which socket interrupt occured. \n
	* It depends on interrupt what follows
	* ****************************************************** */
	uint8_t sckt,		code; 
	// read on which socket interrupt occured 
	spi_dma_read(W5200_IMR2, 1);
 80014da:	2036      	movs	r0, #54	; 0x36
 80014dc:	2101      	movs	r1, #1
 80014de:	f7ff fa6b 	bl	80009b8 <spi_dma_read>
	memcpy(&sckt, bufferRX + 4, 1);
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <locate_interrupt+0xa8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]

	// read interrupt code 
	spi_dma_read(W5200_Sn_IR(sckt), 1);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014f2:	3302      	adds	r3, #2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	2101      	movs	r1, #1
 80014fa:	f7ff fa5d 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX +4 , 1);
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <locate_interrupt+0xa8>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	71bb      	strb	r3, [r7, #6]
       
	// clear interrupt on W5200
	spi_dma_sendByte(W5200_Sn_IR(sckt), 0xff);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800150e:	3302      	adds	r3, #2
 8001510:	b29b      	uxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	21ff      	movs	r1, #255	; 0xff
 8001516:	f7ff fa03 	bl	8000920 <spi_dma_sendByte>



	switch (code )
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	3b01      	subs	r3, #1
 800151e:	2b0f      	cmp	r3, #15
 8001520:	d828      	bhi.n	8001574 <locate_interrupt+0xa0>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <locate_interrupt+0x54>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	08001575 	.word	0x08001575
 800152c:	08001575 	.word	0x08001575
 8001530:	08001575 	.word	0x08001575
 8001534:	08001569 	.word	0x08001569
 8001538:	08001575 	.word	0x08001575
 800153c:	08001575 	.word	0x08001575
 8001540:	08001575 	.word	0x08001575
 8001544:	08001575 	.word	0x08001575
 8001548:	08001575 	.word	0x08001575
 800154c:	08001575 	.word	0x08001575
 8001550:	08001575 	.word	0x08001575
 8001554:	08001575 	.word	0x08001575
 8001558:	08001575 	.word	0x08001575
 800155c:	08001575 	.word	0x08001575
 8001560:	08001575 	.word	0x08001575
 8001564:	08001575 	.word	0x08001575

			// do nothing 
			break;
		case 0x4:// Receive interuppts whenever data packet is received from a peer 
			//vTaskResume(motorHBHandle);
			vTaskResume(set_macTaskHandle); 
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <locate_interrupt+0xac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 f925 	bl	80037bc <vTaskResume>
			//vTaskResume(motorHeartBeatHandle);
			break;
 8001572:	e000      	b.n	8001576 <locate_interrupt+0xa2>
		case 0x10:
			break;
		default:
			break;		
 8001574:	bf00      	nop
	}
}
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2001322c 	.word	0x2001322c
 8001580:	200141e0 	.word	0x200141e0

08001584 <EXTI4_IRQHandler>:

//==================================================================================
//// EXTI4_IRQHandler
//==================================================================================
void EXTI4_IRQHandler(void) //EXTI0 ISR
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	 * Interuppt service routine for wiznet it locates interrupt and resets 
	 * interrupt line. 
	 * *******************************************************************/
	
	
	if(EXTI_GetITStatus(WIZ_IT_EXTI_LINE) != RESET) //check if EXTI line is asserted
 8001588:	2010      	movs	r0, #16
 800158a:	f005 fe93 	bl	80072b4 <EXTI_GetITStatus>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <EXTI4_IRQHandler+0x1a>
	{
		
	//	taskENTER_CRITICAL();
		locate_interrupt();	
 8001594:	f7ff ff9e 	bl	80014d4 <locate_interrupt>
		
		EXTI_ClearFlag(WIZ_IT_EXTI_LINE); //clear interrupt
 8001598:	2010      	movs	r0, #16
 800159a:	f005 fe71 	bl	8007280 <EXTI_ClearFlag>

	//	taskEXIT_CRITICAL();
 	
	}
}
 800159e:	bd80      	pop	{r7, pc}

080015a0 <tcp_srv_Task>:
//============================================================================/
// func set_macTask 
//==================================================================================

void tcp_srv_Task(void *pvParameters)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0e0      	sub	sp, #384	; 0x180
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	6018      	str	r0, [r3, #0]
        {

	
		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(NULL);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f002 f88c 	bl	80036c8 <vTaskSuspend>
		
		// interrupt on W5200 occured 
		// receive data 
		len = recv(socket_0, buf, 100, 0);
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <tcp_srv_Task+0xfc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	2264      	movs	r2, #100	; 0x64
 80015c0:	2300      	movs	r3, #0
 80015c2:	f7ff fec1 	bl	8001348 <recv>
 80015c6:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

		if ( len < 3 )
 80015ca:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	dc1f      	bgt.n	8001612 <tcp_srv_Task+0x72>
		{
				
			FreeRTOS_CLIProcessCommand ( oldbuf, buf1, 256);
 80015d2:	f107 0208 	add.w	r2, r7, #8
 80015d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e2:	f004 fa9f 	bl	8005b24 <FreeRTOS_CLIProcessCommand>
			
			int slen = strlen(buf1);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f007 f9c2 	bl	8008974 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			
			send(socket_0, buf1,  slen, gl);
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <tcp_srv_Task+0xfc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001600:	b29a      	uxth	r2, r3
 8001602:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001606:	b29b      	uxth	r3, r3
 8001608:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800160c:	f7ff fdc6 	bl	800119c <send>
 8001610:	e043      	b.n	800169a <tcp_srv_Task+0xfa>

		}	
	
		else 
		{		
			buf[len-2]='\0';
 8001612:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001616:	3b02      	subs	r3, #2
 8001618:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800161c:	4413      	add	r3, r2
 800161e:	2200      	movs	r2, #0
 8001620:	f803 2c44 	strb.w	r2, [r3, #-68]
			// proces data with CLI 
		
			FreeRTOS_CLIProcessCommand ( buf, buf1, 256);
 8001624:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001628:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001634:	f004 fa76 	bl	8005b24 <FreeRTOS_CLIProcessCommand>
			
			int slen = strlen(buf1);
 8001638:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800163c:	4618      	mov	r0, r3
 800163e:	f007 f999 	bl	8008974 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
			
			send(socket_0, buf1,  slen, gl);
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <tcp_srv_Task+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001652:	b29a      	uxth	r2, r3
 8001654:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001658:	b29b      	uxth	r3, r3
 800165a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800165e:	f7ff fd9d 	bl	800119c <send>

			strcpy(oldbuf, buf);
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f007 f923 	bl	80088b8 <strcpy>

			for (slen = 0 ; slen < 10; slen++) buf[slen] = NULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001678:	e00b      	b.n	8001692 <tcp_srv_Task+0xf2>
 800167a:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800167e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001682:	4413      	add	r3, r2
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800168c:	3301      	adds	r3, #1
 800168e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001692:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001696:	2b09      	cmp	r3, #9
 8001698:	ddef      	ble.n	800167a <tcp_srv_Task+0xda>
		
	
		

		
	}	
 800169a:	e786      	b.n	80015aa <tcp_srv_Task+0xa>
 800169c:	2001321c 	.word	0x2001321c

080016a0 <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1


void init_USARTx(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 80016a6:	2020      	movs	r0, #32
 80016a8:	2101      	movs	r1, #1
 80016aa:	f006 f9a1 	bl	80079f0 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 80016ae:	2004      	movs	r0, #4
 80016b0:	2101      	movs	r1, #1
 80016b2:	f006 f965 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 80016b6:	2004      	movs	r0, #4
 80016b8:	2101      	movs	r1, #1
 80016ba:	f006 f961 	bl	8007980 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 80016be:	2040      	movs	r0, #64	; 0x40
 80016c0:	2101      	movs	r1, #1
 80016c2:	f006 f95d 	bl	8007980 <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 80016c6:	23c0      	movs	r3, #192	; 0xc0
 80016c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 80016ca:	2302      	movs	r3, #2
 80016cc:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 80016ce:	2303      	movs	r3, #3
 80016d0:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 80016d2:	2300      	movs	r3, #0
 80016d4:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 80016d6:	2301      	movs	r3, #1
 80016d8:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	4829      	ldr	r0, [pc, #164]	; (8001784 <init_USARTx+0xe4>)
 80016e0:	4619      	mov	r1, r3
 80016e2:	f005 fe65 	bl	80073b0 <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80016ec:	2301      	movs	r3, #1
 80016ee:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80016f4:	2303      	movs	r3, #3
 80016f6:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	4821      	ldr	r0, [pc, #132]	; (8001788 <init_USARTx+0xe8>)
 8001702:	4619      	mov	r1, r3
 8001704:	f005 fe54 	bl	80073b0 <GPIO_Init>

	DD() // set PG8 high
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <init_USARTx+0xe8>)
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <init_USARTx+0xe8>)
 800170c:	8b12      	ldrh	r2, [r2, #24]
 800170e:	b292      	uxth	r2, r2
 8001710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001714:	b292      	uxth	r2, r2
 8001716:	831a      	strh	r2, [r3, #24]
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <init_USARTx+0xe4>)
 800171a:	2106      	movs	r1, #6
 800171c:	2208      	movs	r2, #8
 800171e:	f005 ff5d 	bl	80075dc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <init_USARTx+0xe4>)
 8001724:	2107      	movs	r1, #7
 8001726:	2208      	movs	r2, #8
 8001728:	f005 ff58 	bl	80075dc <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 800172c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001730:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001732:	2300      	movs	r3, #0
 8001734:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8001736:	2300      	movs	r3, #0
 8001738:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 800173a:	2300      	movs	r3, #0
 800173c:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800173e:	2300      	movs	r3, #0
 8001740:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001742:	230c      	movs	r3, #12
 8001744:	827b      	strh	r3, [r7, #18]
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4810      	ldr	r0, [pc, #64]	; (800178c <init_USARTx+0xec>)
 800174c:	4619      	mov	r1, r3
 800174e:	f006 fc43 	bl	8007fd8 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <init_USARTx+0xec>)
 8001754:	f240 5125 	movw	r1, #1317	; 0x525
 8001758:	2201      	movs	r2, #1
 800175a:	f006 fdf7 	bl	800834c <USART_ITConfig>
	
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 800175e:	2347      	movs	r3, #71	; 0x47
 8001760:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;;// this sets the priority group of the USART1 interrupts
 8001762:	2307      	movs	r3, #7
 8001764:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x6;		 // this sets the subpriority inside the group
 8001766:	2306      	movs	r3, #6
 8001768:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 800176a:	2301      	movs	r3, #1
 800176c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fcbb 	bl	80060ec <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <init_USARTx+0xec>)
 8001778:	2101      	movs	r1, #1
 800177a:	f006 fd93 	bl	80082a4 <USART_Cmd>
}
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020800 	.word	0x40020800
 8001788:	40021800 	.word	0x40021800
 800178c:	40011400 	.word	0x40011400

08001790 <USART_puts>:


void USART_puts(uint8_t *s, int nb)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	 * 
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
	while(i < nb && *s){
 800179e:	e010      	b.n	80017c2 <USART_puts+0x32>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) ); 
 80017a0:	bf00      	nop
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <USART_puts+0x4c>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f8      	beq.n	80017a2 <USART_puts+0x12>
		//USART_SendData(USART6, s[i]);
		USARTx->DR = s[i];
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <USART_puts+0x4c>)
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	440a      	add	r2, r1
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	809a      	strh	r2, [r3, #4]
		i++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
	while(i < nb && *s){
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	da03      	bge.n	80017d2 <USART_puts+0x42>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e6      	bne.n	80017a0 <USART_puts+0x10>
		i++;
	
	}
	
	
}
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40011400 	.word	0x40011400

080017e0 <USART6_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART6 interrupts
void USART6_IRQHandler(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	
	

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USARTx, USART_IT_RXNE) ){
 80017e6:	4824      	ldr	r0, [pc, #144]	; (8001878 <USART6_IRQHandler+0x98>)
 80017e8:	f240 5125 	movw	r1, #1317	; 0x525
 80017ec:	f006 fe6c 	bl	80084c8 <USART_GetITStatus>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d035      	beq.n	8001862 <USART6_IRQHandler+0x82>
		
		
	//	USART_ClearITPendingBit ( USARTx, USART_IT_RXNE ) ;
		static uint8_t cnt = 0; // this counter is used to determine the string length
		volatile char t = USARTx->DR; // the character from the USART1 data register is saved in t
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <USART6_IRQHandler+0x98>)
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	71fb      	strb	r3, [r7, #7]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		xHigherPriorityTaskWoken_usart = pdFalse;
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <USART6_IRQHandler+0x9c>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

		
		if( (cnt < rx_length  ) && (cnt < MAX_STRLEN) ){ 
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <USART6_IRQHandler+0xa0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <USART6_IRQHandler+0xa4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	da0c      	bge.n	800182e <USART6_IRQHandler+0x4e>
			received_string[cnt] = t;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <USART6_IRQHandler+0xa0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	b2d1      	uxtb	r1, r2
 800181c:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <USART6_IRQHandler+0xa8>)
 800181e:	54d1      	strb	r1, [r2, r3]
			cnt++;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <USART6_IRQHandler+0xa0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <USART6_IRQHandler+0xa0>)
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e019      	b.n	8001862 <USART6_IRQHandler+0x82>
		}
		else{ // otherwise reset the character counter and print the received string
			received_string[cnt] = t; 
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <USART6_IRQHandler+0xa0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	b2d1      	uxtb	r1, r2
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <USART6_IRQHandler+0xa8>)
 8001838:	54d1      	strb	r1, [r2, r3]
			cnt = 0;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <USART6_IRQHandler+0xa0>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
		//	USART_ITConfig(USART6, USART_IT_RXNE, DISABLE); 
		taskENTER_CRITICAL();
 8001840:	f003 fc3c 	bl	80050bc <vPortEnterCritical>
				USART_ClearITPendingBit ( USARTx, USART_IT_RXNE ) ;
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <USART6_IRQHandler+0x98>)
 8001846:	f240 5125 	movw	r1, #1317	; 0x525
 800184a:	f006 ff13 	bl	8008674 <USART_ClearITPendingBit>

			xSemaphoreGiveFromISR(xSmphrUSART,&xHigherPriorityTaskWoken_usart );
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <USART6_IRQHandler+0xac>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	2100      	movs	r1, #0
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <USART6_IRQHandler+0x9c>)
 8001858:	2300      	movs	r3, #0
 800185a:	f003 f841 	bl	80048e0 <xQueueGenericSendFromISR>
		taskEXIT_CRITICAL();
 800185e:	f003 fc3d 	bl	80050dc <vPortExitCritical>
			//USART_puts(USART1, received_string);
		}


	}
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken_usart );	
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <USART6_IRQHandler+0x9c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <USART6_IRQHandler+0x92>
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <USART6_IRQHandler+0xb0>)
 800186c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40011400 	.word	0x40011400
 800187c:	20000498 	.word	0x20000498
 8001880:	2000049c 	.word	0x2000049c
 8001884:	200141fc 	.word	0x200141fc
 8001888:	20014200 	.word	0x20014200
 800188c:	200141d0 	.word	0x200141d0
 8001890:	e000ed04 	.word	0xe000ed04

08001894 <crc16>:



/* function for  */
uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80018a0:	23ff      	movs	r3, #255	; 0xff
 80018a2:	73fb      	strb	r3, [r7, #15]
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80018a4:	23ff      	movs	r3, #255	; 0xff
 80018a6:	73bb      	strb	r3, [r7, #14]
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 80018a8:	e013      	b.n	80018d2 <crc16+0x3e>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	4053      	eors	r3, r2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	60bb      	str	r3, [r7, #8]
         crc_hi = crc_lo ^ table_crc_hi[i];
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <crc16+0x64>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	4053      	eors	r3, r2
 80018c6:	73fb      	strb	r3, [r7, #15]
         crc_lo = table_crc_lo[i];
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <crc16+0x68>)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	73bb      	strb	r3, [r7, #14]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	807a      	strh	r2, [r7, #2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e6      	bne.n	80018aa <crc16+0x16>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
         crc_hi = crc_lo ^ table_crc_hi[i];
         crc_lo = table_crc_lo[i];
     }
 
     return (crc_hi << 8 | crc_lo);
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b29b      	uxth	r3, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	0800950c 	.word	0x0800950c
 80018fc:	0800960c 	.word	0x0800960c

08001900 <modbus_confirmation>:

/* modbus_confirmation */ 

int modbus_confirmation ( uint8_t * req, uint8_t * rsp, uint16_t write_len, uint16_t read_len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	80fa      	strh	r2, [r7, #6]
 800190c:	80bb      	strh	r3, [r7, #4]
	uint16_t crc = crc16(rsp, read_len - 2 );
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	3b02      	subs	r3, #2
 8001912:	b29b      	uxth	r3, r3
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff ffbc 	bl	8001894 <crc16>
 800191c:	4603      	mov	r3, r0
 800191e:	82fb      	strh	r3, [r7, #22]

	if (	rsp[read_len -1 ] == ( crc & 0x00ff ) && 
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	8afb      	ldrh	r3, [r7, #22]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	429a      	cmp	r2, r3
 8001932:	d10c      	bne.n	800194e <modbus_confirmation+0x4e>
		rsp[read_len - 2 ] == ( crc >> 8 ) ) return 1; 
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	3b02      	subs	r3, #2
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	8afb      	ldrh	r3, [r7, #22]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3

int modbus_confirmation ( uint8_t * req, uint8_t * rsp, uint16_t write_len, uint16_t read_len)
{
	uint16_t crc = crc16(rsp, read_len - 2 );

	if (	rsp[read_len -1 ] == ( crc & 0x00ff ) && 
 8001946:	429a      	cmp	r2, r3
 8001948:	d101      	bne.n	800194e <modbus_confirmation+0x4e>
		rsp[read_len - 2 ] == ( crc >> 8 ) ) return 1; 
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <modbus_confirmation+0x50>
	return 0; 
 800194e:	2300      	movs	r3, #0
	
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <write_read_modbus>:

/* write to modbus */
void write_read_modbus( uint8_t * req, uint8_t * rsp, int write_len, int read_len )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
	int i; 

	// tell ISR we expect only specific amount of data
	rx_length = read_len + write_len - 1 ; 
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	1e5a      	subs	r2, r3, #1
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <write_read_modbus+0xac>)
 8001970:	601a      	str	r2, [r3, #0]

	// driver disable 
	DD();
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <write_read_modbus+0xb0>)
 8001974:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <write_read_modbus+0xb0>)
 8001976:	8b12      	ldrh	r2, [r2, #24]
 8001978:	b292      	uxth	r2, r2
 800197a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800197e:	b292      	uxth	r2, r2
 8001980:	831a      	strh	r2, [r3, #24]
	for (i=0; i < 4000; i++) ;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e002      	b.n	800198e <write_read_modbus+0x36>
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001994:	dbf8      	blt.n	8001988 <write_read_modbus+0x30>
	USART_puts(req,write_len);
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f7ff fef9 	bl	8001790 <USART_puts>
	for (i = 0; i < 4100; i++);
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e002      	b.n	80019aa <write_read_modbus+0x52>
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80019b0:	429a      	cmp	r2, r3
 80019b2:	ddf7      	ble.n	80019a4 <write_read_modbus+0x4c>
	// driver enable 
	DE();
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <write_read_modbus+0xb0>)
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <write_read_modbus+0xb0>)
 80019b8:	8b52      	ldrh	r2, [r2, #26]
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019c0:	b292      	uxth	r2, r2
 80019c2:	835a      	strh	r2, [r3, #26]

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <write_read_modbus+0xb4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019d0:	2300      	movs	r3, #0
 80019d2:	f002 ffef 	bl	80049b4 <xQueueGenericReceive>
	
	for (i = 0; i < read_len; i++) 
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e00c      	b.n	80019f6 <write_read_modbus+0x9e>
		rsp[i] = received_string[i+write_len]; 
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4413      	add	r3, r2
 80019e2:	6979      	ldr	r1, [r7, #20]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	440a      	add	r2, r1
 80019e8:	4909      	ldr	r1, [pc, #36]	; (8001a10 <write_read_modbus+0xb8>)
 80019ea:	5c8a      	ldrb	r2, [r1, r2]
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
	// driver enable 
	DE();

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
	
	for (i = 0; i < read_len; i++) 
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dbee      	blt.n	80019dc <write_read_modbus+0x84>
		rsp[i] = received_string[i+write_len]; 

}
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200141fc 	.word	0x200141fc
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	200141d0 	.word	0x200141d0
 8001a10:	20014200 	.word	0x20014200

08001a14 <modbus_WIB>:
}


/* modbus write input bits */
uint8_t modbus_WIB( uint16_t address, int nb, uint8_t *src )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	6019      	str	r1, [r3, #0]
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 030e 	add.w	r3, r7, #14
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	801a      	strh	r2, [r3, #0]

	uint8_t req[REQ_MAX_LEN];
	uint8_t rsp[REQ_MAX_LEN];
	int byte_count; 
	int req_length; 
	int bit_check = 0; 
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	int pos = 0; 
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	
	req[0] = 0x36; 
 8001a3a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a3e:	2236      	movs	r2, #54	; 0x36
 8001a40:	701a      	strb	r2, [r3, #0]
	req[1] = 0xF;
 8001a42:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a46:	220f      	movs	r2, #15
 8001a48:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001a4a:	f107 030e 	add.w	r3, r7, #14
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a5a:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001a5c:	f107 030e 	add.w	r3, r7, #14
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a68:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	121b      	asrs	r3, r3, #8
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a78:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a86:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001a88:	2306      	movs	r3, #6
 8001a8a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da00      	bge.n	8001a9a <modbus_WIB+0x86>
 8001a98:	3307      	adds	r3, #7
 8001a9a:	10db      	asrs	r3, r3, #3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2300      	moveq	r3, #0
 8001aae:	2301      	movne	r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  	req[req_length++] = byte_count;
 8001ab8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001ac2:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001ac6:	b2d1      	uxtb	r1, r2
 8001ac8:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001acc:	54d1      	strb	r1, [r2, r3]

	int i; 
    	for (i = 0; i < byte_count; i++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001ad4:	e05c      	b.n	8001b90 <modbus_WIB+0x17c>
        
		int bit;
		bit = 0x01;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        	req[req_length] = 0;
 8001adc:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001ae0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 8001aea:	e038      	b.n	8001b5e <modbus_WIB+0x14a>
            		if (src[pos++])
 8001aec:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8001af6:	1d3a      	adds	r2, r7, #4
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d013      	beq.n	8001b2a <modbus_WIB+0x116>
                		req[req_length] |= bit;
 8001b02:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001b06:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001b20:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b24:	440b      	add	r3, r1
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e014      	b.n	8001b54 <modbus_WIB+0x140>
            		else
                		req[req_length] &=~ bit;
 8001b2a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001b2e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4013      	ands	r3, r2
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001b4c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b50:	440b      	add	r3, r1
 8001b52:	701a      	strb	r2, [r3, #0]

            		bit = bit << 1;
 8001b54:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        
		int bit;
		bit = 0x01;
        	req[req_length] = 0;

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 8001b5e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <modbus_WIB+0x168>
 8001b68:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 8001b72:	f107 0208 	add.w	r2, r7, #8
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	dbb7      	blt.n	8001aec <modbus_WIB+0xd8>
                		req[req_length] &=~ bit;

            		bit = bit << 1;
        	}	
        	
		req_length++;
 8001b7c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b80:	3301      	adds	r3, #1
 8001b82:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
  	req[req_length++] = byte_count;

	int i; 
    	for (i = 0; i < byte_count; i++) {
 8001b86:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001b90:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001b94:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	db9c      	blt.n	8001ad6 <modbus_WIB+0xc2>
        	}	
        	
		req_length++;
	 }

	uint16_t crc = crc16(req, req_length);
 8001b9c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7ff fe73 	bl	8001894 <crc16>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416

	req[req_length++] = crc >> 8; 
 8001bb4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001bbe:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8001bc2:	0a12      	lsrs	r2, r2, #8
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	b2d1      	uxtb	r1, r2
 8001bc8:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001bcc:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001bce:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001bd8:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8001bdc:	b2d1      	uxtb	r1, r2
 8001bde:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001be2:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req,rsp, req_length ,8); 
 8001be4:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	f7ff feaf 	bl	8001958 <write_read_modbus>
	return modbus_confirmation (req, rsp,req_length, 8); 
 8001bfa:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001c04:	f107 0214 	add.w	r2, r7, #20
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2308      	movs	r3, #8
 8001c10:	f7ff fe76 	bl	8001900 <modbus_confirmation>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b2db      	uxtb	r3, r3

	
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <modbus_WR>:

/* Write the values from the array to the registers of the remote device */
uint8_t modbus_WR( int address, int nb, const uint16_t *src)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	6018      	str	r0, [r3, #0]
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	6019      	str	r1, [r3, #0]
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	601a      	str	r2, [r3, #0]
    	int byte_count;

    	uint8_t req[REQ_MAX_LEN];
	uint8_t rsp[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001c3c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c40:	2236      	movs	r2, #54	; 0x36
 8001c42:	701a      	strb	r2, [r3, #0]
	req[1] = 0x10;
 8001c44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c48:	2210      	movs	r2, #16
 8001c4a:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	121b      	asrs	r3, r3, #8
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c5a:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c68:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	121b      	asrs	r3, r3, #8
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c78:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c86:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001c88:	2306      	movs	r3, #6
 8001c8a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	
   	byte_count = nb * 2;
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    	req[req_length++] = byte_count;
 8001c9a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001ca4:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001ca8:	b2d1      	uxtb	r1, r2
 8001caa:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001cae:	54d1      	strb	r1, [r2, r3]

    for (i = 0; i < nb; i++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001cb6:	e026      	b.n	8001d06 <modbus_WR+0xe2>
		req[req_length++] = src[i] >> 8;
 8001cb8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001cc2:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001cc6:	0052      	lsls	r2, r2, #1
 8001cc8:	1d39      	adds	r1, r7, #4
 8001cca:	6809      	ldr	r1, [r1, #0]
 8001ccc:	440a      	add	r2, r1
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	0a12      	lsrs	r2, r2, #8
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	b2d1      	uxtb	r1, r2
 8001cd6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001cda:	54d1      	strb	r1, [r2, r3]
        	req[req_length++] = src[i] & 0x00ff;
 8001cdc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001ce6:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001cea:	0052      	lsls	r2, r2, #1
 8001cec:	1d39      	adds	r1, r7, #4
 8001cee:	6809      	ldr	r1, [r1, #0]
 8001cf0:	440a      	add	r2, r1
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	b2d1      	uxtb	r1, r2
 8001cf6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001cfa:	54d1      	strb	r1, [r2, r3]
	req_length = 6; 
	
   	byte_count = nb * 2;
    	req[req_length++] = byte_count;

    for (i = 0; i < nb; i++) {
 8001cfc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001d00:	3301      	adds	r3, #1
 8001d02:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbd1      	blt.n	8001cb8 <modbus_WR+0x94>
		req[req_length++] = src[i] >> 8;
        	req[req_length++] = src[i] & 0x00ff;
    	}

	uint16_t crc = crc16(req, req_length);
 8001d14:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7ff fdb7 	bl	8001894 <crc16>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412

	req[req_length++] = crc >> 8; 
 8001d2c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001d36:	f8b7 2412 	ldrh.w	r2, [r7, #1042]	; 0x412
 8001d3a:	0a12      	lsrs	r2, r2, #8
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	b2d1      	uxtb	r1, r2
 8001d40:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d44:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff;
 8001d46:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001d50:	f8b7 2412 	ldrh.w	r2, [r7, #1042]	; 0x412
 8001d54:	b2d1      	uxtb	r1, r2
 8001d56:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d5a:	54d1      	strb	r1, [r2, r3]

	/* write request  to modbus line */
	write_read_modbus( req, rsp, req_length, 8); 
 8001d5c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	f7ff fdf3 	bl	8001958 <write_read_modbus>
	return modbus_confirmation (req, rsp,req_length, 8); 
 8001d72:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001d7c:	f107 0210 	add.w	r2, r7, #16
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	2308      	movs	r3, #8
 8001d88:	f7ff fdba 	bl	8001900 <modbus_confirmation>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b2db      	uxtb	r3, r3



}
 8001d90:	4618      	mov	r0, r3
 8001d92:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <modbus_RR>:
}


/* Read the values from the array to the registers of the remote device */
uint8_t modbus_RR( int address, int nb, uint16_t *src)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	6018      	str	r0, [r3, #0]
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	6019      	str	r1, [r3, #0]
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	601a      	str	r2, [r3, #0]
    	int req_length;
	int byte_count;
    	uint8_t req[REQ_MAX_LEN];
  	uint8_t rsp[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001db4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001db8:	2236      	movs	r2, #54	; 0x36
 8001dba:	701a      	strb	r2, [r3, #0]
	req[1] = 0x4;
 8001dbc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	121b      	asrs	r3, r3, #8
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001dd2:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001de0:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	121b      	asrs	r3, r3, #8
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001df0:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001dfe:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001e00:	2306      	movs	r3, #6
 8001e02:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
   	
	byte_count = nb * 2;
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    	req[req_length++] = byte_count;
 8001e12:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001e1c:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001e20:	b2d1      	uxtb	r1, r2
 8001e22:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001e26:	54d1      	strb	r1, [r2, r3]
	
	uint16_t crc = crc16(req, req_length);
 8001e28:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7ff fd2d 	bl	8001894 <crc16>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a

	req[req_length++] = crc >> 8; 
 8001e40:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001e4a:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001e4e:	0a12      	lsrs	r2, r2, #8
 8001e50:	b292      	uxth	r2, r2
 8001e52:	b2d1      	uxtb	r1, r2
 8001e54:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001e58:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001e5a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001e64:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001e68:	b2d1      	uxtb	r1, r2
 8001e6a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001e6e:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	3305      	adds	r3, #5
 8001e7a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001e7e:	f107 0214 	add.w	r2, r7, #20
 8001e82:	4608      	mov	r0, r1
 8001e84:	4611      	mov	r1, r2
 8001e86:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001e8a:	f7ff fd65 	bl	8001958 <write_read_modbus>
	
	int offset = 2;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	
	for (i = 0; i < nb; i++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001e9a:	e024      	b.n	8001ee6 <modbus_RR+0x14a>
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001e9c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	1d3a      	adds	r2, r7, #4
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001eac:	1c51      	adds	r1, r2, #1
 8001eae:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001eb2:	0052      	lsls	r2, r2, #1
 8001eb4:	440a      	add	r2, r1
 8001eb6:	f107 0114 	add.w	r1, r7, #20
 8001eba:	5c8a      	ldrb	r2, [r1, r2]
 8001ebc:	0212      	lsls	r2, r2, #8
 8001ebe:	b291      	uxth	r1, r2
                rsp[offset + 2 + (i << 1)];
 8001ec0:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001ec4:	1c90      	adds	r0, r2, #2
 8001ec6:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001eca:	0052      	lsls	r2, r2, #1
 8001ecc:	4402      	add	r2, r0
 8001ece:	f107 0014 	add.w	r0, r7, #20
 8001ed2:	5c82      	ldrb	r2, [r0, r2]
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	801a      	strh	r2, [r3, #0]
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
 8001edc:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbd3      	blt.n	8001e9c <modbus_RR+0x100>
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
                rsp[offset + 2 + (i << 1)];
		
        }

	return modbus_confirmation (req, rsp,req_length, nb*2 + 5); 
 8001ef4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3305      	adds	r3, #5
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001f0e:	f107 0114 	add.w	r1, r7, #20
 8001f12:	f7ff fcf5 	bl	8001900 <modbus_confirmation>
 8001f16:	4603      	mov	r3, r0
 8001f18:	b2db      	uxtb	r3, r3


}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <motorHeartBeat_task>:
=====================================================================================
============    		TASKS SECTION			===================== 
=====================================================================================
====================================================================================*/
void motorHeartBeat_task(void * pvParameters)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

	
	uint16_t tab_reg[10];
	//vTaskDelay(portMAX_DELAY);	
	//vTaskSuspend(NULL); 
	int counter = 0;	
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
	for(;;)
	{

		t_printf("heart beat %d\n", counter);		
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <motorHeartBeat_task+0x34>)
 8001f32:	69f9      	ldr	r1, [r7, #28]
 8001f34:	f003 fc84 	bl	8005840 <t_printf>
		modbus_RR(0,10,tab_reg);
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	210a      	movs	r1, #10
 8001f40:	461a      	mov	r2, r3
 8001f42:	f7ff ff2b 	bl	8001d9c <modbus_RR>
		counter ++;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
		vTaskDelay(3000/portTICK_RATE_MS);
 8001f4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f50:	f001 fb92 	bl	8003678 <vTaskDelay>

	}
 8001f54:	e7ec      	b.n	8001f30 <motorHeartBeat_task+0xc>
 8001f56:	bf00      	nop
 8001f58:	08008d98 	.word	0x08008d98

08001f5c <motorControl_task>:


}

void motorControl_task(void * pvParameters)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b096      	sub	sp, #88	; 0x58
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	uint16_t spd[5]; 
	

	

	src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
//	spd[0]=1500;spd[1]=0;spd[2]=2250;spd[3]=10;spd[4]=10;
	
	// create usart semaphore 
	xSmphrUSART = xSemaphoreCreateBinary();	
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2203      	movs	r2, #3
 8001f82:	f002 fbbb 	bl	80046fc <xQueueGenericCreate>
 8001f86:	4602      	mov	r2, r0
 8001f88:	4b82      	ldr	r3, [pc, #520]	; (8002194 <motorControl_task+0x238>)
 8001f8a:	601a      	str	r2, [r3, #0]
	
	portTickType xDelay = portMAX_DELAY;//3000 / portTICK_RATE_MS;	
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f90:	657b      	str	r3, [r7, #84]	; 0x54
	

	QueueTelegram telegramR, telegramS; 

	telegramR.data[0] = 1000;
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	85bb      	strh	r3, [r7, #44]	; 0x2c
	telegramR.data[1] = 0;	
 8001f98:	2300      	movs	r3, #0
 8001f9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	telegramR.data[2] = 2250;
 8001f9c:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001fa0:	863b      	strh	r3, [r7, #48]	; 0x30
	telegramR.data[3] = 10;	
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	867b      	strh	r3, [r7, #50]	; 0x32
	telegramR.data[4] = 10;	
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	86bb      	strh	r3, [r7, #52]	; 0x34
	telegramR.size = 5;
 8001faa:	2305      	movs	r3, #5
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
	telegramR.Qcmd = SETDATA;	
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	

	int HB_flag = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	653b      	str	r3, [r7, #80]	; 0x50
	while (1)
	{

		
	
		if (xQueueReceive(QSpd_handle, (void *)&telegramR, xDelay  ) == pdPASS)
 8001fb8:	4b77      	ldr	r3, [pc, #476]	; (8002198 <motorControl_task+0x23c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f002 fcf4 	bl	80049b4 <xQueueGenericReceive>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	f040 80de 	bne.w	8002190 <motorControl_task+0x234>
		{
			switch ( telegramR.Qcmd )
 8001fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	f200 80cc 	bhi.w	8002176 <motorControl_task+0x21a>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <motorControl_task+0x88>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	08002071 	.word	0x08002071
 8001fec:	08002177 	.word	0x08002177
 8001ff0:	08002177 	.word	0x08002177
 8001ff4:	080020ad 	.word	0x080020ad
 8001ff8:	08002125 	.word	0x08002125
			{
				case SETDATA:

					src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002002:	2301      	movs	r3, #1
 8002004:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002008:	2301      	movs	r3, #1
 800200a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800200e:	2301      	movs	r3, #1
 8002010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

					if ( !modbus_WIB( 0 , 3, src))
 8002014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002018:	2000      	movs	r0, #0
 800201a:	2103      	movs	r1, #3
 800201c:	461a      	mov	r2, r3
 800201e:	f7ff fcf9 	bl	8001a14 <modbus_WIB>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <motorControl_task+0xd0>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 8002028:	2307      	movs	r3, #7
 800202a:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}
					vTaskDelay ( 1000 / portTICK_RATE_MS);
 800202c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002030:	f001 fb22 	bl	8003678 <vTaskDelay>
					
					if (!modbus_WR(0, 5, telegramR.data))
 8002034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002038:	3308      	adds	r3, #8
 800203a:	2000      	movs	r0, #0
 800203c:	2105      	movs	r1, #5
 800203e:	461a      	mov	r2, r3
 8002040:	f7ff fdf0 	bl	8001c24 <modbus_WR>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <motorControl_task+0xf2>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 800204a:	2307      	movs	r3, #7
 800204c:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 800204e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002052:	f001 fb11 	bl	8003678 <vTaskDelay>

				// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8002056:	2306      	movs	r3, #6
 8002058:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <motorControl_task+0x23c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002068:	2300      	movs	r3, #0
 800206a:	f002 fb89 	bl	8004780 <xQueueGenericSend>

					break;
 800206e:	e08f      	b.n	8002190 <motorControl_task+0x234>
				       	
				
				case GETDATA:
				
					if ( !modbus_RR(0, 10, telegramS.data))
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	3308      	adds	r3, #8
 8002076:	2000      	movs	r0, #0
 8002078:	210a      	movs	r1, #10
 800207a:	461a      	mov	r2, r3
 800207c:	f7ff fe8e 	bl	8001d9c <modbus_RR>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <motorControl_task+0x12e>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 8002086:	2307      	movs	r3, #7
 8002088:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 800208a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800208e:	f001 faf3 	bl	8003678 <vTaskDelay>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8002092:	2306      	movs	r3, #6
 8002094:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8002096:	4b40      	ldr	r3, [pc, #256]	; (8002198 <motorControl_task+0x23c>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020a4:	2300      	movs	r3, #0
 80020a6:	f002 fb6b 	bl	8004780 <xQueueGenericSend>

					break;
 80020aa:	e071      	b.n	8002190 <motorControl_task+0x234>

				
				case START: 
					HB_flag = 1; 
 80020ac:	2301      	movs	r3, #1
 80020ae:	653b      	str	r3, [r7, #80]	; 0x50
				//	vTaskResume(motorHeartBeatHandle);

					// set motor speed to 10% 
				         src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

					if( !modbus_WIB( 0 , 3, src) )
 80020c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020cc:	2000      	movs	r0, #0
 80020ce:	2103      	movs	r1, #3
 80020d0:	461a      	mov	r2, r3
 80020d2:	f7ff fc9f 	bl	8001a14 <modbus_WIB>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <motorControl_task+0x184>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 80020dc:	2307      	movs	r3, #7
 80020de:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 80020e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e4:	f001 fac8 	bl	8003678 <vTaskDelay>
					if (!modbus_WR( 0, 5, telegramR.data))
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	3308      	adds	r3, #8
 80020ee:	2000      	movs	r0, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	461a      	mov	r2, r3
 80020f4:	f7ff fd96 	bl	8001c24 <modbus_WR>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <motorControl_task+0x1a6>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 80020fe:	2307      	movs	r3, #7
 8002100:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 8002102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002106:	f001 fab7 	bl	8003678 <vTaskDelay>
			
					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 800210a:	2306      	movs	r3, #6
 800210c:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <motorControl_task+0x23c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800211c:	2300      	movs	r3, #0
 800211e:	f002 fb2f 	bl	8004780 <xQueueGenericSend>

					break;
 8002122:	e035      	b.n	8002190 <motorControl_task+0x234>
				
				case STOP:
					
				//	vTaskSuspend (motorHeartBeatHandle);	
					// send stop bits to motor 
					src[0]=0; src[1]=1; src[2]=1; src[3]=1;
 8002124:	2300      	movs	r3, #0
 8002126:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800212a:	2301      	movs	r3, #1
 800212c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002130:	2301      	movs	r3, #1
 8002132:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002136:	2301      	movs	r3, #1
 8002138:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

					if (!modbus_WIB( 0 , 3, src)) 
 800213c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002140:	2000      	movs	r0, #0
 8002142:	2103      	movs	r1, #3
 8002144:	461a      	mov	r2, r3
 8002146:	f7ff fc65 	bl	8001a14 <modbus_WIB>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <motorControl_task+0x1f8>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 8002150:	2307      	movs	r3, #7
 8002152:	723b      	strb	r3, [r7, #8]
				//		xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 8002154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002158:	f001 fa8e 	bl	8003678 <vTaskDelay>


								// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 800215c:	2306      	movs	r3, #6
 800215e:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <motorControl_task+0x23c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800216e:	2300      	movs	r3, #0
 8002170:	f002 fb06 	bl	8004780 <xQueueGenericSend>

					break; 
 8002174:	e00c      	b.n	8002190 <motorControl_task+0x234>

				default:

					telegramS.Qcmd = ERROR_MODBUS;
 8002176:	2307      	movs	r3, #7
 8002178:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <motorControl_task+0x23c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002188:	2300      	movs	r3, #0
 800218a:	f002 faf9 	bl	8004780 <xQueueGenericSend>
					break;
 800218e:	bf00      	nop
			}
		}
	
		
	
	}
 8002190:	e712      	b.n	8001fb8 <motorControl_task+0x5c>
 8002192:	bf00      	nop
 8002194:	200141d0 	.word	0x200141d0
 8002198:	20013220 	.word	0x20013220

0800219c <handleVariable_set>:
				int xParamLength,
				xQueueHandle Qhandle,
				uint8_t * Value,
				int xValueLength,
				int socket )
{
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	499a      	ldr	r1, [pc, #616]	; (8002418 <handleVariable_set+0x27c>)
 80021ae:	2205      	movs	r2, #5
 80021b0:	f006 fc10 	bl	80089d4 <strncmp>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80a2 	bne.w	8002300 <handleVariable_set+0x164>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength] = '\0'; 	
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021c0:	4413      	add	r3, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 80021c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021c8:	f006 facc 	bl	8008764 <atoi>
 80021cc:	4603      	mov	r3, r0
 80021ce:	83fb      	strh	r3, [r7, #30]
		// if speed is in range
		if(s1 < 1 ||  s1 > 100 )
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <handleVariable_set+0x40>
 80021d6:	8bfb      	ldrh	r3, [r7, #30]
 80021d8:	2b64      	cmp	r3, #100	; 0x64
 80021da:	d907      	bls.n	80021ec <handleVariable_set+0x50>
		{
			// send error via TCP
			sprintf(pcWriteBuffer, "Error: speed is out of range [1,100]p : %d\n\n\0", s1);
 80021dc:	8bfb      	ldrh	r3, [r7, #30]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	498e      	ldr	r1, [pc, #568]	; (800241c <handleVariable_set+0x280>)
 80021e2:	461a      	mov	r2, r3
 80021e4:	f000 fe34 	bl	8002e50 <sprintf>
		//	pcWriteBuffer[11+ 3] = "\0"; 
			
			////send( socket_0, buf, 11+3, 0);

	       		return pdFALSE; 	
 80021e8:	2300      	movs	r3, #0
 80021ea:	e110      	b.n	800240e <handleVariable_set+0x272>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 80021ec:	8bfb      	ldrh	r3, [r7, #30]
 80021ee:	461a      	mov	r2, r3
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	0091      	lsls	r1, r2, #2
 80021f8:	461a      	mov	r2, r3
 80021fa:	460b      	mov	r3, r1
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	83fb      	strh	r3, [r7, #30]
		
		// test i
		telegramS.data[1] = 0;	
 8002202:	4b87      	ldr	r3, [pc, #540]	; (8002420 <handleVariable_set+0x284>)
 8002204:	2200      	movs	r2, #0
 8002206:	815a      	strh	r2, [r3, #10]
		telegramS.data[2] = 2250;
 8002208:	4b85      	ldr	r3, [pc, #532]	; (8002420 <handleVariable_set+0x284>)
 800220a:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800220e:	819a      	strh	r2, [r3, #12]
		telegramS.data[3] = 10;	
 8002210:	4b83      	ldr	r3, [pc, #524]	; (8002420 <handleVariable_set+0x284>)
 8002212:	220a      	movs	r2, #10
 8002214:	81da      	strh	r2, [r3, #14]
		telegramS.data[4] = 10;	
 8002216:	4b82      	ldr	r3, [pc, #520]	; (8002420 <handleVariable_set+0x284>)
 8002218:	220a      	movs	r2, #10
 800221a:	821a      	strh	r2, [r3, #16]
		telegramS.size = 5;
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <handleVariable_set+0x284>)
 800221e:	2205      	movs	r2, #5
 8002220:	605a      	str	r2, [r3, #4]
		telegramS.Qcmd = SETDATA;	
 8002222:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <handleVariable_set+0x284>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
		// test /
		// setup telegram 
		telegramS.Qcmd = SETDATA;
 8002228:	4b7d      	ldr	r3, [pc, #500]	; (8002420 <handleVariable_set+0x284>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
		telegramS.size = 5;
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <handleVariable_set+0x284>)
 8002230:	2205      	movs	r2, #5
 8002232:	605a      	str	r2, [r3, #4]
		telegramS.data[0] = s1;
 8002234:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <handleVariable_set+0x284>)
 8002236:	8bfa      	ldrh	r2, [r7, #30]
 8002238:	811a      	strh	r2, [r3, #8]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 800223a:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <handleVariable_set+0x288>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b7a      	ldr	r3, [pc, #488]	; (8002428 <handleVariable_set+0x28c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4610      	mov	r0, r2
 8002244:	4976      	ldr	r1, [pc, #472]	; (8002420 <handleVariable_set+0x284>)
 8002246:	461a      	mov	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	f002 fa99 	bl	8004780 <xQueueGenericSend>
 800224e:	4603      	mov	r3, r0
 8002250:	2b01      	cmp	r3, #1
 8002252:	d142      	bne.n	80022da <handleVariable_set+0x13e>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
 8002254:	4b73      	ldr	r3, [pc, #460]	; (8002424 <handleVariable_set+0x288>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b73      	ldr	r3, [pc, #460]	; (8002428 <handleVariable_set+0x28c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4610      	mov	r0, r2
 800225e:	4973      	ldr	r1, [pc, #460]	; (800242c <handleVariable_set+0x290>)
 8002260:	461a      	mov	r2, r3
 8002262:	2300      	movs	r3, #0
 8002264:	f002 fba6 	bl	80049b4 <xQueueGenericReceive>
 8002268:	4603      	mov	r3, r0
 800226a:	2b01      	cmp	r3, #1
 800226c:	d124      	bne.n	80022b8 <handleVariable_set+0x11c>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 800226e:	4b6f      	ldr	r3, [pc, #444]	; (800242c <handleVariable_set+0x290>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d111      	bne.n	800229a <handleVariable_set+0xfe>
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <handleVariable_set+0x294>)
 800227a:	4615      	mov	r5, r2
 800227c:	461c      	mov	r4, r3
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	6028      	str	r0, [r5, #0]
 8002282:	6069      	str	r1, [r5, #4]
 8002284:	60aa      	str	r2, [r5, #8]
 8002286:	60eb      	str	r3, [r5, #12]
 8002288:	cc03      	ldmia	r4!, {r0, r1}
 800228a:	6128      	str	r0, [r5, #16]
 800228c:	6169      	str	r1, [r5, #20]
 800228e:	8823      	ldrh	r3, [r4, #0]
 8002290:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8002292:	2319      	movs	r3, #25
 8002294:	61bb      	str	r3, [r7, #24]
				//	//send( socket, buf, len, 0);


					return pdPASS;
 8002296:	2301      	movs	r3, #1
 8002298:	e0b9      	b.n	800240e <handleVariable_set+0x272>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4b65      	ldr	r3, [pc, #404]	; (8002434 <handleVariable_set+0x298>)
 800229e:	4615      	mov	r5, r2
 80022a0:	461c      	mov	r4, r3
 80022a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a4:	6028      	str	r0, [r5, #0]
 80022a6:	6069      	str	r1, [r5, #4]
 80022a8:	60aa      	str	r2, [r5, #8]
 80022aa:	60eb      	str	r3, [r5, #12]
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 80022b0:	2313      	movs	r3, #19
 80022b2:	61bb      	str	r3, [r7, #24]
//					//send( socket, buf, len, 0);

					return pdFALSE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e0aa      	b.n	800240e <handleVariable_set+0x272>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <handleVariable_set+0x29c>)
 80022bc:	4615      	mov	r5, r2
 80022be:	461c      	mov	r4, r3
 80022c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c2:	6028      	str	r0, [r5, #0]
 80022c4:	6069      	str	r1, [r5, #4]
 80022c6:	60aa      	str	r2, [r5, #8]
 80022c8:	60eb      	str	r3, [r5, #12]
 80022ca:	cc07      	ldmia	r4!, {r0, r1, r2}
 80022cc:	6128      	str	r0, [r5, #16]
 80022ce:	6169      	str	r1, [r5, #20]
 80022d0:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 80022d2:	231b      	movs	r3, #27
 80022d4:	61bb      	str	r3, [r7, #24]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 80022d6:	2300      	movs	r3, #0
 80022d8:	e099      	b.n	800240e <handleVariable_set+0x272>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4b57      	ldr	r3, [pc, #348]	; (800243c <handleVariable_set+0x2a0>)
 80022de:	4614      	mov	r4, r2
 80022e0:	461d      	mov	r5, r3
 80022e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e4:	6020      	str	r0, [r4, #0]
 80022e6:	6061      	str	r1, [r4, #4]
 80022e8:	60a2      	str	r2, [r4, #8]
 80022ea:	60e3      	str	r3, [r4, #12]
 80022ec:	6828      	ldr	r0, [r5, #0]
 80022ee:	6120      	str	r0, [r4, #16]
 80022f0:	88aa      	ldrh	r2, [r5, #4]
 80022f2:	79ab      	ldrb	r3, [r5, #6]
 80022f4:	82a2      	strh	r2, [r4, #20]
 80022f6:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80022f8:	2316      	movs	r3, #22
 80022fa:	61bb      	str	r3, [r7, #24]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80022fc:	2300      	movs	r3, #0
 80022fe:	e086      	b.n	800240e <handleVariable_set+0x272>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	494f      	ldr	r1, [pc, #316]	; (8002440 <handleVariable_set+0x2a4>)
 8002304:	2206      	movs	r2, #6
 8002306:	f006 fb65 	bl	80089d4 <strncmp>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d174      	bne.n	80023fa <handleVariable_set+0x25e>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength] = '\0'; 	
 8002310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002314:	4413      	add	r3, r2
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 800231a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800231c:	f006 fa22 	bl	8008764 <atoi>
 8002320:	4603      	mov	r3, r0
 8002322:	82fb      	strh	r3, [r7, #22]
		// if speed is in range
		if(s1 < 15 ||  s1 > 300 )
 8002324:	8afb      	ldrh	r3, [r7, #22]
 8002326:	2b0e      	cmp	r3, #14
 8002328:	d903      	bls.n	8002332 <handleVariable_set+0x196>
 800232a:	8afb      	ldrh	r3, [r7, #22]
 800232c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002330:	d909      	bls.n	8002346 <handleVariable_set+0x1aa>
		{
			// send error via TCP
			//
			xWriteBufferLen = 100; 
 8002332:	2364      	movs	r3, #100	; 0x64
 8002334:	61bb      	str	r3, [r7, #24]
		//	uint8_t buf [len]; //= "Error: speed is out of range!\n\n");
			sprintf(pcWriteBuffer, "Error: speed is out of range [15,300]p : %d\n\n\0", s1);
 8002336:	8afb      	ldrh	r3, [r7, #22]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	4942      	ldr	r1, [pc, #264]	; (8002444 <handleVariable_set+0x2a8>)
 800233c:	461a      	mov	r2, r3
 800233e:	f000 fd87 	bl	8002e50 <sprintf>
			//send( socket_0, buf, len, 0);

	       		return pdFALSE; 	
 8002342:	2300      	movs	r3, #0
 8002344:	e063      	b.n	800240e <handleVariable_set+0x272>
		}	
	
		telegramS.data[3] = s1; 
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <handleVariable_set+0x284>)
 8002348:	8afa      	ldrh	r2, [r7, #22]
 800234a:	81da      	strh	r2, [r3, #14]
		telegramS.size = 5; 
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <handleVariable_set+0x284>)
 800234e:	2205      	movs	r2, #5
 8002350:	605a      	str	r2, [r3, #4]
		telegramS.Qcmd = SETDATA;
 8002352:	4b33      	ldr	r3, [pc, #204]	; (8002420 <handleVariable_set+0x284>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <handleVariable_set+0x288>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <handleVariable_set+0x28c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4610      	mov	r0, r2
 8002362:	492f      	ldr	r1, [pc, #188]	; (8002420 <handleVariable_set+0x284>)
 8002364:	461a      	mov	r2, r3
 8002366:	2300      	movs	r3, #0
 8002368:	f002 fa0a 	bl	8004780 <xQueueGenericSend>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d130      	bne.n	80023d4 <handleVariable_set+0x238>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay))
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <handleVariable_set+0x288>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <handleVariable_set+0x28c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4610      	mov	r0, r2
 800237c:	492b      	ldr	r1, [pc, #172]	; (800242c <handleVariable_set+0x290>)
 800237e:	461a      	mov	r2, r3
 8002380:	2300      	movs	r3, #0
 8002382:	f002 fb17 	bl	80049b4 <xQueueGenericReceive>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d036      	beq.n	80023fa <handleVariable_set+0x25e>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <handleVariable_set+0x290>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d110      	bne.n	80023b6 <handleVariable_set+0x21a>
				{	
					sprintf(pcWriteBuffer, "Up ramp succsesfully set.\n\n");
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <handleVariable_set+0x2ac>)
 8002398:	4615      	mov	r5, r2
 800239a:	461c      	mov	r4, r3
 800239c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239e:	6028      	str	r0, [r5, #0]
 80023a0:	6069      	str	r1, [r5, #4]
 80023a2:	60aa      	str	r2, [r5, #8]
 80023a4:	60eb      	str	r3, [r5, #12]
 80023a6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80023a8:	6128      	str	r0, [r5, #16]
 80023aa:	6169      	str	r1, [r5, #20]
 80023ac:	61aa      	str	r2, [r5, #24]
					xWriteBufferLen = 27; 	
 80023ae:	231b      	movs	r3, #27
 80023b0:	61bb      	str	r3, [r7, #24]
					//send( socket, buf, len, 0);


					return pdPASS;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e02b      	b.n	800240e <handleVariable_set+0x272>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <handleVariable_set+0x298>)
 80023ba:	4615      	mov	r5, r2
 80023bc:	461c      	mov	r4, r3
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	6028      	str	r0, [r5, #0]
 80023c2:	6069      	str	r1, [r5, #4]
 80023c4:	60aa      	str	r2, [r5, #8]
 80023c6:	60eb      	str	r3, [r5, #12]
 80023c8:	6820      	ldr	r0, [r4, #0]
 80023ca:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 80023cc:	2313      	movs	r3, #19
 80023ce:	61bb      	str	r3, [r7, #24]
					//send( socket, buf, len, 0);

					return pdFALSE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e01c      	b.n	800240e <handleVariable_set+0x272>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <handleVariable_set+0x2a0>)
 80023d8:	4614      	mov	r4, r2
 80023da:	461d      	mov	r5, r3
 80023dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023de:	6020      	str	r0, [r4, #0]
 80023e0:	6061      	str	r1, [r4, #4]
 80023e2:	60a2      	str	r2, [r4, #8]
 80023e4:	60e3      	str	r3, [r4, #12]
 80023e6:	6828      	ldr	r0, [r5, #0]
 80023e8:	6120      	str	r0, [r4, #16]
 80023ea:	88aa      	ldrh	r2, [r5, #4]
 80023ec:	79ab      	ldrb	r3, [r5, #6]
 80023ee:	82a2      	strh	r2, [r4, #20]
 80023f0:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80023f2:	2316      	movs	r3, #22
 80023f4:	61bb      	str	r3, [r7, #24]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80023f6:	2300      	movs	r3, #0
 80023f8:	e009      	b.n	800240e <handleVariable_set+0x272>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4913      	ldr	r1, [pc, #76]	; (800244c <handleVariable_set+0x2b0>)
 80023fe:	2208      	movs	r2, #8
 8002400:	f006 fae8 	bl	80089d4 <strncmp>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <handleVariable_set+0x272>
	{	
	
	
		
				return 0; 
 800240a:	2300      	movs	r3, #0
 800240c:	e7ff      	b.n	800240e <handleVariable_set+0x272>

	}
			
}
 800240e:	4618      	mov	r0, r3
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bdb0      	pop	{r4, r5, r7, pc}
 8002416:	bf00      	nop
 8002418:	08008e1c 	.word	0x08008e1c
 800241c:	08008e24 	.word	0x08008e24
 8002420:	20014420 	.word	0x20014420
 8002424:	20013220 	.word	0x20013220
 8002428:	20000000 	.word	0x20000000
 800242c:	20014404 	.word	0x20014404
 8002430:	08008e54 	.word	0x08008e54
 8002434:	08008e70 	.word	0x08008e70
 8002438:	08008e84 	.word	0x08008e84
 800243c:	08008ea0 	.word	0x08008ea0
 8002440:	08008eb8 	.word	0x08008eb8
 8002444:	08008ec0 	.word	0x08008ec0
 8002448:	08008ef0 	.word	0x08008ef0
 800244c:	08008f0c 	.word	0x08008f0c

08002450 <handleVariable_get>:
				size_t xWriteBufferLen,
				uint8_t * Param, 
				int xParamLength,
				xQueueHandle Qhandle,
				int socket )
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	496b      	ldr	r1, [pc, #428]	; (8002610 <handleVariable_get+0x1c0>)
 8002462:	2205      	movs	r2, #5
 8002464:	f006 fab6 	bl	80089d4 <strncmp>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d16c      	bne.n	8002548 <handleVariable_get+0xf8>
	{	
	
		telegramS.Qcmd = GETDATA; 
 800246e:	4b69      	ldr	r3, [pc, #420]	; (8002614 <handleVariable_get+0x1c4>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <handleVariable_get+0x1c8>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <handleVariable_get+0x1cc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4610      	mov	r0, r2
 800247e:	4965      	ldr	r1, [pc, #404]	; (8002614 <handleVariable_get+0x1c4>)
 8002480:	461a      	mov	r2, r3
 8002482:	2300      	movs	r3, #0
 8002484:	f002 f97c 	bl	8004780 <xQueueGenericSend>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d149      	bne.n	8002522 <handleVariable_get+0xd2>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
 800248e:	4b62      	ldr	r3, [pc, #392]	; (8002618 <handleVariable_get+0x1c8>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b62      	ldr	r3, [pc, #392]	; (800261c <handleVariable_get+0x1cc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4610      	mov	r0, r2
 8002498:	4961      	ldr	r1, [pc, #388]	; (8002620 <handleVariable_get+0x1d0>)
 800249a:	461a      	mov	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	f002 fa89 	bl	80049b4 <xQueueGenericReceive>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d12b      	bne.n	8002500 <handleVariable_get+0xb0>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 80024a8:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <handleVariable_get+0x1d0>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d118      	bne.n	80024e2 <handleVariable_get+0x92>
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
					telegramR.data[3]/100,
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <handleVariable_get+0x1d0>)
 80024b2:	89da      	ldrh	r2, [r3, #14]
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
			{
				if ( telegramR.Qcmd == SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 80024b4:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <handleVariable_get+0x1d4>)
 80024b6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
					telegramR.data[3]/100,
					telegramR.data[3] % 100);
 80024c0:	4b57      	ldr	r3, [pc, #348]	; (8002620 <handleVariable_get+0x1d0>)
 80024c2:	89db      	ldrh	r3, [r3, #14]
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
			{
				if ( telegramR.Qcmd == SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 80024c4:	4957      	ldr	r1, [pc, #348]	; (8002624 <handleVariable_get+0x1d4>)
 80024c6:	fba1 0103 	umull	r0, r1, r1, r3
 80024ca:	0949      	lsrs	r1, r1, #5
 80024cc:	2064      	movs	r0, #100	; 0x64
 80024ce:	fb00 f101 	mul.w	r1, r0, r1
 80024d2:	1a5b      	subs	r3, r3, r1
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	4953      	ldr	r1, [pc, #332]	; (8002628 <handleVariable_get+0x1d8>)
 80024da:	f000 fcb9 	bl	8002e50 <sprintf>
					telegramR.data[3] % 100);
				
					//send( socket, buf, len, 0);


					return pdPASS;
 80024de:	2301      	movs	r3, #1
 80024e0:	e092      	b.n	8002608 <handleVariable_get+0x1b8>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4b51      	ldr	r3, [pc, #324]	; (800262c <handleVariable_get+0x1dc>)
 80024e6:	4615      	mov	r5, r2
 80024e8:	461c      	mov	r4, r3
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	6028      	str	r0, [r5, #0]
 80024ee:	6069      	str	r1, [r5, #4]
 80024f0:	60aa      	str	r2, [r5, #8]
 80024f2:	60eb      	str	r3, [r5, #12]
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 80024f8:	2313      	movs	r3, #19
 80024fa:	617b      	str	r3, [r7, #20]
					//send( socket, buf, len, 0);

					return pdFALSE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e083      	b.n	8002608 <handleVariable_get+0x1b8>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <handleVariable_get+0x1e0>)
 8002504:	4615      	mov	r5, r2
 8002506:	461c      	mov	r4, r3
 8002508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250a:	6028      	str	r0, [r5, #0]
 800250c:	6069      	str	r1, [r5, #4]
 800250e:	60aa      	str	r2, [r5, #8]
 8002510:	60eb      	str	r3, [r5, #12]
 8002512:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002514:	6128      	str	r0, [r5, #16]
 8002516:	6169      	str	r1, [r5, #20]
 8002518:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 800251a:	231b      	movs	r3, #27
 800251c:	617b      	str	r3, [r7, #20]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 800251e:	2300      	movs	r3, #0
 8002520:	e072      	b.n	8002608 <handleVariable_get+0x1b8>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <handleVariable_get+0x1e4>)
 8002526:	4614      	mov	r4, r2
 8002528:	461d      	mov	r5, r3
 800252a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800252c:	6020      	str	r0, [r4, #0]
 800252e:	6061      	str	r1, [r4, #4]
 8002530:	60a2      	str	r2, [r4, #8]
 8002532:	60e3      	str	r3, [r4, #12]
 8002534:	6828      	ldr	r0, [r5, #0]
 8002536:	6120      	str	r0, [r4, #16]
 8002538:	88aa      	ldrh	r2, [r5, #4]
 800253a:	79ab      	ldrb	r3, [r5, #6]
 800253c:	82a2      	strh	r2, [r4, #20]
 800253e:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002540:	2316      	movs	r3, #22
 8002542:	617b      	str	r3, [r7, #20]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8002544:	2300      	movs	r3, #0
 8002546:	e05f      	b.n	8002608 <handleVariable_get+0x1b8>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	493b      	ldr	r1, [pc, #236]	; (8002638 <handleVariable_get+0x1e8>)
 800254c:	2206      	movs	r2, #6
 800254e:	f006 fa41 	bl	80089d4 <strncmp>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d14d      	bne.n	80025f4 <handleVariable_get+0x1a4>
	{	
	
	
		telegramS.Qcmd = GETDATA;
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <handleVariable_get+0x1c4>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
			
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <handleVariable_get+0x1c8>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <handleVariable_get+0x1cc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4610      	mov	r0, r2
 8002568:	492a      	ldr	r1, [pc, #168]	; (8002614 <handleVariable_get+0x1c4>)
 800256a:	461a      	mov	r2, r3
 800256c:	2300      	movs	r3, #0
 800256e:	f002 f907 	bl	8004780 <xQueueGenericSend>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d12a      	bne.n	80025ce <handleVariable_get+0x17e>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay))
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <handleVariable_get+0x1c8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <handleVariable_get+0x1cc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4610      	mov	r0, r2
 8002582:	4927      	ldr	r1, [pc, #156]	; (8002620 <handleVariable_get+0x1d0>)
 8002584:	461a      	mov	r2, r3
 8002586:	2300      	movs	r3, #0
 8002588:	f002 fa14 	bl	80049b4 <xQueueGenericReceive>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d030      	beq.n	80025f4 <handleVariable_get+0x1a4>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <handleVariable_get+0x1d0>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d10a      	bne.n	80025b0 <handleVariable_get+0x160>
				{	
					sprintf(pcWriteBuffer, "Up ramp is %d seconds\n\n\0", 
							telegramR.data[3]);
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <handleVariable_get+0x1d0>)
 800259c:	89db      	ldrh	r3, [r3, #14]
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay))
			{
				if ( telegramR.Qcmd == SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Up ramp is %d seconds\n\n\0", 
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	4926      	ldr	r1, [pc, #152]	; (800263c <handleVariable_get+0x1ec>)
 80025a2:	461a      	mov	r2, r3
 80025a4:	f000 fc54 	bl	8002e50 <sprintf>
							telegramR.data[3]);
					
					xWriteBufferLen = 25; 	
 80025a8:	2319      	movs	r3, #25
 80025aa:	617b      	str	r3, [r7, #20]
					//send( socket, buf, len, 0);


					return pdPASS;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e02b      	b.n	8002608 <handleVariable_get+0x1b8>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <handleVariable_get+0x1dc>)
 80025b4:	4615      	mov	r5, r2
 80025b6:	461c      	mov	r4, r3
 80025b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ba:	6028      	str	r0, [r5, #0]
 80025bc:	6069      	str	r1, [r5, #4]
 80025be:	60aa      	str	r2, [r5, #8]
 80025c0:	60eb      	str	r3, [r5, #12]
 80025c2:	6820      	ldr	r0, [r4, #0]
 80025c4:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 80025c6:	2313      	movs	r3, #19
 80025c8:	617b      	str	r3, [r7, #20]
					//send( socket, buf, len, 0);

					return pdFALSE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e01c      	b.n	8002608 <handleVariable_get+0x1b8>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <handleVariable_get+0x1e4>)
 80025d2:	4614      	mov	r4, r2
 80025d4:	461d      	mov	r5, r3
 80025d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d8:	6020      	str	r0, [r4, #0]
 80025da:	6061      	str	r1, [r4, #4]
 80025dc:	60a2      	str	r2, [r4, #8]
 80025de:	60e3      	str	r3, [r4, #12]
 80025e0:	6828      	ldr	r0, [r5, #0]
 80025e2:	6120      	str	r0, [r4, #16]
 80025e4:	88aa      	ldrh	r2, [r5, #4]
 80025e6:	79ab      	ldrb	r3, [r5, #6]
 80025e8:	82a2      	strh	r2, [r4, #20]
 80025ea:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80025ec:	2316      	movs	r3, #22
 80025ee:	617b      	str	r3, [r7, #20]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80025f0:	2300      	movs	r3, #0
 80025f2:	e009      	b.n	8002608 <handleVariable_get+0x1b8>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4912      	ldr	r1, [pc, #72]	; (8002640 <handleVariable_get+0x1f0>)
 80025f8:	2208      	movs	r2, #8
 80025fa:	f006 f9eb 	bl	80089d4 <strncmp>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <handleVariable_get+0x1b8>
	
				
	
	

			return 0; 
 8002604:	2300      	movs	r3, #0
 8002606:	e7ff      	b.n	8002608 <handleVariable_get+0x1b8>
	}




}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bdb0      	pop	{r4, r5, r7, pc}
 8002610:	08008e1c 	.word	0x08008e1c
 8002614:	20014420 	.word	0x20014420
 8002618:	20013220 	.word	0x20013220
 800261c:	20000000 	.word	0x20000000
 8002620:	20014404 	.word	0x20014404
 8002624:	51eb851f 	.word	0x51eb851f
 8002628:	08008f18 	.word	0x08008f18
 800262c:	08008e70 	.word	0x08008e70
 8002630:	08008e84 	.word	0x08008e84
 8002634:	08008ea0 	.word	0x08008ea0
 8002638:	08008eb8 	.word	0x08008eb8
 800263c:	08008f30 	.word	0x08008f30
 8002640:	08008f0c 	.word	0x08008f0c

08002644 <prvMotorCommand>:
 * ==============================================================================================*/

portBASE_TYPE prvMotorCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 8002644:	b5b0      	push	{r4, r5, r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af04      	add	r7, sp, #16
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
	int xOptionLength, xParamLength, xValueLength; 
	//QueueTelegram telegram; 
	
	// get option from command line 

	Option = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002650:	f107 0318 	add.w	r3, r7, #24
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	2101      	movs	r1, #1
 8002658:	461a      	mov	r2, r3
 800265a:	f003 fae9 	bl	8005c30 <FreeRTOS_CLIGetParameter>
 800265e:	6278      	str	r0, [r7, #36]	; 0x24
					  1,  		   // first parameter
				  	  &xOptionLength // parameter string length
					  
					 );

	if ( Option == NULL)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10e      	bne.n	8002684 <prvMotorCommand+0x40>
	{
		sprintf(pcWriteBuffer, "To few arguments. \n\n\0");
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4b9f      	ldr	r3, [pc, #636]	; (80028e8 <prvMotorCommand+0x2a4>)
 800266a:	4615      	mov	r5, r2
 800266c:	461c      	mov	r4, r3
 800266e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002670:	6028      	str	r0, [r5, #0]
 8002672:	6069      	str	r1, [r5, #4]
 8002674:	60aa      	str	r2, [r5, #8]
 8002676:	60eb      	str	r3, [r5, #12]
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	6128      	str	r0, [r5, #16]
 800267c:	7923      	ldrb	r3, [r4, #4]
 800267e:	752b      	strb	r3, [r5, #20]
		return pdFALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	e18e      	b.n	80029a2 <prvMotorCommand+0x35e>
	}

	if (!strncmp(Option, "help", 4))
 8002684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002686:	4999      	ldr	r1, [pc, #612]	; (80028ec <prvMotorCommand+0x2a8>)
 8002688:	2204      	movs	r2, #4
 800268a:	f006 f9a3 	bl	80089d4 <strncmp>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <prvMotorCommand+0x68>
	{
		strcpy(pcWriteBuffer, 
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4b96      	ldr	r3, [pc, #600]	; (80028f0 <prvMotorCommand+0x2ac>)
 8002698:	4611      	mov	r1, r2
 800269a:	461a      	mov	r2, r3
 800269c:	23bc      	movs	r3, #188	; 0xbc
 800269e:	4608      	mov	r0, r1
 80026a0:	4611      	mov	r1, r2
 80026a2:	461a      	mov	r2, r3
 80026a4:	f7fd fd9a 	bl	80001dc <memcpy>
			
			"\0"

		      );

		return pdPASS;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e17a      	b.n	80029a2 <prvMotorCommand+0x35e>

	//================================================================================//
	//		CASE COMMAND SET [parameter name] [value]
	//================================================================================//

	if( !strncmp( Option, "set", 3) ) 
 80026ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ae:	4991      	ldr	r1, [pc, #580]	; (80028f4 <prvMotorCommand+0x2b0>)
 80026b0:	2203      	movs	r2, #3
 80026b2:	f006 f98f 	bl	80089d4 <strncmp>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d133      	bne.n	8002724 <prvMotorCommand+0xe0>
	{

		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	2102      	movs	r1, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	f003 fab3 	bl	8005c30 <FreeRTOS_CLIGetParameter>
 80026ca:	6238      	str	r0, [r7, #32]
					  2,  		   // 2nd parameter
				  	  &xParamLength // parameter string length
					  
					 );
		Value = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	2103      	movs	r1, #3
 80026d4:	461a      	mov	r2, r3
 80026d6:	f003 faab 	bl	8005c30 <FreeRTOS_CLIGetParameter>
 80026da:	61f8      	str	r0, [r7, #28]
					  
					 );
		
		// return pdFALSE if there is no 3rd parameter 

		if (Value==NULL||Param==NULL)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <prvMotorCommand+0xa4>
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <prvMotorCommand+0xb2>
		{
			strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 80026e8:	4b83      	ldr	r3, [pc, #524]	; (80028f8 <prvMotorCommand+0x2b4>)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f006 f8e3 	bl	80088b8 <strcpy>

			return pdFALSE; 
 80026f2:	2300      	movs	r3, #0
 80026f4:	e155      	b.n	80029a2 <prvMotorCommand+0x35e>

		}

		
		if ( handleVariable_set ( 
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	4a80      	ldr	r2, [pc, #512]	; (80028fc <prvMotorCommand+0x2b8>)
 80026fa:	6810      	ldr	r0, [r2, #0]
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	4a80      	ldr	r2, [pc, #512]	; (8002900 <prvMotorCommand+0x2bc>)
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	9000      	str	r0, [sp, #0]
 8002704:	69f8      	ldr	r0, [r7, #28]
 8002706:	9001      	str	r0, [sp, #4]
 8002708:	9102      	str	r1, [sp, #8]
 800270a:	9203      	str	r2, [sp, #12]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	f7ff fd43 	bl	800219c <handleVariable_set>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <prvMotorCommand+0xdc>
					   Param, 
					   xParamLength, 
					   QSpd_handle, 
					   Value,
					   xValueLength,  
					   socket_0)) return pdPASS;
 800271c:	2301      	movs	r3, #1
 800271e:	e140      	b.n	80029a2 <prvMotorCommand+0x35e>

		
			
		return pdFALSE;
 8002720:	2300      	movs	r3, #0
 8002722:	e13e      	b.n	80029a2 <prvMotorCommand+0x35e>
	//================================================================================//
	//		CASE COMMAND GET [parameter name] [value]
	//================================================================================//


	if (!strncmp ( Option, "get", 3))
 8002724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002726:	4977      	ldr	r1, [pc, #476]	; (8002904 <prvMotorCommand+0x2c0>)
 8002728:	2203      	movs	r2, #3
 800272a:	f006 f953 	bl	80089d4 <strncmp>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d127      	bne.n	8002784 <prvMotorCommand+0x140>
	{
		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	2102      	movs	r1, #2
 800273c:	461a      	mov	r2, r3
 800273e:	f003 fa77 	bl	8005c30 <FreeRTOS_CLIGetParameter>
 8002742:	6238      	str	r0, [r7, #32]
					  
					 );
			
		// return pdFALSE if there is no 3rd parameter 

		if(Value==NULL||Param==NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <prvMotorCommand+0x10c>
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <prvMotorCommand+0x11a>
		{
			strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 8002750:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <prvMotorCommand+0x2b4>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	4619      	mov	r1, r3
 8002756:	f006 f8af 	bl	80088b8 <strcpy>

			return pdFALSE; 
 800275a:	2300      	movs	r3, #0
 800275c:	e121      	b.n	80029a2 <prvMotorCommand+0x35e>

		}

		
		if ( handleVariable_get ( 
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4a66      	ldr	r2, [pc, #408]	; (80028fc <prvMotorCommand+0x2b8>)
 8002762:	6811      	ldr	r1, [r2, #0]
 8002764:	4a66      	ldr	r2, [pc, #408]	; (8002900 <prvMotorCommand+0x2bc>)
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	9100      	str	r1, [sp, #0]
 800276a:	9201      	str	r2, [sp, #4]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	f7ff fe6d 	bl	8002450 <handleVariable_get>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <prvMotorCommand+0x13c>
					   xWriteBufferLen,
	
				           Param, 
					   xParamLength, 
					   QSpd_handle, 
					   socket_0)) return pdPASS;
 800277c:	2301      	movs	r3, #1
 800277e:	e110      	b.n	80029a2 <prvMotorCommand+0x35e>
		return pdFALSE;
 8002780:	2300      	movs	r3, #0
 8002782:	e10e      	b.n	80029a2 <prvMotorCommand+0x35e>
	}
		
	//================================================================================//
	//		CASE COMMAND STOP 
	//================================================================================//
	if (!strncmp ( Option, "stop", 4))
 8002784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002786:	4960      	ldr	r1, [pc, #384]	; (8002908 <prvMotorCommand+0x2c4>)
 8002788:	2204      	movs	r2, #4
 800278a:	f006 f923 	bl	80089d4 <strncmp>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d169      	bne.n	8002868 <prvMotorCommand+0x224>
	{

		telegramS.Qcmd = STOP; 
 8002794:	4b5d      	ldr	r3, [pc, #372]	; (800290c <prvMotorCommand+0x2c8>)
 8002796:	2205      	movs	r2, #5
 8002798:	701a      	strb	r2, [r3, #0]
		telegramS.size = 5; 
 800279a:	4b5c      	ldr	r3, [pc, #368]	; (800290c <prvMotorCommand+0x2c8>)
 800279c:	2205      	movs	r2, #5
 800279e:	605a      	str	r2, [r3, #4]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) )
 80027a0:	4b56      	ldr	r3, [pc, #344]	; (80028fc <prvMotorCommand+0x2b8>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <prvMotorCommand+0x2cc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4610      	mov	r0, r2
 80027aa:	4958      	ldr	r1, [pc, #352]	; (800290c <prvMotorCommand+0x2c8>)
 80027ac:	461a      	mov	r2, r3
 80027ae:	2300      	movs	r3, #0
 80027b0:	f001 ffe6 	bl	8004780 <xQueueGenericSend>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d043      	beq.n	8002842 <prvMotorCommand+0x1fe>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
 80027ba:	4b50      	ldr	r3, [pc, #320]	; (80028fc <prvMotorCommand+0x2b8>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <prvMotorCommand+0x2cc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4610      	mov	r0, r2
 80027c4:	4953      	ldr	r1, [pc, #332]	; (8002914 <prvMotorCommand+0x2d0>)
 80027c6:	461a      	mov	r2, r3
 80027c8:	2300      	movs	r3, #0
 80027ca:	f002 f8f3 	bl	80049b4 <xQueueGenericReceive>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d125      	bne.n	8002820 <prvMotorCommand+0x1dc>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <prvMotorCommand+0x2d0>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b06      	cmp	r3, #6
 80027da:	d112      	bne.n	8002802 <prvMotorCommand+0x1be>
				{	
					sprintf(pcWriteBuffer ,"Motor succsesfully stopped.\n\n");
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4b4e      	ldr	r3, [pc, #312]	; (8002918 <prvMotorCommand+0x2d4>)
 80027e0:	4615      	mov	r5, r2
 80027e2:	461c      	mov	r4, r3
 80027e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e6:	6028      	str	r0, [r5, #0]
 80027e8:	6069      	str	r1, [r5, #4]
 80027ea:	60aa      	str	r2, [r5, #8]
 80027ec:	60eb      	str	r3, [r5, #12]
 80027ee:	cc07      	ldmia	r4!, {r0, r1, r2}
 80027f0:	6128      	str	r0, [r5, #16]
 80027f2:	6169      	str	r1, [r5, #20]
 80027f4:	61aa      	str	r2, [r5, #24]
 80027f6:	8823      	ldrh	r3, [r4, #0]
 80027f8:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29 ; 	
 80027fa:	231d      	movs	r3, #29
 80027fc:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0cf      	b.n	80029a2 <prvMotorCommand+0x35e>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4b45      	ldr	r3, [pc, #276]	; (800291c <prvMotorCommand+0x2d8>)
 8002806:	4615      	mov	r5, r2
 8002808:	461c      	mov	r4, r3
 800280a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280c:	6028      	str	r0, [r5, #0]
 800280e:	6069      	str	r1, [r5, #4]
 8002810:	60aa      	str	r2, [r5, #8]
 8002812:	60eb      	str	r3, [r5, #12]
 8002814:	6820      	ldr	r0, [r4, #0]
 8002816:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 8002818:	2313      	movs	r3, #19
 800281a:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					return pdFALSE;
 800281c:	2300      	movs	r3, #0
 800281e:	e0c0      	b.n	80029a2 <prvMotorCommand+0x35e>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <prvMotorCommand+0x2dc>)
 8002824:	4615      	mov	r5, r2
 8002826:	461c      	mov	r4, r3
 8002828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282a:	6028      	str	r0, [r5, #0]
 800282c:	6069      	str	r1, [r5, #4]
 800282e:	60aa      	str	r2, [r5, #8]
 8002830:	60eb      	str	r3, [r5, #12]
 8002832:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002834:	6128      	str	r0, [r5, #16]
 8002836:	6169      	str	r1, [r5, #20]
 8002838:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 800283a:	231b      	movs	r3, #27
 800283c:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 800283e:	2300      	movs	r3, #0
 8002840:	e0af      	b.n	80029a2 <prvMotorCommand+0x35e>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <prvMotorCommand+0x2e0>)
 8002846:	4614      	mov	r4, r2
 8002848:	461d      	mov	r5, r3
 800284a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284c:	6020      	str	r0, [r4, #0]
 800284e:	6061      	str	r1, [r4, #4]
 8002850:	60a2      	str	r2, [r4, #8]
 8002852:	60e3      	str	r3, [r4, #12]
 8002854:	6828      	ldr	r0, [r5, #0]
 8002856:	6120      	str	r0, [r4, #16]
 8002858:	88aa      	ldrh	r2, [r5, #4]
 800285a:	79ab      	ldrb	r3, [r5, #6]
 800285c:	82a2      	strh	r2, [r4, #20]
 800285e:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002860:	2316      	movs	r3, #22
 8002862:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8002864:	2300      	movs	r3, #0
 8002866:	e09c      	b.n	80029a2 <prvMotorCommand+0x35e>
	}
	//================================================================================//
	//		CASE COMMAND START
	//================================================================================//

	if (!strncmp ( Option, "start", 5))
 8002868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800286a:	492f      	ldr	r1, [pc, #188]	; (8002928 <prvMotorCommand+0x2e4>)
 800286c:	2205      	movs	r2, #5
 800286e:	f006 f8b1 	bl	80089d4 <strncmp>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 808e 	bne.w	8002996 <prvMotorCommand+0x352>
	{
		telegramS.Qcmd = START; 
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <prvMotorCommand+0x2c8>)
 800287c:	2204      	movs	r2, #4
 800287e:	701a      	strb	r2, [r3, #0]
		telegramS.size = 5; 
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <prvMotorCommand+0x2c8>)
 8002882:	2205      	movs	r2, #5
 8002884:	605a      	str	r2, [r3, #4]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <prvMotorCommand+0x2b8>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <prvMotorCommand+0x2cc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4610      	mov	r0, r2
 8002890:	491e      	ldr	r1, [pc, #120]	; (800290c <prvMotorCommand+0x2c8>)
 8002892:	461a      	mov	r2, r3
 8002894:	2300      	movs	r3, #0
 8002896:	f001 ff73 	bl	8004780 <xQueueGenericSend>
 800289a:	4603      	mov	r3, r0
 800289c:	2b01      	cmp	r3, #1
 800289e:	d167      	bne.n	8002970 <prvMotorCommand+0x32c>
		{	
		//	vTaskDelay(500/portTICK_RATE_MS);		
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay) == pdPASS)
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <prvMotorCommand+0x2b8>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <prvMotorCommand+0x2cc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4610      	mov	r0, r2
 80028aa:	491a      	ldr	r1, [pc, #104]	; (8002914 <prvMotorCommand+0x2d0>)
 80028ac:	461a      	mov	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	f002 f880 	bl	80049b4 <xQueueGenericReceive>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d149      	bne.n	800294e <prvMotorCommand+0x30a>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <prvMotorCommand+0x2d0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d136      	bne.n	8002930 <prvMotorCommand+0x2ec>
				{	
					sprintf(pcWriteBuffer , "Motor succsesfully started.\n\n");
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <prvMotorCommand+0x2e8>)
 80028c6:	4615      	mov	r5, r2
 80028c8:	461c      	mov	r4, r3
 80028ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028cc:	6028      	str	r0, [r5, #0]
 80028ce:	6069      	str	r1, [r5, #4]
 80028d0:	60aa      	str	r2, [r5, #8]
 80028d2:	60eb      	str	r3, [r5, #12]
 80028d4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80028d6:	6128      	str	r0, [r5, #16]
 80028d8:	6169      	str	r1, [r5, #20]
 80028da:	61aa      	str	r2, [r5, #24]
 80028dc:	8823      	ldrh	r3, [r4, #0]
 80028de:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29; 	
 80028e0:	231d      	movs	r3, #29
 80028e2:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e05c      	b.n	80029a2 <prvMotorCommand+0x35e>
 80028e8:	08008f4c 	.word	0x08008f4c
 80028ec:	08008f64 	.word	0x08008f64
 80028f0:	08008f6c 	.word	0x08008f6c
 80028f4:	0800902c 	.word	0x0800902c
 80028f8:	08008db0 	.word	0x08008db0
 80028fc:	20013220 	.word	0x20013220
 8002900:	2001321c 	.word	0x2001321c
 8002904:	08009030 	.word	0x08009030
 8002908:	08009034 	.word	0x08009034
 800290c:	20014420 	.word	0x20014420
 8002910:	20000000 	.word	0x20000000
 8002914:	20014404 	.word	0x20014404
 8002918:	0800903c 	.word	0x0800903c
 800291c:	08008e70 	.word	0x08008e70
 8002920:	08008e84 	.word	0x08008e84
 8002924:	08008ea0 	.word	0x08008ea0
 8002928:	0800905c 	.word	0x0800905c
 800292c:	08009064 	.word	0x08009064

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <prvMotorCommand+0x368>)
 8002934:	4615      	mov	r5, r2
 8002936:	461c      	mov	r4, r3
 8002938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800293a:	6028      	str	r0, [r5, #0]
 800293c:	6069      	str	r1, [r5, #4]
 800293e:	60aa      	str	r2, [r5, #8]
 8002940:	60eb      	str	r3, [r5, #12]
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 8002946:	2313      	movs	r3, #19
 8002948:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					return pdFALSE;
 800294a:	2300      	movs	r3, #0
 800294c:	e029      	b.n	80029a2 <prvMotorCommand+0x35e>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <prvMotorCommand+0x36c>)
 8002952:	4615      	mov	r5, r2
 8002954:	461c      	mov	r4, r3
 8002956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002958:	6028      	str	r0, [r5, #0]
 800295a:	6069      	str	r1, [r5, #4]
 800295c:	60aa      	str	r2, [r5, #8]
 800295e:	60eb      	str	r3, [r5, #12]
 8002960:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002962:	6128      	str	r0, [r5, #16]
 8002964:	6169      	str	r1, [r5, #20]
 8002966:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 8002968:	231b      	movs	r3, #27
 800296a:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 800296c:	2300      	movs	r3, #0
 800296e:	e018      	b.n	80029a2 <prvMotorCommand+0x35e>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer,"Error sending Queue!\n\n");
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <prvMotorCommand+0x370>)
 8002974:	4614      	mov	r4, r2
 8002976:	461d      	mov	r5, r3
 8002978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800297a:	6020      	str	r0, [r4, #0]
 800297c:	6061      	str	r1, [r4, #4]
 800297e:	60a2      	str	r2, [r4, #8]
 8002980:	60e3      	str	r3, [r4, #12]
 8002982:	6828      	ldr	r0, [r5, #0]
 8002984:	6120      	str	r0, [r4, #16]
 8002986:	88aa      	ldrh	r2, [r5, #4]
 8002988:	79ab      	ldrb	r3, [r5, #6]
 800298a:	82a2      	strh	r2, [r4, #20]
 800298c:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 800298e:	2316      	movs	r3, #22
 8002990:	60bb      	str	r3, [r7, #8]
			//send( socket_0, buf, len, 0);

			return pdFALSE; 	
 8002992:	2300      	movs	r3, #0
 8002994:	e005      	b.n	80029a2 <prvMotorCommand+0x35e>


	}


	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <prvMotorCommand+0x374>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	4619      	mov	r1, r3
 800299c:	f005 ff8c 	bl	80088b8 <strcpy>
		
	return pdFALSE;
 80029a0:	2300      	movs	r3, #0


}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	08008e70 	.word	0x08008e70
 80029b0:	08008e84 	.word	0x08008e84
 80029b4:	08008ea0 	.word	0x08008ea0
 80029b8:	08008db0 	.word	0x08008db0

080029bc <prvTaskStatsCommand>:

portBASE_TYPE prvTaskStatsCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 80029bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c0:	b08a      	sub	sp, #40	; 0x28
 80029c2:	af04      	add	r7, sp, #16
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
	int xOptionLength, xParamLength, xValueLength; 
	//QueueTelegram telegram; 
	
	// get option from command line 

	Option = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	2101      	movs	r1, #1
 80029d2:	461a      	mov	r2, r3
 80029d4:	f003 f92c 	bl	8005c30 <FreeRTOS_CLIGetParameter>
 80029d8:	6178      	str	r0, [r7, #20]
					  1,  		   // first parameter
				  	  &xOptionLength // parameter string length
					  
					 );
    	( void ) xWriteBufferLen;
	if ( Option == NULL)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <prvTaskStatsCommand+0x2a>
	{
		 vTaskList( pcWriteBuffer);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f001 fdbd 	bl	8004560 <vTaskList>
	}	
    /* For simplicity, this function assumes the output buffer is large enough
    to hold all the text generated by executing the vTaskList() API function,
    so the xWriteBufferLen parameter is not used. */

	if (!strncmp ( Option, "kill", 7))
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	492d      	ldr	r1, [pc, #180]	; (8002aa0 <prvTaskStatsCommand+0xe4>)
 80029ea:	2207      	movs	r2, #7
 80029ec:	f005 fff2 	bl	80089d4 <strncmp>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11c      	bne.n	8002a30 <prvTaskStatsCommand+0x74>
	{
	
		vTaskDelete(motorHeartBeatHandle);
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <prvTaskStatsCommand+0xe8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fd9e 	bl	800353c <vTaskDelete>
		strcpy ( pcWriteBuffer, "Task: motorHB succsessfully killed\n\0");
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <prvTaskStatsCommand+0xec>)
 8002a04:	4614      	mov	r4, r2
 8002a06:	461d      	mov	r5, r3
 8002a08:	f104 0820 	add.w	r8, r4, #32
 8002a0c:	462e      	mov	r6, r5
 8002a0e:	46a4      	mov	ip, r4
 8002a10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002a14:	6030      	str	r0, [r6, #0]
 8002a16:	6071      	str	r1, [r6, #4]
 8002a18:	60b2      	str	r2, [r6, #8]
 8002a1a:	60f3      	str	r3, [r6, #12]
 8002a1c:	3410      	adds	r4, #16
 8002a1e:	3510      	adds	r5, #16
 8002a20:	4544      	cmp	r4, r8
 8002a22:	d1f3      	bne.n	8002a0c <prvTaskStatsCommand+0x50>
 8002a24:	462b      	mov	r3, r5
 8002a26:	4622      	mov	r2, r4
 8002a28:	6810      	ldr	r0, [r2, #0]
 8002a2a:	6018      	str	r0, [r3, #0]
		return pdPASS;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e031      	b.n	8002a94 <prvTaskStatsCommand+0xd8>
	}
	if (!strncmp ( Option, "start", 5))
 8002a30:	6978      	ldr	r0, [r7, #20]
 8002a32:	491e      	ldr	r1, [pc, #120]	; (8002aac <prvTaskStatsCommand+0xf0>)
 8002a34:	2205      	movs	r2, #5
 8002a36:	f005 ffcd 	bl	80089d4 <strncmp>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d128      	bne.n	8002a92 <prvTaskStatsCommand+0xd6>
	{
		// set motor task 
		xTaskCreate(motorHeartBeat_task, "motorHB", configMINIMAL_STACK_SIZE * 8,		       				
 8002a40:	2301      	movs	r3, #1
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <prvTaskStatsCommand+0xe8>)
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9303      	str	r3, [sp, #12]
 8002a50:	4817      	ldr	r0, [pc, #92]	; (8002ab0 <prvTaskStatsCommand+0xf4>)
 8002a52:	4918      	ldr	r1, [pc, #96]	; (8002ab4 <prvTaskStatsCommand+0xf8>)
 8002a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f000 fcbb 	bl	80033d4 <xTaskGenericCreate>
			NULL, 0x1/*mainFLASH_TASK_PRIORITY*/ , &motorHeartBeatHandle);

		strcpy ( pcWriteBuffer, "Task: motorHB succsessfully started\n\0");
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <prvTaskStatsCommand+0xfc>)
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	f104 0820 	add.w	r8, r4, #32
 8002a6a:	462e      	mov	r6, r5
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002a72:	6030      	str	r0, [r6, #0]
 8002a74:	6071      	str	r1, [r6, #4]
 8002a76:	60b2      	str	r2, [r6, #8]
 8002a78:	60f3      	str	r3, [r6, #12]
 8002a7a:	3410      	adds	r4, #16
 8002a7c:	3510      	adds	r5, #16
 8002a7e:	4544      	cmp	r4, r8
 8002a80:	d1f3      	bne.n	8002a6a <prvTaskStatsCommand+0xae>
 8002a82:	462b      	mov	r3, r5
 8002a84:	4622      	mov	r2, r4
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	6018      	str	r0, [r3, #0]
 8002a8a:	7912      	ldrb	r2, [r2, #4]
 8002a8c:	711a      	strb	r2, [r3, #4]

	
		return pdPASS;	
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <prvTaskStatsCommand+0xd8>

 

    /* The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE. */
    return pdFALSE;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08009084 	.word	0x08009084
 8002aa4:	200139f8 	.word	0x200139f8
 8002aa8:	0800908c 	.word	0x0800908c
 8002aac:	0800905c 	.word	0x0800905c
 8002ab0:	08001f25 	.word	0x08001f25
 8002ab4:	080090b4 	.word	0x080090b4
 8002ab8:	080090bc 	.word	0x080090bc

08002abc <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <printchar+0x24>
		**str = (char)c;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
		++(*str);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop

08002aec <prints>:
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
static int prints(char **out, const char *string, int width, int pad)
{
 8002aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8002afc:	2400      	movs	r4, #0
 8002afe:	2620      	movs	r6, #32

	if (width > 0) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	dd19      	ble.n	8002b3a <prints+0x4e>
		register int len = 0;
 8002b06:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8002b08:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8002b0c:	e002      	b.n	8002b14 <prints+0x28>
 8002b0e:	3501      	adds	r5, #1
 8002b10:	f108 0801 	add.w	r8, r8, #1
 8002b14:	f898 3000 	ldrb.w	r3, [r8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f8      	bne.n	8002b0e <prints+0x22>
		if (len >= width) width = 0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	429d      	cmp	r5, r3
 8002b20:	db02      	blt.n	8002b28 <prints+0x3c>
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	e002      	b.n	8002b2e <prints+0x42>
		else width -= len;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1b5b      	subs	r3, r3, r5
 8002b2c:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d000      	beq.n	8002b3a <prints+0x4e>
 8002b38:	2630      	movs	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <prints+0x70>
		for ( ; width > 0; --width) {
 8002b44:	e007      	b.n	8002b56 <prints+0x6a>
			printchar (out, padchar);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	4631      	mov	r1, r6
 8002b4a:	f7ff ffb7 	bl	8002abc <printchar>
			++pc;
 8002b4e:	3401      	adds	r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	dcf4      	bgt.n	8002b46 <prints+0x5a>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002b5c:	e009      	b.n	8002b72 <prints+0x86>
		printchar (out, *string);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7ff ffa9 	bl	8002abc <printchar>
		++pc;
 8002b6a:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f1      	bne.n	8002b5e <prints+0x72>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8002b7a:	e007      	b.n	8002b8c <prints+0xa0>
		printchar (out, padchar);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	4631      	mov	r1, r6
 8002b80:	f7ff ff9c 	bl	8002abc <printchar>
		++pc;
 8002b84:	3401      	adds	r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dcf4      	bgt.n	8002b7c <prints+0x90>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 8002b92:	4623      	mov	r3, r4
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b9e:	bf00      	nop

08002ba0 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8002ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ba4:	b089      	sub	sp, #36	; 0x24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8002bb0:	f04f 0900 	mov.w	r9, #0
 8002bb4:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
 8002bb8:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <printi+0x3c>
		print_buf[0] = '0';
 8002bc0:	2330      	movs	r3, #48	; 0x30
 8002bc2:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd4:	f7ff ff8a 	bl	8002aec <prints>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	e049      	b.n	8002c70 <printi+0xd0>
	}

	if (sg && b == 10 && i < 0) {
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <printi+0x58>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b0a      	cmp	r3, #10
 8002be6:	d107      	bne.n	8002bf8 <printi+0x58>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da04      	bge.n	8002bf8 <printi+0x58>
		neg = 1;
 8002bee:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8002bf8:	f107 0414 	add.w	r4, r7, #20
 8002bfc:	340b      	adds	r4, #11
	*s = '\0';
 8002bfe:	2300      	movs	r3, #0
 8002c00:	7023      	strb	r3, [r4, #0]

	while (u) {
 8002c02:	e013      	b.n	8002c2c <printi+0x8c>
		t = (unsigned int)u % b;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	fbb5 f2f3 	udiv	r2, r5, r3
 8002c0a:	fb03 f302 	mul.w	r3, r3, r2
 8002c0e:	1aeb      	subs	r3, r5, r3
 8002c10:	461e      	mov	r6, r3
		if( t >= 10 )
 8002c12:	2e09      	cmp	r6, #9
 8002c14:	dd02      	ble.n	8002c1c <printi+0x7c>
			t += letbase - '0' - 10;
 8002c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c18:	3b3a      	subs	r3, #58	; 0x3a
 8002c1a:	441e      	add	r6, r3
		*--s = (char)(t + '0');
 8002c1c:	3c01      	subs	r4, #1
 8002c1e:	b2f3      	uxtb	r3, r6
 8002c20:	3330      	adds	r3, #48	; 0x30
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	7023      	strb	r3, [r4, #0]
		u /= b;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	d1e9      	bne.n	8002c04 <printi+0x64>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
 8002c30:	f1b9 0f00 	cmp.w	r9, #0
 8002c34:	d014      	beq.n	8002c60 <printi+0xc0>
		if( width && (pad & PAD_ZERO) ) {
 8002c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <printi+0xba>
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <printi+0xba>
			printchar (out, '-');
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	212d      	movs	r1, #45	; 0x2d
 8002c4a:	f7ff ff37 	bl	8002abc <printchar>
			++pc;
 8002c4e:	f108 0801 	add.w	r8, r8, #1
			--width;
 8002c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c54:	3b01      	subs	r3, #1
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40
 8002c58:	e002      	b.n	8002c60 <printi+0xc0>
		}
		else {
			*--s = '-';
 8002c5a:	3c01      	subs	r4, #1
 8002c5c:	232d      	movs	r3, #45	; 0x2d
 8002c5e:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	4621      	mov	r1, r4
 8002c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c68:	f7ff ff40 	bl	8002aec <prints>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4443      	add	r3, r8
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3724      	adds	r7, #36	; 0x24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c7a:	bf00      	nop

08002c7c <print>:

static int print( char **out, const char *format, va_list args )
{
 8002c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c80:	b08a      	sub	sp, #40	; 0x28
 8002c82:	af04      	add	r7, sp, #16
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8002c8a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8002c8c:	e0cc      	b.n	8002e28 <print+0x1ac>
		if (*format == '%') {
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b25      	cmp	r3, #37	; 0x25
 8002c94:	f040 80be 	bne.w	8002e14 <print+0x198>
			++format;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8002c9e:	2600      	movs	r6, #0
 8002ca0:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d100      	bne.n	8002cac <print+0x30>
 8002caa:	e0c2      	b.n	8002e32 <print+0x1b6>
			if (*format == '%') goto out;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b25      	cmp	r3, #37	; 0x25
 8002cb2:	d100      	bne.n	8002cb6 <print+0x3a>
 8002cb4:	e0ae      	b.n	8002e14 <print+0x198>
			if (*format == '-') {
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b2d      	cmp	r3, #45	; 0x2d
 8002cbc:	d104      	bne.n	8002cc8 <print+0x4c>
				++format;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8002cc4:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8002cc6:	e005      	b.n	8002cd4 <print+0x58>
 8002cc8:	e004      	b.n	8002cd4 <print+0x58>
				++format;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8002cd0:	f046 0602 	orr.w	r6, r6, #2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b30      	cmp	r3, #48	; 0x30
 8002cda:	d0f6      	beq.n	8002cca <print+0x4e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002cdc:	e00b      	b.n	8002cf6 <print+0x7a>
				width *= 10;
 8002cde:	462b      	mov	r3, r5
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	442b      	add	r3, r5
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	461d      	mov	r5, r3
				width += *format - '0';
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	3b30      	subs	r3, #48	; 0x30
 8002cee:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b2f      	cmp	r3, #47	; 0x2f
 8002cfc:	d903      	bls.n	8002d06 <print+0x8a>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b39      	cmp	r3, #57	; 0x39
 8002d04:	d9eb      	bls.n	8002cde <print+0x62>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b73      	cmp	r3, #115	; 0x73
 8002d0c:	d113      	bne.n	8002d36 <print+0xba>
				register char *s = (char *)va_arg( args, int );
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1d1a      	adds	r2, r3, #4
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8002d18:	f1b8 0f00 	cmp.w	r8, #0
 8002d1c:	d001      	beq.n	8002d22 <print+0xa6>
 8002d1e:	4643      	mov	r3, r8
 8002d20:	e000      	b.n	8002d24 <print+0xa8>
 8002d22:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <print+0x1d0>)
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	4619      	mov	r1, r3
 8002d28:	462a      	mov	r2, r5
 8002d2a:	4633      	mov	r3, r6
 8002d2c:	f7ff fede 	bl	8002aec <prints>
 8002d30:	4603      	mov	r3, r0
 8002d32:	441c      	add	r4, r3
				continue;
 8002d34:	e075      	b.n	8002e22 <print+0x1a6>
			}
			if( *format == 'd' || *format == 'i' ) {
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d003      	beq.n	8002d46 <print+0xca>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b69      	cmp	r3, #105	; 0x69
 8002d44:	d110      	bne.n	8002d68 <print+0xec>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	1d1a      	adds	r2, r3, #4
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	9500      	str	r5, [sp, #0]
 8002d50:	9601      	str	r6, [sp, #4]
 8002d52:	2261      	movs	r2, #97	; 0x61
 8002d54:	9202      	str	r2, [sp, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	220a      	movs	r2, #10
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f7ff ff1f 	bl	8002ba0 <printi>
 8002d62:	4603      	mov	r3, r0
 8002d64:	441c      	add	r4, r3
				continue;
 8002d66:	e05c      	b.n	8002e22 <print+0x1a6>
			}
			if( *format == 'x' ) {
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b78      	cmp	r3, #120	; 0x78
 8002d6e:	d110      	bne.n	8002d92 <print+0x116>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1d1a      	adds	r2, r3, #4
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	9500      	str	r5, [sp, #0]
 8002d7a:	9601      	str	r6, [sp, #4]
 8002d7c:	2261      	movs	r2, #97	; 0x61
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	4619      	mov	r1, r3
 8002d84:	2210      	movs	r2, #16
 8002d86:	2300      	movs	r3, #0
 8002d88:	f7ff ff0a 	bl	8002ba0 <printi>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	441c      	add	r4, r3
				continue;
 8002d90:	e047      	b.n	8002e22 <print+0x1a6>
			}
			if( *format == 'X' ) {
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b58      	cmp	r3, #88	; 0x58
 8002d98:	d110      	bne.n	8002dbc <print+0x140>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	1d1a      	adds	r2, r3, #4
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	9500      	str	r5, [sp, #0]
 8002da4:	9601      	str	r6, [sp, #4]
 8002da6:	2241      	movs	r2, #65	; 0x41
 8002da8:	9202      	str	r2, [sp, #8]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	4619      	mov	r1, r3
 8002dae:	2210      	movs	r2, #16
 8002db0:	2300      	movs	r3, #0
 8002db2:	f7ff fef5 	bl	8002ba0 <printi>
 8002db6:	4603      	mov	r3, r0
 8002db8:	441c      	add	r4, r3
				continue;
 8002dba:	e032      	b.n	8002e22 <print+0x1a6>
			}
			if( *format == 'u' ) {
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b75      	cmp	r3, #117	; 0x75
 8002dc2:	d110      	bne.n	8002de6 <print+0x16a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	9500      	str	r5, [sp, #0]
 8002dce:	9601      	str	r6, [sp, #4]
 8002dd0:	2261      	movs	r2, #97	; 0x61
 8002dd2:	9202      	str	r2, [sp, #8]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	220a      	movs	r2, #10
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f7ff fee0 	bl	8002ba0 <printi>
 8002de0:	4603      	mov	r3, r0
 8002de2:	441c      	add	r4, r3
				continue;
 8002de4:	e01d      	b.n	8002e22 <print+0x1a6>
			}
			if( *format == 'c' ) {
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b63      	cmp	r3, #99	; 0x63
 8002dec:	d119      	bne.n	8002e22 <print+0x1a6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	1d1a      	adds	r2, r3, #4
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	4619      	mov	r1, r3
 8002e06:	462a      	mov	r2, r5
 8002e08:	4633      	mov	r3, r6
 8002e0a:	f7ff fe6f 	bl	8002aec <prints>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	441c      	add	r4, r3
				continue;
 8002e12:	e006      	b.n	8002e22 <print+0x1a6>
			}
		}
		else {
		out:
			printchar (out, *format);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7ff fe4e 	bl	8002abc <printchar>
			++pc;
 8002e20:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3301      	adds	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f af2e 	bne.w	8002c8e <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <print+0x1c4>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8002e40:	4623      	mov	r3, r4
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e4c:	080090e4 	.word	0x080090e4

08002e50 <sprintf>:
	va_start( args, format );
	return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8002e50:	b40e      	push	{r1, r2, r3}
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args, format );
 8002e5a:	f107 0320 	add.w	r3, r7, #32
 8002e5e:	60fb      	str	r3, [r7, #12]
	return print( &out, format, args );
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4618      	mov	r0, r3
 8002e64:	69f9      	ldr	r1, [r7, #28]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	f7ff ff08 	bl	8002c7c <print>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e78:	b003      	add	sp, #12
 8002e7a:	4770      	bx	lr

08002e7c <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <NVIC_SetPendingIRQ+0x30>)
 8002e88:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002e8c:	0952      	lsrs	r2, r2, #5
 8002e8e:	79f9      	ldrb	r1, [r7, #7]
 8002e90:	f001 011f 	and.w	r1, r1, #31
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f101 	lsl.w	r1, r0, r1
 8002e9a:	3240      	adds	r2, #64	; 0x40
 8002e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <CoreSight_configure>:


#define SWO_BAUD_RATE 230400

void CoreSight_configure(uint32_t SystemCoreClock)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  uint32_t SWOPrescaler;

  SWOPrescaler = (SystemCoreClock / SWO_BAUD_RATE ) - 1;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <CoreSight_configure+0x60>)
 8002ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec0:	0c5b      	lsrs	r3, r3, #17
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]

  CoreDebug->DEMCR = 1 << CoreDebug_DEMCR_TRCENA_Pos; /* Enable trace */
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <CoreSight_configure+0x64>)
 8002ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ecc:	60da      	str	r2, [r3, #12]
  *((volatile unsigned *) 0xE0042004) = 0x00000020;   /* DBGMCU_CR */
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <CoreSight_configure+0x68>)
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	601a      	str	r2, [r3, #0]
  
  
  *((volatile unsigned *) 0xE0040004) = 0x00000001; /* port size -> 1 bit */
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <CoreSight_configure+0x6c>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Set TPIU register->Selected pinprotocol = 10b: Serial Wire Output - NRZ */
  *((volatile unsigned *) 0xE00400F0) = 0x00000002; /* "Selected PIN Protocol Register": Select which protocol to use for trace output (2: SWO)*/
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <CoreSight_configure+0x70>)
 8002edc:	2202      	movs	r2, #2
 8002ede:	601a      	str	r2, [r3, #0]

  /* Set TPIU -> Async Clock Prescaler Register [bits 0-12] */
  *((volatile unsigned *) 0xE0040010) = SWOPrescaler; /* "Async Clock Prescaler Register". Scale the baud rate of the asynchronous output */
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <CoreSight_configure+0x74>)
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]

  *((volatile unsigned *) 0xE0040304) = 0x00000100; /* Formatter and Flush Control Register */
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <CoreSight_configure+0x78>)
 8002ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eec:	601a      	str	r2, [r3, #0]

  /* ITM Lock Access Register */
  *((volatile unsigned *) 0xE0000FB0) = 0xC5ACCE55; /* ITM Lock Access Register, C5ACCE55 enables more */
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <CoreSight_configure+0x7c>)
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <CoreSight_configure+0x80>)
 8002ef2:	601a      	str	r2, [r3, #0]
                                                    /* write access to Control Register 0xE00 :: 0xFFC */
  *((volatile unsigned *) 0xE0000E80) = 0x00010005; /* ITM Trace Control Register */
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <CoreSight_configure+0x84>)
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <CoreSight_configure+0x88>)
 8002ef8:	601a      	str	r2, [r3, #0]
  *((volatile unsigned *) 0xE0000E00) = 0x00000001; /* ITM Trace Enable Register. Enabled tracing on stimulus */
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <CoreSight_configure+0x8c>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
                                                    /* ports. One bit per stimulus port. */
  *((volatile unsigned *) 0xE0000E40) = 0x00000001; /* ITM Trace Privilege Register */
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <CoreSight_configure+0x90>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

  /*  *((volatile unsigned *) 0xE0001000) = 0x400003FE; */ /* DWT_CTRL */

  //  *(volatile unsigned int *)0xE0001000 |= 0x00000001 ;  /* Enable cycle counter*/
  // *(volatile unsigned int *)0xE0001004 = 0;             /* Reset counter */
}
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	91a2b3c5 	.word	0x91a2b3c5
 8002f14:	e000edf0 	.word	0xe000edf0
 8002f18:	e0042004 	.word	0xe0042004
 8002f1c:	e0040004 	.word	0xe0040004
 8002f20:	e00400f0 	.word	0xe00400f0
 8002f24:	e0040010 	.word	0xe0040010
 8002f28:	e0040304 	.word	0xe0040304
 8002f2c:	e0000fb0 	.word	0xe0000fb0
 8002f30:	c5acce55 	.word	0xc5acce55
 8002f34:	e0000e80 	.word	0xe0000e80
 8002f38:	00010005 	.word	0x00010005
 8002f3c:	e0000e00 	.word	0xe0000e00
 8002f40:	e0000e40 	.word	0xe0000e40

08002f44 <main>:

/*-----------------------------------------------------------*/

int main(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af04      	add	r7, sp, #16
	SystemCoreClockUpdate();
 8002f4a:	f000 f94d 	bl	80031e8 <SystemCoreClockUpdate>

	CoreSight_configure(SystemCoreClock);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <main+0x9c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ffac 	bl	8002eb0 <CoreSight_configure>
	/*<! Configure the hardware ready to run the test. */
	prvSetupHardware();;
 8002f58:	f000 f85e 	bl	8003018 <prvSetupHardware>
	t_printf("Starting\n");
 8002f5c:	4821      	ldr	r0, [pc, #132]	; (8002fe4 <main+0xa0>)
 8002f5e:	f002 fc6f 	bl	8005840 <t_printf>
	
	// ============now register CLI commands ===================
	
	FreeRTOS_CLIRegisterCommand( &xMotorCommand );
 8002f62:	4821      	ldr	r0, [pc, #132]	; (8002fe8 <main+0xa4>)
 8002f64:	f002 fdaa 	bl	8005abc <FreeRTOS_CLIRegisterCommand>
       	FreeRTOS_CLIRegisterCommand( &xTaskStatsCommand);		
 8002f68:	4820      	ldr	r0, [pc, #128]	; (8002fec <main+0xa8>)
 8002f6a:	f002 fda7 	bl	8005abc <FreeRTOS_CLIRegisterCommand>

	// create queues 
	QSpd_handle = xQueueCreate(2, sizeof(QueueTelegram));
 8002f6e:	2002      	movs	r0, #2
 8002f70:	211c      	movs	r1, #28
 8002f72:	2200      	movs	r2, #0
 8002f74:	f001 fbc2 	bl	80046fc <xQueueGenericCreate>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <main+0xac>)
 8002f7c:	601a      	str	r2, [r3, #0]
/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/



	// echo server task 
	xTaskCreate(tcp_srv_Task, "TCPsrv", configMINIMAL_STACK_SIZE * 10, 
 8002f7e:	2302      	movs	r3, #2
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <main+0xb0>)
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	2300      	movs	r3, #0
 8002f88:	9302      	str	r3, [sp, #8]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9303      	str	r3, [sp, #12]
 8002f8e:	481a      	ldr	r0, [pc, #104]	; (8002ff8 <main+0xb4>)
 8002f90:	491a      	ldr	r1, [pc, #104]	; (8002ffc <main+0xb8>)
 8002f92:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002f96:	2300      	movs	r3, #0
 8002f98:	f000 fa1c 	bl	80033d4 <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY + 1, &set_macTaskHandle);
	
	// run motor task 
	xTaskCreate(motorControl_task, "motor", configMINIMAL_STACK_SIZE * 10,
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <main+0xbc>)
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	9303      	str	r3, [sp, #12]
 8002fac:	4815      	ldr	r0, [pc, #84]	; (8003004 <main+0xc0>)
 8002fae:	4916      	ldr	r1, [pc, #88]	; (8003008 <main+0xc4>)
 8002fb0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f000 fa0d 	bl	80033d4 <xTaskGenericCreate>
		       	NULL, mainFLASH_TASK_PRIORITY + 1, &motorHBHandle);

	// set motor task 
	xTaskCreate(motorHeartBeat_task, "motorHB", configMINIMAL_STACK_SIZE * 10,		       				
 8002fba:	2301      	movs	r3, #1
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <main+0xc8>)
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9303      	str	r3, [sp, #12]
 8002fca:	4811      	ldr	r0, [pc, #68]	; (8003010 <main+0xcc>)
 8002fcc:	4911      	ldr	r1, [pc, #68]	; (8003014 <main+0xd0>)
 8002fce:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f000 f9fe 	bl	80033d4 <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8002fd8:	f000 fc3e 	bl	8003858 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8002fdc:	e7fe      	b.n	8002fdc <main+0x98>
 8002fde:	bf00      	nop
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	08009160 	.word	0x08009160
 8002fe8:	0800970c 	.word	0x0800970c
 8002fec:	0800971c 	.word	0x0800971c
 8002ff0:	20013220 	.word	0x20013220
 8002ff4:	200141e0 	.word	0x200141e0
 8002ff8:	080015a1 	.word	0x080015a1
 8002ffc:	0800916c 	.word	0x0800916c
 8003000:	20013218 	.word	0x20013218
 8003004:	08001f5d 	.word	0x08001f5d
 8003008:	080090ec 	.word	0x080090ec
 800300c:	200139f8 	.word	0x200139f8
 8003010:	08001f25 	.word	0x08001f25
 8003014:	08009174 	.word	0x08009174

08003018 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af04      	add	r7, sp, #16
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 800301e:	f000 f8af 	bl	8003180 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8003022:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003026:	f003 f837 	bl	8006098 <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 800302a:	f7fd f971 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 800302e:	f7fe fb37 	bl	80016a0 <init_USARTx>
	 * Function : 		init_W5200 from W5200.c file 
	 * Stack size :		5 times minimial stack size 
	 * Task priority :	main flash task priority + 1 
	 * Parameters 	 :	no parameters (NULL)
	 */  
	xTaskCreate(init_W5200, "init_W5200", configMINIMAL_STACK_SIZE*4, 
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2300      	movs	r3, #0
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	2300      	movs	r3, #0
 8003040:	9303      	str	r3, [sp, #12]
 8003042:	4804      	ldr	r0, [pc, #16]	; (8003054 <prvSetupHardware+0x3c>)
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <prvSetupHardware+0x40>)
 8003046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800304a:	2300      	movs	r3, #0
 800304c:	f000 f9c2 	bl	80033d4 <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY + 1 , NULL);
	
	
}
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	08000ac5 	.word	0x08000ac5
 8003058:	0800917c 	.word	0x0800917c

0800305c <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <vApplicationTickHook+0x20>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <vApplicationTickHook+0x20>)
 8003068:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 800306a:	201c      	movs	r0, #28
 800306c:	f7ff ff06 	bl	8002e7c <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8003070:	4b02      	ldr	r3, [pc, #8]	; (800307c <vApplicationTickHook+0x20>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	1e5a      	subs	r2, r3, #1
 8003076:	4b01      	ldr	r3, [pc, #4]	; (800307c <vApplicationTickHook+0x20>)
 8003078:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 800307a:	bd80      	pop	{r7, pc}
 800307c:	200004a0 	.word	0x200004a0

08003080 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <TIM3_IRQHandler+0x34>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <TIM3_IRQHandler+0x34>)
 800308c:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <TIM3_IRQHandler+0x34>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <TIM3_IRQHandler+0x38>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d903      	bls.n	80030a2 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <TIM3_IRQHandler+0x34>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <TIM3_IRQHandler+0x38>)
 80030a0:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <TIM3_IRQHandler+0x34>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	4b02      	ldr	r3, [pc, #8]	; (80030b4 <TIM3_IRQHandler+0x34>)
 80030aa:	601a      	str	r2, [r3, #0]
}
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	200004a0 	.word	0x200004a0
 80030b8:	200004a4 	.word	0x200004a4

080030bc <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <TIM2_IRQHandler+0x20>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <TIM2_IRQHandler+0x20>)
 80030c8:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 80030ca:	201d      	movs	r0, #29
 80030cc:	f7ff fed6 	bl	8002e7c <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <TIM2_IRQHandler+0x20>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	4b01      	ldr	r3, [pc, #4]	; (80030dc <TIM2_IRQHandler+0x20>)
 80030d8:	601a      	str	r2, [r3, #0]
}
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200004a0 	.word	0x200004a0

080030e0 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 80030e4:	f002 f80c 	bl	8005100 <ulPortSetInterruptMask>
	for( ;; );
 80030e8:	e7fe      	b.n	80030e8 <vApplicationMallocFailedHook+0x8>
 80030ea:	bf00      	nop

080030ec <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8003102:	f001 fffd 	bl	8005100 <ulPortSetInterruptMask>
	for( ;; );
 8003106:	e7fe      	b.n	8003106 <vApplicationStackOverflowHook+0xe>

08003108 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]

}
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <Reset_Handler>:
 800311c:	2100      	movs	r1, #0
 800311e:	f000 b804 	b.w	800312a <LoopCopyDataInit>

08003122 <CopyDataInit>:
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <LoopFillZerobss+0x22>)
 8003124:	585b      	ldr	r3, [r3, r1]
 8003126:	5043      	str	r3, [r0, r1]
 8003128:	3104      	adds	r1, #4

0800312a <LoopCopyDataInit>:
 800312a:	480f      	ldr	r0, [pc, #60]	; (8003168 <LoopFillZerobss+0x26>)
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <LoopFillZerobss+0x2a>)
 800312e:	1842      	adds	r2, r0, r1
 8003130:	429a      	cmp	r2, r3
 8003132:	f4ff aff6 	bcc.w	8003122 <CopyDataInit>
 8003136:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <LoopFillZerobss+0x2e>)
 8003138:	f000 b803 	b.w	8003142 <LoopFillZerobss>

0800313c <FillZerobss>:
 800313c:	2300      	movs	r3, #0
 800313e:	f842 3b04 	str.w	r3, [r2], #4

08003142 <LoopFillZerobss>:
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <LoopFillZerobss+0x32>)
 8003144:	429a      	cmp	r2, r3
 8003146:	f4ff aff9 	bcc.w	800313c <FillZerobss>
 800314a:	480b      	ldr	r0, [pc, #44]	; (8003178 <LoopFillZerobss+0x36>)
 800314c:	6801      	ldr	r1, [r0, #0]
 800314e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003152:	6001      	str	r1, [r0, #0]
 8003154:	f000 f814 	bl	8003180 <SystemInit>
 8003158:	f005 fb08 	bl	800876c <__libc_init_array>
 800315c:	f7ff fef2 	bl	8002f44 <main>
 8003160:	4770      	bx	lr
 8003162:	0000      	.short	0x0000
 8003164:	08009880 	.word	0x08009880
 8003168:	20000000 	.word	0x20000000
 800316c:	20000470 	.word	0x20000470
 8003170:	20000470 	.word	0x20000470
 8003174:	2001443c 	.word	0x2001443c
 8003178:	e000ed88 	.word	0xe000ed88

0800317c <ADC_IRQHandler>:
 800317c:	f7ff bffe 	b.w	800317c <ADC_IRQHandler>

08003180 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <SystemInit+0x5c>)
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <SystemInit+0x5c>)
 8003188:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800318c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <SystemInit+0x60>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <SystemInit+0x60>)
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <SystemInit+0x60>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031a6:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <SystemInit+0x60>)
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <SystemInit+0x60>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <SystemInit+0x60>)
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <SystemInit+0x64>)
 80031ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SystemInit+0x60>)
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <SystemInit+0x60>)
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <SystemInit+0x60>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80031ce:	f000 f887 	bl	80032e0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031d2:	4b02      	ldr	r3, [pc, #8]	; (80031dc <SystemInit+0x5c>)
 80031d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d8:	609a      	str	r2, [r3, #8]
#endif
}
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	e000ed00 	.word	0xe000ed00
 80031e0:	40023800 	.word	0x40023800
 80031e4:	24003010 	.word	0x24003010

080031e8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	2302      	movs	r3, #2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	2302      	movs	r3, #2
 8003200:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003202:	4b32      	ldr	r3, [pc, #200]	; (80032cc <SystemCoreClockUpdate+0xe4>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b04      	cmp	r3, #4
 8003210:	d007      	beq.n	8003222 <SystemCoreClockUpdate+0x3a>
 8003212:	2b08      	cmp	r3, #8
 8003214:	d009      	beq.n	800322a <SystemCoreClockUpdate+0x42>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d13f      	bne.n	800329a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <SystemCoreClockUpdate+0xe8>)
 800321c:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <SystemCoreClockUpdate+0xec>)
 800321e:	601a      	str	r2, [r3, #0]
      break;
 8003220:	e03f      	b.n	80032a2 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <SystemCoreClockUpdate+0xe8>)
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <SystemCoreClockUpdate+0xf0>)
 8003226:	601a      	str	r2, [r3, #0]
      break;
 8003228:	e03b      	b.n	80032a2 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800322a:	4b28      	ldr	r3, [pc, #160]	; (80032cc <SystemCoreClockUpdate+0xe4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	0d9b      	lsrs	r3, r3, #22
 8003234:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003236:	4b25      	ldr	r3, [pc, #148]	; (80032cc <SystemCoreClockUpdate+0xe4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800323e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003246:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <SystemCoreClockUpdate+0xf0>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	fbb2 f2f3 	udiv	r2, r2, r3
 800324e:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <SystemCoreClockUpdate+0xe4>)
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003256:	400b      	ands	r3, r1
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	fb03 f302 	mul.w	r3, r3, r2
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e00c      	b.n	800327c <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <SystemCoreClockUpdate+0xec>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	fbb2 f2f3 	udiv	r2, r2, r3
 800326a:	4b18      	ldr	r3, [pc, #96]	; (80032cc <SystemCoreClockUpdate+0xe4>)
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003272:	400b      	ands	r3, r1
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	fb03 f302 	mul.w	r3, r3, r2
 800327a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <SystemCoreClockUpdate+0xe4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	fbb2 f2f3 	udiv	r2, r2, r3
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <SystemCoreClockUpdate+0xe8>)
 8003296:	601a      	str	r2, [r3, #0]
      break;
 8003298:	e003      	b.n	80032a2 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <SystemCoreClockUpdate+0xe8>)
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <SystemCoreClockUpdate+0xec>)
 800329e:	601a      	str	r2, [r3, #0]
      break;
 80032a0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <SystemCoreClockUpdate+0xe4>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <SystemCoreClockUpdate+0xf4>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <SystemCoreClockUpdate+0xe8>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	40da      	lsrs	r2, r3
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SystemCoreClockUpdate+0xe8>)
 80032be:	601a      	str	r2, [r3, #0]
}
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	20000004 	.word	0x20000004
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	017d7840 	.word	0x017d7840
 80032dc:	20000008 	.word	0x20000008

080032e0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	2300      	movs	r3, #0
 80032ec:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80032ee:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <SetSysClock+0xe4>)
 80032f0:	4a34      	ldr	r2, [pc, #208]	; (80033c4 <SetSysClock+0xe4>)
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032f8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80032fa:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <SetSysClock+0xe4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3301      	adds	r3, #1
 8003308:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <SetSysClock+0x38>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003316:	d1f0      	bne.n	80032fa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <SetSysClock+0xe4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003324:	2301      	movs	r3, #1
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	e001      	b.n	800332e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d142      	bne.n	80033ba <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <SetSysClock+0xe4>)
 8003336:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <SetSysClock+0xe4>)
 8003338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800333a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <SetSysClock+0xe8>)
 8003342:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <SetSysClock+0xe8>)
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800334a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <SetSysClock+0xe4>)
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <SetSysClock+0xe4>)
 8003350:	6892      	ldr	r2, [r2, #8]
 8003352:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <SetSysClock+0xe4>)
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <SetSysClock+0xe4>)
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <SetSysClock+0xe4>)
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <SetSysClock+0xe4>)
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800336a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <SetSysClock+0xe4>)
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <SetSysClock+0xec>)
 8003370:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <SetSysClock+0xe4>)
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <SetSysClock+0xe4>)
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800337c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800337e:	bf00      	nop
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <SetSysClock+0xe4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f9      	beq.n	8003380 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <SetSysClock+0xf0>)
 800338e:	f240 6204 	movw	r2, #1540	; 0x604
 8003392:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <SetSysClock+0xe4>)
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <SetSysClock+0xe4>)
 8003398:	6892      	ldr	r2, [r2, #8]
 800339a:	f022 0203 	bic.w	r2, r2, #3
 800339e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <SetSysClock+0xe4>)
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <SetSysClock+0xe4>)
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	f042 0202 	orr.w	r2, r2, #2
 80033aa:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80033ac:	bf00      	nop
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <SetSysClock+0xe4>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d1f9      	bne.n	80033ae <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40007000 	.word	0x40007000
 80033cc:	07404b19 	.word	0x07404b19
 80033d0:	40023c00 	.word	0x40023c00

080033d4 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <xTaskGenericCreate+0x1c>
 80033ea:	f001 fe89 	bl	8005100 <ulPortSetInterruptMask>
 80033ee:	e7fe      	b.n	80033ee <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d902      	bls.n	80033fc <xTaskGenericCreate+0x28>
 80033f6:	f001 fe83 	bl	8005100 <ulPortSetInterruptMask>
 80033fa:	e7fe      	b.n	80033fa <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	4618      	mov	r0, r3
 8003400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003402:	f000 ff0b 	bl	800421c <prvAllocateTCBAndStack>
 8003406:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d072      	beq.n	80034f4 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003418:	3b01      	subs	r3, #1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0307 	bic.w	r3, r3, #7
 8003426:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <xTaskGenericCreate+0x64>
 8003432:	f001 fe65 	bl	8005100 <ulPortSetInterruptMask>
 8003436:	e7fe      	b.n	8003436 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	69b8      	ldr	r0, [r7, #24]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	f000 fdf4 	bl	8004030 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	f001 fd65 	bl	8004f1c <pxPortInitialiseStack>
 8003452:	4602      	mov	r2, r0
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8003464:	f001 fe2a 	bl	80050bc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <xTaskGenericCreate+0x150>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <xTaskGenericCreate+0x150>)
 8003470:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <xTaskGenericCreate+0x154>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <xTaskGenericCreate+0x154>)
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8003480:	4b28      	ldr	r3, [pc, #160]	; (8003524 <xTaskGenericCreate+0x150>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10f      	bne.n	80034a8 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8003488:	f000 fe1a 	bl	80040c0 <prvInitialiseTaskLists>
 800348c:	e00c      	b.n	80034a8 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <xTaskGenericCreate+0x158>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <xTaskGenericCreate+0x154>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	429a      	cmp	r2, r3
 80034a0:	d802      	bhi.n	80034a8 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <xTaskGenericCreate+0x154>)
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <xTaskGenericCreate+0x15c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <xTaskGenericCreate+0x15c>)
 80034b0:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <xTaskGenericCreate+0x15c>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <xTaskGenericCreate+0x160>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d903      	bls.n	80034ce <xTaskGenericCreate+0xfa>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <xTaskGenericCreate+0x160>)
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a17      	ldr	r2, [pc, #92]	; (8003538 <xTaskGenericCreate+0x164>)
 80034dc:	441a      	add	r2, r3
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f001 fc93 	bl	8004e10 <vListInsertEnd>

			xReturn = pdPASS;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80034ee:	f001 fdf5 	bl	80050dc <vPortExitCritical>
 80034f2:	e002      	b.n	80034fa <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f8:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10b      	bne.n	8003518 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <xTaskGenericCreate+0x158>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <xTaskGenericCreate+0x154>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	429a      	cmp	r2, r3
 8003512:	d201      	bcs.n	8003518 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 8003514:	f001 fdc2 	bl	800509c <vPortYield>
			}
		}
	}

	return xReturn;
 8003518:	69fb      	ldr	r3, [r7, #28]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000580 	.word	0x20000580
 8003528:	200004a8 	.word	0x200004a8
 800352c:	2000058c 	.word	0x2000058c
 8003530:	200005a0 	.word	0x200005a0
 8003534:	20000588 	.word	0x20000588
 8003538:	200004ac 	.word	0x200004ac

0800353c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle xTaskToDelete )
	{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8003544:	f001 fdba 	bl	80050bc <vPortEnterCritical>
		{
			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <vTaskDelete+0x18>
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <vTaskDelete+0x78>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	e000      	b.n	8003556 <vTaskDelete+0x1a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3304      	adds	r3, #4
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fcb3 	bl	8004ec8 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3318      	adds	r3, #24
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fcaa 	bl	8004ec8 <uxListRemove>
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3304      	adds	r3, #4
 8003578:	480f      	ldr	r0, [pc, #60]	; (80035b8 <vTaskDelete+0x7c>)
 800357a:	4619      	mov	r1, r3
 800357c:	f001 fc48 	bl	8004e10 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <vTaskDelete+0x80>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <vTaskDelete+0x80>)
 8003588:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <vTaskDelete+0x84>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <vTaskDelete+0x84>)
 8003592:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8003594:	f001 fda2 	bl	80050dc <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <vTaskDelete+0x88>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d006      	beq.n	80035ae <vTaskDelete+0x72>
		{
			if( pxTCB == pxCurrentTCB )
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <vTaskDelete+0x78>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d101      	bne.n	80035ae <vTaskDelete+0x72>
			{
				portYIELD_WITHIN_API();
 80035aa:	f001 fd77 	bl	800509c <vPortYield>
			}
		}
	}
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	200004a8 	.word	0x200004a8
 80035b8:	20000554 	.word	0x20000554
 80035bc:	20000568 	.word	0x20000568
 80035c0:	200005a0 	.word	0x200005a0
 80035c4:	2000058c 	.word	0x2000058c

080035c8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <vTaskDelayUntil+0x1a>
 80035dc:	f001 fd90 	bl	8005100 <ulPortSetInterruptMask>
 80035e0:	e7fe      	b.n	80035e0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <vTaskDelayUntil+0x26>
 80035e8:	f001 fd8a 	bl	8005100 <ulPortSetInterruptMask>
 80035ec:	e7fe      	b.n	80035ec <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 80035ee:	f000 f96b 	bl	80038c8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 80035f2:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <vTaskDelayUntil+0xa8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4413      	add	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d90b      	bls.n	8003624 <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	429a      	cmp	r2, r3
 8003614:	d911      	bls.n	800363a <vTaskDelayUntil+0x72>
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	429a      	cmp	r2, r3
 800361c:	d90d      	bls.n	800363a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e00a      	b.n	800363a <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	429a      	cmp	r2, r3
 800362c:	d803      	bhi.n	8003636 <vTaskDelayUntil+0x6e>
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	429a      	cmp	r2, r3
 8003634:	d901      	bls.n	800363a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8003636:	2301      	movs	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <vTaskDelayUntil+0xac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3304      	adds	r3, #4
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fc3b 	bl	8004ec8 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fdac 	bl	80041b0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003658:	f000 f944 	bl	80038e4 <xTaskResumeAll>
 800365c:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 8003664:	f001 fd1a 	bl	800509c <vPortYield>
		}
	}
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000584 	.word	0x20000584
 8003674:	200004a8 	.word	0x200004a8

08003678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 800368a:	f000 f91d 	bl	80038c8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <vTaskDelay+0x48>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <vTaskDelay+0x4c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3304      	adds	r3, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fc12 	bl	8004ec8 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80036a4:	68b8      	ldr	r0, [r7, #8]
 80036a6:	f000 fd83 	bl	80041b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036aa:	f000 f91b 	bl	80038e4 <xTaskResumeAll>
 80036ae:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 80036b6:	f001 fcf1 	bl	800509c <vPortYield>
		}
	}
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000584 	.word	0x20000584
 80036c4:	200004a8 	.word	0x200004a8

080036c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80036d0:	f001 fcf4 	bl	80050bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <vTaskSuspend+0x18>
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <vTaskSuspend+0x80>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e000      	b.n	80036e2 <vTaskSuspend+0x1a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fbed 	bl	8004ec8 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3318      	adds	r3, #24
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fbe4 	bl	8004ec8 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3304      	adds	r3, #4
 8003704:	4811      	ldr	r0, [pc, #68]	; (800374c <vTaskSuspend+0x84>)
 8003706:	4619      	mov	r1, r3
 8003708:	f001 fb82 	bl	8004e10 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 800370c:	f001 fce6 	bl	80050dc <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <vTaskSuspend+0x80>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	d112      	bne.n	8003740 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <vTaskSuspend+0x88>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 8003722:	f001 fcbb 	bl	800509c <vPortYield>
 8003726:	e00b      	b.n	8003740 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <vTaskSuspend+0x84>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <vTaskSuspend+0x8c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d103      	bne.n	800373c <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <vTaskSuspend+0x80>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e001      	b.n	8003740 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 800373c:	f000 fabc 	bl	8003cb8 <vTaskSwitchContext>
				}
			}
		}
	}
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200004a8 	.word	0x200004a8
 800374c:	2000056c 	.word	0x2000056c
 8003750:	2000058c 	.word	0x2000058c
 8003754:	20000580 	.word	0x20000580

08003758 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <xTaskIsTaskSuspended+0x1c>
 800376e:	f001 fcc7 	bl	8005100 <ulPortSetInterruptMask>
 8003772:	e7fe      	b.n	8003772 <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <xTaskIsTaskSuspended+0x5c>)
 800377a:	429a      	cmp	r2, r3
 800377c:	d101      	bne.n	8003782 <xTaskIsTaskSuspended+0x2a>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <xTaskIsTaskSuspended+0x2c>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00f      	beq.n	80037a8 <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <xTaskIsTaskSuspended+0x60>)
 800378e:	429a      	cmp	r2, r3
 8003790:	d00a      	beq.n	80037a8 <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xTaskIsTaskSuspended+0x46>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <xTaskIsTaskSuspended+0x48>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 80037a8:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2000056c 	.word	0x2000056c
 80037b8:	20000540 	.word	0x20000540

080037bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <vTaskResume+0x18>
 80037ce:	f001 fc97 	bl	8005100 <ulPortSetInterruptMask>
 80037d2:	e7fe      	b.n	80037d2 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d034      	beq.n	8003844 <vTaskResume+0x88>
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <vTaskResume+0x90>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d02f      	beq.n	8003844 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 80037e4:	f001 fc6a 	bl	80050bc <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7ff ffb5 	bl	8003758 <xTaskIsTaskSuspended>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d125      	bne.n	8003840 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3304      	adds	r3, #4
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fb65 	bl	8004ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <vTaskResume+0x94>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d903      	bls.n	8003812 <vTaskResume+0x56>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <vTaskResume+0x94>)
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <vTaskResume+0x98>)
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3304      	adds	r3, #4
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	f001 faf1 	bl	8004e10 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <vTaskResume+0x90>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	429a      	cmp	r2, r3
 800383a:	d301      	bcc.n	8003840 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 800383c:	f001 fc2e 	bl	800509c <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8003840:	f001 fc4c 	bl	80050dc <vPortExitCritical>
		}
	}
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200004a8 	.word	0x200004a8
 8003850:	20000588 	.word	0x20000588
 8003854:	200004ac 	.word	0x200004ac

08003858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	2300      	movs	r3, #0
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	2300      	movs	r3, #0
 800386c:	9303      	str	r3, [sp, #12]
 800386e:	4812      	ldr	r0, [pc, #72]	; (80038b8 <vTaskStartScheduler+0x60>)
 8003870:	4912      	ldr	r1, [pc, #72]	; (80038bc <vTaskStartScheduler+0x64>)
 8003872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003876:	2300      	movs	r3, #0
 8003878:	f7ff fdac 	bl	80033d4 <xTaskGenericCreate>
 800387c:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
 8003884:	f001 fcd6 	bl	8005234 <xTimerCreateTimerTask>
 8003888:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10a      	bne.n	80038a6 <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003890:	f001 fc36 	bl	8005100 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <vTaskStartScheduler+0x68>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <vTaskStartScheduler+0x6c>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038a0:	f001 fb96 	bl	8004fd0 <xPortStartScheduler>
 80038a4:	e005      	b.n	80038b2 <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <vTaskStartScheduler+0x5a>
 80038ac:	f001 fc28 	bl	8005100 <ulPortSetInterruptMask>
 80038b0:	e7fe      	b.n	80038b0 <vTaskStartScheduler+0x58>
	}
}
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	0800400d 	.word	0x0800400d
 80038bc:	08009188 	.word	0x08009188
 80038c0:	2000058c 	.word	0x2000058c
 80038c4:	20000584 	.word	0x20000584

080038c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80038cc:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <vTaskSuspendAll+0x18>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <vTaskSuspendAll+0x18>)
 80038d4:	601a      	str	r2, [r3, #0]
}
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000590 	.word	0x20000590

080038e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ee:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <xTaskResumeAll+0xec>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <xTaskResumeAll+0x18>
 80038f6:	f001 fc03 	bl	8005100 <ulPortSetInterruptMask>
 80038fa:	e7fe      	b.n	80038fa <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038fc:	f001 fbde 	bl	80050bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003900:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <xTaskResumeAll+0xec>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	4b32      	ldr	r3, [pc, #200]	; (80039d0 <xTaskResumeAll+0xec>)
 8003908:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <xTaskResumeAll+0xec>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d156      	bne.n	80039c0 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <xTaskResumeAll+0xf0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d052      	beq.n	80039c0 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800391a:	e02f      	b.n	800397c <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <xTaskResumeAll+0xf4>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	3318      	adds	r3, #24
 8003928:	4618      	mov	r0, r3
 800392a:	f001 facd 	bl	8004ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	3304      	adds	r3, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fac8 	bl	8004ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	4b27      	ldr	r3, [pc, #156]	; (80039dc <xTaskResumeAll+0xf8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d903      	bls.n	800394c <xTaskResumeAll+0x68>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	4b24      	ldr	r3, [pc, #144]	; (80039dc <xTaskResumeAll+0xf8>)
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4a21      	ldr	r2, [pc, #132]	; (80039e0 <xTaskResumeAll+0xfc>)
 800395a:	441a      	add	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	3304      	adds	r3, #4
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	f001 fa54 	bl	8004e10 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <xTaskResumeAll+0x100>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 8003976:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <xTaskResumeAll+0x104>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800397c:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <xTaskResumeAll+0xf4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1cb      	bne.n	800391c <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <xTaskResumeAll+0x108>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d011      	beq.n	80039b0 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800398c:	e00c      	b.n	80039a8 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 800398e:	f000 f8bd 	bl	8003b0c <xTaskIncrementTick>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <xTaskResumeAll+0x104>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <xTaskResumeAll+0x108>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1e5a      	subs	r2, r3, #1
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <xTaskResumeAll+0x108>)
 80039a6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <xTaskResumeAll+0x108>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ee      	bne.n	800398e <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <xTaskResumeAll+0x104>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d103      	bne.n	80039c0 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 80039bc:	f001 fb6e 	bl	800509c <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80039c0:	f001 fb8c 	bl	80050dc <vPortExitCritical>

	return xAlreadyYielded;
 80039c4:	687b      	ldr	r3, [r7, #4]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000590 	.word	0x20000590
 80039d4:	20000580 	.word	0x20000580
 80039d8:	20000540 	.word	0x20000540
 80039dc:	20000588 	.word	0x20000588
 80039e0:	200004ac 	.word	0x200004ac
 80039e4:	200004a8 	.word	0x200004a8
 80039e8:	20000598 	.word	0x20000598
 80039ec:	20000594 	.word	0x20000594

080039f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 80039f6:	f001 fb61 	bl	80050bc <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <xTaskGetTickCount+0x20>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8003a00:	f001 fb6c 	bl	80050dc <vPortExitCritical>

	return xTicks;
 8003a04:	687b      	ldr	r3, [r7, #4]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000584 	.word	0x20000584

08003a14 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned portBASE_TYPE uxTaskGetSystemState( xTaskStatusType *pxTaskStatusArray, unsigned portBASE_TYPE uxArraySize, unsigned long *pulTotalRunTime )
	{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
	unsigned portBASE_TYPE uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	2305      	movs	r3, #5
 8003a26:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8003a28:	f7ff ff4e 	bl	80038c8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <uxTaskGetSystemState+0xe0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d357      	bcc.n	8003ae6 <uxTaskGetSystemState+0xd2>
			{
				/* Fill in an xTaskStatusType structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	015b      	lsls	r3, r3, #5
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	18d1      	adds	r1, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4a2a      	ldr	r2, [pc, #168]	; (8003af8 <uxTaskGetSystemState+0xe4>)
 8003a50:	4413      	add	r3, r2
 8003a52:	4608      	mov	r0, r1
 8003a54:	4619      	mov	r1, r3
 8003a56:	2201      	movs	r2, #1
 8003a58:	f000 fc12 	bl	8004280 <prvListTaskWithinSingleList>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4413      	add	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( unsigned portBASE_TYPE ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e5      	bne.n	8003a36 <uxTaskGetSystemState+0x22>

				/* Fill in an xTaskStatusType structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxDelayedTaskList, eBlocked );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	015b      	lsls	r3, r3, #5
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	441a      	add	r2, r3
 8003a72:	4b22      	ldr	r3, [pc, #136]	; (8003afc <uxTaskGetSystemState+0xe8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f000 fc00 	bl	8004280 <prvListTaskWithinSingleList>
 8003a80:	4603      	mov	r3, r0
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4413      	add	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxOverflowDelayedTaskList, eBlocked );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	441a      	add	r2, r3
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <uxTaskGetSystemState+0xec>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f000 fbf1 	bl	8004280 <prvListTaskWithinSingleList>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an xTaskStatusType structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	015b      	lsls	r3, r3, #5
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4914      	ldr	r1, [pc, #80]	; (8003b04 <uxTaskGetSystemState+0xf0>)
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	f000 fbe4 	bl	8004280 <prvListTaskWithinSingleList>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4413      	add	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an xTaskStatusType structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	490f      	ldr	r1, [pc, #60]	; (8003b08 <uxTaskGetSystemState+0xf4>)
 8003acc:	2203      	movs	r2, #3
 8003ace:	f000 fbd7 	bl	8004280 <prvListTaskWithinSingleList>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <uxTaskGetSystemState+0xd2>
					{
						*pulTotalRunTime = 0;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
					}
				}
				#endif
			}
		}
		( void ) xTaskResumeAll();
 8003ae6:	f7ff fefd 	bl	80038e4 <xTaskResumeAll>

		return uxTask;
 8003aea:	697b      	ldr	r3, [r7, #20]
	}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000580 	.word	0x20000580
 8003af8:	200004ac 	.word	0x200004ac
 8003afc:	20000538 	.word	0x20000538
 8003b00:	2000053c 	.word	0x2000053c
 8003b04:	20000554 	.word	0x20000554
 8003b08:	2000056c 	.word	0x2000056c

08003b0c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003b16:	4b5d      	ldr	r3, [pc, #372]	; (8003c8c <xTaskIncrementTick+0x180>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 80a4 	bne.w	8003c68 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <xTaskIncrementTick+0x184>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <xTaskIncrementTick+0x184>)
 8003b28:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8003b2a:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <xTaskIncrementTick+0x184>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d12e      	bne.n	8003b94 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8003b36:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <xTaskIncrementTick+0x188>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <xTaskIncrementTick+0x3a>
 8003b40:	f001 fade 	bl	8005100 <ulPortSetInterruptMask>
 8003b44:	e7fe      	b.n	8003b44 <xTaskIncrementTick+0x38>
 8003b46:	4b53      	ldr	r3, [pc, #332]	; (8003c94 <xTaskIncrementTick+0x188>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	4b52      	ldr	r3, [pc, #328]	; (8003c98 <xTaskIncrementTick+0x18c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <xTaskIncrementTick+0x188>)
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <xTaskIncrementTick+0x18c>)
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <xTaskIncrementTick+0x190>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	4b4e      	ldr	r3, [pc, #312]	; (8003c9c <xTaskIncrementTick+0x190>)
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <xTaskIncrementTick+0x188>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <xTaskIncrementTick+0x66>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xTaskIncrementTick+0x68>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <xTaskIncrementTick+0x76>
 8003b78:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <xTaskIncrementTick+0x194>)
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e008      	b.n	8003b94 <xTaskIncrementTick+0x88>
 8003b82:	4b44      	ldr	r3, [pc, #272]	; (8003c94 <xTaskIncrementTick+0x188>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <xTaskIncrementTick+0x194>)
 8003b92:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8003b94:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <xTaskIncrementTick+0x194>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d34f      	bcc.n	8003c3e <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <xTaskIncrementTick+0x188>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <xTaskIncrementTick+0xa0>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <xTaskIncrementTick+0xa2>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <xTaskIncrementTick+0x194>)
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bb8:	601a      	str	r2, [r3, #0]
						break;
 8003bba:	e040      	b.n	8003c3e <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bbc:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <xTaskIncrementTick+0x188>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d203      	bcs.n	8003bdc <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8003bd4:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <xTaskIncrementTick+0x194>)
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
							break;
 8003bda:	e030      	b.n	8003c3e <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 f971 	bl	8004ec8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f968 	bl	8004ec8 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <xTaskIncrementTick+0x198>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d903      	bls.n	8003c0c <xTaskIncrementTick+0x100>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <xTaskIncrementTick+0x198>)
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <xTaskIncrementTick+0x19c>)
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f001 f8f4 	bl	8004e10 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <xTaskIncrementTick+0x1a0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8003c3a:	e7b0      	b.n	8003b9e <xTaskIncrementTick+0x92>
 8003c3c:	e7af      	b.n	8003b9e <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <xTaskIncrementTick+0x1a0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4918      	ldr	r1, [pc, #96]	; (8003ca8 <xTaskIncrementTick+0x19c>)
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d901      	bls.n	8003c5a <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <xTaskIncrementTick+0x1a4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 8003c62:	f7ff f9fb 	bl	800305c <vApplicationTickHook>
 8003c66:	e006      	b.n	8003c76 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <xTaskIncrementTick+0x1a4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <xTaskIncrementTick+0x1a4>)
 8003c70:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8003c72:	f7ff f9f3 	bl	800305c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <xTaskIncrementTick+0x1a8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c82:	697b      	ldr	r3, [r7, #20]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000590 	.word	0x20000590
 8003c90:	20000584 	.word	0x20000584
 8003c94:	20000538 	.word	0x20000538
 8003c98:	2000053c 	.word	0x2000053c
 8003c9c:	2000059c 	.word	0x2000059c
 8003ca0:	20000018 	.word	0x20000018
 8003ca4:	20000588 	.word	0x20000588
 8003ca8:	200004ac 	.word	0x200004ac
 8003cac:	200004a8 	.word	0x200004a8
 8003cb0:	20000594 	.word	0x20000594
 8003cb4:	20000598 	.word	0x20000598

08003cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8003cbe:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <vTaskSwitchContext+0xdc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <vTaskSwitchContext+0xe0>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e05e      	b.n	8003d8c <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 8003cce:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <vTaskSwitchContext+0xe0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d808      	bhi.n	8003cf6 <vTaskSwitchContext+0x3e>
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3334      	adds	r3, #52	; 0x34
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f7ff fa01 	bl	80030f8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8003cf6:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	4928      	ldr	r1, [pc, #160]	; (8003da0 <vTaskSwitchContext+0xe8>)
 8003d00:	2214      	movs	r2, #20
 8003d02:	f004 fd5b 	bl	80087bc <memcmp>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d009      	beq.n	8003d20 <vTaskSwitchContext+0x68>
 8003d0c:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3334      	adds	r3, #52	; 0x34
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7ff f9ed 	bl	80030f8 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d1e:	e00c      	b.n	8003d3a <vTaskSwitchContext+0x82>
 8003d20:	e00b      	b.n	8003d3a <vTaskSwitchContext+0x82>
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <vTaskSwitchContext+0xec>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <vTaskSwitchContext+0x78>
 8003d2a:	f001 f9e9 	bl	8005100 <ulPortSetInterruptMask>
 8003d2e:	e7fe      	b.n	8003d2e <vTaskSwitchContext+0x76>
 8003d30:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <vTaskSwitchContext+0xec>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <vTaskSwitchContext+0xec>)
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <vTaskSwitchContext+0xec>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	491a      	ldr	r1, [pc, #104]	; (8003da8 <vTaskSwitchContext+0xf0>)
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0e8      	beq.n	8003d22 <vTaskSwitchContext+0x6a>
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <vTaskSwitchContext+0xec>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <vTaskSwitchContext+0xf0>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3308      	adds	r3, #8
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d104      	bne.n	8003d82 <vTaskSwitchContext+0xca>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <vTaskSwitchContext+0xe4>)
 8003d8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000590 	.word	0x20000590
 8003d98:	20000598 	.word	0x20000598
 8003d9c:	200004a8 	.word	0x200004a8
 8003da0:	0800972c 	.word	0x0800972c
 8003da4:	20000588 	.word	0x20000588
 8003da8:	200004ac 	.word	0x200004ac

08003dac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <vTaskPlaceOnEventList+0x16>
 8003dbc:	f001 f9a0 	bl	8005100 <ulPortSetInterruptMask>
 8003dc0:	e7fe      	b.n	8003dc0 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <vTaskPlaceOnEventList+0x60>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f001 f844 	bl	8004e58 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <vTaskPlaceOnEventList+0x60>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 f876 	bl	8004ec8 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de2:	d107      	bne.n	8003df4 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <vTaskPlaceOnEventList+0x60>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4809      	ldr	r0, [pc, #36]	; (8003e10 <vTaskPlaceOnEventList+0x64>)
 8003dec:	4619      	mov	r1, r3
 8003dee:	f001 f80f 	bl	8004e10 <vListInsertEnd>
 8003df2:	e007      	b.n	8003e04 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <vTaskPlaceOnEventList+0x68>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f9d6 	bl	80041b0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200004a8 	.word	0x200004a8
 8003e10:	2000056c 	.word	0x2000056c
 8003e14:	20000584 	.word	0x20000584

08003e18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <vTaskPlaceOnEventListRestricted+0x16>
 8003e28:	f001 f96a 	bl	8005100 <ulPortSetInterruptMask>
 8003e2c:	e7fe      	b.n	8003e2c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <vTaskPlaceOnEventListRestricted+0x48>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3318      	adds	r3, #24
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4619      	mov	r1, r3
 8003e38:	f000 ffea 	bl	8004e10 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <vTaskPlaceOnEventListRestricted+0x48>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f840 	bl	8004ec8 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <vTaskPlaceOnEventListRestricted+0x4c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f9ac 	bl	80041b0 <prvAddCurrentTaskToDelayedList>
	}
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200004a8 	.word	0x200004a8
 8003e64:	20000584 	.word	0x20000584

08003e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <xTaskRemoveFromEventList+0x1c>
 8003e7e:	f001 f93f 	bl	8005100 <ulPortSetInterruptMask>
 8003e82:	e7fe      	b.n	8003e82 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3318      	adds	r3, #24
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f81d 	bl	8004ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <xTaskRemoveFromEventList+0xa0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d11d      	bne.n	8003ed2 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f814 	bl	8004ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <xTaskRemoveFromEventList+0xa4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d903      	bls.n	8003eb4 <xTaskRemoveFromEventList+0x4c>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <xTaskRemoveFromEventList+0xa4>)
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <xTaskRemoveFromEventList+0xa8>)
 8003ec2:	441a      	add	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	f000 ffa0 	bl	8004e10 <vListInsertEnd>
 8003ed0:	e005      	b.n	8003ede <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	480f      	ldr	r0, [pc, #60]	; (8003f14 <xTaskRemoveFromEventList+0xac>)
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f000 ff99 	bl	8004e10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <xTaskRemoveFromEventList+0xb0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d305      	bcc.n	8003ef8 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <xTaskRemoveFromEventList+0xb4>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e001      	b.n	8003efc <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003efc:	68fb      	ldr	r3, [r7, #12]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000590 	.word	0x20000590
 8003f0c:	20000588 	.word	0x20000588
 8003f10:	200004ac 	.word	0x200004ac
 8003f14:	20000540 	.word	0x20000540
 8003f18:	200004a8 	.word	0x200004a8
 8003f1c:	20000598 	.word	0x20000598

08003f20 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <vTaskSetTimeOutState+0x14>
 8003f2e:	f001 f8e7 	bl	8005100 <ulPortSetInterruptMask>
 8003f32:	e7fe      	b.n	8003f32 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <vTaskSetTimeOutState+0x2c>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <vTaskSetTimeOutState+0x30>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	605a      	str	r2, [r3, #4]
}
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000059c 	.word	0x2000059c
 8003f50:	20000584 	.word	0x20000584

08003f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <xTaskCheckForTimeOut+0x16>
 8003f64:	f001 f8cc 	bl	8005100 <ulPortSetInterruptMask>
 8003f68:	e7fe      	b.n	8003f68 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <xTaskCheckForTimeOut+0x22>
 8003f70:	f001 f8c6 	bl	8005100 <ulPortSetInterruptMask>
 8003f74:	e7fe      	b.n	8003f74 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8003f76:	f001 f8a1 	bl	80050bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <xTaskCheckForTimeOut+0x98>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f88:	d102      	bne.n	8003f90 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e026      	b.n	8003fde <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <xTaskCheckForTimeOut+0x9c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d007      	beq.n	8003fac <xTaskCheckForTimeOut+0x58>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d802      	bhi.n	8003fac <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e018      	b.n	8003fde <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d20e      	bcs.n	8003fda <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	441a      	add	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ffa6 	bl	8003f20 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f001 f87d 	bl	80050dc <vPortExitCritical>

	return xReturn;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000584 	.word	0x20000584
 8003ff0:	2000059c 	.word	0x2000059c

08003ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <vTaskMissedYield+0x14>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000598 	.word	0x20000598

0800400c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8004014:	f000 f892 	bl	800413c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <prvIdleTask+0x20>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d901      	bls.n	8004024 <prvIdleTask+0x18>
			{
				taskYIELD();
 8004020:	f001 f83c 	bl	800509c <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004024:	f7ff f862 	bl	80030ec <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8004028:	e7f4      	b.n	8004014 <prvIdleTask+0x8>
 800402a:	bf00      	nop
 800402c:	200004ac 	.word	0x200004ac

08004030 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e012      	b.n	800406a <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	440b      	add	r3, r1
 8004052:	3330      	adds	r3, #48	; 0x30
 8004054:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d100      	bne.n	8004064 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8004062:	e005      	b.n	8004070 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b09      	cmp	r3, #9
 800406e:	d9e9      	bls.n	8004044 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d901      	bls.n	8004082 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800407e:	2304      	movs	r3, #4
 8004080:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3304      	adds	r3, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f000 feb0 	bl	8004df8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3318      	adds	r3, #24
 800409c:	4618      	mov	r0, r3
 800409e:	f000 feab 	bl	8004df8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1c3 0205 	rsb	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop

080040c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	e00c      	b.n	80040e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a11      	ldr	r2, [pc, #68]	; (800411c <prvInitialiseTaskLists+0x5c>)
 80040d8:	4413      	add	r3, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fe6c 	bl	8004db8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d9ef      	bls.n	80040cc <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80040ec:	480c      	ldr	r0, [pc, #48]	; (8004120 <prvInitialiseTaskLists+0x60>)
 80040ee:	f000 fe63 	bl	8004db8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040f2:	480c      	ldr	r0, [pc, #48]	; (8004124 <prvInitialiseTaskLists+0x64>)
 80040f4:	f000 fe60 	bl	8004db8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040f8:	480b      	ldr	r0, [pc, #44]	; (8004128 <prvInitialiseTaskLists+0x68>)
 80040fa:	f000 fe5d 	bl	8004db8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040fe:	480b      	ldr	r0, [pc, #44]	; (800412c <prvInitialiseTaskLists+0x6c>)
 8004100:	f000 fe5a 	bl	8004db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004104:	480a      	ldr	r0, [pc, #40]	; (8004130 <prvInitialiseTaskLists+0x70>)
 8004106:	f000 fe57 	bl	8004db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <prvInitialiseTaskLists+0x74>)
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <prvInitialiseTaskLists+0x60>)
 800410e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <prvInitialiseTaskLists+0x78>)
 8004112:	4a04      	ldr	r2, [pc, #16]	; (8004124 <prvInitialiseTaskLists+0x64>)
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	200004ac 	.word	0x200004ac
 8004120:	20000510 	.word	0x20000510
 8004124:	20000524 	.word	0x20000524
 8004128:	20000540 	.word	0x20000540
 800412c:	20000554 	.word	0x20000554
 8004130:	2000056c 	.word	0x2000056c
 8004134:	20000538 	.word	0x20000538
 8004138:	2000053c 	.word	0x2000053c

0800413c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8004142:	e028      	b.n	8004196 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004144:	f7ff fbc0 	bl	80038c8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <prvCheckTasksWaitingTermination+0x68>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2300      	movne	r3, #0
 8004152:	2301      	moveq	r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8004158:	f7ff fbc4 	bl	80038e4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d119      	bne.n	8004196 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8004162:	f000 ffab 	bl	80050bc <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <prvCheckTasksWaitingTermination+0x68>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fea8 	bl	8004ec8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <prvCheckTasksWaitingTermination+0x6c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <prvCheckTasksWaitingTermination+0x6c>)
 8004180:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <prvCheckTasksWaitingTermination+0x70>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <prvCheckTasksWaitingTermination+0x70>)
 800418a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 800418c:	f000 ffa6 	bl	80050dc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004190:	6838      	ldr	r0, [r7, #0]
 8004192:	f000 f90f 	bl	80043b4 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <prvCheckTasksWaitingTermination+0x70>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1d2      	bne.n	8004144 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000554 	.word	0x20000554
 80041a8:	20000580 	.word	0x20000580
 80041ac:	20000568 	.word	0x20000568

080041b0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <prvAddCurrentTaskToDelayedList+0x58>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <prvAddCurrentTaskToDelayedList+0x5c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d209      	bcs.n	80041de <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <prvAddCurrentTaskToDelayedList+0x60>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <prvAddCurrentTaskToDelayedList+0x58>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	f000 fe3e 	bl	8004e58 <vListInsert>
 80041dc:	e010      	b.n	8004200 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <prvAddCurrentTaskToDelayedList+0x64>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <prvAddCurrentTaskToDelayedList+0x58>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f000 fe34 	bl	8004e58 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80041f0:	4b09      	ldr	r3, [pc, #36]	; (8004218 <prvAddCurrentTaskToDelayedList+0x68>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d202      	bcs.n	8004200 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <prvAddCurrentTaskToDelayedList+0x68>)
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200004a8 	.word	0x200004a8
 800420c:	20000584 	.word	0x20000584
 8004210:	2000053c 	.word	0x2000053c
 8004214:	20000538 	.word	0x20000538
 8004218:	20000018 	.word	0x20000018

0800421c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8004228:	204c      	movs	r0, #76	; 0x4c
 800422a:	f001 fdb9 	bl	8005da0 <pvPortMalloc>
 800422e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01f      	beq.n	8004276 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <prvAllocateTCBAndStack+0x2e>
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fdad 	bl	8005da0 <pvPortMalloc>
 8004246:	4603      	mov	r3, r0
 8004248:	e000      	b.n	800424c <prvAllocateTCBAndStack+0x30>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f001 fe2d 	bl	8005eb8 <vPortFree>
			pxNewTCB = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e008      	b.n	8004276 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4610      	mov	r0, r2
 800426e:	21a5      	movs	r1, #165	; 0xa5
 8004270:	461a      	mov	r2, r3
 8004272:	f004 fad7 	bl	8008824 <memset>
		}
	}

	return pxNewTCB;
 8004276:	68fb      	ldr	r3, [r7, #12]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static unsigned portBASE_TYPE prvListTaskWithinSingleList( xTaskStatusType *pxTaskStatusArray, xList *pxList, eTaskState eState )
	{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b08b      	sub	sp, #44	; 0x2c
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned portBASE_TYPE uxTask = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( unsigned portBASE_TYPE ) 0 )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d06b      	beq.n	8004372 <prvListTaskWithinSingleList+0xf2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	3308      	adds	r3, #8
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d104      	bne.n	80042be <prvListTaskWithinSingleList+0x3e>
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of xTaskStatusType in task.h for the
			meaning of each xTaskStatusType structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	3308      	adds	r3, #8
 80042dc:	429a      	cmp	r2, r3
 80042de:	d104      	bne.n	80042ea <prvListTaskWithinSingleList+0x6a>
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	617b      	str	r3, [r7, #20]

				pxTaskStatusArray[ uxTask ].xHandle = ( xTaskHandle ) pxNextTCB;
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	015b      	lsls	r3, r3, #5
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	601a      	str	r2, [r3, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const signed char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	015b      	lsls	r3, r3, #5
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	3234      	adds	r2, #52	; 0x34
 800430a:	605a      	str	r2, [r3, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	015b      	lsls	r3, r3, #5
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004318:	609a      	str	r2, [r3, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	015b      	lsls	r3, r3, #5
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	79fa      	ldrb	r2, [r7, #7]
 8004324:	731a      	strb	r2, [r3, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	015b      	lsls	r3, r3, #5
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004332:	611a      	str	r2, [r3, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	015b      	lsls	r3, r3, #5
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004340:	615a      	str	r2, [r3, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	015b      	lsls	r3, r3, #5
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
				{
					ppxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	015b      	lsls	r3, r3, #5
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	18d4      	adds	r4, r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f80e 	bl	800437c <prvTaskCheckFreeStackSpace>
 8004360:	4603      	mov	r3, r0
 8004362:	83a3      	strh	r3, [r4, #28]
				}
				#endif

				uxTask++;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	3301      	adds	r3, #1
 8004368:	627b      	str	r3, [r7, #36]	; 0x24

			} while( pxNextTCB != pxFirstTCB );
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	429a      	cmp	r2, r3
 8004370:	d1a9      	bne.n	80042c6 <prvListTaskWithinSingleList+0x46>
		}

		return uxTask;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004374:	4618      	mov	r0, r3
 8004376:	372c      	adds	r7, #44	; 0x2c
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}

0800437c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	unsigned short usCount = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	81fb      	strh	r3, [r7, #14]

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8004388:	e005      	b.n	8004396 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3301      	adds	r3, #1
 800438e:	607b      	str	r3, [r7, #4]
			usCount++;
 8004390:	89fb      	ldrh	r3, [r7, #14]
 8004392:	3301      	adds	r3, #1
 8004394:	81fb      	strh	r3, [r7, #14]

	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2ba5      	cmp	r3, #165	; 0xa5
 800439c:	d0f5      	beq.n	800438a <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
 800439e:	89fb      	ldrh	r3, [r7, #14]
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	81fb      	strh	r3, [r7, #14]

		return usCount;
 80043a4:	89fb      	ldrh	r3, [r7, #14]
	}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop

080043b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 fd79 	bl	8005eb8 <vPortFree>
		vPortFree( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 fd76 	bl	8005eb8 <vPortFree>
	}
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop

080043d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <xTaskGetCurrentTaskHandle+0x1c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	607b      	str	r3, [r7, #4]

		return xReturn;
 80043e0:	687b      	ldr	r3, [r7, #4]
	}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	200004a8 	.word	0x200004a8

080043f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <xTaskGetSchedulerState+0x34>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004402:	2300      	movs	r3, #0
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	e008      	b.n	800441a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <xTaskGetSchedulerState+0x38>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004410:	2301      	movs	r3, #1
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	e001      	b.n	800441a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004416:	2302      	movs	r3, #2
 8004418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800441a:	687b      	ldr	r3, [r7, #4]
	}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	2000058c 	.word	0x2000058c
 800442c:	20000590 	.word	0x20000590

08004430 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d046      	beq.n	80044d0 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004446:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <vTaskPriorityInherit+0xa8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	429a      	cmp	r2, r3
 800444e:	d23f      	bcs.n	80044d0 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <vTaskPriorityInherit+0xa8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f1c3 0205 	rsb	r2, r3, #5
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6959      	ldr	r1, [r3, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <vTaskPriorityInherit+0xac>)
 8004470:	4413      	add	r3, r2
 8004472:	4299      	cmp	r1, r3
 8004474:	d101      	bne.n	800447a <vTaskPriorityInherit+0x4a>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <vTaskPriorityInherit+0x4c>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d022      	beq.n	80044c6 <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fd1f 	bl	8004ec8 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <vTaskPriorityInherit+0xa8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <vTaskPriorityInherit+0xb0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d903      	bls.n	80044a8 <vTaskPriorityInherit+0x78>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <vTaskPriorityInherit+0xb0>)
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4a09      	ldr	r2, [pc, #36]	; (80044dc <vTaskPriorityInherit+0xac>)
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	f000 fca6 	bl	8004e10 <vListInsertEnd>
 80044c4:	e004      	b.n	80044d0 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <vTaskPriorityInherit+0xa8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200004a8 	.word	0x200004a8
 80044dc:	200004ac 	.word	0x200004ac
 80044e0:	20000588 	.word	0x20000588

080044e4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02c      	beq.n	8004550 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fe:	429a      	cmp	r2, r3
 8004500:	d026      	beq.n	8004550 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fcde 	bl	8004ec8 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f1c3 0205 	rsb	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <vTaskPriorityDisinherit+0x74>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d903      	bls.n	8004534 <vTaskPriorityDisinherit+0x50>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <vTaskPriorityDisinherit+0x74>)
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4a06      	ldr	r2, [pc, #24]	; (800455c <vTaskPriorityDisinherit+0x78>)
 8004542:	441a      	add	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3304      	adds	r3, #4
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f000 fc60 	bl	8004e10 <vListInsertEnd>
			}
		}
	}
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000588 	.word	0x20000588
 800455c:	200004ac 	.word	0x200004ac

08004560 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )

	void vTaskList( signed char *pcWriteBuffer )
	{
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af04      	add	r7, sp, #16
 8004566:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800456e:	4b35      	ldr	r3, [pc, #212]	; (8004644 <vTaskList+0xe4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( xTaskStatusType ) );
 8004574:	4b33      	ldr	r3, [pc, #204]	; (8004644 <vTaskList+0xe4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	015b      	lsls	r3, r3, #5
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fc10 	bl	8005da0 <pvPortMalloc>
 8004580:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d05a      	beq.n	800463e <vTaskList+0xde>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6938      	ldr	r0, [r7, #16]
 800458c:	4619      	mov	r1, r3
 800458e:	2200      	movs	r2, #0
 8004590:	f7ff fa40 	bl	8003a14 <uxTaskGetSystemState>
 8004594:	4603      	mov	r3, r0
 8004596:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	e048      	b.n	8004630 <vTaskList+0xd0>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	015b      	lsls	r3, r3, #5
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	7b1b      	ldrb	r3, [r3, #12]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d816      	bhi.n	80045dc <vTaskList+0x7c>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <vTaskList+0x54>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cb 	.word	0x080045cb
 80045bc:	080045d1 	.word	0x080045d1
 80045c0:	080045d7 	.word	0x080045d7
				{
				case eReady:		cStatus = tskREADY_CHAR;
 80045c4:	2352      	movs	r3, #82	; 0x52
 80045c6:	75fb      	strb	r3, [r7, #23]
									break;
 80045c8:	e00b      	b.n	80045e2 <vTaskList+0x82>

				case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80045ca:	2342      	movs	r3, #66	; 0x42
 80045cc:	75fb      	strb	r3, [r7, #23]
									break;
 80045ce:	e008      	b.n	80045e2 <vTaskList+0x82>

				case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80045d0:	2353      	movs	r3, #83	; 0x53
 80045d2:	75fb      	strb	r3, [r7, #23]
									break;
 80045d4:	e005      	b.n	80045e2 <vTaskList+0x82>

				case eDeleted:		cStatus = tskDELETED_CHAR;
 80045d6:	2344      	movs	r3, #68	; 0x44
 80045d8:	75fb      	strb	r3, [r7, #23]
									break;
 80045da:	e002      	b.n	80045e2 <vTaskList+0x82>

				default:			/* Should not get here, but it is included
									to prevent static checking errors. */
									cStatus = 0x00;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
									break;
 80045e0:	bf00      	nop
				}

				sprintf( ( char * ) pcWriteBuffer, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	015b      	lsls	r3, r3, #5
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	0149      	lsls	r1, r1, #5
 80045f2:	6938      	ldr	r0, [r7, #16]
 80045f4:	4401      	add	r1, r0
 80045f6:	690c      	ldr	r4, [r1, #16]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	0149      	lsls	r1, r1, #5
 80045fc:	6938      	ldr	r0, [r7, #16]
 80045fe:	4401      	add	r1, r0
 8004600:	8b89      	ldrh	r1, [r1, #28]
 8004602:	4608      	mov	r0, r1
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	0149      	lsls	r1, r1, #5
 8004608:	693d      	ldr	r5, [r7, #16]
 800460a:	4429      	add	r1, r5
 800460c:	6889      	ldr	r1, [r1, #8]
 800460e:	9400      	str	r4, [sp, #0]
 8004610:	9001      	str	r0, [sp, #4]
 8004612:	9102      	str	r1, [sp, #8]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	490c      	ldr	r1, [pc, #48]	; (8004648 <vTaskList+0xe8>)
 8004618:	f7fe fc1a 	bl	8002e50 <sprintf>
				pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f004 f9a9 	bl	8008974 <strlen>
 8004622:	4603      	mov	r3, r0
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	607b      	str	r3, [r7, #4]
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3301      	adds	r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	429a      	cmp	r2, r3
 8004636:	d3b2      	bcc.n	800459e <vTaskList+0x3e>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
				pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8004638:	6938      	ldr	r0, [r7, #16]
 800463a:	f001 fc3d 	bl	8005eb8 <vPortFree>
		}
	}
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bdb0      	pop	{r4, r5, r7, pc}
 8004644:	20000580 	.word	0x20000580
 8004648:	08009190 	.word	0x08009190

0800464c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <xQueueGenericReset+0x1a>
 8004660:	f000 fd4e 	bl	8005100 <ulPortSetInterruptMask>
 8004664:	e7fe      	b.n	8004664 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8004666:	f000 fd29 	bl	80050bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	68f9      	ldr	r1, [r7, #12]
 8004674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	441a      	add	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	3b01      	subs	r3, #1
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	441a      	add	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b4:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10e      	bne.n	80046da <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d014      	beq.n	80046ee <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3310      	adds	r3, #16
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fbcd 	bl	8003e68 <xTaskRemoveFromEventList>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10c      	bne.n	80046ee <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 80046d4:	f000 fce2 	bl	800509c <vPortYield>
 80046d8:	e009      	b.n	80046ee <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3310      	adds	r3, #16
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fb6a 	bl	8004db8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3324      	adds	r3, #36	; 0x24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fb65 	bl	8004db8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046ee:	f000 fcf5 	bl	80050dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046f2:	2301      	movs	r3, #1
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02a      	beq.n	800476a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8004714:	2050      	movs	r0, #80	; 0x50
 8004716:	f001 fb43 	bl	8005da0 <pvPortMalloc>
 800471a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d023      	beq.n	800476a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	3301      	adds	r3, #1
 800472c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800472e:	6978      	ldr	r0, [r7, #20]
 8004730:	f001 fb36 	bl	8005da0 <pvPortMalloc>
 8004734:	4602      	mov	r2, r0
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800474e:	69b8      	ldr	r0, [r7, #24]
 8004750:	2101      	movs	r1, #1
 8004752:	f7ff ff7b 	bl	800464c <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	79fa      	ldrb	r2, [r7, #7]
 800475a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e002      	b.n	800476a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8004764:	69b8      	ldr	r0, [r7, #24]
 8004766:	f001 fba7 	bl	8005eb8 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <xQueueGenericCreate+0x7a>
 8004770:	f000 fcc6 	bl	8005100 <ulPortSetInterruptMask>
 8004774:	e7fe      	b.n	8004774 <xQueueGenericCreate+0x78>

	return xReturn;
 8004776:	69fb      	ldr	r3, [r7, #28]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <xQueueGenericSend+0x22>
 800479c:	f000 fcb0 	bl	8005100 <ulPortSetInterruptMask>
 80047a0:	e7fe      	b.n	80047a0 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <xQueueGenericSend+0x30>
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <xQueueGenericSend+0x34>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <xQueueGenericSend+0x36>
 80047b4:	2300      	movs	r3, #0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <xQueueGenericSend+0x40>
 80047ba:	f000 fca1 	bl	8005100 <ulPortSetInterruptMask>
 80047be:	e7fe      	b.n	80047be <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSend+0x4e>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSend+0x52>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSend+0x54>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <xQueueGenericSend+0x5e>
 80047d8:	f000 fc92 	bl	8005100 <ulPortSetInterruptMask>
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047de:	f000 fc6d 	bl	80050bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <xQueueGenericSend+0x74>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d116      	bne.n	8004822 <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047f4:	69b8      	ldr	r0, [r7, #24]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	f000 f9a9 	bl	8004b50 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3324      	adds	r3, #36	; 0x24
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fb2c 	bl	8003e68 <xTaskRemoveFromEventList>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8004816:	f000 fc41 	bl	800509c <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800481a:	f000 fc5f 	bl	80050dc <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800481e:	2301      	movs	r3, #1
 8004820:	e059      	b.n	80048d6 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004828:	f000 fc58 	bl	80050dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800482c:	2300      	movs	r3, #0
 800482e:	e052      	b.n	80048d6 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004836:	f107 0310 	add.w	r3, r7, #16
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fb70 	bl	8003f20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8004844:	f000 fc4a 	bl	80050dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004848:	f7ff f83e 	bl	80038c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800484c:	f000 fc36 	bl	80050bc <vPortEnterCritical>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004858:	d102      	bne.n	8004860 <xQueueGenericSend+0xe0>
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2200      	movs	r2, #0
 800485e:	645a      	str	r2, [r3, #68]	; 0x44
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004868:	d102      	bne.n	8004870 <xQueueGenericSend+0xf0>
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2200      	movs	r2, #0
 800486e:	649a      	str	r2, [r3, #72]	; 0x48
 8004870:	f000 fc34 	bl	80050dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004874:	f107 0210 	add.w	r2, r7, #16
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	f7ff fb69 	bl	8003f54 <xTaskCheckForTimeOut>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11e      	bne.n	80048c6 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004888:	69b8      	ldr	r0, [r7, #24]
 800488a:	f000 fa51 	bl	8004d30 <prvIsQueueFull>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d012      	beq.n	80048ba <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	f103 0210 	add.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f7ff fa84 	bl	8003dac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048a4:	69b8      	ldr	r0, [r7, #24]
 80048a6:	f000 f9e1 	bl	8004c6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048aa:	f7ff f81b 	bl	80038e4 <xTaskResumeAll>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 80048b4:	f000 fbf2 	bl	800509c <vPortYield>
 80048b8:	e00c      	b.n	80048d4 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048ba:	69b8      	ldr	r0, [r7, #24]
 80048bc:	f000 f9d6 	bl	8004c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048c0:	f7ff f810 	bl	80038e4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80048c4:	e78b      	b.n	80047de <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048c6:	69b8      	ldr	r0, [r7, #24]
 80048c8:	f000 f9d0 	bl	8004c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048cc:	f7ff f80a 	bl	80038e4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <xQueueGenericSend+0x156>
		}
	}
 80048d4:	e783      	b.n	80047de <xQueueGenericSend+0x5e>
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop

080048e0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <xQueueGenericSendFromISR+0x1e>
 80048f8:	f000 fc02 	bl	8005100 <ulPortSetInterruptMask>
 80048fc:	e7fe      	b.n	80048fc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <xQueueGenericSendFromISR+0x2c>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <xQueueGenericSendFromISR+0x30>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <xQueueGenericSendFromISR+0x32>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <xQueueGenericSendFromISR+0x3c>
 8004916:	f000 fbf3 	bl	8005100 <ulPortSetInterruptMask>
 800491a:	e7fe      	b.n	800491a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d103      	bne.n	800492a <xQueueGenericSendFromISR+0x4a>
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <xQueueGenericSendFromISR+0x4e>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <xQueueGenericSendFromISR+0x50>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <xQueueGenericSendFromISR+0x5a>
 8004934:	f000 fbe4 	bl	8005100 <ulPortSetInterruptMask>
 8004938:	e7fe      	b.n	8004938 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800493a:	f000 fc4f 	bl	80051dc <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800493e:	f000 fbdf 	bl	8005100 <ulPortSetInterruptMask>
 8004942:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <xQueueGenericSendFromISR+0x76>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d124      	bne.n	80049a0 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004956:	69b8      	ldr	r0, [r7, #24]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	f000 f8f8 	bl	8004b50 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004968:	d112      	bne.n	8004990 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d013      	beq.n	800499a <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fa76 	bl	8003e68 <xTaskRemoveFromEventList>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e004      	b.n	800499a <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 800499a:	2301      	movs	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e001      	b.n	80049a4 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80049a4:	6978      	ldr	r0, [r7, #20]
 80049a6:	f000 fbb5 	bl	8005114 <vPortClearInterruptMask>

	return xReturn;
 80049aa:	69fb      	ldr	r3, [r7, #28]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <xQueueGenericReceive+0x22>
 80049d0:	f000 fb96 	bl	8005100 <ulPortSetInterruptMask>
 80049d4:	e7fe      	b.n	80049d4 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d103      	bne.n	80049e4 <xQueueGenericReceive+0x30>
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <xQueueGenericReceive+0x34>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <xQueueGenericReceive+0x36>
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <xQueueGenericReceive+0x40>
 80049ee:	f000 fb87 	bl	8005100 <ulPortSetInterruptMask>
 80049f2:	e7fe      	b.n	80049f2 <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049f4:	f000 fb62 	bl	80050bc <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d03b      	beq.n	8004a78 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a06:	6a38      	ldr	r0, [r7, #32]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	f000 f909 	bl	8004c20 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11c      	bne.n	8004a4e <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	1e5a      	subs	r2, r3, #1
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8004a26:	f7ff fcd5 	bl	80043d4 <xTaskGetCurrentTaskHandle>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01b      	beq.n	8004a70 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	3310      	adds	r3, #16
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fa13 	bl	8003e68 <xTaskRemoveFromEventList>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d113      	bne.n	8004a70 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8004a48:	f000 fb28 	bl	800509c <vPortYield>
 8004a4c:	e010      	b.n	8004a70 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	3324      	adds	r3, #36	; 0x24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fa01 	bl	8003e68 <xTaskRemoveFromEventList>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8004a6c:	f000 fb16 	bl	800509c <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8004a70:	f000 fb34 	bl	80050dc <vPortExitCritical>
				return pdPASS;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e066      	b.n	8004b46 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a7e:	f000 fb2d 	bl	80050dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e05f      	b.n	8004b46 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fa45 	bl	8003f20 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a9a:	f000 fb1f 	bl	80050dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a9e:	f7fe ff13 	bl	80038c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aa2:	f000 fb0b 	bl	80050bc <vPortEnterCritical>
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aae:	d102      	bne.n	8004ab6 <xQueueGenericReceive+0x102>
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004abe:	d102      	bne.n	8004ac6 <xQueueGenericReceive+0x112>
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	649a      	str	r2, [r3, #72]	; 0x48
 8004ac6:	f000 fb09 	bl	80050dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aca:	f107 0214 	add.w	r2, r7, #20
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f7ff fa3e 	bl	8003f54 <xTaskCheckForTimeOut>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d12b      	bne.n	8004b36 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ade:	6a38      	ldr	r0, [r7, #32]
 8004ae0:	f000 f910 	bl	8004d04 <prvIsQueueEmpty>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01f      	beq.n	8004b2a <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 8004af2:	f000 fae3 	bl	80050bc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fc98 	bl	8004430 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8004b00:	f000 faec 	bl	80050dc <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f7ff f94c 	bl	8003dac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b14:	6a38      	ldr	r0, [r7, #32]
 8004b16:	f000 f8a9 	bl	8004c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b1a:	f7fe fee3 	bl	80038e4 <xTaskResumeAll>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10f      	bne.n	8004b44 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8004b24:	f000 faba 	bl	800509c <vPortYield>
 8004b28:	e00c      	b.n	8004b44 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b2a:	6a38      	ldr	r0, [r7, #32]
 8004b2c:	f000 f89e 	bl	8004c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b30:	f7fe fed8 	bl	80038e4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8004b34:	e75e      	b.n	80049f4 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8004b36:	6a38      	ldr	r0, [r7, #32]
 8004b38:	f000 f898 	bl	8004c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b3c:	f7fe fed2 	bl	80038e4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <xQueueGenericReceive+0x192>
		}
	}
 8004b44:	e756      	b.n	80049f4 <xQueueGenericReceive+0x40>
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3728      	adds	r7, #40	; 0x28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop

08004b50 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10c      	bne.n	8004b7e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d151      	bne.n	8004c10 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fcb7 	bl	80044e4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	e048      	b.n	8004c10 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11a      	bne.n	8004bba <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	461a      	mov	r2, r3
 8004b92:	f7fb fb23 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	441a      	add	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d32f      	bcc.n	8004c10 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	e02a      	b.n	8004c10 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f7fb fb08 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	441a      	add	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d207      	bcs.n	8004bf8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	441a      	add	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d108      	bne.n	8004c10 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d019      	beq.n	8004c66 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	441a      	add	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d303      	bcc.n	8004c54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	6838      	ldr	r0, [r7, #0]
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	f7fb fabb 	bl	80001dc <memcpy>
	}
}
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c74:	f000 fa22 	bl	80050bc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004c78:	e014      	b.n	8004ca4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3324      	adds	r3, #36	; 0x24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff f8ee 	bl	8003e68 <xTaskRemoveFromEventList>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8004c92:	f7ff f9af 	bl	8003ff4 <vTaskMissedYield>
 8004c96:	e000      	b.n	8004c9a <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 8004c98:	e008      	b.n	8004cac <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	1e5a      	subs	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dce6      	bgt.n	8004c7a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cb2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8004cb4:	f000 fa12 	bl	80050dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cb8:	f000 fa00 	bl	80050bc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004cbc:	e014      	b.n	8004ce8 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00f      	beq.n	8004ce6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3310      	adds	r3, #16
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f8cc 	bl	8003e68 <xTaskRemoveFromEventList>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8004cd6:	f7ff f98d 	bl	8003ff4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	1e5a      	subs	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ce4:	e000      	b.n	8004ce8 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8004ce6:	e003      	b.n	8004cf0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dce6      	bgt.n	8004cbe <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cf8:	f000 f9f0 	bl	80050dc <vPortExitCritical>
}
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop

08004d04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004d0c:	f000 f9d6 	bl	80050bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e001      	b.n	8004d22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d22:	f000 f9db 	bl	80050dc <vPortExitCritical>

	return xReturn;
 8004d26:	68fb      	ldr	r3, [r7, #12]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004d38:	f000 f9c0 	bl	80050bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d102      	bne.n	8004d4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e001      	b.n	8004d52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d52:	f000 f9c3 	bl	80050dc <vPortExitCritical>

	return xReturn;
 8004d56:	68fb      	ldr	r3, [r7, #12]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d6e:	f000 f9a5 	bl	80050bc <vPortEnterCritical>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7a:	d102      	bne.n	8004d82 <vQueueWaitForMessageRestricted+0x22>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d8a:	d102      	bne.n	8004d92 <vQueueWaitForMessageRestricted+0x32>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	649a      	str	r2, [r3, #72]	; 0x48
 8004d92:	f000 f9a3 	bl	80050dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d105      	bne.n	8004daa <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3324      	adds	r3, #36	; 0x24
 8004da2:	4618      	mov	r0, r3
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	f7ff f837 	bl	8003e18 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff ff5e 	bl	8004c6c <prvUnlockQueue>
	}
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop

08004db8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f103 0208 	add.w	r2, r3, #8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f103 0208 	add.w	r2, r3, #8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f103 0208 	add.w	r2, r3, #8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
}
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop

08004df8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	611a      	str	r2, [r3, #16]
}
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	601a      	str	r2, [r3, #0]
}
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop

08004e58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6e:	d103      	bne.n	8004e78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e00c      	b.n	8004e92 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e002      	b.n	8004e86 <vListInsert+0x2e>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d9f6      	bls.n	8004e80 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
}
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6892      	ldr	r2, [r2, #8]
 8004ed8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6852      	ldr	r2, [r2, #4]
 8004ee2:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d103      	bne.n	8004efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b04      	subs	r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f48:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <pxPortInitialiseStack+0x60>)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3b14      	subs	r3, #20
 8004f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b04      	subs	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f06f 0202 	mvn.w	r2, #2
 8004f66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b20      	subs	r3, #32
 8004f6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	08004f81 	.word	0x08004f81

08004f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <prvTaskExitError+0x1c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8c:	d002      	beq.n	8004f94 <prvTaskExitError+0x14>
 8004f8e:	f000 f8b7 	bl	8005100 <ulPortSetInterruptMask>
 8004f92:	e7fe      	b.n	8004f92 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8004f94:	f000 f8b4 	bl	8005100 <ulPortSetInterruptMask>
	for( ;; );
 8004f98:	e7fe      	b.n	8004f98 <prvTaskExitError+0x18>
 8004f9a:	bf00      	nop
 8004f9c:	2000001c 	.word	0x2000001c

08004fa0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <pxCurrentTCBConst2>)
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	f380 8809 	msr	PSP, r0
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	f380 8811 	msr	BASEPRI, r0
 8004fb6:	4770      	bx	lr

08004fb8 <pxCurrentTCBConst2>:
 8004fb8:	200004a8 	.word	0x200004a8

08004fbc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004fbc:	4803      	ldr	r0, [pc, #12]	; (8004fcc <prvPortStartFirstTask+0x10>)
 8004fbe:	6800      	ldr	r0, [r0, #0]
 8004fc0:	6800      	ldr	r0, [r0, #0]
 8004fc2:	f380 8808 	msr	MSP, r0
 8004fc6:	b662      	cpsie	i
 8004fc8:	df00      	svc	0
 8004fca:	bf00      	nop
 8004fcc:	e000ed08 	.word	0xe000ed08

08004fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	; (8005084 <xPortStartScheduler+0xb4>)
 8004fd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b23      	ldr	r3, [pc, #140]	; (8005088 <xPortStartScheduler+0xb8>)
 8004ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ffe:	4b23      	ldr	r3, [pc, #140]	; (800508c <xPortStartScheduler+0xbc>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005004:	e009      	b.n	800501a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <xPortStartScheduler+0xbc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <xPortStartScheduler+0xbc>)
 800500e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	b25b      	sxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	dbef      	blt.n	8005006 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005026:	4b19      	ldr	r3, [pc, #100]	; (800508c <xPortStartScheduler+0xbc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	021a      	lsls	r2, r3, #8
 800502c:	4b17      	ldr	r3, [pc, #92]	; (800508c <xPortStartScheduler+0xbc>)
 800502e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <xPortStartScheduler+0xbc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005038:	4b14      	ldr	r3, [pc, #80]	; (800508c <xPortStartScheduler+0xbc>)
 800503a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005044:	4b12      	ldr	r3, [pc, #72]	; (8005090 <xPortStartScheduler+0xc0>)
 8005046:	4a12      	ldr	r2, [pc, #72]	; (8005090 <xPortStartScheduler+0xc0>)
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800504e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005050:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <xPortStartScheduler+0xc0>)
 8005052:	4a0f      	ldr	r2, [pc, #60]	; (8005090 <xPortStartScheduler+0xc0>)
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800505a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800505c:	f000 f89a 	bl	8005194 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <xPortStartScheduler+0xc4>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005066:	f000 f8af 	bl	80051c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <xPortStartScheduler+0xc8>)
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <xPortStartScheduler+0xc8>)
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8005074:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005076:	f7ff ffa1 	bl	8004fbc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	e000e400 	.word	0xe000e400
 8005088:	200005a4 	.word	0x200005a4
 800508c:	200005a8 	.word	0x200005a8
 8005090:	e000ed20 	.word	0xe000ed20
 8005094:	2000001c 	.word	0x2000001c
 8005098:	e000ef34 	.word	0xe000ef34

0800509c <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <vPortYield+0x1c>)
 80050a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80050a8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80050ac:	f3bf 8f6f 	isb	sy
}
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80050c0:	f000 f81e 	bl	8005100 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <vPortEnterCritical+0x1c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <vPortEnterCritical+0x1c>)
 80050cc:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80050ce:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80050d2:	f3bf 8f6f 	isb	sy
}
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	2000001c 	.word	0x2000001c

080050dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <vPortExitCritical+0x20>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	1e5a      	subs	r2, r3, #1
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <vPortExitCritical+0x20>)
 80050e8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <vPortExitCritical+0x20>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 80050f2:	2000      	movs	r0, #0
 80050f4:	f000 f80e 	bl	8005114 <vPortClearInterruptMask>
	}
}
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	2000001c 	.word	0x2000001c

08005100 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8005100:	f3ef 8011 	mrs	r0, BASEPRI
 8005104:	f04f 0150 	mov.w	r1, #80	; 0x50
 8005108:	f381 8811 	msr	BASEPRI, r1
 800510c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	bf00      	nop

08005114 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop

0800511c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800511c:	f3ef 8009 	mrs	r0, PSP
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <pxCurrentTCBConst>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	f01e 0f10 	tst.w	lr, #16
 8005128:	bf08      	it	eq
 800512a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800512e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005132:	6010      	str	r0, [r2, #0]
 8005134:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005138:	f04f 0050 	mov.w	r0, #80	; 0x50
 800513c:	f380 8811 	msr	BASEPRI, r0
 8005140:	f7fe fdba 	bl	8003cb8 <vTaskSwitchContext>
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f380 8811 	msr	BASEPRI, r0
 800514c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	6808      	ldr	r0, [r1, #0]
 8005154:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	f01e 0f10 	tst.w	lr, #16
 800515c:	bf08      	it	eq
 800515e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005162:	f380 8809 	msr	PSP, r0
 8005166:	4770      	bx	lr

08005168 <pxCurrentTCBConst>:
 8005168:	200004a8 	.word	0x200004a8

0800516c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8005170:	f7ff ffc6 	bl	8005100 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005174:	f7fe fcca 	bl	8003b0c <xTaskIncrementTick>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <SysTick_Handler+0x24>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8005186:	2000      	movs	r0, #0
 8005188:	f7ff ffc4 	bl	8005114 <vPortClearInterruptMask>
}
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <vPortSetupTimerInterrupt+0x24>)
 800519a:	4a08      	ldr	r2, [pc, #32]	; (80051bc <vPortSetupTimerInterrupt+0x28>)
 800519c:	6811      	ldr	r1, [r2, #0]
 800519e:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <vPortSetupTimerInterrupt+0x2c>)
 80051a0:	fba2 0201 	umull	r0, r2, r2, r1
 80051a4:	0992      	lsrs	r2, r2, #6
 80051a6:	3a01      	subs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <vPortSetupTimerInterrupt+0x30>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
}
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000e014 	.word	0xe000e014
 80051bc:	20000004 	.word	0x20000004
 80051c0:	10624dd3 	.word	0x10624dd3
 80051c4:	e000e010 	.word	0xe000e010

080051c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051d8 <vPortEnableVFP+0x10>
 80051cc:	6801      	ldr	r1, [r0, #0]
 80051ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051d2:	6001      	str	r1, [r0, #0]
 80051d4:	4770      	bx	lr
 80051d6:	0000      	.short	0x0000
 80051d8:	e000ed88 	.word	0xe000ed88

080051dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80051e2:	f3ef 8305 	mrs	r3, IPSR
 80051e6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	d90c      	bls.n	8005208 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <vPortValidateInterruptPriority+0x48>)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <vPortValidateInterruptPriority+0x4c>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d202      	bcs.n	8005208 <vPortValidateInterruptPriority+0x2c>
 8005202:	f7ff ff7d 	bl	8005100 <ulPortSetInterruptMask>
 8005206:	e7fe      	b.n	8005206 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <vPortValidateInterruptPriority+0x50>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <vPortValidateInterruptPriority+0x54>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d902      	bls.n	800521e <vPortValidateInterruptPriority+0x42>
 8005218:	f7ff ff72 	bl	8005100 <ulPortSetInterruptMask>
 800521c:	e7fe      	b.n	800521c <vPortValidateInterruptPriority+0x40>
	}
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	e000e3f0 	.word	0xe000e3f0
 8005228:	200005a4 	.word	0x200005a4
 800522c:	e000ed0c 	.word	0xe000ed0c
 8005230:	200005a8 	.word	0x200005a8

08005234 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800523e:	f000 fa45 	bl	80056cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <xTimerCreateTimerTask+0x4c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00f      	beq.n	800526a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800524a:	2302      	movs	r3, #2
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	2300      	movs	r3, #0
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	2300      	movs	r3, #0
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	480a      	ldr	r0, [pc, #40]	; (8005284 <xTimerCreateTimerTask+0x50>)
 800525c:	490a      	ldr	r1, [pc, #40]	; (8005288 <xTimerCreateTimerTask+0x54>)
 800525e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005262:	2300      	movs	r3, #0
 8005264:	f7fe f8b6 	bl	80033d4 <xTaskGenericCreate>
 8005268:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <xTimerCreateTimerTask+0x42>
 8005270:	f7ff ff46 	bl	8005100 <ulPortSetInterruptMask>
 8005274:	e7fe      	b.n	8005274 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8005276:	687b      	ldr	r3, [r7, #4]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200005dc 	.word	0x200005dc
 8005284:	08005389 	.word	0x08005389
 8005288:	080091a4 	.word	0x080091a4

0800528c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <xTimerGenericCommand+0x88>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d030      	beq.n	8005308 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11c      	bne.n	80052f2 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052b8:	f7ff f89c 	bl	80043f4 <xTaskGetSchedulerState>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d10b      	bne.n	80052da <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <xTimerGenericCommand+0x88>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	f107 0310 	add.w	r3, r7, #16
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d0:	2300      	movs	r3, #0
 80052d2:	f7ff fa55 	bl	8004780 <xQueueGenericSend>
 80052d6:	61f8      	str	r0, [r7, #28]
 80052d8:	e016      	b.n	8005308 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <xTimerGenericCommand+0x88>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	f107 0310 	add.w	r3, r7, #16
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	2200      	movs	r2, #0
 80052e8:	2300      	movs	r3, #0
 80052ea:	f7ff fa49 	bl	8004780 <xQueueGenericSend>
 80052ee:	61f8      	str	r0, [r7, #28]
 80052f0:	e00a      	b.n	8005308 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <xTimerGenericCommand+0x88>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f107 0310 	add.w	r3, r7, #16
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	2300      	movs	r3, #0
 8005302:	f7ff faed 	bl	80048e0 <xQueueGenericSendFromISR>
 8005306:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8005308:	69fb      	ldr	r3, [r7, #28]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3720      	adds	r7, #32
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	200005dc 	.word	0x200005dc

08005318 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005322:	4b18      	ldr	r3, [pc, #96]	; (8005384 <prvProcessExpiredTimer+0x6c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3304      	adds	r3, #4
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fdc9 	bl	8004ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d11b      	bne.n	8005376 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	4619      	mov	r1, r3
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f000 f8a9 	bl	80054a4 <prvInsertTimerInActiveList>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d10e      	bne.n	8005376 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8005358:	2300      	movs	r3, #0
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	2100      	movs	r1, #0
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	2300      	movs	r3, #0
 8005364:	f7ff ff92 	bl	800528c <xTimerGenericCommand>
 8005368:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <prvProcessExpiredTimer+0x5e>
 8005370:	f7ff fec6 	bl	8005100 <ulPortSetInterruptMask>
 8005374:	e7fe      	b.n	8005374 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	4798      	blx	r3
}
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200005d4 	.word	0x200005d4

08005388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005390:	f107 0308 	add.w	r3, r7, #8
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f83f 	bl	8005418 <prvGetNextExpireTime>
 800539a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	4619      	mov	r1, r3
 80053a2:	f000 f803 	bl	80053ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053a6:	f000 f8bf 	bl	8005528 <prvProcessReceivedCommands>
	}
 80053aa:	e7f1      	b.n	8005390 <prvTimerTask+0x8>

080053ac <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053b6:	f7fe fa87 	bl	80038c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ba:	f107 0308 	add.w	r3, r7, #8
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f84e 	bl	8005460 <prvSampleTimeNow>
 80053c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11e      	bne.n	800540a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <prvProcessTimerOrBlockTask+0x3c>
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d806      	bhi.n	80053e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053da:	f7fe fa83 	bl	80038e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	f7ff ff99 	bl	8005318 <prvProcessExpiredTimer>
 80053e6:	e012      	b.n	800540e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvProcessTimerOrBlockTask+0x68>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1acb      	subs	r3, r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7ff fcb3 	bl	8004d60 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80053fa:	f7fe fa73 	bl	80038e4 <xTaskResumeAll>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8005404:	f7ff fe4a 	bl	800509c <vPortYield>
 8005408:	e001      	b.n	800540e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800540a:	f7fe fa6b 	bl	80038e4 <xTaskResumeAll>
		}
	}
}
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	200005dc 	.word	0x200005dc

08005418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <prvGetNextExpireTime+0x44>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf14      	ite	ne
 800542a:	2300      	movne	r3, #0
 800542c:	2301      	moveq	r3, #1
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d105      	bne.n	800544a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800543e:	4b07      	ldr	r3, [pc, #28]	; (800545c <prvGetNextExpireTime+0x44>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e001      	b.n	800544e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800544e:	68fb      	ldr	r3, [r7, #12]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	200005d4 	.word	0x200005d4

08005460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005468:	f7fe fac2 	bl	80039f0 <xTaskGetTickCount>
 800546c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800546e:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <prvSampleTimeNow+0x40>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	429a      	cmp	r2, r3
 8005476:	d208      	bcs.n	800548a <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <prvSampleTimeNow+0x40>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f8cb 	bl	8005618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e002      	b.n	8005490 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <prvSampleTimeNow+0x40>)
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	200005e0 	.word	0x200005e0

080054a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d812      	bhi.n	80054f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e01b      	b.n	8005516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <prvInsertTimerInActiveList+0x7c>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	f7ff fcb5 	bl	8004e58 <vListInsert>
 80054ee:	e012      	b.n	8005516 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d206      	bcs.n	8005506 <prvInsertTimerInActiveList+0x62>
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e007      	b.n	8005516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <prvInsertTimerInActiveList+0x80>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3304      	adds	r3, #4
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	f7ff fca1 	bl	8004e58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005516:	697b      	ldr	r3, [r7, #20]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200005d8 	.word	0x200005d8
 8005524:	200005d4 	.word	0x200005d4

08005528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800552e:	e060      	b.n	80055f2 <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	3304      	adds	r3, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fcc1 	bl	8004ec8 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ff89 	bl	8005460 <prvSampleTimeNow>
 800554e:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d84c      	bhi.n	80055f0 <prvProcessReceivedCommands+0xc8>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <prvProcessReceivedCommands+0x34>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	080055f1 	.word	0x080055f1
 8005564:	080055bf 	.word	0x080055bf
 8005568:	080055e9 	.word	0x080055e9
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	441a      	add	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	69f8      	ldr	r0, [r7, #28]
 8005578:	4611      	mov	r1, r2
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	f7ff ff92 	bl	80054a4 <prvInsertTimerInActiveList>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d11a      	bne.n	80055bc <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	69f8      	ldr	r0, [r7, #28]
 800558c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d112      	bne.n	80055bc <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4413      	add	r3, r2
 800559e:	2200      	movs	r2, #0
 80055a0:	9200      	str	r2, [sp, #0]
 80055a2:	69f8      	ldr	r0, [r7, #28]
 80055a4:	2100      	movs	r1, #0
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	f7ff fe6f 	bl	800528c <xTimerGenericCommand>
 80055ae:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <prvProcessReceivedCommands+0x94>
 80055b6:	f7ff fda3 	bl	8005100 <ulPortSetInterruptMask>
 80055ba:	e7fe      	b.n	80055ba <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 80055bc:	e019      	b.n	80055f2 <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <prvProcessReceivedCommands+0xaa>
 80055cc:	f7ff fd98 	bl	8005100 <ulPortSetInterruptMask>
 80055d0:	e7fe      	b.n	80055d0 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	4413      	add	r3, r2
 80055da:	69f8      	ldr	r0, [r7, #28]
 80055dc:	4619      	mov	r1, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f7ff ff5f 	bl	80054a4 <prvInsertTimerInActiveList>
				break;
 80055e6:	e004      	b.n	80055f2 <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 80055e8:	69f8      	ldr	r0, [r7, #28]
 80055ea:	f000 fc65 	bl	8005eb8 <vPortFree>
				break;
 80055ee:	e000      	b.n	80055f2 <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 80055f0:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <prvProcessReceivedCommands+0xec>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	2200      	movs	r2, #0
 8005600:	2300      	movs	r3, #0
 8005602:	f7ff f9d7 	bl	80049b4 <xQueueGenericReceive>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d191      	bne.n	8005530 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	200005dc 	.word	0x200005dc

08005618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	; 0x28
 800561c:	af02      	add	r7, sp, #8
 800561e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005620:	e03d      	b.n	800569e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005622:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <prvSwitchTimerLists+0xac>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <prvSwitchTimerLists+0xac>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	3304      	adds	r3, #4
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fc44 	bl	8004ec8 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	69b8      	ldr	r0, [r7, #24]
 8005646:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d126      	bne.n	800569e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	429a      	cmp	r2, r3
 8005660:	d90e      	bls.n	8005680 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <prvSwitchTimerLists+0xac>)
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	3304      	adds	r3, #4
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	f7ff fbed 	bl	8004e58 <vListInsert>
 800567e:	e00e      	b.n	800569e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8005680:	2300      	movs	r3, #0
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	69b8      	ldr	r0, [r7, #24]
 8005686:	2100      	movs	r1, #0
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	2300      	movs	r3, #0
 800568c:	f7ff fdfe 	bl	800528c <xTimerGenericCommand>
 8005690:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <prvSwitchTimerLists+0x86>
 8005698:	f7ff fd32 	bl	8005100 <ulPortSetInterruptMask>
 800569c:	e7fe      	b.n	800569c <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <prvSwitchTimerLists+0xac>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1bc      	bne.n	8005622 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <prvSwitchTimerLists+0xac>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <prvSwitchTimerLists+0xb0>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <prvSwitchTimerLists+0xac>)
 80056b4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <prvSwitchTimerLists+0xb0>)
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]
}
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	200005d4 	.word	0x200005d4
 80056c8:	200005d8 	.word	0x200005d8

080056cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056d0:	f7ff fcf4 	bl	80050bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <prvCheckForValidListAndQueue+0x40>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d113      	bne.n	8005704 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80056dc:	480c      	ldr	r0, [pc, #48]	; (8005710 <prvCheckForValidListAndQueue+0x44>)
 80056de:	f7ff fb6b 	bl	8004db8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056e2:	480c      	ldr	r0, [pc, #48]	; (8005714 <prvCheckForValidListAndQueue+0x48>)
 80056e4:	f7ff fb68 	bl	8004db8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <prvCheckForValidListAndQueue+0x4c>)
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <prvCheckForValidListAndQueue+0x44>)
 80056ec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <prvCheckForValidListAndQueue+0x50>)
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <prvCheckForValidListAndQueue+0x48>)
 80056f2:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 80056f4:	200a      	movs	r0, #10
 80056f6:	210c      	movs	r1, #12
 80056f8:	2200      	movs	r2, #0
 80056fa:	f7fe ffff 	bl	80046fc <xQueueGenericCreate>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b02      	ldr	r3, [pc, #8]	; (800570c <prvCheckForValidListAndQueue+0x40>)
 8005702:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8005704:	f7ff fcea 	bl	80050dc <vPortExitCritical>
}
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200005dc 	.word	0x200005dc
 8005710:	200005ac 	.word	0x200005ac
 8005714:	200005c0 	.word	0x200005c0
 8005718:	200005d4 	.word	0x200005d4
 800571c:	200005d8 	.word	0x200005d8

08005720 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <ITM_SendChar+0x58>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01a      	beq.n	800576a <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8005734:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005738:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800573c:	f003 0301 	and.w	r3, r3, #1
    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8005740:	2b00      	cmp	r3, #0
 8005742:	d012      	beq.n	800576a <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8005744:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005748:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800574c:	f003 0301 	and.w	r3, r3, #1
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
 8005754:	bf00      	nop
 8005756:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0fa      	beq.n	8005756 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8005760:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800576a:	687b      	ldr	r3, [r7, #4]
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	e000edf0 	.word	0xe000edf0

0800577c <out>:
static char buf[12];
static unsigned int num;
static char uc;
static char zs;

static void out(char c) {
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	71fb      	strb	r3, [r7, #7]
  *bf++ = c;
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <out+0x24>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <out+0x24>)
 800578e:	6011      	str	r1, [r2, #0]
 8005790:	79fa      	ldrb	r2, [r7, #7]
 8005792:	701a      	strb	r2, [r3, #0]
}
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	200005e4 	.word	0x200005e4

080057a4 <outDgt>:

static void outDgt(char dgt) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
  out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d907      	bls.n	80057c4 <outDgt+0x20>
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <outDgt+0x3c>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <outDgt+0x1c>
 80057bc:	2337      	movs	r3, #55	; 0x37
 80057be:	e002      	b.n	80057c6 <outDgt+0x22>
 80057c0:	2357      	movs	r3, #87	; 0x57
 80057c2:	e000      	b.n	80057c6 <outDgt+0x22>
 80057c4:	2330      	movs	r3, #48	; 0x30
 80057c6:	79fa      	ldrb	r2, [r7, #7]
 80057c8:	4413      	add	r3, r2
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ffd5 	bl	800577c <out>
  zs=1;
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <outDgt+0x40>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]
}
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200005f8 	.word	0x200005f8
 80057e4:	200005f9 	.word	0x200005f9

080057e8 <divOut>:

static void divOut(unsigned int div) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  unsigned char dgt=0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	73fb      	strb	r3, [r7, #15]
  num &= 0xffffffff;
 80057f4:	4b10      	ldr	r3, [pc, #64]	; (8005838 <divOut+0x50>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <divOut+0x50>)
 80057fa:	601a      	str	r2, [r3, #0]
  while (num>=div) {
 80057fc:	e008      	b.n	8005810 <divOut+0x28>
    num -= div;
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <divOut+0x50>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad2      	subs	r2, r2, r3
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <divOut+0x50>)
 8005808:	601a      	str	r2, [r3, #0]
    dgt++;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	3301      	adds	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
}

static void divOut(unsigned int div) {
  unsigned char dgt=0;
  num &= 0xffffffff;
  while (num>=div) {
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <divOut+0x50>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d2f1      	bcs.n	80057fe <divOut+0x16>
    num -= div;
    dgt++;
  }
  if (zs || dgt>0)
 800581a:	4b08      	ldr	r3, [pc, #32]	; (800583c <divOut+0x54>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <divOut+0x40>
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <divOut+0x48>
    outDgt(dgt);
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff ffba 	bl	80057a4 <outDgt>
}
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200005f4 	.word	0x200005f4
 800583c:	200005f9 	.word	0x200005f9

08005840 <t_printf>:
#endif
  return 1;
}

void t_printf(const char *fmt, ...)
{
 8005840:	b40f      	push	{r0, r1, r2, r3}
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
  va_list va;
  char ch;
  char* p;

  va_start(va,fmt);
 8005848:	f107 031c 	add.w	r3, r7, #28
 800584c:	603b      	str	r3, [r7, #0]

  while ((ch=*(fmt++))) {
 800584e:	e10f      	b.n	8005a70 <t_printf+0x230>
    if (ch!='%') {
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b25      	cmp	r3, #37	; 0x25
 8005854:	d004      	beq.n	8005860 <t_printf+0x20>
#ifdef ITM_TRACE
      ITM_SendChar ((uint32_t) ch);
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ff61 	bl	8005720 <ITM_SendChar>
 800585e:	e107      	b.n	8005a70 <t_printf+0x230>
#else
      putchar(ch);
#endif
    }
    else {
      char lz=0;
 8005860:	2300      	movs	r3, #0
 8005862:	71fb      	strb	r3, [r7, #7]
      char w=0;
 8005864:	2300      	movs	r3, #0
 8005866:	71bb      	strb	r3, [r7, #6]
      ch=*(fmt++);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	61ba      	str	r2, [r7, #24]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	73fb      	strb	r3, [r7, #15]
      if (ch=='0') {
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d106      	bne.n	8005886 <t_printf+0x46>
	ch=*(fmt++);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	61ba      	str	r2, [r7, #24]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	73fb      	strb	r3, [r7, #15]
	lz=1;
 8005882:	2301      	movs	r3, #1
 8005884:	71fb      	strb	r3, [r7, #7]
      }
      if (ch>='0' && ch<='9') {
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b2f      	cmp	r3, #47	; 0x2f
 800588a:	d91d      	bls.n	80058c8 <t_printf+0x88>
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	2b39      	cmp	r3, #57	; 0x39
 8005890:	d81a      	bhi.n	80058c8 <t_printf+0x88>
	w=0;
 8005892:	2300      	movs	r3, #0
 8005894:	71bb      	strb	r3, [r7, #6]
	while (ch>='0' && ch<='9') {
 8005896:	e011      	b.n	80058bc <t_printf+0x7c>
	  w=(((w<<2)+w)<<1)+ch-'0';
 8005898:	79bb      	ldrb	r3, [r7, #6]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	b2da      	uxtb	r2, r3
 800589e:	79bb      	ldrb	r3, [r7, #6]
 80058a0:	4413      	add	r3, r2
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	4413      	add	r3, r2
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	3b30      	subs	r3, #48	; 0x30
 80058b0:	71bb      	strb	r3, [r7, #6]
	  ch=*fmt++;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	61ba      	str	r2, [r7, #24]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	73fb      	strb	r3, [r7, #15]
	ch=*(fmt++);
	lz=1;
      }
      if (ch>='0' && ch<='9') {
	w=0;
	while (ch>='0' && ch<='9') {
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b2f      	cmp	r3, #47	; 0x2f
 80058c0:	d902      	bls.n	80058c8 <t_printf+0x88>
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b39      	cmp	r3, #57	; 0x39
 80058c6:	d9e7      	bls.n	8005898 <t_printf+0x58>
	  w=(((w<<2)+w)<<1)+ch-'0';
	  ch=*fmt++;
	}
      }
      bf=buf;
 80058c8:	4b72      	ldr	r3, [pc, #456]	; (8005a94 <t_printf+0x254>)
 80058ca:	4a73      	ldr	r2, [pc, #460]	; (8005a98 <t_printf+0x258>)
 80058cc:	601a      	str	r2, [r3, #0]
      p=bf;
 80058ce:	4b71      	ldr	r3, [pc, #452]	; (8005a94 <t_printf+0x254>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60bb      	str	r3, [r7, #8]
      zs=0;
 80058d4:	4b71      	ldr	r3, [pc, #452]	; (8005a9c <t_printf+0x25c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
      switch (ch) {
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b63      	cmp	r3, #99	; 0x63
 80058de:	f000 8082 	beq.w	80059e6 <t_printf+0x1a6>
 80058e2:	2b63      	cmp	r3, #99	; 0x63
 80058e4:	dc08      	bgt.n	80058f8 <t_printf+0xb8>
 80058e6:	2b25      	cmp	r3, #37	; 0x25
 80058e8:	f000 808c 	beq.w	8005a04 <t_printf+0x1c4>
 80058ec:	2b58      	cmp	r3, #88	; 0x58
 80058ee:	d049      	beq.n	8005984 <t_printf+0x144>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80c7 	beq.w	8005a84 <t_printf+0x244>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 80058f6:	e088      	b.n	8005a0a <t_printf+0x1ca>
	}
      }
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
 80058f8:	2b73      	cmp	r3, #115	; 0x73
 80058fa:	d07d      	beq.n	80059f8 <t_printf+0x1b8>
 80058fc:	2b73      	cmp	r3, #115	; 0x73
 80058fe:	dc02      	bgt.n	8005906 <t_printf+0xc6>
 8005900:	2b64      	cmp	r3, #100	; 0x64
 8005902:	d005      	beq.n	8005910 <t_printf+0xd0>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 8005904:	e081      	b.n	8005a0a <t_printf+0x1ca>
	}
      }
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
 8005906:	2b75      	cmp	r3, #117	; 0x75
 8005908:	d002      	beq.n	8005910 <t_printf+0xd0>
 800590a:	2b78      	cmp	r3, #120	; 0x78
 800590c:	d03a      	beq.n	8005984 <t_printf+0x144>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 800590e:	e07c      	b.n	8005a0a <t_printf+0x1ca>
      switch (ch) {
      case 0:
	goto abort;
      case 'u':
      case 'd' :
	num=va_arg(va, unsigned int);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	603a      	str	r2, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b61      	ldr	r3, [pc, #388]	; (8005aa0 <t_printf+0x260>)
 800591a:	601a      	str	r2, [r3, #0]
	if (ch=='d' && (int)num<0) {
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d10c      	bne.n	800593c <t_printf+0xfc>
 8005922:	4b5f      	ldr	r3, [pc, #380]	; (8005aa0 <t_printf+0x260>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	da08      	bge.n	800593c <t_printf+0xfc>
	  num = -(int)num;
 800592a:	4b5d      	ldr	r3, [pc, #372]	; (8005aa0 <t_printf+0x260>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	425b      	negs	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <t_printf+0x260>)
 8005934:	601a      	str	r2, [r3, #0]
	  out('-');
 8005936:	202d      	movs	r0, #45	; 0x2d
 8005938:	f7ff ff20 	bl	800577c <out>
	}
	divOut(1000000000);
 800593c:	4859      	ldr	r0, [pc, #356]	; (8005aa4 <t_printf+0x264>)
 800593e:	f7ff ff53 	bl	80057e8 <divOut>
	divOut(100000000);
 8005942:	4859      	ldr	r0, [pc, #356]	; (8005aa8 <t_printf+0x268>)
 8005944:	f7ff ff50 	bl	80057e8 <divOut>
	divOut(10000000);
 8005948:	4858      	ldr	r0, [pc, #352]	; (8005aac <t_printf+0x26c>)
 800594a:	f7ff ff4d 	bl	80057e8 <divOut>
	divOut(1000000);
 800594e:	4858      	ldr	r0, [pc, #352]	; (8005ab0 <t_printf+0x270>)
 8005950:	f7ff ff4a 	bl	80057e8 <divOut>
	divOut(100000);
 8005954:	4857      	ldr	r0, [pc, #348]	; (8005ab4 <t_printf+0x274>)
 8005956:	f7ff ff47 	bl	80057e8 <divOut>
	divOut(10000);
 800595a:	f242 7010 	movw	r0, #10000	; 0x2710
 800595e:	f7ff ff43 	bl	80057e8 <divOut>
	divOut(1000);
 8005962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005966:	f7ff ff3f 	bl	80057e8 <divOut>
	divOut(100);
 800596a:	2064      	movs	r0, #100	; 0x64
 800596c:	f7ff ff3c 	bl	80057e8 <divOut>
	divOut(10);
 8005970:	200a      	movs	r0, #10
 8005972:	f7ff ff39 	bl	80057e8 <divOut>
	outDgt(num);
 8005976:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <t_printf+0x260>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff ff11 	bl	80057a4 <outDgt>
	break;
 8005982:	e043      	b.n	8005a0c <t_printf+0x1cc>
      case 'x':
      case 'X' :
	uc= ch=='X';
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b58      	cmp	r3, #88	; 0x58
 8005988:	bf14      	ite	ne
 800598a:	2300      	movne	r3, #0
 800598c:	2301      	moveq	r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	4b49      	ldr	r3, [pc, #292]	; (8005ab8 <t_printf+0x278>)
 8005994:	701a      	strb	r2, [r3, #0]
	num=va_arg(va, unsigned int);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	1d1a      	adds	r2, r3, #4
 800599a:	603a      	str	r2, [r7, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b40      	ldr	r3, [pc, #256]	; (8005aa0 <t_printf+0x260>)
 80059a0:	601a      	str	r2, [r3, #0]
	divOut(0x10000000);
 80059a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80059a6:	f7ff ff1f 	bl	80057e8 <divOut>
	divOut(0x1000000);
 80059aa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80059ae:	f7ff ff1b 	bl	80057e8 <divOut>
	divOut(0x100000);
 80059b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80059b6:	f7ff ff17 	bl	80057e8 <divOut>
	divOut(0x10000);
 80059ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80059be:	f7ff ff13 	bl	80057e8 <divOut>
	divOut(0x1000);
 80059c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80059c6:	f7ff ff0f 	bl	80057e8 <divOut>
	divOut(0x100);
 80059ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80059ce:	f7ff ff0b 	bl	80057e8 <divOut>
	divOut(0x10);
 80059d2:	2010      	movs	r0, #16
 80059d4:	f7ff ff08 	bl	80057e8 <divOut>
	outDgt(num);
 80059d8:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <t_printf+0x260>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fee0 	bl	80057a4 <outDgt>
	break;
 80059e4:	e012      	b.n	8005a0c <t_printf+0x1cc>
      case 'c' :
	out((char)(va_arg(va, int)));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	1d1a      	adds	r2, r3, #4
 80059ea:	603a      	str	r2, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fec3 	bl	800577c <out>
	break;
 80059f6:	e009      	b.n	8005a0c <t_printf+0x1cc>
      case 's' :
	p=va_arg(va, char*);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	1d1a      	adds	r2, r3, #4
 80059fc:	603a      	str	r2, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60bb      	str	r3, [r7, #8]
	break;
 8005a02:	e003      	b.n	8005a0c <t_printf+0x1cc>
      case '%' :
	out('%');
 8005a04:	2025      	movs	r0, #37	; 0x25
 8005a06:	f7ff feb9 	bl	800577c <out>
      default:
	break;
 8005a0a:	bf00      	nop
      }
      *bf=0;
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <t_printf+0x254>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
      bf=p;
 8005a14:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <t_printf+0x254>)
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	601a      	str	r2, [r3, #0]
      while (*bf++ && w > 0)
 8005a1a:	e002      	b.n	8005a22 <t_printf+0x1e2>
	w--;
 8005a1c:	79bb      	ldrb	r3, [r7, #6]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	71bb      	strb	r3, [r7, #6]
      default:
	break;
      }
      *bf=0;
      bf=p;
      while (*bf++ && w > 0)
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <t_printf+0x254>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	1c59      	adds	r1, r3, #1
 8005a28:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <t_printf+0x254>)
 8005a2a:	6011      	str	r1, [r2, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <t_printf+0x1f8>
 8005a32:	79bb      	ldrb	r3, [r7, #6]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1f1      	bne.n	8005a1c <t_printf+0x1dc>
	w--;
      while (w-- > 0)
 8005a38:	e008      	b.n	8005a4c <t_printf+0x20c>
	{
#ifdef ITM_TRACE
	  ITM_SendChar ((uint32_t) (lz ? '0' : ' '));
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <t_printf+0x204>
 8005a40:	2330      	movs	r3, #48	; 0x30
 8005a42:	e000      	b.n	8005a46 <t_printf+0x206>
 8005a44:	2320      	movs	r3, #32
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fe6a 	bl	8005720 <ITM_SendChar>
      }
      *bf=0;
      bf=p;
      while (*bf++ && w > 0)
	w--;
      while (w-- > 0)
 8005a4c:	79bb      	ldrb	r3, [r7, #6]
 8005a4e:	1e5a      	subs	r2, r3, #1
 8005a50:	71ba      	strb	r2, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f1      	bne.n	8005a3a <t_printf+0x1fa>
#else
	  putchar(lz ? '0' : ' ');
#endif
	}

      while ((ch= *p++))
 8005a56:	e003      	b.n	8005a60 <t_printf+0x220>
	{
#ifdef ITM_TRACE
	  ITM_SendChar ((uint32_t) ch);
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fe60 	bl	8005720 <ITM_SendChar>
#else
	  putchar(lz ? '0' : ' ');
#endif
	}

      while ((ch= *p++))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	60ba      	str	r2, [r7, #8]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f3      	bne.n	8005a58 <t_printf+0x218>
  char ch;
  char* p;

  va_start(va,fmt);

  while ((ch=*(fmt++))) {
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	61ba      	str	r2, [r7, #24]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	73fb      	strb	r3, [r7, #15]
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f47f aee7 	bne.w	8005850 <t_printf+0x10>
 8005a82:	e000      	b.n	8005a86 <t_printf+0x246>
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
      case 0:
	goto abort;
 8005a84:	bf00      	nop
	}
    }
  }
 abort:;
  va_end(va);
}
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a8e:	b004      	add	sp, #16
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	200005e4 	.word	0x200005e4
 8005a98:	200005e8 	.word	0x200005e8
 8005a9c:	200005f9 	.word	0x200005f9
 8005aa0:	200005f4 	.word	0x200005f4
 8005aa4:	3b9aca00 	.word	0x3b9aca00
 8005aa8:	05f5e100 	.word	0x05f5e100
 8005aac:	00989680 	.word	0x00989680
 8005ab0:	000f4240 	.word	0x000f4240
 8005ab4:	000186a0 	.word	0x000186a0
 8005ab8:	200005f8 	.word	0x200005f8

08005abc <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <FreeRTOS_CLIRegisterCommand+0x18>
 8005ace:	f7ff fb17 	bl	8005100 <ulPortSetInterruptMask>
 8005ad2:	e7fe      	b.n	8005ad2 <FreeRTOS_CLIRegisterCommand+0x16>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8005ad4:	2008      	movs	r0, #8
 8005ad6:	f000 f963 	bl	8005da0 <pvPortMalloc>
 8005ada:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <FreeRTOS_CLIRegisterCommand+0x2c>
 8005ae2:	f7ff fb0d 	bl	8005100 <ulPortSetInterruptMask>
 8005ae6:	e7fe      	b.n	8005ae6 <FreeRTOS_CLIRegisterCommand+0x2a>

	if( pxNewListItem != NULL )
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d012      	beq.n	8005b14 <FreeRTOS_CLIRegisterCommand+0x58>
	{
		taskENTER_CRITICAL();
 8005aee:	f7ff fae5 	bl	80050bc <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <FreeRTOS_CLIRegisterCommand+0x64>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <FreeRTOS_CLIRegisterCommand+0x64>)
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 8005b0c:	f7ff fae6 	bl	80050dc <vPortExitCritical>

		xReturn = pdPASS;
 8005b10:	2301      	movs	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000028 	.word	0x20000028

08005b24 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
portBASE_TYPE xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8005b34:	4b3a      	ldr	r3, [pc, #232]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d141      	bne.n	8005bc0 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8005b3c:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b3e:	4a39      	ldr	r2, [pc, #228]	; (8005c24 <FreeRTOS_CLIProcessCommand+0x100>)
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e039      	b.n	8005bb8 <FreeRTOS_CLIProcessCommand+0x94>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8005b44:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8005b4e:	69b8      	ldr	r0, [r7, #24]
 8005b50:	f002 ff10 	bl	8008974 <strlen>
 8005b54:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d005      	beq.n	8005b70 <FreeRTOS_CLIProcessCommand+0x4c>
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11e      	bne.n	8005bae <FreeRTOS_CLIProcessCommand+0x8a>
			{
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	69b9      	ldr	r1, [r7, #24]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	f002 ff2d 	bl	80089d4 <strncmp>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d116      	bne.n	8005bae <FreeRTOS_CLIProcessCommand+0x8a>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	7b1b      	ldrb	r3, [r3, #12]
 8005b88:	b25b      	sxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	db0e      	blt.n	8005bac <FreeRTOS_CLIProcessCommand+0x88>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f8d8 	bl	8005d44 <prvGetNumberOfParameters>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	7b1b      	ldrb	r3, [r3, #12]
 8005ba0:	b25b      	sxtb	r3, r3
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d002      	beq.n	8005bac <FreeRTOS_CLIProcessCommand+0x88>
						{
							xReturn = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8005baa:	e009      	b.n	8005bc0 <FreeRTOS_CLIProcessCommand+0x9c>
 8005bac:	e008      	b.n	8005bc0 <FreeRTOS_CLIProcessCommand+0x9c>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8005bae:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1c1      	bne.n	8005b44 <FreeRTOS_CLIProcessCommand+0x20>
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8005bc0:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <FreeRTOS_CLIProcessCommand+0xbc>
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d108      	bne.n	8005be0 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8005bce:	68b8      	ldr	r0, [r7, #8]
 8005bd0:	4915      	ldr	r1, [pc, #84]	; (8005c28 <FreeRTOS_CLIProcessCommand+0x104>)
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	f002 ff58 	bl	8008a88 <strncpy>
		pxCommand = NULL;
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e01a      	b.n	8005c16 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8005be0:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00f      	beq.n	8005c08 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8005be8:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	68b8      	ldr	r0, [r7, #8]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4798      	blx	r3
 8005bf8:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e006      	b.n	8005c16 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( ( char * ) pcWriteBuffer, ( const char * const ) "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8005c08:	68b8      	ldr	r0, [r7, #8]
 8005c0a:	4908      	ldr	r1, [pc, #32]	; (8005c2c <FreeRTOS_CLIProcessCommand+0x108>)
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	f002 ff3b 	bl	8008a88 <strncpy>
		xReturn = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8005c16:	69fb      	ldr	r3, [r7, #28]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	200005fc 	.word	0x200005fc
 8005c24:	20000020 	.word	0x20000020
 8005c28:	080091e4 	.word	0x080091e4
 8005c2c:	0800923c 	.word	0x0800923c

08005c30 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const int8_t *FreeRTOS_CLIGetParameter( const int8_t *pcCommandString, unsigned portBASE_TYPE uxWantedParameter, portBASE_TYPE *pxParameterStringLength )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
unsigned portBASE_TYPE uxParametersFound = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
const int8_t *pcReturn = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 8005c4a:	e041      	b.n	8005cd0 <FreeRTOS_CLIGetParameter+0xa0>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005c4c:	e002      	b.n	8005c54 <FreeRTOS_CLIGetParameter+0x24>
		{
			pcCommandString++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <FreeRTOS_CLIGetParameter+0x36>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d1f3      	bne.n	8005c4e <FreeRTOS_CLIGetParameter+0x1e>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8005c66:	e002      	b.n	8005c6e <FreeRTOS_CLIGetParameter+0x3e>
		{
			pcCommandString++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <FreeRTOS_CLIGetParameter+0x50>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	b25b      	sxtb	r3, r3
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d0f3      	beq.n	8005c68 <FreeRTOS_CLIGetParameter+0x38>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d022      	beq.n	8005cce <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d11c      	bne.n	8005cd0 <FreeRTOS_CLIGetParameter+0xa0>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005c9a:	e007      	b.n	8005cac <FreeRTOS_CLIGetParameter+0x7c>
				{
					( *pxParameterStringLength )++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <FreeRTOS_CLIGetParameter+0x8e>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b25b      	sxtb	r3, r3
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d1ee      	bne.n	8005c9c <FreeRTOS_CLIGetParameter+0x6c>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <FreeRTOS_CLIGetParameter+0x9c>
				{
					pcReturn = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
				}

				break;
 8005cca:	e005      	b.n	8005cd8 <FreeRTOS_CLIGetParameter+0xa8>
 8005ccc:	e004      	b.n	8005cd8 <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 8005cce:	e003      	b.n	8005cd8 <FreeRTOS_CLIGetParameter+0xa8>
unsigned portBASE_TYPE uxParametersFound = 0;
const int8_t *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d3b9      	bcc.n	8005c4c <FreeRTOS_CLIGetParameter+0x1c>
		{
			break;
		}
	}

	return pcReturn;
 8005cd8:	693b      	ldr	r3, [r7, #16]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop

08005ce8 <prvHelpCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
signed portBASE_TYPE xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <prvHelpCommand+0x54>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <prvHelpCommand+0x54>)
 8005cfe:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <prvHelpCommand+0x58>)
 8005d00:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8005d02:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <prvHelpCommand+0x54>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f002 feba 	bl	8008a88 <strncpy>
	pxCommand = pxCommand->pxNext;
 8005d14:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <prvHelpCommand+0x54>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	4b08      	ldr	r3, [pc, #32]	; (8005d3c <prvHelpCommand+0x54>)
 8005d1c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
 8005d1e:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <prvHelpCommand+0x54>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
	//	strcat ( (char * ) pcWriteBuffer, "\nend help\n\n\0");
		xReturn = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e001      	b.n	8005d30 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d30:	697b      	ldr	r3, [r7, #20]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000600 	.word	0x20000600
 8005d40:	20000020 	.word	0x20000020

08005d44 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8005d54:	e012      	b.n	8005d7c <prvGetNumberOfParameters+0x38>
	{
		if( ( *pcCommandString ) == ' ' )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	b25b      	sxtb	r3, r3
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d108      	bne.n	8005d72 <prvGetNumberOfParameters+0x2e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d007      	beq.n	8005d76 <prvGetNumberOfParameters+0x32>
			{
				cParameters++;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	e001      	b.n	8005d76 <prvGetNumberOfParameters+0x32>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e8      	bne.n	8005d56 <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d102      	bne.n	8005d90 <prvGetNumberOfParameters+0x4c>
	{
		cParameters--;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	b25b      	sxtb	r3, r3
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005dac:	f7fd fd8c 	bl	80038c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005db0:	4b3d      	ldr	r3, [pc, #244]	; (8005ea8 <pvPortMalloc+0x108>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005db8:	f000 f8c8 	bl	8005f4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dbc:	4b3b      	ldr	r3, [pc, #236]	; (8005eac <pvPortMalloc+0x10c>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d163      	bne.n	8005e90 <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 8005dce:	2308      	movs	r3, #8
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f023 0307 	bic.w	r3, r3, #7
 8005de6:	3308      	adds	r3, #8
 8005de8:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d04f      	beq.n	8005e90 <pvPortMalloc+0xf0>
 8005df0:	4b2f      	ldr	r3, [pc, #188]	; (8005eb0 <pvPortMalloc+0x110>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d84a      	bhi.n	8005e90 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dfa:	4b2e      	ldr	r3, [pc, #184]	; (8005eb4 <pvPortMalloc+0x114>)
 8005dfc:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005dfe:	4b2d      	ldr	r3, [pc, #180]	; (8005eb4 <pvPortMalloc+0x114>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e04:	e004      	b.n	8005e10 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d203      	bcs.n	8005e22 <pvPortMalloc+0x82>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f1      	bne.n	8005e06 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 8005e22:	4b21      	ldr	r3, [pc, #132]	; (8005ea8 <pvPortMalloc+0x108>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d031      	beq.n	8005e90 <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	2308      	movs	r3, #8
 8005e32:	4413      	add	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	1ad2      	subs	r2, r2, r3
 8005e46:	2308      	movs	r3, #8
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d90f      	bls.n	8005e6e <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	1ad2      	subs	r2, r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8005e68:	68b8      	ldr	r0, [r7, #8]
 8005e6a:	f000 f8bd 	bl	8005fe8 <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <pvPortMalloc+0x110>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <pvPortMalloc+0x110>)
 8005e7a:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <pvPortMalloc+0x10c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 8005e90:	f7fd fd28 	bl	80038e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005e9a:	f7fd f921 	bl	80030e0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	2001320c 	.word	0x2001320c
 8005eac:	20013210 	.word	0x20013210
 8005eb0:	2000002c 	.word	0x2000002c
 8005eb4:	20013204 	.word	0x20013204

08005eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d038      	beq.n	8005f3c <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8005eca:	2308      	movs	r3, #8
 8005ecc:	425b      	negs	r3, r3
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <vPortFree+0x8c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <vPortFree+0x34>
 8005ee6:	f7ff f90b 	bl	8005100 <ulPortSetInterruptMask>
 8005eea:	e7fe      	b.n	8005eea <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <vPortFree+0x42>
 8005ef4:	f7ff f904 	bl	8005100 <ulPortSetInterruptMask>
 8005ef8:	e7fe      	b.n	8005ef8 <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <vPortFree+0x8c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d019      	beq.n	8005f3c <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d115      	bne.n	8005f3c <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <vPortFree+0x8c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f20:	f7fd fcd2 	bl	80038c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <vPortFree+0x90>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <vPortFree+0x90>)
 8005f30:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 8005f32:	68b8      	ldr	r0, [r7, #8]
 8005f34:	f000 f858 	bl	8005fe8 <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 8005f38:	f7fd fcd4 	bl	80038e4 <xTaskResumeAll>
			}
		}
	}
}
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20013210 	.word	0x20013210
 8005f48:	2000002c 	.word	0x2000002c

08005f4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8005f52:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <prvHeapInit+0x84>)
 8005f54:	f023 0307 	bic.w	r3, r3, #7
 8005f58:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f5a:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <prvHeapInit+0x88>)
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f60:	4b1c      	ldr	r3, [pc, #112]	; (8005fd4 <prvHeapInit+0x88>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 8005f66:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <prvHeapInit+0x8c>)
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	425b      	negs	r3, r3
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <prvHeapInit+0x90>)
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 8005f7e:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <prvHeapInit+0x90>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <prvHeapInit+0x44>
 8005f8a:	f7ff f8b9 	bl	8005100 <ulPortSetInterruptMask>
 8005f8e:	e7fe      	b.n	8005f8e <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <prvHeapInit+0x90>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2200      	movs	r2, #0
 8005f96:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f98:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <prvHeapInit+0x90>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 8005fa4:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <prvHeapInit+0x8c>)
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <prvHeapInit+0x90>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <prvHeapInit+0x94>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	2308      	movs	r3, #8
 8005fbc:	1ad2      	subs	r2, r2, r3
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <prvHeapInit+0x94>)
 8005fc0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <prvHeapInit+0x98>)
 8005fc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fc8:	601a      	str	r2, [r3, #0]
}
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	2000060c 	.word	0x2000060c
 8005fd4:	20013204 	.word	0x20013204
 8005fd8:	00012bf8 	.word	0x00012bf8
 8005fdc:	2001320c 	.word	0x2001320c
 8005fe0:	2000002c 	.word	0x2000002c
 8005fe4:	20013210 	.word	0x20013210

08005fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <prvInsertBlockIntoFreeList+0xa8>)
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	e002      	b.n	8005ffc <prvInsertBlockIntoFreeList+0x14>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d3f7      	bcc.n	8005ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	441a      	add	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d108      	bne.n	800602a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	441a      	add	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	441a      	add	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d118      	bne.n	8006070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <prvInsertBlockIntoFreeList+0xac>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d00d      	beq.n	8006066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	441a      	add	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e008      	b.n	8006078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <prvInsertBlockIntoFreeList+0xac>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e003      	b.n	8006078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d002      	beq.n	8006086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
	}
}
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20013204 	.word	0x20013204
 8006094:	2001320c 	.word	0x2001320c

08006098 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060a6:	d013      	beq.n	80060d0 <NVIC_PriorityGroupConfig+0x38>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060ae:	d00f      	beq.n	80060d0 <NVIC_PriorityGroupConfig+0x38>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80060b6:	d00b      	beq.n	80060d0 <NVIC_PriorityGroupConfig+0x38>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060be:	d007      	beq.n	80060d0 <NVIC_PriorityGroupConfig+0x38>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c6:	d003      	beq.n	80060d0 <NVIC_PriorityGroupConfig+0x38>
 80060c8:	4806      	ldr	r0, [pc, #24]	; (80060e4 <NVIC_PriorityGroupConfig+0x4c>)
 80060ca:	2173      	movs	r1, #115	; 0x73
 80060cc:	f7fd f81c 	bl	8003108 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80060d0:	4a05      	ldr	r2, [pc, #20]	; (80060e8 <NVIC_PriorityGroupConfig+0x50>)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060dc:	60d3      	str	r3, [r2, #12]
}
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	0800928c 	.word	0x0800928c
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	2300      	movs	r3, #0
 80060fa:	73bb      	strb	r3, [r7, #14]
 80060fc:	230f      	movs	r3, #15
 80060fe:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	78db      	ldrb	r3, [r3, #3]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <NVIC_Init+0x2c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	78db      	ldrb	r3, [r3, #3]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d003      	beq.n	8006118 <NVIC_Init+0x2c>
 8006110:	4830      	ldr	r0, [pc, #192]	; (80061d4 <NVIC_Init+0xe8>)
 8006112:	2187      	movs	r1, #135	; 0x87
 8006114:	f7fc fff8 	bl	8003108 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	785b      	ldrb	r3, [r3, #1]
 800611c:	2b0f      	cmp	r3, #15
 800611e:	d903      	bls.n	8006128 <NVIC_Init+0x3c>
 8006120:	482c      	ldr	r0, [pc, #176]	; (80061d4 <NVIC_Init+0xe8>)
 8006122:	2188      	movs	r1, #136	; 0x88
 8006124:	f7fc fff0 	bl	8003108 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	789b      	ldrb	r3, [r3, #2]
 800612c:	2b0f      	cmp	r3, #15
 800612e:	d903      	bls.n	8006138 <NVIC_Init+0x4c>
 8006130:	4828      	ldr	r0, [pc, #160]	; (80061d4 <NVIC_Init+0xe8>)
 8006132:	2189      	movs	r1, #137	; 0x89
 8006134:	f7fc ffe8 	bl	8003108 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d037      	beq.n	80061b0 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006140:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <NVIC_Init+0xec>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	43db      	mvns	r3, r3
 8006146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	f1c3 0304 	rsb	r3, r3, #4
 8006154:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8006156:	7b7a      	ldrb	r2, [r7, #13]
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	fa42 f303 	asr.w	r3, r2, r3
 800615e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	461a      	mov	r2, r3
 8006166:	7bbb      	ldrb	r3, [r7, #14]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	789a      	ldrb	r2, [r3, #2]
 8006172:	7b7b      	ldrb	r3, [r7, #13]
 8006174:	4013      	ands	r3, r2
 8006176:	b2da      	uxtb	r2, r3
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	4313      	orrs	r3, r2
 800617c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8006184:	4a15      	ldr	r2, [pc, #84]	; (80061dc <NVIC_Init+0xf0>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	4413      	add	r3, r2
 800618c:	7bfa      	ldrb	r2, [r7, #15]
 800618e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <NVIC_Init+0xf0>)
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	0952      	lsrs	r2, r2, #5
 800619a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	7809      	ldrb	r1, [r1, #0]
 80061a0:	f001 011f 	and.w	r1, r1, #31
 80061a4:	2001      	movs	r0, #1
 80061a6:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061ae:	e00e      	b.n	80061ce <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <NVIC_Init+0xf0>)
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	0952      	lsrs	r2, r2, #5
 80061b8:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	7809      	ldrb	r1, [r1, #0]
 80061be:	f001 011f 	and.w	r1, r1, #31
 80061c2:	2001      	movs	r0, #1
 80061c4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80061c8:	3220      	adds	r2, #32
 80061ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	0800928c 	.word	0x0800928c
 80061d8:	e000ed00 	.word	0xe000ed00
 80061dc:	e000e100 	.word	0xe000e100

080061e0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4b72      	ldr	r3, [pc, #456]	; (80063b4 <DMA_DeInit+0x1d4>)
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d03f      	beq.n	8006270 <DMA_DeInit+0x90>
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4b71      	ldr	r3, [pc, #452]	; (80063b8 <DMA_DeInit+0x1d8>)
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d03b      	beq.n	8006270 <DMA_DeInit+0x90>
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4b70      	ldr	r3, [pc, #448]	; (80063bc <DMA_DeInit+0x1dc>)
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d037      	beq.n	8006270 <DMA_DeInit+0x90>
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	4b6f      	ldr	r3, [pc, #444]	; (80063c0 <DMA_DeInit+0x1e0>)
 8006204:	429a      	cmp	r2, r3
 8006206:	d033      	beq.n	8006270 <DMA_DeInit+0x90>
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	4b6e      	ldr	r3, [pc, #440]	; (80063c4 <DMA_DeInit+0x1e4>)
 800620c:	429a      	cmp	r2, r3
 800620e:	d02f      	beq.n	8006270 <DMA_DeInit+0x90>
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4b6d      	ldr	r3, [pc, #436]	; (80063c8 <DMA_DeInit+0x1e8>)
 8006214:	429a      	cmp	r2, r3
 8006216:	d02b      	beq.n	8006270 <DMA_DeInit+0x90>
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	4b6c      	ldr	r3, [pc, #432]	; (80063cc <DMA_DeInit+0x1ec>)
 800621c:	429a      	cmp	r2, r3
 800621e:	d027      	beq.n	8006270 <DMA_DeInit+0x90>
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4b6b      	ldr	r3, [pc, #428]	; (80063d0 <DMA_DeInit+0x1f0>)
 8006224:	429a      	cmp	r2, r3
 8006226:	d023      	beq.n	8006270 <DMA_DeInit+0x90>
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4b6a      	ldr	r3, [pc, #424]	; (80063d4 <DMA_DeInit+0x1f4>)
 800622c:	429a      	cmp	r2, r3
 800622e:	d01f      	beq.n	8006270 <DMA_DeInit+0x90>
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4b69      	ldr	r3, [pc, #420]	; (80063d8 <DMA_DeInit+0x1f8>)
 8006234:	429a      	cmp	r2, r3
 8006236:	d01b      	beq.n	8006270 <DMA_DeInit+0x90>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	4b68      	ldr	r3, [pc, #416]	; (80063dc <DMA_DeInit+0x1fc>)
 800623c:	429a      	cmp	r2, r3
 800623e:	d017      	beq.n	8006270 <DMA_DeInit+0x90>
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4b67      	ldr	r3, [pc, #412]	; (80063e0 <DMA_DeInit+0x200>)
 8006244:	429a      	cmp	r2, r3
 8006246:	d013      	beq.n	8006270 <DMA_DeInit+0x90>
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4b66      	ldr	r3, [pc, #408]	; (80063e4 <DMA_DeInit+0x204>)
 800624c:	429a      	cmp	r2, r3
 800624e:	d00f      	beq.n	8006270 <DMA_DeInit+0x90>
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4b65      	ldr	r3, [pc, #404]	; (80063e8 <DMA_DeInit+0x208>)
 8006254:	429a      	cmp	r2, r3
 8006256:	d00b      	beq.n	8006270 <DMA_DeInit+0x90>
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	4b64      	ldr	r3, [pc, #400]	; (80063ec <DMA_DeInit+0x20c>)
 800625c:	429a      	cmp	r2, r3
 800625e:	d007      	beq.n	8006270 <DMA_DeInit+0x90>
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4b63      	ldr	r3, [pc, #396]	; (80063f0 <DMA_DeInit+0x210>)
 8006264:	429a      	cmp	r2, r3
 8006266:	d003      	beq.n	8006270 <DMA_DeInit+0x90>
 8006268:	4862      	ldr	r0, [pc, #392]	; (80063f4 <DMA_DeInit+0x214>)
 800626a:	21bf      	movs	r1, #191	; 0xbf
 800626c:	f7fc ff4c 	bl	8003108 <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f023 0201 	bic.w	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2221      	movs	r2, #33	; 0x21
 800629e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4b44      	ldr	r3, [pc, #272]	; (80063b4 <DMA_DeInit+0x1d4>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d103      	bne.n	80062b0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80062a8:	4b53      	ldr	r3, [pc, #332]	; (80063f8 <DMA_DeInit+0x218>)
 80062aa:	223d      	movs	r2, #61	; 0x3d
 80062ac:	609a      	str	r2, [r3, #8]
 80062ae:	e07e      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <DMA_DeInit+0x1d8>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d104      	bne.n	80062c2 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80062b8:	4b4f      	ldr	r3, [pc, #316]	; (80063f8 <DMA_DeInit+0x218>)
 80062ba:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	e075      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	4b3d      	ldr	r3, [pc, #244]	; (80063bc <DMA_DeInit+0x1dc>)
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d104      	bne.n	80062d4 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80062ca:	4b4b      	ldr	r3, [pc, #300]	; (80063f8 <DMA_DeInit+0x218>)
 80062cc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	e06c      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4b3a      	ldr	r3, [pc, #232]	; (80063c0 <DMA_DeInit+0x1e0>)
 80062d8:	429a      	cmp	r2, r3
 80062da:	d104      	bne.n	80062e6 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80062dc:	4b46      	ldr	r3, [pc, #280]	; (80063f8 <DMA_DeInit+0x218>)
 80062de:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	e063      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <DMA_DeInit+0x1e4>)
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d103      	bne.n	80062f6 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80062ee:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <DMA_DeInit+0x218>)
 80062f0:	4a42      	ldr	r2, [pc, #264]	; (80063fc <DMA_DeInit+0x21c>)
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	e05b      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <DMA_DeInit+0x1e8>)
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d103      	bne.n	8006306 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80062fe:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <DMA_DeInit+0x218>)
 8006300:	4a3f      	ldr	r2, [pc, #252]	; (8006400 <DMA_DeInit+0x220>)
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e053      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4b30      	ldr	r3, [pc, #192]	; (80063cc <DMA_DeInit+0x1ec>)
 800630a:	429a      	cmp	r2, r3
 800630c:	d103      	bne.n	8006316 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800630e:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <DMA_DeInit+0x218>)
 8006310:	4a3c      	ldr	r2, [pc, #240]	; (8006404 <DMA_DeInit+0x224>)
 8006312:	60da      	str	r2, [r3, #12]
 8006314:	e04b      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <DMA_DeInit+0x1f0>)
 800631a:	429a      	cmp	r2, r3
 800631c:	d104      	bne.n	8006328 <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800631e:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <DMA_DeInit+0x218>)
 8006320:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	e042      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <DMA_DeInit+0x1f4>)
 800632c:	429a      	cmp	r2, r3
 800632e:	d103      	bne.n	8006338 <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8006330:	4b35      	ldr	r3, [pc, #212]	; (8006408 <DMA_DeInit+0x228>)
 8006332:	223d      	movs	r2, #61	; 0x3d
 8006334:	609a      	str	r2, [r3, #8]
 8006336:	e03a      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4b27      	ldr	r3, [pc, #156]	; (80063d8 <DMA_DeInit+0x1f8>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d104      	bne.n	800634a <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8006340:	4b31      	ldr	r3, [pc, #196]	; (8006408 <DMA_DeInit+0x228>)
 8006342:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	e031      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4b23      	ldr	r3, [pc, #140]	; (80063dc <DMA_DeInit+0x1fc>)
 800634e:	429a      	cmp	r2, r3
 8006350:	d104      	bne.n	800635c <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8006352:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <DMA_DeInit+0x228>)
 8006354:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8006358:	609a      	str	r2, [r3, #8]
 800635a:	e028      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	4b20      	ldr	r3, [pc, #128]	; (80063e0 <DMA_DeInit+0x200>)
 8006360:	429a      	cmp	r2, r3
 8006362:	d104      	bne.n	800636e <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8006364:	4b28      	ldr	r3, [pc, #160]	; (8006408 <DMA_DeInit+0x228>)
 8006366:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	e01f      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4b1c      	ldr	r3, [pc, #112]	; (80063e4 <DMA_DeInit+0x204>)
 8006372:	429a      	cmp	r2, r3
 8006374:	d103      	bne.n	800637e <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <DMA_DeInit+0x228>)
 8006378:	4a20      	ldr	r2, [pc, #128]	; (80063fc <DMA_DeInit+0x21c>)
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e017      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4b19      	ldr	r3, [pc, #100]	; (80063e8 <DMA_DeInit+0x208>)
 8006382:	429a      	cmp	r2, r3
 8006384:	d103      	bne.n	800638e <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <DMA_DeInit+0x228>)
 8006388:	4a1d      	ldr	r2, [pc, #116]	; (8006400 <DMA_DeInit+0x220>)
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	e00f      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4b16      	ldr	r3, [pc, #88]	; (80063ec <DMA_DeInit+0x20c>)
 8006392:	429a      	cmp	r2, r3
 8006394:	d103      	bne.n	800639e <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8006396:	4b1c      	ldr	r3, [pc, #112]	; (8006408 <DMA_DeInit+0x228>)
 8006398:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <DMA_DeInit+0x224>)
 800639a:	60da      	str	r2, [r3, #12]
 800639c:	e007      	b.n	80063ae <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <DMA_DeInit+0x210>)
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d103      	bne.n	80063ae <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80063a6:	4b18      	ldr	r3, [pc, #96]	; (8006408 <DMA_DeInit+0x228>)
 80063a8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80063ac:	60da      	str	r2, [r3, #12]
    }
  }
}
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40026010 	.word	0x40026010
 80063b8:	40026028 	.word	0x40026028
 80063bc:	40026040 	.word	0x40026040
 80063c0:	40026058 	.word	0x40026058
 80063c4:	40026070 	.word	0x40026070
 80063c8:	40026088 	.word	0x40026088
 80063cc:	400260a0 	.word	0x400260a0
 80063d0:	400260b8 	.word	0x400260b8
 80063d4:	40026410 	.word	0x40026410
 80063d8:	40026428 	.word	0x40026428
 80063dc:	40026440 	.word	0x40026440
 80063e0:	40026458 	.word	0x40026458
 80063e4:	40026470 	.word	0x40026470
 80063e8:	40026488 	.word	0x40026488
 80063ec:	400264a0 	.word	0x400264a0
 80063f0:	400264b8 	.word	0x400264b8
 80063f4:	080092d4 	.word	0x080092d4
 80063f8:	40026000 	.word	0x40026000
 80063fc:	2000003d 	.word	0x2000003d
 8006400:	20000f40 	.word	0x20000f40
 8006404:	203d0000 	.word	0x203d0000
 8006408:	40026400 	.word	0x40026400

0800640c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4b98      	ldr	r3, [pc, #608]	; (8006680 <DMA_Init+0x274>)
 800641e:	429a      	cmp	r2, r3
 8006420:	d040      	beq.n	80064a4 <DMA_Init+0x98>
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4b97      	ldr	r3, [pc, #604]	; (8006684 <DMA_Init+0x278>)
 8006426:	429a      	cmp	r2, r3
 8006428:	d03c      	beq.n	80064a4 <DMA_Init+0x98>
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4b96      	ldr	r3, [pc, #600]	; (8006688 <DMA_Init+0x27c>)
 800642e:	429a      	cmp	r2, r3
 8006430:	d038      	beq.n	80064a4 <DMA_Init+0x98>
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4b95      	ldr	r3, [pc, #596]	; (800668c <DMA_Init+0x280>)
 8006436:	429a      	cmp	r2, r3
 8006438:	d034      	beq.n	80064a4 <DMA_Init+0x98>
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4b94      	ldr	r3, [pc, #592]	; (8006690 <DMA_Init+0x284>)
 800643e:	429a      	cmp	r2, r3
 8006440:	d030      	beq.n	80064a4 <DMA_Init+0x98>
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4b93      	ldr	r3, [pc, #588]	; (8006694 <DMA_Init+0x288>)
 8006446:	429a      	cmp	r2, r3
 8006448:	d02c      	beq.n	80064a4 <DMA_Init+0x98>
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4b92      	ldr	r3, [pc, #584]	; (8006698 <DMA_Init+0x28c>)
 800644e:	429a      	cmp	r2, r3
 8006450:	d028      	beq.n	80064a4 <DMA_Init+0x98>
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4b91      	ldr	r3, [pc, #580]	; (800669c <DMA_Init+0x290>)
 8006456:	429a      	cmp	r2, r3
 8006458:	d024      	beq.n	80064a4 <DMA_Init+0x98>
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4b90      	ldr	r3, [pc, #576]	; (80066a0 <DMA_Init+0x294>)
 800645e:	429a      	cmp	r2, r3
 8006460:	d020      	beq.n	80064a4 <DMA_Init+0x98>
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4b8f      	ldr	r3, [pc, #572]	; (80066a4 <DMA_Init+0x298>)
 8006466:	429a      	cmp	r2, r3
 8006468:	d01c      	beq.n	80064a4 <DMA_Init+0x98>
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4b8e      	ldr	r3, [pc, #568]	; (80066a8 <DMA_Init+0x29c>)
 800646e:	429a      	cmp	r2, r3
 8006470:	d018      	beq.n	80064a4 <DMA_Init+0x98>
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4b8d      	ldr	r3, [pc, #564]	; (80066ac <DMA_Init+0x2a0>)
 8006476:	429a      	cmp	r2, r3
 8006478:	d014      	beq.n	80064a4 <DMA_Init+0x98>
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4b8c      	ldr	r3, [pc, #560]	; (80066b0 <DMA_Init+0x2a4>)
 800647e:	429a      	cmp	r2, r3
 8006480:	d010      	beq.n	80064a4 <DMA_Init+0x98>
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4b8b      	ldr	r3, [pc, #556]	; (80066b4 <DMA_Init+0x2a8>)
 8006486:	429a      	cmp	r2, r3
 8006488:	d00c      	beq.n	80064a4 <DMA_Init+0x98>
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4b8a      	ldr	r3, [pc, #552]	; (80066b8 <DMA_Init+0x2ac>)
 800648e:	429a      	cmp	r2, r3
 8006490:	d008      	beq.n	80064a4 <DMA_Init+0x98>
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4b89      	ldr	r3, [pc, #548]	; (80066bc <DMA_Init+0x2b0>)
 8006496:	429a      	cmp	r2, r3
 8006498:	d004      	beq.n	80064a4 <DMA_Init+0x98>
 800649a:	4889      	ldr	r0, [pc, #548]	; (80066c0 <DMA_Init+0x2b4>)
 800649c:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80064a0:	f7fc fe32 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d027      	beq.n	80064fc <DMA_Init+0xf0>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b4:	d022      	beq.n	80064fc <DMA_Init+0xf0>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064be:	d01d      	beq.n	80064fc <DMA_Init+0xf0>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80064c8:	d018      	beq.n	80064fc <DMA_Init+0xf0>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d2:	d013      	beq.n	80064fc <DMA_Init+0xf0>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80064dc:	d00e      	beq.n	80064fc <DMA_Init+0xf0>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064e6:	d009      	beq.n	80064fc <DMA_Init+0xf0>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80064f0:	d004      	beq.n	80064fc <DMA_Init+0xf0>
 80064f2:	4873      	ldr	r0, [pc, #460]	; (80066c0 <DMA_Init+0x2b4>)
 80064f4:	f240 113d 	movw	r1, #317	; 0x13d
 80064f8:	f7fc fe06 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00c      	beq.n	800651e <DMA_Init+0x112>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d008      	beq.n	800651e <DMA_Init+0x112>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d004      	beq.n	800651e <DMA_Init+0x112>
 8006514:	486a      	ldr	r0, [pc, #424]	; (80066c0 <DMA_Init+0x2b4>)
 8006516:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800651a:	f7fc fdf5 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <DMA_Init+0x124>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652e:	d304      	bcc.n	800653a <DMA_Init+0x12e>
 8006530:	4863      	ldr	r0, [pc, #396]	; (80066c0 <DMA_Init+0x2b4>)
 8006532:	f240 113f 	movw	r1, #319	; 0x13f
 8006536:	f7fc fde7 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006542:	d008      	beq.n	8006556 <DMA_Init+0x14a>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <DMA_Init+0x14a>
 800654c:	485c      	ldr	r0, [pc, #368]	; (80066c0 <DMA_Init+0x2b4>)
 800654e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006552:	f7fc fdd9 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655e:	d008      	beq.n	8006572 <DMA_Init+0x166>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <DMA_Init+0x166>
 8006568:	4855      	ldr	r0, [pc, #340]	; (80066c0 <DMA_Init+0x2b4>)
 800656a:	f240 1141 	movw	r1, #321	; 0x141
 800656e:	f7fc fdcb 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <DMA_Init+0x18c>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006582:	d009      	beq.n	8006598 <DMA_Init+0x18c>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d004      	beq.n	8006598 <DMA_Init+0x18c>
 800658e:	484c      	ldr	r0, [pc, #304]	; (80066c0 <DMA_Init+0x2b4>)
 8006590:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006594:	f7fc fdb8 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00e      	beq.n	80065be <DMA_Init+0x1b2>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a8:	d009      	beq.n	80065be <DMA_Init+0x1b2>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b2:	d004      	beq.n	80065be <DMA_Init+0x1b2>
 80065b4:	4842      	ldr	r0, [pc, #264]	; (80066c0 <DMA_Init+0x2b4>)
 80065b6:	f240 1143 	movw	r1, #323	; 0x143
 80065ba:	f7fc fda5 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <DMA_Init+0x1ce>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ce:	d004      	beq.n	80065da <DMA_Init+0x1ce>
 80065d0:	483b      	ldr	r0, [pc, #236]	; (80066c0 <DMA_Init+0x2b4>)
 80065d2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80065d6:	f7fc fd97 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d013      	beq.n	800660a <DMA_Init+0x1fe>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ea:	d00e      	beq.n	800660a <DMA_Init+0x1fe>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f4:	d009      	beq.n	800660a <DMA_Init+0x1fe>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065fe:	d004      	beq.n	800660a <DMA_Init+0x1fe>
 8006600:	482f      	ldr	r0, [pc, #188]	; (80066c0 <DMA_Init+0x2b4>)
 8006602:	f240 1145 	movw	r1, #325	; 0x145
 8006606:	f7fc fd7f 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d008      	beq.n	8006624 <DMA_Init+0x218>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	2b04      	cmp	r3, #4
 8006618:	d004      	beq.n	8006624 <DMA_Init+0x218>
 800661a:	4829      	ldr	r0, [pc, #164]	; (80066c0 <DMA_Init+0x2b4>)
 800661c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006620:	f7fc fd72 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	2b00      	cmp	r3, #0
 800662a:	d010      	beq.n	800664e <DMA_Init+0x242>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	2b01      	cmp	r3, #1
 8006632:	d00c      	beq.n	800664e <DMA_Init+0x242>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	2b02      	cmp	r3, #2
 800663a:	d008      	beq.n	800664e <DMA_Init+0x242>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	2b03      	cmp	r3, #3
 8006642:	d004      	beq.n	800664e <DMA_Init+0x242>
 8006644:	481e      	ldr	r0, [pc, #120]	; (80066c0 <DMA_Init+0x2b4>)
 8006646:	f240 1147 	movw	r1, #327	; 0x147
 800664a:	f7fc fd5d 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	2b00      	cmp	r3, #0
 8006654:	d036      	beq.n	80066c4 <DMA_Init+0x2b8>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800665e:	d031      	beq.n	80066c4 <DMA_Init+0x2b8>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006668:	d02c      	beq.n	80066c4 <DMA_Init+0x2b8>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006672:	d027      	beq.n	80066c4 <DMA_Init+0x2b8>
 8006674:	4812      	ldr	r0, [pc, #72]	; (80066c0 <DMA_Init+0x2b4>)
 8006676:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800667a:	f7fc fd45 	bl	8003108 <assert_failed>
 800667e:	e021      	b.n	80066c4 <DMA_Init+0x2b8>
 8006680:	40026010 	.word	0x40026010
 8006684:	40026028 	.word	0x40026028
 8006688:	40026040 	.word	0x40026040
 800668c:	40026058 	.word	0x40026058
 8006690:	40026070 	.word	0x40026070
 8006694:	40026088 	.word	0x40026088
 8006698:	400260a0 	.word	0x400260a0
 800669c:	400260b8 	.word	0x400260b8
 80066a0:	40026410 	.word	0x40026410
 80066a4:	40026428 	.word	0x40026428
 80066a8:	40026440 	.word	0x40026440
 80066ac:	40026458 	.word	0x40026458
 80066b0:	40026470 	.word	0x40026470
 80066b4:	40026488 	.word	0x40026488
 80066b8:	400264a0 	.word	0x400264a0
 80066bc:	400264b8 	.word	0x400264b8
 80066c0:	080092d4 	.word	0x080092d4
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <DMA_Init+0x2e8>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d4:	d00e      	beq.n	80066f4 <DMA_Init+0x2e8>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066de:	d009      	beq.n	80066f4 <DMA_Init+0x2e8>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066e8:	d004      	beq.n	80066f4 <DMA_Init+0x2e8>
 80066ea:	4828      	ldr	r0, [pc, #160]	; (800678c <DMA_Init+0x380>)
 80066ec:	f240 1149 	movw	r1, #329	; 0x149
 80066f0:	f7fc fd0a 	bl	8003108 <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4b24      	ldr	r3, [pc, #144]	; (8006790 <DMA_Init+0x384>)
 80066fe:	4013      	ands	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8006710:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800671c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006728:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006734:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 0307 	bic.w	r3, r3, #7
 8006754:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	4313      	orrs	r3, r2
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
}
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	080092d4 	.word	0x080092d4
 8006790:	f01c803f 	.word	0xf01c803f

08006794 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <DMA_Cmd+0xd4>)
 8006810:	429a      	cmp	r2, r3
 8006812:	d040      	beq.n	8006896 <DMA_Cmd+0x96>
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <DMA_Cmd+0xd8>)
 8006818:	429a      	cmp	r2, r3
 800681a:	d03c      	beq.n	8006896 <DMA_Cmd+0x96>
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	4b2f      	ldr	r3, [pc, #188]	; (80068dc <DMA_Cmd+0xdc>)
 8006820:	429a      	cmp	r2, r3
 8006822:	d038      	beq.n	8006896 <DMA_Cmd+0x96>
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	4b2e      	ldr	r3, [pc, #184]	; (80068e0 <DMA_Cmd+0xe0>)
 8006828:	429a      	cmp	r2, r3
 800682a:	d034      	beq.n	8006896 <DMA_Cmd+0x96>
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <DMA_Cmd+0xe4>)
 8006830:	429a      	cmp	r2, r3
 8006832:	d030      	beq.n	8006896 <DMA_Cmd+0x96>
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <DMA_Cmd+0xe8>)
 8006838:	429a      	cmp	r2, r3
 800683a:	d02c      	beq.n	8006896 <DMA_Cmd+0x96>
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <DMA_Cmd+0xec>)
 8006840:	429a      	cmp	r2, r3
 8006842:	d028      	beq.n	8006896 <DMA_Cmd+0x96>
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4b2a      	ldr	r3, [pc, #168]	; (80068f0 <DMA_Cmd+0xf0>)
 8006848:	429a      	cmp	r2, r3
 800684a:	d024      	beq.n	8006896 <DMA_Cmd+0x96>
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <DMA_Cmd+0xf4>)
 8006850:	429a      	cmp	r2, r3
 8006852:	d020      	beq.n	8006896 <DMA_Cmd+0x96>
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4b28      	ldr	r3, [pc, #160]	; (80068f8 <DMA_Cmd+0xf8>)
 8006858:	429a      	cmp	r2, r3
 800685a:	d01c      	beq.n	8006896 <DMA_Cmd+0x96>
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4b27      	ldr	r3, [pc, #156]	; (80068fc <DMA_Cmd+0xfc>)
 8006860:	429a      	cmp	r2, r3
 8006862:	d018      	beq.n	8006896 <DMA_Cmd+0x96>
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4b26      	ldr	r3, [pc, #152]	; (8006900 <DMA_Cmd+0x100>)
 8006868:	429a      	cmp	r2, r3
 800686a:	d014      	beq.n	8006896 <DMA_Cmd+0x96>
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4b25      	ldr	r3, [pc, #148]	; (8006904 <DMA_Cmd+0x104>)
 8006870:	429a      	cmp	r2, r3
 8006872:	d010      	beq.n	8006896 <DMA_Cmd+0x96>
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <DMA_Cmd+0x108>)
 8006878:	429a      	cmp	r2, r3
 800687a:	d00c      	beq.n	8006896 <DMA_Cmd+0x96>
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	4b23      	ldr	r3, [pc, #140]	; (800690c <DMA_Cmd+0x10c>)
 8006880:	429a      	cmp	r2, r3
 8006882:	d008      	beq.n	8006896 <DMA_Cmd+0x96>
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <DMA_Cmd+0x110>)
 8006888:	429a      	cmp	r2, r3
 800688a:	d004      	beq.n	8006896 <DMA_Cmd+0x96>
 800688c:	4821      	ldr	r0, [pc, #132]	; (8006914 <DMA_Cmd+0x114>)
 800688e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006892:	f7fc fc39 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <DMA_Cmd+0xac>
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d004      	beq.n	80068ac <DMA_Cmd+0xac>
 80068a2:	481c      	ldr	r0, [pc, #112]	; (8006914 <DMA_Cmd+0x114>)
 80068a4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80068a8:	f7fc fc2e 	bl	8003108 <assert_failed>

  if (NewState != DISABLE)
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f043 0201 	orr.w	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	e005      	b.n	80068cc <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f023 0201 	bic.w	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
  }
}
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40026010 	.word	0x40026010
 80068d8:	40026028 	.word	0x40026028
 80068dc:	40026040 	.word	0x40026040
 80068e0:	40026058 	.word	0x40026058
 80068e4:	40026070 	.word	0x40026070
 80068e8:	40026088 	.word	0x40026088
 80068ec:	400260a0 	.word	0x400260a0
 80068f0:	400260b8 	.word	0x400260b8
 80068f4:	40026410 	.word	0x40026410
 80068f8:	40026428 	.word	0x40026428
 80068fc:	40026440 	.word	0x40026440
 8006900:	40026458 	.word	0x40026458
 8006904:	40026470 	.word	0x40026470
 8006908:	40026488 	.word	0x40026488
 800690c:	400264a0 	.word	0x400264a0
 8006910:	400264b8 	.word	0x400264b8
 8006914:	080092d4 	.word	0x080092d4

08006918 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	4b25      	ldr	r3, [pc, #148]	; (80069bc <DMA_SetCurrDataCounter+0xa4>)
 8006928:	429a      	cmp	r2, r3
 800692a:	d040      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <DMA_SetCurrDataCounter+0xa8>)
 8006930:	429a      	cmp	r2, r3
 8006932:	d03c      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <DMA_SetCurrDataCounter+0xac>)
 8006938:	429a      	cmp	r2, r3
 800693a:	d038      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <DMA_SetCurrDataCounter+0xb0>)
 8006940:	429a      	cmp	r2, r3
 8006942:	d034      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	4b21      	ldr	r3, [pc, #132]	; (80069cc <DMA_SetCurrDataCounter+0xb4>)
 8006948:	429a      	cmp	r2, r3
 800694a:	d030      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <DMA_SetCurrDataCounter+0xb8>)
 8006950:	429a      	cmp	r2, r3
 8006952:	d02c      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	4b1f      	ldr	r3, [pc, #124]	; (80069d4 <DMA_SetCurrDataCounter+0xbc>)
 8006958:	429a      	cmp	r2, r3
 800695a:	d028      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <DMA_SetCurrDataCounter+0xc0>)
 8006960:	429a      	cmp	r2, r3
 8006962:	d024      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <DMA_SetCurrDataCounter+0xc4>)
 8006968:	429a      	cmp	r2, r3
 800696a:	d020      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <DMA_SetCurrDataCounter+0xc8>)
 8006970:	429a      	cmp	r2, r3
 8006972:	d01c      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4b1b      	ldr	r3, [pc, #108]	; (80069e4 <DMA_SetCurrDataCounter+0xcc>)
 8006978:	429a      	cmp	r2, r3
 800697a:	d018      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4b1a      	ldr	r3, [pc, #104]	; (80069e8 <DMA_SetCurrDataCounter+0xd0>)
 8006980:	429a      	cmp	r2, r3
 8006982:	d014      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4b19      	ldr	r3, [pc, #100]	; (80069ec <DMA_SetCurrDataCounter+0xd4>)
 8006988:	429a      	cmp	r2, r3
 800698a:	d010      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <DMA_SetCurrDataCounter+0xd8>)
 8006990:	429a      	cmp	r2, r3
 8006992:	d00c      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <DMA_SetCurrDataCounter+0xdc>)
 8006998:	429a      	cmp	r2, r3
 800699a:	d008      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	4b16      	ldr	r3, [pc, #88]	; (80069f8 <DMA_SetCurrDataCounter+0xe0>)
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d004      	beq.n	80069ae <DMA_SetCurrDataCounter+0x96>
 80069a4:	4815      	ldr	r0, [pc, #84]	; (80069fc <DMA_SetCurrDataCounter+0xe4>)
 80069a6:	f240 2175 	movw	r1, #629	; 0x275
 80069aa:	f7fc fbad 	bl	8003108 <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 80069ae:	887a      	ldrh	r2, [r7, #2]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	605a      	str	r2, [r3, #4]
}
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40026010 	.word	0x40026010
 80069c0:	40026028 	.word	0x40026028
 80069c4:	40026040 	.word	0x40026040
 80069c8:	40026058 	.word	0x40026058
 80069cc:	40026070 	.word	0x40026070
 80069d0:	40026088 	.word	0x40026088
 80069d4:	400260a0 	.word	0x400260a0
 80069d8:	400260b8 	.word	0x400260b8
 80069dc:	40026410 	.word	0x40026410
 80069e0:	40026428 	.word	0x40026428
 80069e4:	40026440 	.word	0x40026440
 80069e8:	40026458 	.word	0x40026458
 80069ec:	40026470 	.word	0x40026470
 80069f0:	40026488 	.word	0x40026488
 80069f4:	400264a0 	.word	0x400264a0
 80069f8:	400264b8 	.word	0x400264b8
 80069fc:	080092d4 	.word	0x080092d4

08006a00 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	4b2a      	ldr	r3, [pc, #168]	; (8006ab8 <DMA_GetCmdStatus+0xb8>)
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d040      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	4b29      	ldr	r3, [pc, #164]	; (8006abc <DMA_GetCmdStatus+0xbc>)
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d03c      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	4b28      	ldr	r3, [pc, #160]	; (8006ac0 <DMA_GetCmdStatus+0xc0>)
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d038      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <DMA_GetCmdStatus+0xc4>)
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d034      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4b26      	ldr	r3, [pc, #152]	; (8006ac8 <DMA_GetCmdStatus+0xc8>)
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d030      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4b25      	ldr	r3, [pc, #148]	; (8006acc <DMA_GetCmdStatus+0xcc>)
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d02c      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <DMA_GetCmdStatus+0xd0>)
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d028      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4b23      	ldr	r3, [pc, #140]	; (8006ad4 <DMA_GetCmdStatus+0xd4>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d024      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4b22      	ldr	r3, [pc, #136]	; (8006ad8 <DMA_GetCmdStatus+0xd8>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d020      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	4b21      	ldr	r3, [pc, #132]	; (8006adc <DMA_GetCmdStatus+0xdc>)
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d01c      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <DMA_GetCmdStatus+0xe0>)
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d018      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <DMA_GetCmdStatus+0xe4>)
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d014      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ae8 <DMA_GetCmdStatus+0xe8>)
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d010      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <DMA_GetCmdStatus+0xec>)
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d00c      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <DMA_GetCmdStatus+0xf0>)
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d008      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <DMA_GetCmdStatus+0xf4>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d004      	beq.n	8006a96 <DMA_GetCmdStatus+0x96>
 8006a8c:	481a      	ldr	r0, [pc, #104]	; (8006af8 <DMA_GetCmdStatus+0xf8>)
 8006a8e:	f240 31a2 	movw	r1, #930	; 0x3a2
 8006a92:	f7fc fb39 	bl	8003108 <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	e001      	b.n	8006aac <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	40026010 	.word	0x40026010
 8006abc:	40026028 	.word	0x40026028
 8006ac0:	40026040 	.word	0x40026040
 8006ac4:	40026058 	.word	0x40026058
 8006ac8:	40026070 	.word	0x40026070
 8006acc:	40026088 	.word	0x40026088
 8006ad0:	400260a0 	.word	0x400260a0
 8006ad4:	400260b8 	.word	0x400260b8
 8006ad8:	40026410 	.word	0x40026410
 8006adc:	40026428 	.word	0x40026428
 8006ae0:	40026440 	.word	0x40026440
 8006ae4:	40026458 	.word	0x40026458
 8006ae8:	40026470 	.word	0x40026470
 8006aec:	40026488 	.word	0x40026488
 8006af0:	400264a0 	.word	0x400264a0
 8006af4:	400264b8 	.word	0x400264b8
 8006af8:	080092d4 	.word	0x080092d4

08006afc <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4b45      	ldr	r3, [pc, #276]	; (8006c24 <DMA_ITConfig+0x128>)
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d040      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4b44      	ldr	r3, [pc, #272]	; (8006c28 <DMA_ITConfig+0x12c>)
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d03c      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4b43      	ldr	r3, [pc, #268]	; (8006c2c <DMA_ITConfig+0x130>)
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d038      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <DMA_ITConfig+0x134>)
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d034      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4b41      	ldr	r3, [pc, #260]	; (8006c34 <DMA_ITConfig+0x138>)
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d030      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4b40      	ldr	r3, [pc, #256]	; (8006c38 <DMA_ITConfig+0x13c>)
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d02c      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4b3f      	ldr	r3, [pc, #252]	; (8006c3c <DMA_ITConfig+0x140>)
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d028      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <DMA_ITConfig+0x144>)
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d024      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4b3d      	ldr	r3, [pc, #244]	; (8006c44 <DMA_ITConfig+0x148>)
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d020      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4b3c      	ldr	r3, [pc, #240]	; (8006c48 <DMA_ITConfig+0x14c>)
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d01c      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4b3b      	ldr	r3, [pc, #236]	; (8006c4c <DMA_ITConfig+0x150>)
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d018      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4b3a      	ldr	r3, [pc, #232]	; (8006c50 <DMA_ITConfig+0x154>)
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d014      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4b39      	ldr	r3, [pc, #228]	; (8006c54 <DMA_ITConfig+0x158>)
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d010      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4b38      	ldr	r3, [pc, #224]	; (8006c58 <DMA_ITConfig+0x15c>)
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d00c      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4b37      	ldr	r3, [pc, #220]	; (8006c5c <DMA_ITConfig+0x160>)
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d008      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4b36      	ldr	r3, [pc, #216]	; (8006c60 <DMA_ITConfig+0x164>)
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d004      	beq.n	8006b94 <DMA_ITConfig+0x98>
 8006b8a:	4836      	ldr	r0, [pc, #216]	; (8006c64 <DMA_ITConfig+0x168>)
 8006b8c:	f240 414f 	movw	r1, #1103	; 0x44f
 8006b90:	f7fc faba 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <DMA_ITConfig+0xa8>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <DMA_ITConfig+0xb2>
 8006ba4:	482f      	ldr	r0, [pc, #188]	; (8006c64 <DMA_ITConfig+0x168>)
 8006ba6:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8006baa:	f7fc faad 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <DMA_ITConfig+0xc8>
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d004      	beq.n	8006bc4 <DMA_ITConfig+0xc8>
 8006bba:	482a      	ldr	r0, [pc, #168]	; (8006c64 <DMA_ITConfig+0x168>)
 8006bbc:	f240 4151 	movw	r1, #1105	; 0x451
 8006bc0:	f7fc faa2 	bl	8003108 <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00f      	beq.n	8006bee <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	615a      	str	r2, [r3, #20]
 8006be0:	e005      	b.n	8006bee <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d014      	beq.n	8006c1e <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f003 031e 	and.w	r3, r3, #30
 8006c04:	431a      	orrs	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	e008      	b.n	8006c1e <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 031e 	and.w	r3, r3, #30
 8006c16:	43db      	mvns	r3, r3
 8006c18:	401a      	ands	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40026010 	.word	0x40026010
 8006c28:	40026028 	.word	0x40026028
 8006c2c:	40026040 	.word	0x40026040
 8006c30:	40026058 	.word	0x40026058
 8006c34:	40026070 	.word	0x40026070
 8006c38:	40026088 	.word	0x40026088
 8006c3c:	400260a0 	.word	0x400260a0
 8006c40:	400260b8 	.word	0x400260b8
 8006c44:	40026410 	.word	0x40026410
 8006c48:	40026428 	.word	0x40026428
 8006c4c:	40026440 	.word	0x40026440
 8006c50:	40026458 	.word	0x40026458
 8006c54:	40026470 	.word	0x40026470
 8006c58:	40026488 	.word	0x40026488
 8006c5c:	400264a0 	.word	0x400264a0
 8006c60:	400264b8 	.word	0x400264b8
 8006c64:	080092d4 	.word	0x080092d4

08006c68 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8006c72:	2300      	movs	r3, #0
 8006c74:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	4b97      	ldr	r3, [pc, #604]	; (8006ee0 <DMA_GetITStatus+0x278>)
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d040      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4b96      	ldr	r3, [pc, #600]	; (8006ee4 <DMA_GetITStatus+0x27c>)
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d03c      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4b95      	ldr	r3, [pc, #596]	; (8006ee8 <DMA_GetITStatus+0x280>)
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d038      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4b94      	ldr	r3, [pc, #592]	; (8006eec <DMA_GetITStatus+0x284>)
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d034      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4b93      	ldr	r3, [pc, #588]	; (8006ef0 <DMA_GetITStatus+0x288>)
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d030      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4b92      	ldr	r3, [pc, #584]	; (8006ef4 <DMA_GetITStatus+0x28c>)
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d02c      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4b91      	ldr	r3, [pc, #580]	; (8006ef8 <DMA_GetITStatus+0x290>)
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d028      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4b90      	ldr	r3, [pc, #576]	; (8006efc <DMA_GetITStatus+0x294>)
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d024      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4b8f      	ldr	r3, [pc, #572]	; (8006f00 <DMA_GetITStatus+0x298>)
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d020      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4b8e      	ldr	r3, [pc, #568]	; (8006f04 <DMA_GetITStatus+0x29c>)
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d01c      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4b8d      	ldr	r3, [pc, #564]	; (8006f08 <DMA_GetITStatus+0x2a0>)
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d018      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4b8c      	ldr	r3, [pc, #560]	; (8006f0c <DMA_GetITStatus+0x2a4>)
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d014      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	4b8b      	ldr	r3, [pc, #556]	; (8006f10 <DMA_GetITStatus+0x2a8>)
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d010      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4b8a      	ldr	r3, [pc, #552]	; (8006f14 <DMA_GetITStatus+0x2ac>)
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d00c      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4b89      	ldr	r3, [pc, #548]	; (8006f18 <DMA_GetITStatus+0x2b0>)
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d008      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	4b88      	ldr	r3, [pc, #544]	; (8006f1c <DMA_GetITStatus+0x2b4>)
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d004      	beq.n	8006d08 <DMA_GetITStatus+0xa0>
 8006cfe:	4888      	ldr	r0, [pc, #544]	; (8006f20 <DMA_GetITStatus+0x2b8>)
 8006d00:	f240 4187 	movw	r1, #1159	; 0x487
 8006d04:	f7fc fa00 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	4b86      	ldr	r3, [pc, #536]	; (8006f24 <DMA_GetITStatus+0x2bc>)
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	f000 80a9 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	4b84      	ldr	r3, [pc, #528]	; (8006f28 <DMA_GetITStatus+0x2c0>)
 8006d16:	429a      	cmp	r2, r3
 8006d18:	f000 80a4 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	4b83      	ldr	r3, [pc, #524]	; (8006f2c <DMA_GetITStatus+0x2c4>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	f000 809f 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	4b81      	ldr	r3, [pc, #516]	; (8006f30 <DMA_GetITStatus+0x2c8>)
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	f000 809a 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	4b80      	ldr	r3, [pc, #512]	; (8006f34 <DMA_GetITStatus+0x2cc>)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	f000 8095 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	4b7e      	ldr	r3, [pc, #504]	; (8006f38 <DMA_GetITStatus+0x2d0>)
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	f000 8090 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4b7d      	ldr	r3, [pc, #500]	; (8006f3c <DMA_GetITStatus+0x2d4>)
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	f000 808b 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <DMA_GetITStatus+0x2d8>)
 8006d52:	429a      	cmp	r2, r3
 8006d54:	f000 8086 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	4b7a      	ldr	r3, [pc, #488]	; (8006f44 <DMA_GetITStatus+0x2dc>)
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	f000 8081 	beq.w	8006e64 <DMA_GetITStatus+0x1fc>
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	4b78      	ldr	r3, [pc, #480]	; (8006f48 <DMA_GetITStatus+0x2e0>)
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d07c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	4b77      	ldr	r3, [pc, #476]	; (8006f4c <DMA_GetITStatus+0x2e4>)
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d078      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4b76      	ldr	r3, [pc, #472]	; (8006f50 <DMA_GetITStatus+0x2e8>)
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d074      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	4b75      	ldr	r3, [pc, #468]	; (8006f54 <DMA_GetITStatus+0x2ec>)
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d070      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	4b74      	ldr	r3, [pc, #464]	; (8006f58 <DMA_GetITStatus+0x2f0>)
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d06c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	4b73      	ldr	r3, [pc, #460]	; (8006f5c <DMA_GetITStatus+0x2f4>)
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d068      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	4b72      	ldr	r3, [pc, #456]	; (8006f60 <DMA_GetITStatus+0x2f8>)
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d064      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	4b71      	ldr	r3, [pc, #452]	; (8006f64 <DMA_GetITStatus+0x2fc>)
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d060      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	4b70      	ldr	r3, [pc, #448]	; (8006f68 <DMA_GetITStatus+0x300>)
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d05c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <DMA_GetITStatus+0x304>)
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d058      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	4b6e      	ldr	r3, [pc, #440]	; (8006f70 <DMA_GetITStatus+0x308>)
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d054      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	4b6d      	ldr	r3, [pc, #436]	; (8006f74 <DMA_GetITStatus+0x30c>)
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d050      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <DMA_GetITStatus+0x310>)
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d04c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	4b6b      	ldr	r3, [pc, #428]	; (8006f7c <DMA_GetITStatus+0x314>)
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d048      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	4b6a      	ldr	r3, [pc, #424]	; (8006f80 <DMA_GetITStatus+0x318>)
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d044      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	4b69      	ldr	r3, [pc, #420]	; (8006f84 <DMA_GetITStatus+0x31c>)
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d040      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4b68      	ldr	r3, [pc, #416]	; (8006f88 <DMA_GetITStatus+0x320>)
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d03c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	4b67      	ldr	r3, [pc, #412]	; (8006f8c <DMA_GetITStatus+0x324>)
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d038      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4b66      	ldr	r3, [pc, #408]	; (8006f90 <DMA_GetITStatus+0x328>)
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d034      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4b65      	ldr	r3, [pc, #404]	; (8006f94 <DMA_GetITStatus+0x32c>)
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d030      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4b64      	ldr	r3, [pc, #400]	; (8006f98 <DMA_GetITStatus+0x330>)
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d02c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	4b63      	ldr	r3, [pc, #396]	; (8006f9c <DMA_GetITStatus+0x334>)
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d028      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4b62      	ldr	r3, [pc, #392]	; (8006fa0 <DMA_GetITStatus+0x338>)
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d024      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	4b61      	ldr	r3, [pc, #388]	; (8006fa4 <DMA_GetITStatus+0x33c>)
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d020      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	4b60      	ldr	r3, [pc, #384]	; (8006fa8 <DMA_GetITStatus+0x340>)
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d01c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4b5f      	ldr	r3, [pc, #380]	; (8006fac <DMA_GetITStatus+0x344>)
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d018      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4b5e      	ldr	r3, [pc, #376]	; (8006fb0 <DMA_GetITStatus+0x348>)
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d014      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	4b5d      	ldr	r3, [pc, #372]	; (8006fb4 <DMA_GetITStatus+0x34c>)
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d010      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4b5c      	ldr	r3, [pc, #368]	; (8006fb8 <DMA_GetITStatus+0x350>)
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d00c      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	4b5b      	ldr	r3, [pc, #364]	; (8006fbc <DMA_GetITStatus+0x354>)
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d008      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	4b5a      	ldr	r3, [pc, #360]	; (8006fc0 <DMA_GetITStatus+0x358>)
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d004      	beq.n	8006e64 <DMA_GetITStatus+0x1fc>
 8006e5a:	4831      	ldr	r0, [pc, #196]	; (8006f20 <DMA_GetITStatus+0x2b8>)
 8006e5c:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8006e60:	f7fc f952 	bl	8003108 <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4b57      	ldr	r3, [pc, #348]	; (8006fc4 <DMA_GetITStatus+0x35c>)
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d802      	bhi.n	8006e72 <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006e6c:	4b56      	ldr	r3, [pc, #344]	; (8006fc8 <DMA_GetITStatus+0x360>)
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	e001      	b.n	8006e76 <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006e72:	4b56      	ldr	r3, [pc, #344]	; (8006fcc <DMA_GetITStatus+0x364>)
 8006e74:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006e7c:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	0adb      	lsrs	r3, r3, #11
 8006e88:	f003 031e 	and.w	r3, r3, #30
 8006e8c:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4013      	ands	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
 8006e98:	e004      	b.n	8006ea4 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e002      	b.n	8006ebc <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006ec2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d07e      	beq.n	8006fd0 <DMA_GetITStatus+0x368>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d07b      	beq.n	8006fd0 <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
 8006edc:	e07a      	b.n	8006fd4 <DMA_GetITStatus+0x36c>
 8006ede:	bf00      	nop
 8006ee0:	40026010 	.word	0x40026010
 8006ee4:	40026028 	.word	0x40026028
 8006ee8:	40026040 	.word	0x40026040
 8006eec:	40026058 	.word	0x40026058
 8006ef0:	40026070 	.word	0x40026070
 8006ef4:	40026088 	.word	0x40026088
 8006ef8:	400260a0 	.word	0x400260a0
 8006efc:	400260b8 	.word	0x400260b8
 8006f00:	40026410 	.word	0x40026410
 8006f04:	40026428 	.word	0x40026428
 8006f08:	40026440 	.word	0x40026440
 8006f0c:	40026458 	.word	0x40026458
 8006f10:	40026470 	.word	0x40026470
 8006f14:	40026488 	.word	0x40026488
 8006f18:	400264a0 	.word	0x400264a0
 8006f1c:	400264b8 	.word	0x400264b8
 8006f20:	080092d4 	.word	0x080092d4
 8006f24:	10008020 	.word	0x10008020
 8006f28:	10004010 	.word	0x10004010
 8006f2c:	10002008 	.word	0x10002008
 8006f30:	10001004 	.word	0x10001004
 8006f34:	90000001 	.word	0x90000001
 8006f38:	10008800 	.word	0x10008800
 8006f3c:	10004400 	.word	0x10004400
 8006f40:	10002200 	.word	0x10002200
 8006f44:	10001100 	.word	0x10001100
 8006f48:	90000040 	.word	0x90000040
 8006f4c:	10208000 	.word	0x10208000
 8006f50:	10104000 	.word	0x10104000
 8006f54:	10082000 	.word	0x10082000
 8006f58:	10041000 	.word	0x10041000
 8006f5c:	90010000 	.word	0x90010000
 8006f60:	18008000 	.word	0x18008000
 8006f64:	14004000 	.word	0x14004000
 8006f68:	12002000 	.word	0x12002000
 8006f6c:	11001000 	.word	0x11001000
 8006f70:	90400000 	.word	0x90400000
 8006f74:	20008020 	.word	0x20008020
 8006f78:	20004010 	.word	0x20004010
 8006f7c:	20002008 	.word	0x20002008
 8006f80:	20001004 	.word	0x20001004
 8006f84:	a0000001 	.word	0xa0000001
 8006f88:	20008800 	.word	0x20008800
 8006f8c:	20004400 	.word	0x20004400
 8006f90:	20002200 	.word	0x20002200
 8006f94:	20001100 	.word	0x20001100
 8006f98:	a0000040 	.word	0xa0000040
 8006f9c:	20208000 	.word	0x20208000
 8006fa0:	20104000 	.word	0x20104000
 8006fa4:	20082000 	.word	0x20082000
 8006fa8:	20041000 	.word	0x20041000
 8006fac:	a0010000 	.word	0xa0010000
 8006fb0:	28008000 	.word	0x28008000
 8006fb4:	24004000 	.word	0x24004000
 8006fb8:	22002000 	.word	0x22002000
 8006fbc:	21001000 	.word	0x21001000
 8006fc0:	a0400000 	.word	0xa0400000
 8006fc4:	4002640f 	.word	0x4002640f
 8006fc8:	40026000 	.word	0x40026000
 8006fcc:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4b3d      	ldr	r3, [pc, #244]	; (80070e4 <DMA_ClearITPendingBit+0x104>)
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d040      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	4b3c      	ldr	r3, [pc, #240]	; (80070e8 <DMA_ClearITPendingBit+0x108>)
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d03c      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4b3b      	ldr	r3, [pc, #236]	; (80070ec <DMA_ClearITPendingBit+0x10c>)
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d038      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	4b3a      	ldr	r3, [pc, #232]	; (80070f0 <DMA_ClearITPendingBit+0x110>)
 8007006:	429a      	cmp	r2, r3
 8007008:	d034      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <DMA_ClearITPendingBit+0x114>)
 800700e:	429a      	cmp	r2, r3
 8007010:	d030      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <DMA_ClearITPendingBit+0x118>)
 8007016:	429a      	cmp	r2, r3
 8007018:	d02c      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4b37      	ldr	r3, [pc, #220]	; (80070fc <DMA_ClearITPendingBit+0x11c>)
 800701e:	429a      	cmp	r2, r3
 8007020:	d028      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4b36      	ldr	r3, [pc, #216]	; (8007100 <DMA_ClearITPendingBit+0x120>)
 8007026:	429a      	cmp	r2, r3
 8007028:	d024      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4b35      	ldr	r3, [pc, #212]	; (8007104 <DMA_ClearITPendingBit+0x124>)
 800702e:	429a      	cmp	r2, r3
 8007030:	d020      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4b34      	ldr	r3, [pc, #208]	; (8007108 <DMA_ClearITPendingBit+0x128>)
 8007036:	429a      	cmp	r2, r3
 8007038:	d01c      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4b33      	ldr	r3, [pc, #204]	; (800710c <DMA_ClearITPendingBit+0x12c>)
 800703e:	429a      	cmp	r2, r3
 8007040:	d018      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4b32      	ldr	r3, [pc, #200]	; (8007110 <DMA_ClearITPendingBit+0x130>)
 8007046:	429a      	cmp	r2, r3
 8007048:	d014      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4b31      	ldr	r3, [pc, #196]	; (8007114 <DMA_ClearITPendingBit+0x134>)
 800704e:	429a      	cmp	r2, r3
 8007050:	d010      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4b30      	ldr	r3, [pc, #192]	; (8007118 <DMA_ClearITPendingBit+0x138>)
 8007056:	429a      	cmp	r2, r3
 8007058:	d00c      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	4b2f      	ldr	r3, [pc, #188]	; (800711c <DMA_ClearITPendingBit+0x13c>)
 800705e:	429a      	cmp	r2, r3
 8007060:	d008      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <DMA_ClearITPendingBit+0x140>)
 8007066:	429a      	cmp	r2, r3
 8007068:	d004      	beq.n	8007074 <DMA_ClearITPendingBit+0x94>
 800706a:	482e      	ldr	r0, [pc, #184]	; (8007124 <DMA_ClearITPendingBit+0x144>)
 800706c:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8007070:	f7fc f84a 	bl	8003108 <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800707a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800707e:	d00c      	beq.n	800709a <DMA_ClearITPendingBit+0xba>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d007      	beq.n	800709a <DMA_ClearITPendingBit+0xba>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <DMA_ClearITPendingBit+0xba>
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	4b25      	ldr	r3, [pc, #148]	; (8007128 <DMA_ClearITPendingBit+0x148>)
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <DMA_ClearITPendingBit+0xc4>
 800709a:	4822      	ldr	r0, [pc, #136]	; (8007124 <DMA_ClearITPendingBit+0x144>)
 800709c:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 80070a0:	f7fc f832 	bl	8003108 <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	4b21      	ldr	r3, [pc, #132]	; (800712c <DMA_ClearITPendingBit+0x14c>)
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d802      	bhi.n	80070b2 <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80070ac:	4b20      	ldr	r3, [pc, #128]	; (8007130 <DMA_ClearITPendingBit+0x150>)
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e001      	b.n	80070b6 <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80070b2:	4b20      	ldr	r3, [pc, #128]	; (8007134 <DMA_ClearITPendingBit+0x154>)
 80070b4:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80070c6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	60d3      	str	r3, [r2, #12]
 80070ce:	e006      	b.n	80070de <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80070d6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	6093      	str	r3, [r2, #8]
  }   
}
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40026010 	.word	0x40026010
 80070e8:	40026028 	.word	0x40026028
 80070ec:	40026040 	.word	0x40026040
 80070f0:	40026058 	.word	0x40026058
 80070f4:	40026070 	.word	0x40026070
 80070f8:	40026088 	.word	0x40026088
 80070fc:	400260a0 	.word	0x400260a0
 8007100:	400260b8 	.word	0x400260b8
 8007104:	40026410 	.word	0x40026410
 8007108:	40026428 	.word	0x40026428
 800710c:	40026440 	.word	0x40026440
 8007110:	40026458 	.word	0x40026458
 8007114:	40026470 	.word	0x40026470
 8007118:	40026488 	.word	0x40026488
 800711c:	400264a0 	.word	0x400264a0
 8007120:	400264b8 	.word	0x400264b8
 8007124:	080092d4 	.word	0x080092d4
 8007128:	40820082 	.word	0x40820082
 800712c:	4002640f 	.word	0x4002640f
 8007130:	40026000 	.word	0x40026000
 8007134:	40026400 	.word	0x40026400

08007138 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	791b      	ldrb	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <EXTI_Init+0x24>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	791b      	ldrb	r3, [r3, #4]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d003      	beq.n	800715c <EXTI_Init+0x24>
 8007154:	4848      	ldr	r0, [pc, #288]	; (8007278 <EXTI_Init+0x140>)
 8007156:	217c      	movs	r1, #124	; 0x7c
 8007158:	f7fb ffd6 	bl	8003108 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	795b      	ldrb	r3, [r3, #5]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d00b      	beq.n	800717c <EXTI_Init+0x44>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	795b      	ldrb	r3, [r3, #5]
 8007168:	2b0c      	cmp	r3, #12
 800716a:	d007      	beq.n	800717c <EXTI_Init+0x44>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	795b      	ldrb	r3, [r3, #5]
 8007170:	2b10      	cmp	r3, #16
 8007172:	d003      	beq.n	800717c <EXTI_Init+0x44>
 8007174:	4840      	ldr	r0, [pc, #256]	; (8007278 <EXTI_Init+0x140>)
 8007176:	217d      	movs	r1, #125	; 0x7d
 8007178:	f7fb ffc6 	bl	8003108 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	0ddb      	lsrs	r3, r3, #23
 8007182:	05db      	lsls	r3, r3, #23
 8007184:	2b00      	cmp	r3, #0
 8007186:	d103      	bne.n	8007190 <EXTI_Init+0x58>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <EXTI_Init+0x60>
 8007190:	4839      	ldr	r0, [pc, #228]	; (8007278 <EXTI_Init+0x140>)
 8007192:	217e      	movs	r1, #126	; 0x7e
 8007194:	f7fb ffb8 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	799b      	ldrb	r3, [r3, #6]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <EXTI_Init+0x78>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	799b      	ldrb	r3, [r3, #6]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d003      	beq.n	80071b0 <EXTI_Init+0x78>
 80071a8:	4833      	ldr	r0, [pc, #204]	; (8007278 <EXTI_Init+0x140>)
 80071aa:	217f      	movs	r1, #127	; 0x7f
 80071ac:	f7fb ffac 	bl	8003108 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 80071b0:	4b32      	ldr	r3, [pc, #200]	; (800727c <EXTI_Init+0x144>)
 80071b2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	799b      	ldrb	r3, [r3, #6]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d04d      	beq.n	8007258 <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80071bc:	4b2f      	ldr	r3, [pc, #188]	; (800727c <EXTI_Init+0x144>)
 80071be:	4a2f      	ldr	r2, [pc, #188]	; (800727c <EXTI_Init+0x144>)
 80071c0:	6811      	ldr	r1, [r2, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	43d2      	mvns	r2, r2
 80071c8:	400a      	ands	r2, r1
 80071ca:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80071cc:	4b2b      	ldr	r3, [pc, #172]	; (800727c <EXTI_Init+0x144>)
 80071ce:	4a2b      	ldr	r2, [pc, #172]	; (800727c <EXTI_Init+0x144>)
 80071d0:	6851      	ldr	r1, [r2, #4]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6812      	ldr	r2, [r2, #0]
 80071d6:	43d2      	mvns	r2, r2
 80071d8:	400a      	ands	r2, r1
 80071da:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	791b      	ldrb	r3, [r3, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	6811      	ldr	r1, [r2, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80071f4:	4b21      	ldr	r3, [pc, #132]	; (800727c <EXTI_Init+0x144>)
 80071f6:	4a21      	ldr	r2, [pc, #132]	; (800727c <EXTI_Init+0x144>)
 80071f8:	6891      	ldr	r1, [r2, #8]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	43d2      	mvns	r2, r2
 8007200:	400a      	ands	r2, r1
 8007202:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8007204:	4b1d      	ldr	r3, [pc, #116]	; (800727c <EXTI_Init+0x144>)
 8007206:	4a1d      	ldr	r2, [pc, #116]	; (800727c <EXTI_Init+0x144>)
 8007208:	68d1      	ldr	r1, [r2, #12]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	43d2      	mvns	r2, r2
 8007210:	400a      	ands	r2, r1
 8007212:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	795b      	ldrb	r3, [r3, #5]
 8007218:	2b10      	cmp	r3, #16
 800721a:	d10e      	bne.n	800723a <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800721c:	4b17      	ldr	r3, [pc, #92]	; (800727c <EXTI_Init+0x144>)
 800721e:	4a17      	ldr	r2, [pc, #92]	; (800727c <EXTI_Init+0x144>)
 8007220:	6891      	ldr	r1, [r2, #8]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <EXTI_Init+0x144>)
 800722c:	4a13      	ldr	r2, [pc, #76]	; (800727c <EXTI_Init+0x144>)
 800722e:	68d1      	ldr	r1, [r2, #12]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	60da      	str	r2, [r3, #12]
 8007238:	e01b      	b.n	8007272 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <EXTI_Init+0x144>)
 800723c:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	795b      	ldrb	r3, [r3, #5]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6812      	ldr	r2, [r2, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e00c      	b.n	8007272 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6811      	ldr	r1, [r2, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	43d2      	mvns	r2, r2
 800726e:	400a      	ands	r2, r1
 8007270:	601a      	str	r2, [r3, #0]
  }
}
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	08009324 	.word	0x08009324
 800727c:	40013c00 	.word	0x40013c00

08007280 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	0ddb      	lsrs	r3, r3, #23
 800728c:	05db      	lsls	r3, r3, #23
 800728e:	2b00      	cmp	r3, #0
 8007290:	d102      	bne.n	8007298 <EXTI_ClearFlag+0x18>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d103      	bne.n	80072a0 <EXTI_ClearFlag+0x20>
 8007298:	4804      	ldr	r0, [pc, #16]	; (80072ac <EXTI_ClearFlag+0x2c>)
 800729a:	21f6      	movs	r1, #246	; 0xf6
 800729c:	f7fb ff34 	bl	8003108 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <EXTI_ClearFlag+0x30>)
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	615a      	str	r2, [r3, #20]
}
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	08009324 	.word	0x08009324
 80072b0:	40013c00 	.word	0x40013c00

080072b4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d055      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d052      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d04f      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d04c      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d049      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d046      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d043      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b80      	cmp	r3, #128	; 0x80
 80072f2:	d040      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fa:	d03c      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007302:	d038      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730a:	d034      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007312:	d030      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731a:	d02c      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007322:	d028      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800732a:	d024      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d020      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733a:	d01c      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007342:	d018      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800734a:	d014      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007352:	d010      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735a:	d00c      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007362:	d008      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800736a:	d004      	beq.n	8007376 <EXTI_GetITStatus+0xc2>
 800736c:	480e      	ldr	r0, [pc, #56]	; (80073a8 <EXTI_GetITStatus+0xf4>)
 800736e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007372:	f7fb fec9 	bl	8003108 <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8007376:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <EXTI_GetITStatus+0xf8>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4013      	ands	r3, r2
 800737e:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <EXTI_GetITStatus+0xf8>)
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <EXTI_GetITStatus+0xe4>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]
 8007396:	e001      	b.n	800739c <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	08009324 	.word	0x08009324
 80073ac:	40013c00 	.word	0x40013c00

080073b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	2300      	movs	r3, #0
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4b7a      	ldr	r3, [pc, #488]	; (80075b4 <GPIO_Init+0x204>)
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d023      	beq.n	8007416 <GPIO_Init+0x66>
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	4b79      	ldr	r3, [pc, #484]	; (80075b8 <GPIO_Init+0x208>)
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d01f      	beq.n	8007416 <GPIO_Init+0x66>
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	4b78      	ldr	r3, [pc, #480]	; (80075bc <GPIO_Init+0x20c>)
 80073da:	429a      	cmp	r2, r3
 80073dc:	d01b      	beq.n	8007416 <GPIO_Init+0x66>
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	4b77      	ldr	r3, [pc, #476]	; (80075c0 <GPIO_Init+0x210>)
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d017      	beq.n	8007416 <GPIO_Init+0x66>
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	4b76      	ldr	r3, [pc, #472]	; (80075c4 <GPIO_Init+0x214>)
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d013      	beq.n	8007416 <GPIO_Init+0x66>
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4b75      	ldr	r3, [pc, #468]	; (80075c8 <GPIO_Init+0x218>)
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d00f      	beq.n	8007416 <GPIO_Init+0x66>
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	4b74      	ldr	r3, [pc, #464]	; (80075cc <GPIO_Init+0x21c>)
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d00b      	beq.n	8007416 <GPIO_Init+0x66>
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	4b73      	ldr	r3, [pc, #460]	; (80075d0 <GPIO_Init+0x220>)
 8007402:	429a      	cmp	r2, r3
 8007404:	d007      	beq.n	8007416 <GPIO_Init+0x66>
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4b72      	ldr	r3, [pc, #456]	; (80075d4 <GPIO_Init+0x224>)
 800740a:	429a      	cmp	r2, r3
 800740c:	d003      	beq.n	8007416 <GPIO_Init+0x66>
 800740e:	4872      	ldr	r0, [pc, #456]	; (80075d8 <GPIO_Init+0x228>)
 8007410:	21bb      	movs	r1, #187	; 0xbb
 8007412:	f7fb fe79 	bl	8003108 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <GPIO_Init+0x76>
 800741e:	486e      	ldr	r0, [pc, #440]	; (80075d8 <GPIO_Init+0x228>)
 8007420:	21bc      	movs	r1, #188	; 0xbc
 8007422:	f7fb fe71 	bl	8003108 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	791b      	ldrb	r3, [r3, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00f      	beq.n	800744e <GPIO_Init+0x9e>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d00b      	beq.n	800744e <GPIO_Init+0x9e>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	791b      	ldrb	r3, [r3, #4]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d007      	beq.n	800744e <GPIO_Init+0x9e>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	791b      	ldrb	r3, [r3, #4]
 8007442:	2b03      	cmp	r3, #3
 8007444:	d003      	beq.n	800744e <GPIO_Init+0x9e>
 8007446:	4864      	ldr	r0, [pc, #400]	; (80075d8 <GPIO_Init+0x228>)
 8007448:	21bd      	movs	r1, #189	; 0xbd
 800744a:	f7fb fe5d 	bl	8003108 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	79db      	ldrb	r3, [r3, #7]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <GPIO_Init+0xbe>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	79db      	ldrb	r3, [r3, #7]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d007      	beq.n	800746e <GPIO_Init+0xbe>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	79db      	ldrb	r3, [r3, #7]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d003      	beq.n	800746e <GPIO_Init+0xbe>
 8007466:	485c      	ldr	r0, [pc, #368]	; (80075d8 <GPIO_Init+0x228>)
 8007468:	21be      	movs	r1, #190	; 0xbe
 800746a:	f7fb fe4d 	bl	8003108 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e097      	b.n	80075a4 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2201      	movs	r2, #1
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	4013      	ands	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	429a      	cmp	r2, r3
 800748e:	f040 8086 	bne.w	800759e <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	2103      	movs	r1, #3
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	791b      	ldrb	r3, [r3, #4]
 80074b0:	4619      	mov	r1, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	791b      	ldrb	r3, [r3, #4]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d003      	beq.n	80074d0 <GPIO_Init+0x120>
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	791b      	ldrb	r3, [r3, #4]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d14e      	bne.n	800756e <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	795b      	ldrb	r3, [r3, #5]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00f      	beq.n	80074f8 <GPIO_Init+0x148>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	795b      	ldrb	r3, [r3, #5]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d00b      	beq.n	80074f8 <GPIO_Init+0x148>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	795b      	ldrb	r3, [r3, #5]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d007      	beq.n	80074f8 <GPIO_Init+0x148>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	795b      	ldrb	r3, [r3, #5]
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d003      	beq.n	80074f8 <GPIO_Init+0x148>
 80074f0:	4839      	ldr	r0, [pc, #228]	; (80075d8 <GPIO_Init+0x228>)
 80074f2:	21d0      	movs	r1, #208	; 0xd0
 80074f4:	f7fb fe08 	bl	8003108 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	2103      	movs	r1, #3
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	43db      	mvns	r3, r3
 8007508:	401a      	ands	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	795b      	ldrb	r3, [r3, #5]
 8007516:	4619      	mov	r1, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	fa01 f303 	lsl.w	r3, r1, r3
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	799b      	ldrb	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d007      	beq.n	800753e <GPIO_Init+0x18e>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	799b      	ldrb	r3, [r3, #6]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d003      	beq.n	800753e <GPIO_Init+0x18e>
 8007536:	4828      	ldr	r0, [pc, #160]	; (80075d8 <GPIO_Init+0x228>)
 8007538:	21d7      	movs	r1, #215	; 0xd7
 800753a:	f7fb fde5 	bl	8003108 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	b29b      	uxth	r3, r3
 8007546:	2101      	movs	r1, #1
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	401a      	ands	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	799b      	ldrb	r3, [r3, #6]
 800755c:	4619      	mov	r1, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	b29b      	uxth	r3, r3
 8007562:	fa01 f303 	lsl.w	r3, r1, r3
 8007566:	b29b      	uxth	r3, r3
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	b29b      	uxth	r3, r3
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	2103      	movs	r1, #3
 800757a:	fa01 f303 	lsl.w	r3, r1, r3
 800757e:	43db      	mvns	r3, r3
 8007580:	401a      	ands	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	79db      	ldrb	r3, [r3, #7]
 800758e:	4619      	mov	r1, r3
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	fa01 f303 	lsl.w	r3, r1, r3
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	3301      	adds	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2b0f      	cmp	r3, #15
 80075a8:	f67f af64 	bls.w	8007474 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40020000 	.word	0x40020000
 80075b8:	40020400 	.word	0x40020400
 80075bc:	40020800 	.word	0x40020800
 80075c0:	40020c00 	.word	0x40020c00
 80075c4:	40021000 	.word	0x40021000
 80075c8:	40021400 	.word	0x40021400
 80075cc:	40021800 	.word	0x40021800
 80075d0:	40021c00 	.word	0x40021c00
 80075d4:	40022000 	.word	0x40022000
 80075d8:	08009374 	.word	0x08009374

080075dc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	460a      	mov	r2, r1
 80075e8:	807a      	strh	r2, [r7, #2]
 80075ea:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4b83      	ldr	r3, [pc, #524]	; (8007804 <GPIO_PinAFConfig+0x228>)
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d024      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4b82      	ldr	r3, [pc, #520]	; (8007808 <GPIO_PinAFConfig+0x22c>)
 8007600:	429a      	cmp	r2, r3
 8007602:	d020      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4b81      	ldr	r3, [pc, #516]	; (800780c <GPIO_PinAFConfig+0x230>)
 8007608:	429a      	cmp	r2, r3
 800760a:	d01c      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4b80      	ldr	r3, [pc, #512]	; (8007810 <GPIO_PinAFConfig+0x234>)
 8007610:	429a      	cmp	r2, r3
 8007612:	d018      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4b7f      	ldr	r3, [pc, #508]	; (8007814 <GPIO_PinAFConfig+0x238>)
 8007618:	429a      	cmp	r2, r3
 800761a:	d014      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	4b7e      	ldr	r3, [pc, #504]	; (8007818 <GPIO_PinAFConfig+0x23c>)
 8007620:	429a      	cmp	r2, r3
 8007622:	d010      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	4b7d      	ldr	r3, [pc, #500]	; (800781c <GPIO_PinAFConfig+0x240>)
 8007628:	429a      	cmp	r2, r3
 800762a:	d00c      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	4b7c      	ldr	r3, [pc, #496]	; (8007820 <GPIO_PinAFConfig+0x244>)
 8007630:	429a      	cmp	r2, r3
 8007632:	d008      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	4b7b      	ldr	r3, [pc, #492]	; (8007824 <GPIO_PinAFConfig+0x248>)
 8007638:	429a      	cmp	r2, r3
 800763a:	d004      	beq.n	8007646 <GPIO_PinAFConfig+0x6a>
 800763c:	487a      	ldr	r0, [pc, #488]	; (8007828 <GPIO_PinAFConfig+0x24c>)
 800763e:	f240 2117 	movw	r1, #535	; 0x217
 8007642:	f7fb fd61 	bl	8003108 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8007646:	887b      	ldrh	r3, [r7, #2]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d031      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d02e      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007652:	887b      	ldrh	r3, [r7, #2]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d02b      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007658:	887b      	ldrh	r3, [r7, #2]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d028      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 800765e:	887b      	ldrh	r3, [r7, #2]
 8007660:	2b04      	cmp	r3, #4
 8007662:	d025      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007664:	887b      	ldrh	r3, [r7, #2]
 8007666:	2b05      	cmp	r3, #5
 8007668:	d022      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 800766a:	887b      	ldrh	r3, [r7, #2]
 800766c:	2b06      	cmp	r3, #6
 800766e:	d01f      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007670:	887b      	ldrh	r3, [r7, #2]
 8007672:	2b07      	cmp	r3, #7
 8007674:	d01c      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007676:	887b      	ldrh	r3, [r7, #2]
 8007678:	2b08      	cmp	r3, #8
 800767a:	d019      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 800767c:	887b      	ldrh	r3, [r7, #2]
 800767e:	2b09      	cmp	r3, #9
 8007680:	d016      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007682:	887b      	ldrh	r3, [r7, #2]
 8007684:	2b0a      	cmp	r3, #10
 8007686:	d013      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007688:	887b      	ldrh	r3, [r7, #2]
 800768a:	2b0b      	cmp	r3, #11
 800768c:	d010      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 800768e:	887b      	ldrh	r3, [r7, #2]
 8007690:	2b0c      	cmp	r3, #12
 8007692:	d00d      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 8007694:	887b      	ldrh	r3, [r7, #2]
 8007696:	2b0d      	cmp	r3, #13
 8007698:	d00a      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 800769a:	887b      	ldrh	r3, [r7, #2]
 800769c:	2b0e      	cmp	r3, #14
 800769e:	d007      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 80076a0:	887b      	ldrh	r3, [r7, #2]
 80076a2:	2b0f      	cmp	r3, #15
 80076a4:	d004      	beq.n	80076b0 <GPIO_PinAFConfig+0xd4>
 80076a6:	4860      	ldr	r0, [pc, #384]	; (8007828 <GPIO_PinAFConfig+0x24c>)
 80076a8:	f44f 7106 	mov.w	r1, #536	; 0x218
 80076ac:	f7fb fd2c 	bl	8003108 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 80076b0:	787b      	ldrb	r3, [r7, #1]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d06d      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076b6:	787b      	ldrb	r3, [r7, #1]
 80076b8:	2b09      	cmp	r3, #9
 80076ba:	d06a      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076bc:	787b      	ldrb	r3, [r7, #1]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d067      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076c2:	787b      	ldrb	r3, [r7, #1]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d064      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076c8:	787b      	ldrb	r3, [r7, #1]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d061      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076ce:	787b      	ldrb	r3, [r7, #1]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d05e      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076d4:	787b      	ldrb	r3, [r7, #1]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d05b      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076da:	787b      	ldrb	r3, [r7, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d058      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076e0:	787b      	ldrb	r3, [r7, #1]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d055      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076e6:	787b      	ldrb	r3, [r7, #1]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d052      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076ec:	787b      	ldrb	r3, [r7, #1]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d04f      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076f2:	787b      	ldrb	r3, [r7, #1]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d04c      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076f8:	787b      	ldrb	r3, [r7, #1]
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d049      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 80076fe:	787b      	ldrb	r3, [r7, #1]
 8007700:	2b04      	cmp	r3, #4
 8007702:	d046      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007704:	787b      	ldrb	r3, [r7, #1]
 8007706:	2b04      	cmp	r3, #4
 8007708:	d043      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800770a:	787b      	ldrb	r3, [r7, #1]
 800770c:	2b05      	cmp	r3, #5
 800770e:	d040      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007710:	787b      	ldrb	r3, [r7, #1]
 8007712:	2b05      	cmp	r3, #5
 8007714:	d03d      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007716:	787b      	ldrb	r3, [r7, #1]
 8007718:	2b09      	cmp	r3, #9
 800771a:	d03a      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800771c:	787b      	ldrb	r3, [r7, #1]
 800771e:	2b06      	cmp	r3, #6
 8007720:	d037      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007722:	787b      	ldrb	r3, [r7, #1]
 8007724:	2b09      	cmp	r3, #9
 8007726:	d034      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007728:	787b      	ldrb	r3, [r7, #1]
 800772a:	2b07      	cmp	r3, #7
 800772c:	d031      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800772e:	787b      	ldrb	r3, [r7, #1]
 8007730:	2b07      	cmp	r3, #7
 8007732:	d02e      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007734:	787b      	ldrb	r3, [r7, #1]
 8007736:	2b07      	cmp	r3, #7
 8007738:	d02b      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800773a:	787b      	ldrb	r3, [r7, #1]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d028      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007740:	787b      	ldrb	r3, [r7, #1]
 8007742:	2b08      	cmp	r3, #8
 8007744:	d025      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007746:	787b      	ldrb	r3, [r7, #1]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d022      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800774c:	787b      	ldrb	r3, [r7, #1]
 800774e:	2b09      	cmp	r3, #9
 8007750:	d01f      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007752:	787b      	ldrb	r3, [r7, #1]
 8007754:	2b09      	cmp	r3, #9
 8007756:	d01c      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007758:	787b      	ldrb	r3, [r7, #1]
 800775a:	2b0a      	cmp	r3, #10
 800775c:	d019      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800775e:	787b      	ldrb	r3, [r7, #1]
 8007760:	2b0a      	cmp	r3, #10
 8007762:	d016      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007764:	787b      	ldrb	r3, [r7, #1]
 8007766:	2b0b      	cmp	r3, #11
 8007768:	d013      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800776a:	787b      	ldrb	r3, [r7, #1]
 800776c:	2b0c      	cmp	r3, #12
 800776e:	d010      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007770:	787b      	ldrb	r3, [r7, #1]
 8007772:	2b0c      	cmp	r3, #12
 8007774:	d00d      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007776:	787b      	ldrb	r3, [r7, #1]
 8007778:	2b0c      	cmp	r3, #12
 800777a:	d00a      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 800777c:	787b      	ldrb	r3, [r7, #1]
 800777e:	2b0d      	cmp	r3, #13
 8007780:	d007      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007782:	787b      	ldrb	r3, [r7, #1]
 8007784:	2b0f      	cmp	r3, #15
 8007786:	d004      	beq.n	8007792 <GPIO_PinAFConfig+0x1b6>
 8007788:	4827      	ldr	r0, [pc, #156]	; (8007828 <GPIO_PinAFConfig+0x24c>)
 800778a:	f240 2119 	movw	r1, #537	; 0x219
 800778e:	f7fb fcbb 	bl	8003108 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007792:	787a      	ldrb	r2, [r7, #1]
 8007794:	887b      	ldrh	r3, [r7, #2]
 8007796:	f003 0307 	and.w	r3, r3, #7
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80077a2:	887b      	ldrh	r3, [r7, #2]
 80077a4:	08db      	lsrs	r3, r3, #3
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	887b      	ldrh	r3, [r7, #2]
 80077ac:	08db      	lsrs	r3, r3, #3
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4619      	mov	r1, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3108      	adds	r1, #8
 80077b6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80077ba:	887b      	ldrh	r3, [r7, #2]
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	200f      	movs	r0, #15
 80077c4:	fa00 f303 	lsl.w	r3, r0, r3
 80077c8:	43db      	mvns	r3, r3
 80077ca:	4019      	ands	r1, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3208      	adds	r2, #8
 80077d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80077d4:	887b      	ldrh	r3, [r7, #2]
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	b29b      	uxth	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3208      	adds	r2, #8
 80077e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	08db      	lsrs	r3, r3, #3
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3208      	adds	r2, #8
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40020000 	.word	0x40020000
 8007808:	40020400 	.word	0x40020400
 800780c:	40020800 	.word	0x40020800
 8007810:	40020c00 	.word	0x40020c00
 8007814:	40021000 	.word	0x40021000
 8007818:	40021400 	.word	0x40021400
 800781c:	40021800 	.word	0x40021800
 8007820:	40021c00 	.word	0x40021c00
 8007824:	40022000 	.word	0x40022000
 8007828:	08009374 	.word	0x08009374

0800782c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800782c:	b480      	push	{r7}
 800782e:	b089      	sub	sp, #36	; 0x24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8007834:	2300      	movs	r3, #0
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	2300      	movs	r3, #0
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	2302      	movs	r3, #2
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	2302      	movs	r3, #2
 800784a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800784c:	4b48      	ldr	r3, [pc, #288]	; (8007970 <RCC_GetClocksFreq+0x144>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 030c 	and.w	r3, r3, #12
 8007854:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2b04      	cmp	r3, #4
 800785a:	d007      	beq.n	800786c <RCC_GetClocksFreq+0x40>
 800785c:	2b08      	cmp	r3, #8
 800785e:	d009      	beq.n	8007874 <RCC_GetClocksFreq+0x48>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d13f      	bne.n	80078e4 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a43      	ldr	r2, [pc, #268]	; (8007974 <RCC_GetClocksFreq+0x148>)
 8007868:	601a      	str	r2, [r3, #0]
      break;
 800786a:	e03f      	b.n	80078ec <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a42      	ldr	r2, [pc, #264]	; (8007978 <RCC_GetClocksFreq+0x14c>)
 8007870:	601a      	str	r2, [r3, #0]
      break;
 8007872:	e03b      	b.n	80078ec <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8007874:	4b3e      	ldr	r3, [pc, #248]	; (8007970 <RCC_GetClocksFreq+0x144>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787c:	0d9b      	lsrs	r3, r3, #22
 800787e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007880:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <RCC_GetClocksFreq+0x144>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007888:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00d      	beq.n	80078ac <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007890:	4a39      	ldr	r2, [pc, #228]	; (8007978 <RCC_GetClocksFreq+0x14c>)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	fbb2 f2f3 	udiv	r2, r2, r3
 8007898:	4b35      	ldr	r3, [pc, #212]	; (8007970 <RCC_GetClocksFreq+0x144>)
 800789a:	6859      	ldr	r1, [r3, #4]
 800789c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078a0:	400b      	ands	r3, r1
 80078a2:	099b      	lsrs	r3, r3, #6
 80078a4:	fb03 f302 	mul.w	r3, r3, r2
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	e00c      	b.n	80078c6 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80078ac:	4a31      	ldr	r2, [pc, #196]	; (8007974 <RCC_GetClocksFreq+0x148>)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078b4:	4b2e      	ldr	r3, [pc, #184]	; (8007970 <RCC_GetClocksFreq+0x144>)
 80078b6:	6859      	ldr	r1, [r3, #4]
 80078b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078bc:	400b      	ands	r3, r1
 80078be:	099b      	lsrs	r3, r3, #6
 80078c0:	fb03 f302 	mul.w	r3, r3, r2
 80078c4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80078c6:	4b2a      	ldr	r3, [pc, #168]	; (8007970 <RCC_GetClocksFreq+0x144>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078ce:	0c1b      	lsrs	r3, r3, #16
 80078d0:	3301      	adds	r3, #1
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80078d6:	69fa      	ldr	r2, [r7, #28]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	fbb2 f2f3 	udiv	r2, r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
      break;
 80078e2:	e003      	b.n	80078ec <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a23      	ldr	r2, [pc, #140]	; (8007974 <RCC_GetClocksFreq+0x148>)
 80078e8:	601a      	str	r2, [r3, #0]
      break;
 80078ea:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80078ec:	4b20      	ldr	r3, [pc, #128]	; (8007970 <RCC_GetClocksFreq+0x144>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	091b      	lsrs	r3, r3, #4
 80078fa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80078fc:	4a1f      	ldr	r2, [pc, #124]	; (800797c <RCC_GetClocksFreq+0x150>)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	4413      	add	r3, r2
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	40da      	lsrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8007914:	4b16      	ldr	r3, [pc, #88]	; (8007970 <RCC_GetClocksFreq+0x144>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800791c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	0a9b      	lsrs	r3, r3, #10
 8007922:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8007924:	4a15      	ldr	r2, [pc, #84]	; (800797c <RCC_GetClocksFreq+0x150>)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	4413      	add	r3, r2
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	40da      	lsrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800793c:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <RCC_GetClocksFreq+0x144>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007944:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	0b5b      	lsrs	r3, r3, #13
 800794a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800794c:	4a0b      	ldr	r2, [pc, #44]	; (800797c <RCC_GetClocksFreq+0x150>)
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	4413      	add	r3, r2
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	40da      	lsrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]
}
 8007964:	3724      	adds	r7, #36	; 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800
 8007974:	00f42400 	.word	0x00f42400
 8007978:	017d7840 	.word	0x017d7840
 800797c:	20000030 	.word	0x20000030

08007980 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <RCC_AHB1PeriphClockCmd+0x64>)
 8007990:	4013      	ands	r3, r2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d102      	bne.n	800799c <RCC_AHB1PeriphClockCmd+0x1c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <RCC_AHB1PeriphClockCmd+0x26>
 800799c:	4812      	ldr	r0, [pc, #72]	; (80079e8 <RCC_AHB1PeriphClockCmd+0x68>)
 800799e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80079a2:	f7fb fbb1 	bl	8003108 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <RCC_AHB1PeriphClockCmd+0x3c>
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d004      	beq.n	80079bc <RCC_AHB1PeriphClockCmd+0x3c>
 80079b2:	480d      	ldr	r0, [pc, #52]	; (80079e8 <RCC_AHB1PeriphClockCmd+0x68>)
 80079b4:	f240 4142 	movw	r1, #1090	; 0x442
 80079b8:	f7fb fba6 	bl	8003108 <assert_failed>
  if (NewState != DISABLE)
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80079c2:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <RCC_AHB1PeriphClockCmd+0x6c>)
 80079c4:	4a09      	ldr	r2, [pc, #36]	; (80079ec <RCC_AHB1PeriphClockCmd+0x6c>)
 80079c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
 80079ce:	e006      	b.n	80079de <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80079d0:	4b06      	ldr	r3, [pc, #24]	; (80079ec <RCC_AHB1PeriphClockCmd+0x6c>)
 80079d2:	4a06      	ldr	r2, [pc, #24]	; (80079ec <RCC_AHB1PeriphClockCmd+0x6c>)
 80079d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	43d2      	mvns	r2, r2
 80079da:	400a      	ands	r2, r1
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	818bee00 	.word	0x818bee00
 80079e8:	080093c4 	.word	0x080093c4
 80079ec:	40023800 	.word	0x40023800

080079f0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <RCC_APB2PeriphClockCmd+0x64>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d102      	bne.n	8007a0c <RCC_APB2PeriphClockCmd+0x1c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <RCC_APB2PeriphClockCmd+0x26>
 8007a0c:	4812      	ldr	r0, [pc, #72]	; (8007a58 <RCC_APB2PeriphClockCmd+0x68>)
 8007a0e:	f240 41d5 	movw	r1, #1237	; 0x4d5
 8007a12:	f7fb fb79 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <RCC_APB2PeriphClockCmd+0x3c>
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d004      	beq.n	8007a2c <RCC_APB2PeriphClockCmd+0x3c>
 8007a22:	480d      	ldr	r0, [pc, #52]	; (8007a58 <RCC_APB2PeriphClockCmd+0x68>)
 8007a24:	f240 41d6 	movw	r1, #1238	; 0x4d6
 8007a28:	f7fb fb6e 	bl	8003108 <assert_failed>

  if (NewState != DISABLE)
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d006      	beq.n	8007a40 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8007a32:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <RCC_APB2PeriphClockCmd+0x6c>)
 8007a34:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <RCC_APB2PeriphClockCmd+0x6c>)
 8007a36:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
 8007a3e:	e006      	b.n	8007a4e <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8007a40:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <RCC_APB2PeriphClockCmd+0x6c>)
 8007a42:	4a06      	ldr	r2, [pc, #24]	; (8007a5c <RCC_APB2PeriphClockCmd+0x6c>)
 8007a44:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	43d2      	mvns	r2, r2
 8007a4a:	400a      	ands	r2, r1
 8007a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	fff8a0cc 	.word	0xfff8a0cc
 8007a58:	080093c4 	.word	0x080093c4
 8007a5c:	40023800 	.word	0x40023800

08007a60 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4b70      	ldr	r3, [pc, #448]	; (8007c34 <SPI_Init+0x1d4>)
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d00c      	beq.n	8007a90 <SPI_Init+0x30>
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4b6f      	ldr	r3, [pc, #444]	; (8007c38 <SPI_Init+0x1d8>)
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d008      	beq.n	8007a90 <SPI_Init+0x30>
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	4b6e      	ldr	r3, [pc, #440]	; (8007c3c <SPI_Init+0x1dc>)
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d004      	beq.n	8007a90 <SPI_Init+0x30>
 8007a86:	486e      	ldr	r0, [pc, #440]	; (8007c40 <SPI_Init+0x1e0>)
 8007a88:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007a8c:	f7fb fb3c 	bl	8003108 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d013      	beq.n	8007ac0 <SPI_Init+0x60>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa0:	d00e      	beq.n	8007ac0 <SPI_Init+0x60>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aaa:	d009      	beq.n	8007ac0 <SPI_Init+0x60>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ab4:	d004      	beq.n	8007ac0 <SPI_Init+0x60>
 8007ab6:	4862      	ldr	r0, [pc, #392]	; (8007c40 <SPI_Init+0x1e0>)
 8007ab8:	f240 1109 	movw	r1, #265	; 0x109
 8007abc:	f7fb fb24 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	885b      	ldrh	r3, [r3, #2]
 8007ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac8:	d008      	beq.n	8007adc <SPI_Init+0x7c>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	885b      	ldrh	r3, [r3, #2]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <SPI_Init+0x7c>
 8007ad2:	485b      	ldr	r0, [pc, #364]	; (8007c40 <SPI_Init+0x1e0>)
 8007ad4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007ad8:	f7fb fb16 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	889b      	ldrh	r3, [r3, #4]
 8007ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae4:	d008      	beq.n	8007af8 <SPI_Init+0x98>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <SPI_Init+0x98>
 8007aee:	4854      	ldr	r0, [pc, #336]	; (8007c40 <SPI_Init+0x1e0>)
 8007af0:	f240 110b 	movw	r1, #267	; 0x10b
 8007af4:	f7fb fb08 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	88db      	ldrh	r3, [r3, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <SPI_Init+0xb2>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	88db      	ldrh	r3, [r3, #6]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d004      	beq.n	8007b12 <SPI_Init+0xb2>
 8007b08:	484d      	ldr	r0, [pc, #308]	; (8007c40 <SPI_Init+0x1e0>)
 8007b0a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8007b0e:	f7fb fafb 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	891b      	ldrh	r3, [r3, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d008      	beq.n	8007b2c <SPI_Init+0xcc>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	891b      	ldrh	r3, [r3, #8]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d004      	beq.n	8007b2c <SPI_Init+0xcc>
 8007b22:	4847      	ldr	r0, [pc, #284]	; (8007c40 <SPI_Init+0x1e0>)
 8007b24:	f240 110d 	movw	r1, #269	; 0x10d
 8007b28:	f7fb faee 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	895b      	ldrh	r3, [r3, #10]
 8007b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b34:	d008      	beq.n	8007b48 <SPI_Init+0xe8>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	895b      	ldrh	r3, [r3, #10]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <SPI_Init+0xe8>
 8007b3e:	4840      	ldr	r0, [pc, #256]	; (8007c40 <SPI_Init+0x1e0>)
 8007b40:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8007b44:	f7fb fae0 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	899b      	ldrh	r3, [r3, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d020      	beq.n	8007b92 <SPI_Init+0x132>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	899b      	ldrh	r3, [r3, #12]
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d01c      	beq.n	8007b92 <SPI_Init+0x132>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	899b      	ldrh	r3, [r3, #12]
 8007b5c:	2b10      	cmp	r3, #16
 8007b5e:	d018      	beq.n	8007b92 <SPI_Init+0x132>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	899b      	ldrh	r3, [r3, #12]
 8007b64:	2b18      	cmp	r3, #24
 8007b66:	d014      	beq.n	8007b92 <SPI_Init+0x132>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	899b      	ldrh	r3, [r3, #12]
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d010      	beq.n	8007b92 <SPI_Init+0x132>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	899b      	ldrh	r3, [r3, #12]
 8007b74:	2b28      	cmp	r3, #40	; 0x28
 8007b76:	d00c      	beq.n	8007b92 <SPI_Init+0x132>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	899b      	ldrh	r3, [r3, #12]
 8007b7c:	2b30      	cmp	r3, #48	; 0x30
 8007b7e:	d008      	beq.n	8007b92 <SPI_Init+0x132>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	899b      	ldrh	r3, [r3, #12]
 8007b84:	2b38      	cmp	r3, #56	; 0x38
 8007b86:	d004      	beq.n	8007b92 <SPI_Init+0x132>
 8007b88:	482d      	ldr	r0, [pc, #180]	; (8007c40 <SPI_Init+0x1e0>)
 8007b8a:	f240 110f 	movw	r1, #271	; 0x10f
 8007b8e:	f7fb fabb 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	89db      	ldrh	r3, [r3, #14]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <SPI_Init+0x14c>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	89db      	ldrh	r3, [r3, #14]
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	d004      	beq.n	8007bac <SPI_Init+0x14c>
 8007ba2:	4827      	ldr	r0, [pc, #156]	; (8007c40 <SPI_Init+0x1e0>)
 8007ba4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007ba8:	f7fb faae 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	8a1b      	ldrh	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <SPI_Init+0x15e>
 8007bb4:	4822      	ldr	r0, [pc, #136]	; (8007c40 <SPI_Init+0x1e0>)
 8007bb6:	f240 1111 	movw	r1, #273	; 0x111
 8007bba:	f7fb faa5 	bl	8003108 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8007bc4:	89fb      	ldrh	r3, [r7, #14]
 8007bc6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8007bca:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	881a      	ldrh	r2, [r3, #0]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	885b      	ldrh	r3, [r3, #2]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007be4:	4313      	orrs	r3, r2
 8007be6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007bec:	4313      	orrs	r3, r2
 8007bee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	89fb      	ldrh	r3, [r7, #14]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	89fa      	ldrh	r2, [r7, #14]
 8007c12:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8b9b      	ldrh	r3, [r3, #28]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	8a1a      	ldrh	r2, [r3, #16]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	821a      	strh	r2, [r3, #16]
}
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40013000 	.word	0x40013000
 8007c38:	40003800 	.word	0x40003800
 8007c3c:	40003c00 	.word	0x40003c00
 8007c40:	08009414 	.word	0x08009414

08007c44 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4b19      	ldr	r3, [pc, #100]	; (8007cb8 <SPI_Cmd+0x74>)
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d00c      	beq.n	8007c72 <SPI_Cmd+0x2e>
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	4b18      	ldr	r3, [pc, #96]	; (8007cbc <SPI_Cmd+0x78>)
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d008      	beq.n	8007c72 <SPI_Cmd+0x2e>
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <SPI_Cmd+0x7c>)
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d004      	beq.n	8007c72 <SPI_Cmd+0x2e>
 8007c68:	4816      	ldr	r0, [pc, #88]	; (8007cc4 <SPI_Cmd+0x80>)
 8007c6a:	f240 2101 	movw	r1, #513	; 0x201
 8007c6e:	f7fb fa4b 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <SPI_Cmd+0x44>
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d004      	beq.n	8007c88 <SPI_Cmd+0x44>
 8007c7e:	4811      	ldr	r0, [pc, #68]	; (8007cc4 <SPI_Cmd+0x80>)
 8007c80:	f240 2102 	movw	r1, #514	; 0x202
 8007c84:	f7fb fa40 	bl	8003108 <assert_failed>
  if (NewState != DISABLE)
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	801a      	strh	r2, [r3, #0]
 8007c9e:	e007      	b.n	8007cb0 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	801a      	strh	r2, [r3, #0]
  }
}
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40013000 	.word	0x40013000
 8007cbc:	40003800 	.word	0x40003800
 8007cc0:	40003c00 	.word	0x40003c00
 8007cc4:	08009414 	.word	0x08009414

08007cc8 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	460a      	mov	r2, r1
 8007cd4:	807a      	strh	r2, [r7, #2]
 8007cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	4b25      	ldr	r3, [pc, #148]	; (8007d70 <SPI_I2S_DMACmd+0xa8>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d014      	beq.n	8007d0a <SPI_I2S_DMACmd+0x42>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4b24      	ldr	r3, [pc, #144]	; (8007d74 <SPI_I2S_DMACmd+0xac>)
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d010      	beq.n	8007d0a <SPI_I2S_DMACmd+0x42>
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4b23      	ldr	r3, [pc, #140]	; (8007d78 <SPI_I2S_DMACmd+0xb0>)
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d00c      	beq.n	8007d0a <SPI_I2S_DMACmd+0x42>
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4b22      	ldr	r3, [pc, #136]	; (8007d7c <SPI_I2S_DMACmd+0xb4>)
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d008      	beq.n	8007d0a <SPI_I2S_DMACmd+0x42>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8007cfe:	d004      	beq.n	8007d0a <SPI_I2S_DMACmd+0x42>
 8007d00:	481f      	ldr	r0, [pc, #124]	; (8007d80 <SPI_I2S_DMACmd+0xb8>)
 8007d02:	f240 31d9 	movw	r1, #985	; 0x3d9
 8007d06:	f7fb f9ff 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007d0a:	787b      	ldrb	r3, [r7, #1]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <SPI_I2S_DMACmd+0x58>
 8007d10:	787b      	ldrb	r3, [r7, #1]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d004      	beq.n	8007d20 <SPI_I2S_DMACmd+0x58>
 8007d16:	481a      	ldr	r0, [pc, #104]	; (8007d80 <SPI_I2S_DMACmd+0xb8>)
 8007d18:	f240 31da 	movw	r1, #986	; 0x3da
 8007d1c:	f7fb f9f4 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007d26:	4013      	ands	r3, r2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <SPI_I2S_DMACmd+0x6a>
 8007d2c:	887b      	ldrh	r3, [r7, #2]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <SPI_I2S_DMACmd+0x74>
 8007d32:	4813      	ldr	r0, [pc, #76]	; (8007d80 <SPI_I2S_DMACmd+0xb8>)
 8007d34:	f240 31db 	movw	r1, #987	; 0x3db
 8007d38:	f7fb f9e6 	bl	8003108 <assert_failed>

  if (NewState != DISABLE)
 8007d3c:	787b      	ldrb	r3, [r7, #1]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	889b      	ldrh	r3, [r3, #4]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	887b      	ldrh	r3, [r7, #2]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	809a      	strh	r2, [r3, #4]
 8007d52:	e009      	b.n	8007d68 <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	889b      	ldrh	r3, [r3, #4]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	887b      	ldrh	r3, [r7, #2]
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4013      	ands	r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	809a      	strh	r2, [r3, #4]
  }
}
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	40013000 	.word	0x40013000
 8007d74:	40003800 	.word	0x40003800
 8007d78:	40003c00 	.word	0x40003c00
 8007d7c:	40003400 	.word	0x40003400
 8007d80:	08009414 	.word	0x08009414

08007d84 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4b25      	ldr	r3, [pc, #148]	; (8007e2c <SPI_I2S_GetFlagStatus+0xa8>)
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d014      	beq.n	8007dc6 <SPI_I2S_GetFlagStatus+0x42>
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4b24      	ldr	r3, [pc, #144]	; (8007e30 <SPI_I2S_GetFlagStatus+0xac>)
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d010      	beq.n	8007dc6 <SPI_I2S_GetFlagStatus+0x42>
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	4b23      	ldr	r3, [pc, #140]	; (8007e34 <SPI_I2S_GetFlagStatus+0xb0>)
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d00c      	beq.n	8007dc6 <SPI_I2S_GetFlagStatus+0x42>
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <SPI_I2S_GetFlagStatus+0xb4>)
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d008      	beq.n	8007dc6 <SPI_I2S_GetFlagStatus+0x42>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8007dba:	d004      	beq.n	8007dc6 <SPI_I2S_GetFlagStatus+0x42>
 8007dbc:	481f      	ldr	r0, [pc, #124]	; (8007e3c <SPI_I2S_GetFlagStatus+0xb8>)
 8007dbe:	f240 4173 	movw	r1, #1139	; 0x473
 8007dc2:	f7fb f9a1 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	2b80      	cmp	r3, #128	; 0x80
 8007dca:	d01d      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007dcc:	887b      	ldrh	r3, [r7, #2]
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d01a      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007dd2:	887b      	ldrh	r3, [r7, #2]
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d017      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007dd8:	887b      	ldrh	r3, [r7, #2]
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d014      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007dde:	887b      	ldrh	r3, [r7, #2]
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d011      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007de4:	887b      	ldrh	r3, [r7, #2]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d00e      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007dea:	887b      	ldrh	r3, [r7, #2]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d00b      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007df0:	887b      	ldrh	r3, [r7, #2]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d008      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007df6:	887b      	ldrh	r3, [r7, #2]
 8007df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfc:	d004      	beq.n	8007e08 <SPI_I2S_GetFlagStatus+0x84>
 8007dfe:	480f      	ldr	r0, [pc, #60]	; (8007e3c <SPI_I2S_GetFlagStatus+0xb8>)
 8007e00:	f240 4174 	movw	r1, #1140	; 0x474
 8007e04:	f7fb f980 	bl	8003108 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	891b      	ldrh	r3, [r3, #8]
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	4013      	ands	r3, r2
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
 8007e1c:	e001      	b.n	8007e22 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40013000 	.word	0x40013000
 8007e30:	40003800 	.word	0x40003800
 8007e34:	40003c00 	.word	0x40003c00
 8007e38:	40003400 	.word	0x40003400
 8007e3c:	08009414 	.word	0x08009414

08007e40 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <SPI_I2S_ClearFlag+0x60>)
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d014      	beq.n	8007e7e <SPI_I2S_ClearFlag+0x3e>
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <SPI_I2S_ClearFlag+0x64>)
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d010      	beq.n	8007e7e <SPI_I2S_ClearFlag+0x3e>
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <SPI_I2S_ClearFlag+0x68>)
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d00c      	beq.n	8007e7e <SPI_I2S_ClearFlag+0x3e>
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	4b11      	ldr	r3, [pc, #68]	; (8007eac <SPI_I2S_ClearFlag+0x6c>)
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d008      	beq.n	8007e7e <SPI_I2S_ClearFlag+0x3e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8007e72:	d004      	beq.n	8007e7e <SPI_I2S_ClearFlag+0x3e>
 8007e74:	480e      	ldr	r0, [pc, #56]	; (8007eb0 <SPI_I2S_ClearFlag+0x70>)
 8007e76:	f240 419b 	movw	r1, #1179	; 0x49b
 8007e7a:	f7fb f945 	bl	8003108 <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 8007e7e:	887b      	ldrh	r3, [r7, #2]
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d004      	beq.n	8007e8e <SPI_I2S_ClearFlag+0x4e>
 8007e84:	480a      	ldr	r0, [pc, #40]	; (8007eb0 <SPI_I2S_ClearFlag+0x70>)
 8007e86:	f240 419c 	movw	r1, #1180	; 0x49c
 8007e8a:	f7fb f93d 	bl	8003108 <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8007e8e:	887b      	ldrh	r3, [r7, #2]
 8007e90:	43db      	mvns	r3, r3
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	811a      	strh	r2, [r3, #8]
}
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40013000 	.word	0x40013000
 8007ea4:	40003800 	.word	0x40003800
 8007ea8:	40003c00 	.word	0x40003c00
 8007eac:	40003400 	.word	0x40003400
 8007eb0:	08009414 	.word	0x08009414

08007eb4 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8007eb4:	b590      	push	{r4, r7, lr}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	71fa      	strb	r2, [r7, #7]
 8007ec0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01b      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d018      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d015      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d012      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d00f      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	d00c      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	2b06      	cmp	r3, #6
 8007eee:	d009      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b07      	cmp	r3, #7
 8007ef4:	d006      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	d003      	beq.n	8007f04 <SYSCFG_EXTILineConfig+0x50>
 8007efc:	4834      	ldr	r0, [pc, #208]	; (8007fd0 <SYSCFG_EXTILineConfig+0x11c>)
 8007efe:	217c      	movs	r1, #124	; 0x7c
 8007f00:	f7fb f902 	bl	8003108 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8007f04:	79bb      	ldrb	r3, [r7, #6]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d030      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f0a:	79bb      	ldrb	r3, [r7, #6]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d02d      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f10:	79bb      	ldrb	r3, [r7, #6]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d02a      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f16:	79bb      	ldrb	r3, [r7, #6]
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d027      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f1c:	79bb      	ldrb	r3, [r7, #6]
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d024      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f22:	79bb      	ldrb	r3, [r7, #6]
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d021      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f28:	79bb      	ldrb	r3, [r7, #6]
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d01e      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f2e:	79bb      	ldrb	r3, [r7, #6]
 8007f30:	2b07      	cmp	r3, #7
 8007f32:	d01b      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f34:	79bb      	ldrb	r3, [r7, #6]
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d018      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f3a:	79bb      	ldrb	r3, [r7, #6]
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	d015      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f40:	79bb      	ldrb	r3, [r7, #6]
 8007f42:	2b0a      	cmp	r3, #10
 8007f44:	d012      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f46:	79bb      	ldrb	r3, [r7, #6]
 8007f48:	2b0b      	cmp	r3, #11
 8007f4a:	d00f      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f4c:	79bb      	ldrb	r3, [r7, #6]
 8007f4e:	2b0c      	cmp	r3, #12
 8007f50:	d00c      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f52:	79bb      	ldrb	r3, [r7, #6]
 8007f54:	2b0d      	cmp	r3, #13
 8007f56:	d009      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f58:	79bb      	ldrb	r3, [r7, #6]
 8007f5a:	2b0e      	cmp	r3, #14
 8007f5c:	d006      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f5e:	79bb      	ldrb	r3, [r7, #6]
 8007f60:	2b0f      	cmp	r3, #15
 8007f62:	d003      	beq.n	8007f6c <SYSCFG_EXTILineConfig+0xb8>
 8007f64:	481a      	ldr	r0, [pc, #104]	; (8007fd0 <SYSCFG_EXTILineConfig+0x11c>)
 8007f66:	217d      	movs	r1, #125	; 0x7d
 8007f68:	f7fb f8ce 	bl	8003108 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8007f6c:	79bb      	ldrb	r3, [r7, #6]
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	220f      	movs	r2, #15
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8007f7c:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <SYSCFG_EXTILineConfig+0x120>)
 8007f7e:	79ba      	ldrb	r2, [r7, #6]
 8007f80:	0892      	lsrs	r2, r2, #2
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	4913      	ldr	r1, [pc, #76]	; (8007fd4 <SYSCFG_EXTILineConfig+0x120>)
 8007f86:	79b8      	ldrb	r0, [r7, #6]
 8007f88:	0880      	lsrs	r0, r0, #2
 8007f8a:	b2c0      	uxtb	r0, r0
 8007f8c:	3002      	adds	r0, #2
 8007f8e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	43c9      	mvns	r1, r1
 8007f96:	4001      	ands	r1, r0
 8007f98:	3202      	adds	r2, #2
 8007f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <SYSCFG_EXTILineConfig+0x120>)
 8007fa0:	79ba      	ldrb	r2, [r7, #6]
 8007fa2:	0892      	lsrs	r2, r2, #2
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	490b      	ldr	r1, [pc, #44]	; (8007fd4 <SYSCFG_EXTILineConfig+0x120>)
 8007fa8:	79b8      	ldrb	r0, [r7, #6]
 8007faa:	0880      	lsrs	r0, r0, #2
 8007fac:	b2c0      	uxtb	r0, r0
 8007fae:	3002      	adds	r0, #2
 8007fb0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007fb4:	79fc      	ldrb	r4, [r7, #7]
 8007fb6:	79b9      	ldrb	r1, [r7, #6]
 8007fb8:	f001 0103 	and.w	r1, r1, #3
 8007fbc:	0089      	lsls	r1, r1, #2
 8007fbe:	fa04 f101 	lsl.w	r1, r4, r1
 8007fc2:	4301      	orrs	r1, r0
 8007fc4:	3202      	adds	r2, #2
 8007fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd90      	pop	{r4, r7, pc}
 8007fd0:	08009464 	.word	0x08009464
 8007fd4:	40013800 	.word	0x40013800

08007fd8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4b97      	ldr	r3, [pc, #604]	; (8008254 <USART_Init+0x27c>)
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d017      	beq.n	800802a <USART_Init+0x52>
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4b96      	ldr	r3, [pc, #600]	; (8008258 <USART_Init+0x280>)
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d013      	beq.n	800802a <USART_Init+0x52>
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	4b95      	ldr	r3, [pc, #596]	; (800825c <USART_Init+0x284>)
 8008006:	429a      	cmp	r2, r3
 8008008:	d00f      	beq.n	800802a <USART_Init+0x52>
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4b94      	ldr	r3, [pc, #592]	; (8008260 <USART_Init+0x288>)
 800800e:	429a      	cmp	r2, r3
 8008010:	d00b      	beq.n	800802a <USART_Init+0x52>
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4b93      	ldr	r3, [pc, #588]	; (8008264 <USART_Init+0x28c>)
 8008016:	429a      	cmp	r2, r3
 8008018:	d007      	beq.n	800802a <USART_Init+0x52>
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4b92      	ldr	r3, [pc, #584]	; (8008268 <USART_Init+0x290>)
 800801e:	429a      	cmp	r2, r3
 8008020:	d003      	beq.n	800802a <USART_Init+0x52>
 8008022:	4892      	ldr	r0, [pc, #584]	; (800826c <USART_Init+0x294>)
 8008024:	21eb      	movs	r1, #235	; 0xeb
 8008026:	f7fb f86f 	bl	8003108 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <USART_Init+0x64>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b8e      	ldr	r3, [pc, #568]	; (8008270 <USART_Init+0x298>)
 8008038:	429a      	cmp	r2, r3
 800803a:	d903      	bls.n	8008044 <USART_Init+0x6c>
 800803c:	488b      	ldr	r0, [pc, #556]	; (800826c <USART_Init+0x294>)
 800803e:	21ec      	movs	r1, #236	; 0xec
 8008040:	f7fb f862 	bl	8003108 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	889b      	ldrh	r3, [r3, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d008      	beq.n	800805e <USART_Init+0x86>
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	889b      	ldrh	r3, [r3, #4]
 8008050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008054:	d003      	beq.n	800805e <USART_Init+0x86>
 8008056:	4885      	ldr	r0, [pc, #532]	; (800826c <USART_Init+0x294>)
 8008058:	21ed      	movs	r1, #237	; 0xed
 800805a:	f7fb f855 	bl	8003108 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	88db      	ldrh	r3, [r3, #6]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <USART_Init+0xb4>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	88db      	ldrh	r3, [r3, #6]
 800806a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806e:	d00d      	beq.n	800808c <USART_Init+0xb4>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	88db      	ldrh	r3, [r3, #6]
 8008074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008078:	d008      	beq.n	800808c <USART_Init+0xb4>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	88db      	ldrh	r3, [r3, #6]
 800807e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008082:	d003      	beq.n	800808c <USART_Init+0xb4>
 8008084:	4879      	ldr	r0, [pc, #484]	; (800826c <USART_Init+0x294>)
 8008086:	21ee      	movs	r1, #238	; 0xee
 8008088:	f7fb f83e 	bl	8003108 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	891b      	ldrh	r3, [r3, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00d      	beq.n	80080b0 <USART_Init+0xd8>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	891b      	ldrh	r3, [r3, #8]
 8008098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809c:	d008      	beq.n	80080b0 <USART_Init+0xd8>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	891b      	ldrh	r3, [r3, #8]
 80080a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80080a6:	d003      	beq.n	80080b0 <USART_Init+0xd8>
 80080a8:	4870      	ldr	r0, [pc, #448]	; (800826c <USART_Init+0x294>)
 80080aa:	21ef      	movs	r1, #239	; 0xef
 80080ac:	f7fb f82c 	bl	8003108 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	895b      	ldrh	r3, [r3, #10]
 80080b4:	461a      	mov	r2, r3
 80080b6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <USART_Init+0xf0>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	895b      	ldrh	r3, [r3, #10]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d103      	bne.n	80080d0 <USART_Init+0xf8>
 80080c8:	4868      	ldr	r0, [pc, #416]	; (800826c <USART_Init+0x294>)
 80080ca:	21f0      	movs	r1, #240	; 0xf0
 80080cc:	f7fb f81c 	bl	8003108 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	899b      	ldrh	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d012      	beq.n	80080fe <USART_Init+0x126>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	899b      	ldrh	r3, [r3, #12]
 80080dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e0:	d00d      	beq.n	80080fe <USART_Init+0x126>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	899b      	ldrh	r3, [r3, #12]
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ea:	d008      	beq.n	80080fe <USART_Init+0x126>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	899b      	ldrh	r3, [r3, #12]
 80080f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f4:	d003      	beq.n	80080fe <USART_Init+0x126>
 80080f6:	485d      	ldr	r0, [pc, #372]	; (800826c <USART_Init+0x294>)
 80080f8:	21f1      	movs	r1, #241	; 0xf1
 80080fa:	f7fb f805 	bl	8003108 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	899b      	ldrh	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d013      	beq.n	800812e <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4b52      	ldr	r3, [pc, #328]	; (8008254 <USART_Init+0x27c>)
 800810a:	429a      	cmp	r2, r3
 800810c:	d00f      	beq.n	800812e <USART_Init+0x156>
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	4b51      	ldr	r3, [pc, #324]	; (8008258 <USART_Init+0x280>)
 8008112:	429a      	cmp	r2, r3
 8008114:	d00b      	beq.n	800812e <USART_Init+0x156>
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	4b50      	ldr	r3, [pc, #320]	; (800825c <USART_Init+0x284>)
 800811a:	429a      	cmp	r2, r3
 800811c:	d007      	beq.n	800812e <USART_Init+0x156>
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4b51      	ldr	r3, [pc, #324]	; (8008268 <USART_Init+0x290>)
 8008122:	429a      	cmp	r2, r3
 8008124:	d003      	beq.n	800812e <USART_Init+0x156>
 8008126:	4851      	ldr	r0, [pc, #324]	; (800826c <USART_Init+0x294>)
 8008128:	21f6      	movs	r1, #246	; 0xf6
 800812a:	f7fa ffed 	bl	8003108 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8a1b      	ldrh	r3, [r3, #16]
 8008132:	b29b      	uxth	r3, r3
 8008134:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800813c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	88db      	ldrh	r3, [r3, #6]
 8008142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008144:	4313      	orrs	r3, r2
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	899b      	ldrh	r3, [r3, #12]
 8008154:	b29b      	uxth	r3, r3
 8008156:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800815e:	f023 030c 	bic.w	r3, r3, #12
 8008162:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	889a      	ldrh	r2, [r3, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	891b      	ldrh	r3, [r3, #8]
 800816c:	4313      	orrs	r3, r2
 800816e:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008174:	4313      	orrs	r3, r2
 8008176:	b29b      	uxth	r3, r3
 8008178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817a:	4313      	orrs	r3, r2
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8a9b      	ldrh	r3, [r3, #20]
 800818a:	b29b      	uxth	r3, r3
 800818c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008194:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	899b      	ldrh	r3, [r3, #12]
 800819a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819c:	4313      	orrs	r3, r2
 800819e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80081a8:	f107 0308 	add.w	r3, r7, #8
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff fb3d 	bl	800782c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	4b27      	ldr	r3, [pc, #156]	; (8008254 <USART_Init+0x27c>)
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d003      	beq.n	80081c2 <USART_Init+0x1ea>
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4b2a      	ldr	r3, [pc, #168]	; (8008268 <USART_Init+0x290>)
 80081be:	429a      	cmp	r2, r3
 80081c0:	d102      	bne.n	80081c8 <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	623b      	str	r3, [r7, #32]
 80081c6:	e001      	b.n	80081cc <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	899b      	ldrh	r3, [r3, #12]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	b21b      	sxth	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da0c      	bge.n	80081f4 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80081da:	6a3a      	ldr	r2, [r7, #32]
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009a      	lsls	r2, r3, #2
 80081e4:	441a      	add	r2, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	e00b      	b.n	800820c <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80081f4:	6a3a      	ldr	r2, [r7, #32]
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009a      	lsls	r2, r3, #2
 80081fe:	441a      	add	r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	fbb2 f3f3 	udiv	r3, r2, r3
 800820a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	4b19      	ldr	r3, [pc, #100]	; (8008274 <USART_Init+0x29c>)
 8008210:	fba3 1302 	umull	r1, r3, r3, r2
 8008214:	095b      	lsrs	r3, r3, #5
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	091b      	lsrs	r3, r3, #4
 800821e:	2264      	movs	r2, #100	; 0x64
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	899b      	ldrh	r3, [r3, #12]
 800822e:	b29b      	uxth	r3, r3
 8008230:	b29b      	uxth	r3, r3
 8008232:	b21b      	sxth	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	da1f      	bge.n	8008278 <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <USART_Init+0x29c>)
 8008242:	fba3 1302 	umull	r1, r3, r3, r2
 8008246:	095b      	lsrs	r3, r3, #5
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824e:	4313      	orrs	r3, r2
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
 8008252:	e01e      	b.n	8008292 <USART_Init+0x2ba>
 8008254:	40011000 	.word	0x40011000
 8008258:	40004400 	.word	0x40004400
 800825c:	40004800 	.word	0x40004800
 8008260:	40004c00 	.word	0x40004c00
 8008264:	40005000 	.word	0x40005000
 8008268:	40011400 	.word	0x40011400
 800826c:	080094b8 	.word	0x080094b8
 8008270:	007270e0 	.word	0x007270e0
 8008274:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <USART_Init+0x2c8>)
 8008282:	fba3 1302 	umull	r1, r3, r3, r2
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828e:	4313      	orrs	r3, r2
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	b29a      	uxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	811a      	strh	r2, [r3, #8]
}
 800829a:	3728      	adds	r7, #40	; 0x28
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	51eb851f 	.word	0x51eb851f

080082a4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <USART_Cmd+0x8c>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d018      	beq.n	80082ea <USART_Cmd+0x46>
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <USART_Cmd+0x90>)
 80082bc:	429a      	cmp	r2, r3
 80082be:	d014      	beq.n	80082ea <USART_Cmd+0x46>
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <USART_Cmd+0x94>)
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d010      	beq.n	80082ea <USART_Cmd+0x46>
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4b1c      	ldr	r3, [pc, #112]	; (800833c <USART_Cmd+0x98>)
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d00c      	beq.n	80082ea <USART_Cmd+0x46>
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <USART_Cmd+0x9c>)
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d008      	beq.n	80082ea <USART_Cmd+0x46>
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <USART_Cmd+0xa0>)
 80082dc:	429a      	cmp	r2, r3
 80082de:	d004      	beq.n	80082ea <USART_Cmd+0x46>
 80082e0:	4819      	ldr	r0, [pc, #100]	; (8008348 <USART_Cmd+0xa4>)
 80082e2:	f240 119b 	movw	r1, #411	; 0x19b
 80082e6:	f7fa ff0f 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <USART_Cmd+0x5c>
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d004      	beq.n	8008300 <USART_Cmd+0x5c>
 80082f6:	4814      	ldr	r0, [pc, #80]	; (8008348 <USART_Cmd+0xa4>)
 80082f8:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80082fc:	f7fa ff04 	bl	8003108 <assert_failed>
  
  if (NewState != DISABLE)
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d008      	beq.n	8008318 <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	899b      	ldrh	r3, [r3, #12]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	819a      	strh	r2, [r3, #12]
 8008316:	e007      	b.n	8008328 <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	899b      	ldrh	r3, [r3, #12]
 800831c:	b29b      	uxth	r3, r3
 800831e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	819a      	strh	r2, [r3, #12]
  }
}
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	40011000 	.word	0x40011000
 8008334:	40004400 	.word	0x40004400
 8008338:	40004800 	.word	0x40004800
 800833c:	40004c00 	.word	0x40004c00
 8008340:	40005000 	.word	0x40005000
 8008344:	40011400 	.word	0x40011400
 8008348:	080094b8 	.word	0x080094b8

0800834c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	4613      	mov	r3, r2
 8008356:	460a      	mov	r2, r1
 8008358:	807a      	strh	r2, [r7, #2]
 800835a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800835c:	2300      	movs	r3, #0
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	2300      	movs	r3, #0
 8008366:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	4b4f      	ldr	r3, [pc, #316]	; (80084ac <USART_ITConfig+0x160>)
 8008370:	429a      	cmp	r2, r3
 8008372:	d018      	beq.n	80083a6 <USART_ITConfig+0x5a>
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	4b4e      	ldr	r3, [pc, #312]	; (80084b0 <USART_ITConfig+0x164>)
 8008378:	429a      	cmp	r2, r3
 800837a:	d014      	beq.n	80083a6 <USART_ITConfig+0x5a>
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	4b4d      	ldr	r3, [pc, #308]	; (80084b4 <USART_ITConfig+0x168>)
 8008380:	429a      	cmp	r2, r3
 8008382:	d010      	beq.n	80083a6 <USART_ITConfig+0x5a>
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	4b4c      	ldr	r3, [pc, #304]	; (80084b8 <USART_ITConfig+0x16c>)
 8008388:	429a      	cmp	r2, r3
 800838a:	d00c      	beq.n	80083a6 <USART_ITConfig+0x5a>
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4b4b      	ldr	r3, [pc, #300]	; (80084bc <USART_ITConfig+0x170>)
 8008390:	429a      	cmp	r2, r3
 8008392:	d008      	beq.n	80083a6 <USART_ITConfig+0x5a>
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	4b4a      	ldr	r3, [pc, #296]	; (80084c0 <USART_ITConfig+0x174>)
 8008398:	429a      	cmp	r2, r3
 800839a:	d004      	beq.n	80083a6 <USART_ITConfig+0x5a>
 800839c:	4849      	ldr	r0, [pc, #292]	; (80084c4 <USART_ITConfig+0x178>)
 800839e:	f240 41bd 	movw	r1, #1213	; 0x4bd
 80083a2:	f7fa feb1 	bl	8003108 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 80083a6:	887b      	ldrh	r3, [r7, #2]
 80083a8:	2b28      	cmp	r3, #40	; 0x28
 80083aa:	d025      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083ac:	887a      	ldrh	r2, [r7, #2]
 80083ae:	f240 7327 	movw	r3, #1831	; 0x727
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d020      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083b6:	887a      	ldrh	r2, [r7, #2]
 80083b8:	f240 6326 	movw	r3, #1574	; 0x626
 80083bc:	429a      	cmp	r2, r3
 80083be:	d01b      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083c0:	887a      	ldrh	r2, [r7, #2]
 80083c2:	f240 5325 	movw	r3, #1317	; 0x525
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d016      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083ca:	887a      	ldrh	r2, [r7, #2]
 80083cc:	f240 4324 	movw	r3, #1060	; 0x424
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d011      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083d4:	887a      	ldrh	r2, [r7, #2]
 80083d6:	f640 0346 	movw	r3, #2118	; 0x846
 80083da:	429a      	cmp	r2, r3
 80083dc:	d00c      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083de:	887a      	ldrh	r2, [r7, #2]
 80083e0:	f640 136a 	movw	r3, #2410	; 0x96a
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d007      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083e8:	887b      	ldrh	r3, [r7, #2]
 80083ea:	2b60      	cmp	r3, #96	; 0x60
 80083ec:	d004      	beq.n	80083f8 <USART_ITConfig+0xac>
 80083ee:	4835      	ldr	r0, [pc, #212]	; (80084c4 <USART_ITConfig+0x178>)
 80083f0:	f240 41be 	movw	r1, #1214	; 0x4be
 80083f4:	f7fa fe88 	bl	8003108 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80083f8:	787b      	ldrb	r3, [r7, #1]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <USART_ITConfig+0xc2>
 80083fe:	787b      	ldrb	r3, [r7, #1]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d004      	beq.n	800840e <USART_ITConfig+0xc2>
 8008404:	482f      	ldr	r0, [pc, #188]	; (80084c4 <USART_ITConfig+0x178>)
 8008406:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800840a:	f7fa fe7d 	bl	8003108 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 800840e:	887a      	ldrh	r2, [r7, #2]
 8008410:	f640 136a 	movw	r3, #2410	; 0x96a
 8008414:	429a      	cmp	r2, r3
 8008416:	d114      	bne.n	8008442 <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4b24      	ldr	r3, [pc, #144]	; (80084ac <USART_ITConfig+0x160>)
 800841c:	429a      	cmp	r2, r3
 800841e:	d010      	beq.n	8008442 <USART_ITConfig+0xf6>
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <USART_ITConfig+0x164>)
 8008424:	429a      	cmp	r2, r3
 8008426:	d00c      	beq.n	8008442 <USART_ITConfig+0xf6>
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <USART_ITConfig+0x168>)
 800842c:	429a      	cmp	r2, r3
 800842e:	d008      	beq.n	8008442 <USART_ITConfig+0xf6>
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	4b23      	ldr	r3, [pc, #140]	; (80084c0 <USART_ITConfig+0x174>)
 8008434:	429a      	cmp	r2, r3
 8008436:	d004      	beq.n	8008442 <USART_ITConfig+0xf6>
 8008438:	4822      	ldr	r0, [pc, #136]	; (80084c4 <USART_ITConfig+0x178>)
 800843a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800843e:	f7fa fe63 	bl	8003108 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8008446:	887b      	ldrh	r3, [r7, #2]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	b2db      	uxtb	r3, r3
 800844e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8008450:	887b      	ldrh	r3, [r7, #2]
 8008452:	f003 031f 	and.w	r3, r3, #31
 8008456:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d103      	bne.n	8008470 <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	330c      	adds	r3, #12
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e009      	b.n	8008484 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b02      	cmp	r3, #2
 8008474:	d103      	bne.n	800847e <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	3310      	adds	r3, #16
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	e002      	b.n	8008484 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3314      	adds	r3, #20
 8008482:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8008484:	787b      	ldrb	r3, [r7, #1]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d006      	beq.n	8008498 <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	6811      	ldr	r1, [r2, #0]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	430a      	orrs	r2, r1
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	e006      	b.n	80084a6 <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	6811      	ldr	r1, [r2, #0]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	43d2      	mvns	r2, r2
 80084a2:	400a      	ands	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]
  }
}
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40011000 	.word	0x40011000
 80084b0:	40004400 	.word	0x40004400
 80084b4:	40004800 	.word	0x40004800
 80084b8:	40004c00 	.word	0x40004c00
 80084bc:	40005000 	.word	0x40005000
 80084c0:	40011400 	.word	0x40011400
 80084c4:	080094b8 	.word	0x080094b8

080084c8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	2300      	movs	r3, #0
 80084de:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80084e0:	2300      	movs	r3, #0
 80084e2:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	4b5c      	ldr	r3, [pc, #368]	; (8008658 <USART_GetITStatus+0x190>)
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d018      	beq.n	800851e <USART_GetITStatus+0x56>
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4b5b      	ldr	r3, [pc, #364]	; (800865c <USART_GetITStatus+0x194>)
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d014      	beq.n	800851e <USART_GetITStatus+0x56>
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	4b5a      	ldr	r3, [pc, #360]	; (8008660 <USART_GetITStatus+0x198>)
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d010      	beq.n	800851e <USART_GetITStatus+0x56>
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	4b59      	ldr	r3, [pc, #356]	; (8008664 <USART_GetITStatus+0x19c>)
 8008500:	429a      	cmp	r2, r3
 8008502:	d00c      	beq.n	800851e <USART_GetITStatus+0x56>
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	4b58      	ldr	r3, [pc, #352]	; (8008668 <USART_GetITStatus+0x1a0>)
 8008508:	429a      	cmp	r2, r3
 800850a:	d008      	beq.n	800851e <USART_GetITStatus+0x56>
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	4b57      	ldr	r3, [pc, #348]	; (800866c <USART_GetITStatus+0x1a4>)
 8008510:	429a      	cmp	r2, r3
 8008512:	d004      	beq.n	800851e <USART_GetITStatus+0x56>
 8008514:	4856      	ldr	r0, [pc, #344]	; (8008670 <USART_GetITStatus+0x1a8>)
 8008516:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800851a:	f7fa fdf5 	bl	8003108 <assert_failed>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 800851e:	887b      	ldrh	r3, [r7, #2]
 8008520:	2b28      	cmp	r3, #40	; 0x28
 8008522:	d037      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008524:	887a      	ldrh	r2, [r7, #2]
 8008526:	f240 7327 	movw	r3, #1831	; 0x727
 800852a:	429a      	cmp	r2, r3
 800852c:	d032      	beq.n	8008594 <USART_GetITStatus+0xcc>
 800852e:	887a      	ldrh	r2, [r7, #2]
 8008530:	f240 6326 	movw	r3, #1574	; 0x626
 8008534:	429a      	cmp	r2, r3
 8008536:	d02d      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008538:	887a      	ldrh	r2, [r7, #2]
 800853a:	f240 5325 	movw	r3, #1317	; 0x525
 800853e:	429a      	cmp	r2, r3
 8008540:	d028      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008542:	887a      	ldrh	r2, [r7, #2]
 8008544:	f240 4324 	movw	r3, #1060	; 0x424
 8008548:	429a      	cmp	r2, r3
 800854a:	d023      	beq.n	8008594 <USART_GetITStatus+0xcc>
 800854c:	887a      	ldrh	r2, [r7, #2]
 800854e:	f640 0346 	movw	r3, #2118	; 0x846
 8008552:	429a      	cmp	r2, r3
 8008554:	d01e      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008556:	887a      	ldrh	r2, [r7, #2]
 8008558:	f640 136a 	movw	r3, #2410	; 0x96a
 800855c:	429a      	cmp	r2, r3
 800855e:	d019      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008560:	887b      	ldrh	r3, [r7, #2]
 8008562:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8008566:	d015      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008568:	887a      	ldrh	r2, [r7, #2]
 800856a:	f240 3325 	movw	r3, #805	; 0x325
 800856e:	429a      	cmp	r2, r3
 8008570:	d010      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008572:	887b      	ldrh	r3, [r7, #2]
 8008574:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8008578:	d00c      	beq.n	8008594 <USART_GetITStatus+0xcc>
 800857a:	887b      	ldrh	r3, [r7, #2]
 800857c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8008580:	d008      	beq.n	8008594 <USART_GetITStatus+0xcc>
 8008582:	887b      	ldrh	r3, [r7, #2]
 8008584:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8008588:	d004      	beq.n	8008594 <USART_GetITStatus+0xcc>
 800858a:	4839      	ldr	r0, [pc, #228]	; (8008670 <USART_GetITStatus+0x1a8>)
 800858c:	f240 5151 	movw	r1, #1361	; 0x551
 8008590:	f7fa fdba 	bl	8003108 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 8008594:	887a      	ldrh	r2, [r7, #2]
 8008596:	f640 136a 	movw	r3, #2410	; 0x96a
 800859a:	429a      	cmp	r2, r3
 800859c:	d114      	bne.n	80085c8 <USART_GetITStatus+0x100>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4b2d      	ldr	r3, [pc, #180]	; (8008658 <USART_GetITStatus+0x190>)
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d010      	beq.n	80085c8 <USART_GetITStatus+0x100>
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	4b2c      	ldr	r3, [pc, #176]	; (800865c <USART_GetITStatus+0x194>)
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d00c      	beq.n	80085c8 <USART_GetITStatus+0x100>
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4b2b      	ldr	r3, [pc, #172]	; (8008660 <USART_GetITStatus+0x198>)
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d008      	beq.n	80085c8 <USART_GetITStatus+0x100>
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	4b2c      	ldr	r3, [pc, #176]	; (800866c <USART_GetITStatus+0x1a4>)
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d004      	beq.n	80085c8 <USART_GetITStatus+0x100>
 80085be:	482c      	ldr	r0, [pc, #176]	; (8008670 <USART_GetITStatus+0x1a8>)
 80085c0:	f240 5156 	movw	r1, #1366	; 0x556
 80085c4:	f7fa fda0 	bl	8003108 <assert_failed>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80085c8:	887b      	ldrh	r3, [r7, #2]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80085d2:	887b      	ldrh	r3, [r7, #2]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2201      	movs	r2, #1
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d106      	bne.n	80085f8 <USART_GetITStatus+0x130>
  {
    itmask &= USARTx->CR1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	899b      	ldrh	r3, [r3, #12]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	4013      	ands	r3, r2
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	e00f      	b.n	8008618 <USART_GetITStatus+0x150>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d106      	bne.n	800860c <USART_GetITStatus+0x144>
  {
    itmask &= USARTx->CR2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8a1b      	ldrh	r3, [r3, #16]
 8008602:	b29b      	uxth	r3, r3
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	4013      	ands	r3, r2
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	e005      	b.n	8008618 <USART_GetITStatus+0x150>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	8a9b      	ldrh	r3, [r3, #20]
 8008610:	b29b      	uxth	r3, r3
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	4013      	ands	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8008618:	887b      	ldrh	r3, [r7, #2]
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	b29b      	uxth	r3, r3
 800861e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	fa02 f303 	lsl.w	r3, r2, r3
 8008628:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4013      	ands	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <USART_GetITStatus+0x180>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <USART_GetITStatus+0x180>
  {
    bitstatus = SET;
 8008642:	2301      	movs	r3, #1
 8008644:	74fb      	strb	r3, [r7, #19]
 8008646:	e001      	b.n	800864c <USART_GetITStatus+0x184>
  }
  else
  {
    bitstatus = RESET;
 8008648:	2300      	movs	r3, #0
 800864a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800864c:	7cfb      	ldrb	r3, [r7, #19]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	40011000 	.word	0x40011000
 800865c:	40004400 	.word	0x40004400
 8008660:	40004800 	.word	0x40004800
 8008664:	40004c00 	.word	0x40004c00
 8008668:	40005000 	.word	0x40005000
 800866c:	40011400 	.word	0x40011400
 8008670:	080094b8 	.word	0x080094b8

08008674 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8008680:	2300      	movs	r3, #0
 8008682:	81fb      	strh	r3, [r7, #14]
 8008684:	2300      	movs	r3, #0
 8008686:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <USART_ClearITPendingBit+0xd4>)
 800868c:	429a      	cmp	r2, r3
 800868e:	d018      	beq.n	80086c2 <USART_ClearITPendingBit+0x4e>
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4b2e      	ldr	r3, [pc, #184]	; (800874c <USART_ClearITPendingBit+0xd8>)
 8008694:	429a      	cmp	r2, r3
 8008696:	d014      	beq.n	80086c2 <USART_ClearITPendingBit+0x4e>
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	4b2d      	ldr	r3, [pc, #180]	; (8008750 <USART_ClearITPendingBit+0xdc>)
 800869c:	429a      	cmp	r2, r3
 800869e:	d010      	beq.n	80086c2 <USART_ClearITPendingBit+0x4e>
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	4b2c      	ldr	r3, [pc, #176]	; (8008754 <USART_ClearITPendingBit+0xe0>)
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d00c      	beq.n	80086c2 <USART_ClearITPendingBit+0x4e>
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4b2b      	ldr	r3, [pc, #172]	; (8008758 <USART_ClearITPendingBit+0xe4>)
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d008      	beq.n	80086c2 <USART_ClearITPendingBit+0x4e>
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	4b2a      	ldr	r3, [pc, #168]	; (800875c <USART_ClearITPendingBit+0xe8>)
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d004      	beq.n	80086c2 <USART_ClearITPendingBit+0x4e>
 80086b8:	4829      	ldr	r0, [pc, #164]	; (8008760 <USART_ClearITPendingBit+0xec>)
 80086ba:	f240 5199 	movw	r1, #1433	; 0x599
 80086be:	f7fa fd23 	bl	8003108 <assert_failed>
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 80086c2:	887a      	ldrh	r2, [r7, #2]
 80086c4:	f240 6326 	movw	r3, #1574	; 0x626
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d013      	beq.n	80086f4 <USART_ClearITPendingBit+0x80>
 80086cc:	887a      	ldrh	r2, [r7, #2]
 80086ce:	f240 5325 	movw	r3, #1317	; 0x525
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d00e      	beq.n	80086f4 <USART_ClearITPendingBit+0x80>
 80086d6:	887a      	ldrh	r2, [r7, #2]
 80086d8:	f640 0346 	movw	r3, #2118	; 0x846
 80086dc:	429a      	cmp	r2, r3
 80086de:	d009      	beq.n	80086f4 <USART_ClearITPendingBit+0x80>
 80086e0:	887a      	ldrh	r2, [r7, #2]
 80086e2:	f640 136a 	movw	r3, #2410	; 0x96a
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d004      	beq.n	80086f4 <USART_ClearITPendingBit+0x80>
 80086ea:	481d      	ldr	r0, [pc, #116]	; (8008760 <USART_ClearITPendingBit+0xec>)
 80086ec:	f240 519a 	movw	r1, #1434	; 0x59a
 80086f0:	f7fa fd0a 	bl	8003108 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 80086f4:	887a      	ldrh	r2, [r7, #2]
 80086f6:	f640 136a 	movw	r3, #2410	; 0x96a
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d114      	bne.n	8008728 <USART_ClearITPendingBit+0xb4>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	4b11      	ldr	r3, [pc, #68]	; (8008748 <USART_ClearITPendingBit+0xd4>)
 8008702:	429a      	cmp	r2, r3
 8008704:	d010      	beq.n	8008728 <USART_ClearITPendingBit+0xb4>
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4b10      	ldr	r3, [pc, #64]	; (800874c <USART_ClearITPendingBit+0xd8>)
 800870a:	429a      	cmp	r2, r3
 800870c:	d00c      	beq.n	8008728 <USART_ClearITPendingBit+0xb4>
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <USART_ClearITPendingBit+0xdc>)
 8008712:	429a      	cmp	r2, r3
 8008714:	d008      	beq.n	8008728 <USART_ClearITPendingBit+0xb4>
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4b10      	ldr	r3, [pc, #64]	; (800875c <USART_ClearITPendingBit+0xe8>)
 800871a:	429a      	cmp	r2, r3
 800871c:	d004      	beq.n	8008728 <USART_ClearITPendingBit+0xb4>
 800871e:	4810      	ldr	r0, [pc, #64]	; (8008760 <USART_ClearITPendingBit+0xec>)
 8008720:	f240 519f 	movw	r1, #1439	; 0x59f
 8008724:	f7fa fcf0 	bl	8003108 <assert_failed>
  } 
    
  bitpos = USART_IT >> 0x08;
 8008728:	887b      	ldrh	r3, [r7, #2]
 800872a:	0a1b      	lsrs	r3, r3, #8
 800872c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800872e:	89fb      	ldrh	r3, [r7, #14]
 8008730:	2201      	movs	r2, #1
 8008732:	fa02 f303 	lsl.w	r3, r2, r3
 8008736:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8008738:	89bb      	ldrh	r3, [r7, #12]
 800873a:	43db      	mvns	r3, r3
 800873c:	b29a      	uxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	801a      	strh	r2, [r3, #0]
}
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	40011000 	.word	0x40011000
 800874c:	40004400 	.word	0x40004400
 8008750:	40004800 	.word	0x40004800
 8008754:	40004c00 	.word	0x40004c00
 8008758:	40005000 	.word	0x40005000
 800875c:	40011400 	.word	0x40011400
 8008760:	080094b8 	.word	0x080094b8

08008764 <atoi>:
 8008764:	2100      	movs	r1, #0
 8008766:	220a      	movs	r2, #10
 8008768:	f000 ba4a 	b.w	8008c00 <strtol>

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4e0f      	ldr	r6, [pc, #60]	; (80087ac <__libc_init_array+0x40>)
 8008770:	4d0f      	ldr	r5, [pc, #60]	; (80087b0 <__libc_init_array+0x44>)
 8008772:	1b76      	subs	r6, r6, r5
 8008774:	10b6      	asrs	r6, r6, #2
 8008776:	d007      	beq.n	8008788 <__libc_init_array+0x1c>
 8008778:	3d04      	subs	r5, #4
 800877a:	2400      	movs	r4, #0
 800877c:	3401      	adds	r4, #1
 800877e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8008782:	4798      	blx	r3
 8008784:	42a6      	cmp	r6, r4
 8008786:	d1f9      	bne.n	800877c <__libc_init_array+0x10>
 8008788:	4e0a      	ldr	r6, [pc, #40]	; (80087b4 <__libc_init_array+0x48>)
 800878a:	4d0b      	ldr	r5, [pc, #44]	; (80087b8 <__libc_init_array+0x4c>)
 800878c:	1b76      	subs	r6, r6, r5
 800878e:	f001 f865 	bl	800985c <_init>
 8008792:	10b6      	asrs	r6, r6, #2
 8008794:	d008      	beq.n	80087a8 <__libc_init_array+0x3c>
 8008796:	3d04      	subs	r5, #4
 8008798:	2400      	movs	r4, #0
 800879a:	3401      	adds	r4, #1
 800879c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80087a0:	4798      	blx	r3
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d1f9      	bne.n	800879a <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	bd70      	pop	{r4, r5, r6, pc}
 80087aa:	bf00      	nop
 80087ac:	08009874 	.word	0x08009874
 80087b0:	08009874 	.word	0x08009874
 80087b4:	0800987c 	.word	0x0800987c
 80087b8:	08009874 	.word	0x08009874

080087bc <memcmp>:
 80087bc:	2a03      	cmp	r2, #3
 80087be:	b470      	push	{r4, r5, r6}
 80087c0:	d928      	bls.n	8008814 <memcmp+0x58>
 80087c2:	ea40 0301 	orr.w	r3, r0, r1
 80087c6:	079b      	lsls	r3, r3, #30
 80087c8:	d013      	beq.n	80087f2 <memcmp+0x36>
 80087ca:	7805      	ldrb	r5, [r0, #0]
 80087cc:	780c      	ldrb	r4, [r1, #0]
 80087ce:	42a5      	cmp	r5, r4
 80087d0:	d124      	bne.n	800881c <memcmp+0x60>
 80087d2:	3a01      	subs	r2, #1
 80087d4:	2300      	movs	r3, #0
 80087d6:	e005      	b.n	80087e4 <memcmp+0x28>
 80087d8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80087dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80087e0:	42a5      	cmp	r5, r4
 80087e2:	d11b      	bne.n	800881c <memcmp+0x60>
 80087e4:	4293      	cmp	r3, r2
 80087e6:	f103 0301 	add.w	r3, r3, #1
 80087ea:	d1f5      	bne.n	80087d8 <memcmp+0x1c>
 80087ec:	2000      	movs	r0, #0
 80087ee:	bc70      	pop	{r4, r5, r6}
 80087f0:	4770      	bx	lr
 80087f2:	460c      	mov	r4, r1
 80087f4:	4603      	mov	r3, r0
 80087f6:	6825      	ldr	r5, [r4, #0]
 80087f8:	681e      	ldr	r6, [r3, #0]
 80087fa:	42ae      	cmp	r6, r5
 80087fc:	4621      	mov	r1, r4
 80087fe:	4618      	mov	r0, r3
 8008800:	f104 0404 	add.w	r4, r4, #4
 8008804:	f103 0304 	add.w	r3, r3, #4
 8008808:	d104      	bne.n	8008814 <memcmp+0x58>
 800880a:	3a04      	subs	r2, #4
 800880c:	2a03      	cmp	r2, #3
 800880e:	4618      	mov	r0, r3
 8008810:	4621      	mov	r1, r4
 8008812:	d8f0      	bhi.n	80087f6 <memcmp+0x3a>
 8008814:	2a00      	cmp	r2, #0
 8008816:	d1d8      	bne.n	80087ca <memcmp+0xe>
 8008818:	4610      	mov	r0, r2
 800881a:	e7e8      	b.n	80087ee <memcmp+0x32>
 800881c:	1b28      	subs	r0, r5, r4
 800881e:	bc70      	pop	{r4, r5, r6}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <memset>:
 8008824:	b4f0      	push	{r4, r5, r6, r7}
 8008826:	0784      	lsls	r4, r0, #30
 8008828:	d043      	beq.n	80088b2 <memset+0x8e>
 800882a:	1e54      	subs	r4, r2, #1
 800882c:	2a00      	cmp	r2, #0
 800882e:	d03e      	beq.n	80088ae <memset+0x8a>
 8008830:	b2cd      	uxtb	r5, r1
 8008832:	4603      	mov	r3, r0
 8008834:	e003      	b.n	800883e <memset+0x1a>
 8008836:	1e62      	subs	r2, r4, #1
 8008838:	2c00      	cmp	r4, #0
 800883a:	d038      	beq.n	80088ae <memset+0x8a>
 800883c:	4614      	mov	r4, r2
 800883e:	f803 5b01 	strb.w	r5, [r3], #1
 8008842:	079a      	lsls	r2, r3, #30
 8008844:	d1f7      	bne.n	8008836 <memset+0x12>
 8008846:	2c03      	cmp	r4, #3
 8008848:	d92a      	bls.n	80088a0 <memset+0x7c>
 800884a:	b2cd      	uxtb	r5, r1
 800884c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008850:	2c0f      	cmp	r4, #15
 8008852:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008856:	d915      	bls.n	8008884 <memset+0x60>
 8008858:	f1a4 0710 	sub.w	r7, r4, #16
 800885c:	093f      	lsrs	r7, r7, #4
 800885e:	f103 0610 	add.w	r6, r3, #16
 8008862:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8008866:	461a      	mov	r2, r3
 8008868:	6015      	str	r5, [r2, #0]
 800886a:	6055      	str	r5, [r2, #4]
 800886c:	6095      	str	r5, [r2, #8]
 800886e:	60d5      	str	r5, [r2, #12]
 8008870:	3210      	adds	r2, #16
 8008872:	42b2      	cmp	r2, r6
 8008874:	d1f8      	bne.n	8008868 <memset+0x44>
 8008876:	f004 040f 	and.w	r4, r4, #15
 800887a:	3701      	adds	r7, #1
 800887c:	2c03      	cmp	r4, #3
 800887e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8008882:	d90d      	bls.n	80088a0 <memset+0x7c>
 8008884:	461e      	mov	r6, r3
 8008886:	4622      	mov	r2, r4
 8008888:	3a04      	subs	r2, #4
 800888a:	2a03      	cmp	r2, #3
 800888c:	f846 5b04 	str.w	r5, [r6], #4
 8008890:	d8fa      	bhi.n	8008888 <memset+0x64>
 8008892:	1f22      	subs	r2, r4, #4
 8008894:	f022 0203 	bic.w	r2, r2, #3
 8008898:	3204      	adds	r2, #4
 800889a:	4413      	add	r3, r2
 800889c:	f004 0403 	and.w	r4, r4, #3
 80088a0:	b12c      	cbz	r4, 80088ae <memset+0x8a>
 80088a2:	b2c9      	uxtb	r1, r1
 80088a4:	441c      	add	r4, r3
 80088a6:	f803 1b01 	strb.w	r1, [r3], #1
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	d1fb      	bne.n	80088a6 <memset+0x82>
 80088ae:	bcf0      	pop	{r4, r5, r6, r7}
 80088b0:	4770      	bx	lr
 80088b2:	4614      	mov	r4, r2
 80088b4:	4603      	mov	r3, r0
 80088b6:	e7c6      	b.n	8008846 <memset+0x22>

080088b8 <strcpy>:
 80088b8:	ea80 0201 	eor.w	r2, r0, r1
 80088bc:	4684      	mov	ip, r0
 80088be:	f012 0f03 	tst.w	r2, #3
 80088c2:	d14f      	bne.n	8008964 <strcpy+0xac>
 80088c4:	f011 0f03 	tst.w	r1, #3
 80088c8:	d132      	bne.n	8008930 <strcpy+0x78>
 80088ca:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80088ce:	f011 0f04 	tst.w	r1, #4
 80088d2:	f851 3b04 	ldr.w	r3, [r1], #4
 80088d6:	d00b      	beq.n	80088f0 <strcpy+0x38>
 80088d8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80088dc:	439a      	bics	r2, r3
 80088de:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80088e2:	bf04      	itt	eq
 80088e4:	f84c 3b04 	streq.w	r3, [ip], #4
 80088e8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80088ec:	d116      	bne.n	800891c <strcpy+0x64>
 80088ee:	bf00      	nop
 80088f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80088f4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80088f8:	439a      	bics	r2, r3
 80088fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80088fe:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8008902:	d10b      	bne.n	800891c <strcpy+0x64>
 8008904:	f84c 3b04 	str.w	r3, [ip], #4
 8008908:	43a2      	bics	r2, r4
 800890a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800890e:	bf04      	itt	eq
 8008910:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008914:	f84c 4b04 	streq.w	r4, [ip], #4
 8008918:	d0ea      	beq.n	80088f0 <strcpy+0x38>
 800891a:	4623      	mov	r3, r4
 800891c:	f80c 3b01 	strb.w	r3, [ip], #1
 8008920:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008924:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008928:	d1f8      	bne.n	800891c <strcpy+0x64>
 800892a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	f011 0f01 	tst.w	r1, #1
 8008934:	d006      	beq.n	8008944 <strcpy+0x8c>
 8008936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800893a:	f80c 2b01 	strb.w	r2, [ip], #1
 800893e:	2a00      	cmp	r2, #0
 8008940:	bf08      	it	eq
 8008942:	4770      	bxeq	lr
 8008944:	f011 0f02 	tst.w	r1, #2
 8008948:	d0bf      	beq.n	80088ca <strcpy+0x12>
 800894a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800894e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8008952:	bf16      	itet	ne
 8008954:	f82c 2b02 	strhne.w	r2, [ip], #2
 8008958:	f88c 2000 	strbeq.w	r2, [ip]
 800895c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8008960:	d1b3      	bne.n	80088ca <strcpy+0x12>
 8008962:	4770      	bx	lr
 8008964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008968:	f80c 2b01 	strb.w	r2, [ip], #1
 800896c:	2a00      	cmp	r2, #0
 800896e:	d1f9      	bne.n	8008964 <strcpy+0xac>
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop

08008974 <strlen>:
 8008974:	f020 0103 	bic.w	r1, r0, #3
 8008978:	f010 0003 	ands.w	r0, r0, #3
 800897c:	f1c0 0000 	rsb	r0, r0, #0
 8008980:	f851 3b04 	ldr.w	r3, [r1], #4
 8008984:	f100 0c04 	add.w	ip, r0, #4
 8008988:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800898c:	f06f 0200 	mvn.w	r2, #0
 8008990:	bf1c      	itt	ne
 8008992:	fa22 f20c 	lsrne.w	r2, r2, ip
 8008996:	4313      	orrne	r3, r2
 8008998:	f04f 0c01 	mov.w	ip, #1
 800899c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80089a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80089a4:	eba3 020c 	sub.w	r2, r3, ip
 80089a8:	ea22 0203 	bic.w	r2, r2, r3
 80089ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80089b0:	bf04      	itt	eq
 80089b2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80089b6:	3004      	addeq	r0, #4
 80089b8:	d0f4      	beq.n	80089a4 <strlen+0x30>
 80089ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80089be:	bf1f      	itttt	ne
 80089c0:	3001      	addne	r0, #1
 80089c2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80089c6:	3001      	addne	r0, #1
 80089c8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80089cc:	bf18      	it	ne
 80089ce:	3001      	addne	r0, #1
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <strncmp>:
 80089d4:	b430      	push	{r4, r5}
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	d04a      	beq.n	8008a70 <strncmp+0x9c>
 80089da:	ea40 0301 	orr.w	r3, r0, r1
 80089de:	f013 0303 	ands.w	r3, r3, #3
 80089e2:	d12d      	bne.n	8008a40 <strncmp+0x6c>
 80089e4:	2a03      	cmp	r2, #3
 80089e6:	d92b      	bls.n	8008a40 <strncmp+0x6c>
 80089e8:	6804      	ldr	r4, [r0, #0]
 80089ea:	680d      	ldr	r5, [r1, #0]
 80089ec:	42ac      	cmp	r4, r5
 80089ee:	d127      	bne.n	8008a40 <strncmp+0x6c>
 80089f0:	3a04      	subs	r2, #4
 80089f2:	d03d      	beq.n	8008a70 <strncmp+0x9c>
 80089f4:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80089f8:	ea25 0404 	bic.w	r4, r5, r4
 80089fc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8008a00:	d13c      	bne.n	8008a7c <strncmp+0xa8>
 8008a02:	460c      	mov	r4, r1
 8008a04:	4603      	mov	r3, r0
 8008a06:	e00e      	b.n	8008a26 <strncmp+0x52>
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	6864      	ldr	r4, [r4, #4]
 8008a0c:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	ea25 0503 	bic.w	r5, r5, r3
 8008a16:	d113      	bne.n	8008a40 <strncmp+0x6c>
 8008a18:	3a04      	subs	r2, #4
 8008a1a:	d029      	beq.n	8008a70 <strncmp+0x9c>
 8008a1c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8008a20:	d129      	bne.n	8008a76 <strncmp+0xa2>
 8008a22:	4603      	mov	r3, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	2a03      	cmp	r2, #3
 8008a28:	f100 0004 	add.w	r0, r0, #4
 8008a2c:	f101 0104 	add.w	r1, r1, #4
 8008a30:	d8ea      	bhi.n	8008a08 <strncmp+0x34>
 8008a32:	1e55      	subs	r5, r2, #1
 8008a34:	b92a      	cbnz	r2, 8008a42 <strncmp+0x6e>
 8008a36:	7918      	ldrb	r0, [r3, #4]
 8008a38:	7922      	ldrb	r2, [r4, #4]
 8008a3a:	1a80      	subs	r0, r0, r2
 8008a3c:	bc30      	pop	{r4, r5}
 8008a3e:	4770      	bx	lr
 8008a40:	1e55      	subs	r5, r2, #1
 8008a42:	7803      	ldrb	r3, [r0, #0]
 8008a44:	780a      	ldrb	r2, [r1, #0]
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d11a      	bne.n	8008a80 <strncmp+0xac>
 8008a4a:	b1dd      	cbz	r5, 8008a84 <strncmp+0xb0>
 8008a4c:	b1b3      	cbz	r3, 8008a7c <strncmp+0xa8>
 8008a4e:	1c6c      	adds	r4, r5, #1
 8008a50:	440c      	add	r4, r1
 8008a52:	1c8b      	adds	r3, r1, #2
 8008a54:	4601      	mov	r1, r0
 8008a56:	e004      	b.n	8008a62 <strncmp+0x8e>
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	d00c      	beq.n	8008a76 <strncmp+0xa2>
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0ec      	beq.n	8008a3c <strncmp+0x68>
 8008a62:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a66:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8008a6a:	4290      	cmp	r0, r2
 8008a6c:	d0f4      	beq.n	8008a58 <strncmp+0x84>
 8008a6e:	e7e4      	b.n	8008a3a <strncmp+0x66>
 8008a70:	4610      	mov	r0, r2
 8008a72:	bc30      	pop	{r4, r5}
 8008a74:	4770      	bx	lr
 8008a76:	2000      	movs	r0, #0
 8008a78:	bc30      	pop	{r4, r5}
 8008a7a:	4770      	bx	lr
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	e7dd      	b.n	8008a3c <strncmp+0x68>
 8008a80:	4618      	mov	r0, r3
 8008a82:	e7da      	b.n	8008a3a <strncmp+0x66>
 8008a84:	4628      	mov	r0, r5
 8008a86:	e7d9      	b.n	8008a3c <strncmp+0x68>

08008a88 <strncpy>:
 8008a88:	ea40 0301 	orr.w	r3, r0, r1
 8008a8c:	079b      	lsls	r3, r3, #30
 8008a8e:	b470      	push	{r4, r5, r6}
 8008a90:	d12a      	bne.n	8008ae8 <strncpy+0x60>
 8008a92:	2a03      	cmp	r2, #3
 8008a94:	d928      	bls.n	8008ae8 <strncpy+0x60>
 8008a96:	460c      	mov	r4, r1
 8008a98:	4603      	mov	r3, r0
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008aa0:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8008aa4:	ea26 0605 	bic.w	r6, r6, r5
 8008aa8:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8008aac:	d105      	bne.n	8008aba <strncpy+0x32>
 8008aae:	3a04      	subs	r2, #4
 8008ab0:	2a03      	cmp	r2, #3
 8008ab2:	f843 5b04 	str.w	r5, [r3], #4
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	d8ef      	bhi.n	8008a9a <strncpy+0x12>
 8008aba:	b19a      	cbz	r2, 8008ae4 <strncpy+0x5c>
 8008abc:	780c      	ldrb	r4, [r1, #0]
 8008abe:	701c      	strb	r4, [r3, #0]
 8008ac0:	3a01      	subs	r2, #1
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	b13c      	cbz	r4, 8008ad6 <strncpy+0x4e>
 8008ac6:	b16a      	cbz	r2, 8008ae4 <strncpy+0x5c>
 8008ac8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008acc:	f803 4b01 	strb.w	r4, [r3], #1
 8008ad0:	3a01      	subs	r2, #1
 8008ad2:	2c00      	cmp	r4, #0
 8008ad4:	d1f7      	bne.n	8008ac6 <strncpy+0x3e>
 8008ad6:	b12a      	cbz	r2, 8008ae4 <strncpy+0x5c>
 8008ad8:	441a      	add	r2, r3
 8008ada:	2100      	movs	r1, #0
 8008adc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d1fb      	bne.n	8008adc <strncpy+0x54>
 8008ae4:	bc70      	pop	{r4, r5, r6}
 8008ae6:	4770      	bx	lr
 8008ae8:	4603      	mov	r3, r0
 8008aea:	e7e6      	b.n	8008aba <strncpy+0x32>

08008aec <_strtol_r>:
 8008aec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008af0:	4c42      	ldr	r4, [pc, #264]	; (8008bfc <_strtol_r+0x110>)
 8008af2:	b082      	sub	sp, #8
 8008af4:	f8d4 c000 	ldr.w	ip, [r4]
 8008af8:	9001      	str	r0, [sp, #4]
 8008afa:	460e      	mov	r6, r1
 8008afc:	e000      	b.n	8008b00 <_strtol_r+0x14>
 8008afe:	4626      	mov	r6, r4
 8008b00:	4634      	mov	r4, r6
 8008b02:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b06:	eb0c 0005 	add.w	r0, ip, r5
 8008b0a:	7840      	ldrb	r0, [r0, #1]
 8008b0c:	f000 0008 	and.w	r0, r0, #8
 8008b10:	f000 0aff 	and.w	sl, r0, #255	; 0xff
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d1f2      	bne.n	8008afe <_strtol_r+0x12>
 8008b18:	2d2d      	cmp	r5, #45	; 0x2d
 8008b1a:	d05b      	beq.n	8008bd4 <_strtol_r+0xe8>
 8008b1c:	2d2b      	cmp	r5, #43	; 0x2b
 8008b1e:	bf04      	itt	eq
 8008b20:	7875      	ldrbeq	r5, [r6, #1]
 8008b22:	1cb4      	addeq	r4, r6, #2
 8008b24:	f033 0010 	bics.w	r0, r3, #16
 8008b28:	d03c      	beq.n	8008ba4 <_strtol_r+0xb8>
 8008b2a:	4699      	mov	r9, r3
 8008b2c:	f1ba 0f00 	cmp.w	sl, #0
 8008b30:	bf0c      	ite	eq
 8008b32:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
 8008b36:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
 8008b3a:	fbbb f8f9 	udiv	r8, fp, r9
 8008b3e:	2700      	movs	r7, #0
 8008b40:	fb09 bb18 	mls	fp, r9, r8, fp
 8008b44:	4638      	mov	r0, r7
 8008b46:	e00c      	b.n	8008b62 <_strtol_r+0x76>
 8008b48:	3d30      	subs	r5, #48	; 0x30
 8008b4a:	42ab      	cmp	r3, r5
 8008b4c:	dd19      	ble.n	8008b82 <_strtol_r+0x96>
 8008b4e:	1c7e      	adds	r6, r7, #1
 8008b50:	d005      	beq.n	8008b5e <_strtol_r+0x72>
 8008b52:	4540      	cmp	r0, r8
 8008b54:	d823      	bhi.n	8008b9e <_strtol_r+0xb2>
 8008b56:	d020      	beq.n	8008b9a <_strtol_r+0xae>
 8008b58:	fb09 5000 	mla	r0, r9, r0, r5
 8008b5c:	2701      	movs	r7, #1
 8008b5e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b62:	eb0c 0605 	add.w	r6, ip, r5
 8008b66:	7876      	ldrb	r6, [r6, #1]
 8008b68:	f016 0f04 	tst.w	r6, #4
 8008b6c:	d1ec      	bne.n	8008b48 <_strtol_r+0x5c>
 8008b6e:	f016 0603 	ands.w	r6, r6, #3
 8008b72:	d006      	beq.n	8008b82 <_strtol_r+0x96>
 8008b74:	2e01      	cmp	r6, #1
 8008b76:	bf14      	ite	ne
 8008b78:	2657      	movne	r6, #87	; 0x57
 8008b7a:	2637      	moveq	r6, #55	; 0x37
 8008b7c:	1bad      	subs	r5, r5, r6
 8008b7e:	42ab      	cmp	r3, r5
 8008b80:	dce5      	bgt.n	8008b4e <_strtol_r+0x62>
 8008b82:	1c7b      	adds	r3, r7, #1
 8008b84:	d015      	beq.n	8008bb2 <_strtol_r+0xc6>
 8008b86:	f1ba 0f00 	cmp.w	sl, #0
 8008b8a:	d121      	bne.n	8008bd0 <_strtol_r+0xe4>
 8008b8c:	b10a      	cbz	r2, 8008b92 <_strtol_r+0xa6>
 8008b8e:	b9ef      	cbnz	r7, 8008bcc <_strtol_r+0xe0>
 8008b90:	6011      	str	r1, [r2, #0]
 8008b92:	b002      	add	sp, #8
 8008b94:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b98:	4770      	bx	lr
 8008b9a:	455d      	cmp	r5, fp
 8008b9c:	dddc      	ble.n	8008b58 <_strtol_r+0x6c>
 8008b9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ba2:	e7dc      	b.n	8008b5e <_strtol_r+0x72>
 8008ba4:	2d30      	cmp	r5, #48	; 0x30
 8008ba6:	d01a      	beq.n	8008bde <_strtol_r+0xf2>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1be      	bne.n	8008b2a <_strtol_r+0x3e>
 8008bac:	230a      	movs	r3, #10
 8008bae:	4699      	mov	r9, r3
 8008bb0:	e7bc      	b.n	8008b2c <_strtol_r+0x40>
 8008bb2:	9901      	ldr	r1, [sp, #4]
 8008bb4:	f1ba 0f00 	cmp.w	sl, #0
 8008bb8:	f04f 0322 	mov.w	r3, #34	; 0x22
 8008bbc:	bf0c      	ite	eq
 8008bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008bc2:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8008bc6:	600b      	str	r3, [r1, #0]
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	d0e2      	beq.n	8008b92 <_strtol_r+0xa6>
 8008bcc:	1e61      	subs	r1, r4, #1
 8008bce:	e7df      	b.n	8008b90 <_strtol_r+0xa4>
 8008bd0:	4240      	negs	r0, r0
 8008bd2:	e7db      	b.n	8008b8c <_strtol_r+0xa0>
 8008bd4:	1cb4      	adds	r4, r6, #2
 8008bd6:	7875      	ldrb	r5, [r6, #1]
 8008bd8:	f04f 0a01 	mov.w	sl, #1
 8008bdc:	e7a2      	b.n	8008b24 <_strtol_r+0x38>
 8008bde:	7820      	ldrb	r0, [r4, #0]
 8008be0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008be4:	2858      	cmp	r0, #88	; 0x58
 8008be6:	d003      	beq.n	8008bf0 <_strtol_r+0x104>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d19e      	bne.n	8008b2a <_strtol_r+0x3e>
 8008bec:	2308      	movs	r3, #8
 8008bee:	e79c      	b.n	8008b2a <_strtol_r+0x3e>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	7865      	ldrb	r5, [r4, #1]
 8008bf4:	4699      	mov	r9, r3
 8008bf6:	3402      	adds	r4, #2
 8008bf8:	e798      	b.n	8008b2c <_strtol_r+0x40>
 8008bfa:	bf00      	nop
 8008bfc:	2000046c 	.word	0x2000046c

08008c00 <strtol>:
 8008c00:	b430      	push	{r4, r5}
 8008c02:	4c04      	ldr	r4, [pc, #16]	; (8008c14 <strtol+0x14>)
 8008c04:	460d      	mov	r5, r1
 8008c06:	4613      	mov	r3, r2
 8008c08:	4601      	mov	r1, r0
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	bc30      	pop	{r4, r5}
 8008c10:	f7ff bf6c 	b.w	8008aec <_strtol_r>
 8008c14:	20000468 	.word	0x20000468

08008c18 <register_fini>:
 8008c18:	4b02      	ldr	r3, [pc, #8]	; (8008c24 <register_fini+0xc>)
 8008c1a:	b113      	cbz	r3, 8008c22 <register_fini+0xa>
 8008c1c:	4802      	ldr	r0, [pc, #8]	; (8008c28 <register_fini+0x10>)
 8008c1e:	f000 b805 	b.w	8008c2c <atexit>
 8008c22:	4770      	bx	lr
 8008c24:	00000000 	.word	0x00000000
 8008c28:	08008c39 	.word	0x08008c39

08008c2c <atexit>:
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	2000      	movs	r0, #0
 8008c30:	4602      	mov	r2, r0
 8008c32:	4603      	mov	r3, r0
 8008c34:	f000 b818 	b.w	8008c68 <__register_exitproc>

08008c38 <__libc_fini_array>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d09      	ldr	r5, [pc, #36]	; (8008c60 <__libc_fini_array+0x28>)
 8008c3c:	4c09      	ldr	r4, [pc, #36]	; (8008c64 <__libc_fini_array+0x2c>)
 8008c3e:	1b64      	subs	r4, r4, r5
 8008c40:	10a4      	asrs	r4, r4, #2
 8008c42:	bf18      	it	ne
 8008c44:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8008c48:	d005      	beq.n	8008c56 <__libc_fini_array+0x1e>
 8008c4a:	3c01      	subs	r4, #1
 8008c4c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008c50:	4798      	blx	r3
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	d1f9      	bne.n	8008c4a <__libc_fini_array+0x12>
 8008c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c5a:	f000 be05 	b.w	8009868 <_fini>
 8008c5e:	bf00      	nop
 8008c60:	0800987c 	.word	0x0800987c
 8008c64:	08009880 	.word	0x08009880

08008c68 <__register_exitproc>:
 8008c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6a:	4c27      	ldr	r4, [pc, #156]	; (8008d08 <__register_exitproc+0xa0>)
 8008c6c:	6826      	ldr	r6, [r4, #0]
 8008c6e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8008c72:	b085      	sub	sp, #20
 8008c74:	4607      	mov	r7, r0
 8008c76:	2c00      	cmp	r4, #0
 8008c78:	d041      	beq.n	8008cfe <__register_exitproc+0x96>
 8008c7a:	6865      	ldr	r5, [r4, #4]
 8008c7c:	2d1f      	cmp	r5, #31
 8008c7e:	dd1e      	ble.n	8008cbe <__register_exitproc+0x56>
 8008c80:	4822      	ldr	r0, [pc, #136]	; (8008d0c <__register_exitproc+0xa4>)
 8008c82:	b918      	cbnz	r0, 8008c8c <__register_exitproc+0x24>
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c88:	b005      	add	sp, #20
 8008c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008c90:	9103      	str	r1, [sp, #12]
 8008c92:	9202      	str	r2, [sp, #8]
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	f3af 8000 	nop.w
 8008c9a:	9903      	ldr	r1, [sp, #12]
 8008c9c:	9a02      	ldr	r2, [sp, #8]
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d0ee      	beq.n	8008c84 <__register_exitproc+0x1c>
 8008ca6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8008caa:	6025      	str	r5, [r4, #0]
 8008cac:	2000      	movs	r0, #0
 8008cae:	6060      	str	r0, [r4, #4]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8008cb6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8008cba:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8008cbe:	b93f      	cbnz	r7, 8008cd0 <__register_exitproc+0x68>
 8008cc0:	1cab      	adds	r3, r5, #2
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	6065      	str	r5, [r4, #4]
 8008cc8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008ccc:	b005      	add	sp, #20
 8008cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8008cd4:	f04f 0c01 	mov.w	ip, #1
 8008cd8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8008cdc:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8008ce0:	fa0c f205 	lsl.w	r2, ip, r5
 8008ce4:	4316      	orrs	r6, r2
 8008ce6:	2f02      	cmp	r7, #2
 8008ce8:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8008cec:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8008cf0:	d1e6      	bne.n	8008cc0 <__register_exitproc+0x58>
 8008cf2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8008cfc:	e7e0      	b.n	8008cc0 <__register_exitproc+0x58>
 8008cfe:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8008d02:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8008d06:	e7b8      	b.n	8008c7a <__register_exitproc+0x12>
 8008d08:	08009754 	.word	0x08009754
 8008d0c:	00000000 	.word	0x00000000
 8008d10:	ccbbaadd 	.word	0xccbbaadd
 8008d14:	00002211 	.word	0x00002211
 8008d18:	0800a8c0 	.word	0x0800a8c0
 8008d1c:	00ffffff 	.word	0x00ffffff
 8008d20:	0100a8c0 	.word	0x0100a8c0
 8008d24:	6f746f6d 	.word	0x6f746f6d
 8008d28:	00000072 	.word	0x00000072
 8008d2c:	6f746f6d 	.word	0x6f746f6d
 8008d30:	5b202072 	.word	0x5b202072
 8008d34:	6974706f 	.word	0x6974706f
 8008d38:	5d736e6f 	.word	0x5d736e6f
 8008d3c:	705ba0c2 	.word	0x705ba0c2
 8008d40:	6d617261 	.word	0x6d617261
 8008d44:	72657465 	.word	0x72657465
 8008d48:	a0c25d73 	.word	0xa0c25d73
 8008d4c:	7954202d 	.word	0x7954202d
 8008d50:	6d206570 	.word	0x6d206570
 8008d54:	726f746f 	.word	0x726f746f
 8008d58:	6c656820 	.word	0x6c656820
 8008d5c:	6f662070 	.word	0x6f662070
 8008d60:	6f6d2072 	.word	0x6f6d2072
 8008d64:	68206572 	.word	0x68206572
 8008d68:	0d706c65 	.word	0x0d706c65
 8008d6c:	00000a0a 	.word	0x00000a0a
 8008d70:	6b736174 	.word	0x6b736174
 8008d74:	00000000 	.word	0x00000000
 8008d78:	6b736174 	.word	0x6b736174
 8008d7c:	72202d20 	.word	0x72202d20
 8008d80:	72757465 	.word	0x72757465
 8008d84:	6174206e 	.word	0x6174206e
 8008d88:	20736b73 	.word	0x20736b73
 8008d8c:	7473696c 	.word	0x7473696c
 8008d90:	000a0a0d 	.word	0x000a0a0d
 8008d94:	00000000 	.word	0x00000000
 8008d98:	72616568 	.word	0x72616568
 8008d9c:	65622074 	.word	0x65622074
 8008da0:	25207461 	.word	0x25207461
 8008da4:	00000a64 	.word	0x00000a64
 8008da8:	6f746f6d 	.word	0x6f746f6d
 8008dac:	00000072 	.word	0x00000072
 8008db0:	6f746f6d 	.word	0x6f746f6d
 8008db4:	5b202072 	.word	0x5b202072
 8008db8:	6974706f 	.word	0x6974706f
 8008dbc:	5d736e6f 	.word	0x5d736e6f
 8008dc0:	705ba0c2 	.word	0x705ba0c2
 8008dc4:	6d617261 	.word	0x6d617261
 8008dc8:	72657465 	.word	0x72657465
 8008dcc:	a0c25d73 	.word	0xa0c25d73
 8008dd0:	7954202d 	.word	0x7954202d
 8008dd4:	6d206570 	.word	0x6d206570
 8008dd8:	726f746f 	.word	0x726f746f
 8008ddc:	6c656820 	.word	0x6c656820
 8008de0:	6f662070 	.word	0x6f662070
 8008de4:	6f6d2072 	.word	0x6f6d2072
 8008de8:	68206572 	.word	0x68206572
 8008dec:	0d706c65 	.word	0x0d706c65
 8008df0:	00000a0a 	.word	0x00000a0a
 8008df4:	6b736174 	.word	0x6b736174
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	6b736174 	.word	0x6b736174
 8008e00:	72202d20 	.word	0x72202d20
 8008e04:	72757465 	.word	0x72757465
 8008e08:	6174206e 	.word	0x6174206e
 8008e0c:	20736b73 	.word	0x20736b73
 8008e10:	7473696c 	.word	0x7473696c
 8008e14:	000a0a0d 	.word	0x000a0a0d
 8008e18:	00000000 	.word	0x00000000
 8008e1c:	65657073 	.word	0x65657073
 8008e20:	00000064 	.word	0x00000064
 8008e24:	6f727245 	.word	0x6f727245
 8008e28:	73203a72 	.word	0x73203a72
 8008e2c:	64656570 	.word	0x64656570
 8008e30:	20736920 	.word	0x20736920
 8008e34:	2074756f 	.word	0x2074756f
 8008e38:	7220666f 	.word	0x7220666f
 8008e3c:	65676e61 	.word	0x65676e61
 8008e40:	2c315b20 	.word	0x2c315b20
 8008e44:	5d303031 	.word	0x5d303031
 8008e48:	203a2070 	.word	0x203a2070
 8008e4c:	0a0a6425 	.word	0x0a0a6425
 8008e50:	00000000 	.word	0x00000000
 8008e54:	65657053 	.word	0x65657053
 8008e58:	75732064 	.word	0x75732064
 8008e5c:	65736363 	.word	0x65736363
 8008e60:	6c756673 	.word	0x6c756673
 8008e64:	7320796c 	.word	0x7320796c
 8008e68:	0a2e7465 	.word	0x0a2e7465
 8008e6c:	0000000a 	.word	0x0000000a
 8008e70:	42444f4d 	.word	0x42444f4d
 8008e74:	45205355 	.word	0x45205355
 8008e78:	524f5252 	.word	0x524f5252
 8008e7c:	21212120 	.word	0x21212120
 8008e80:	000a0a2e 	.word	0x000a0a2e
 8008e84:	6f727245 	.word	0x6f727245
 8008e88:	65722072 	.word	0x65722072
 8008e8c:	76656963 	.word	0x76656963
 8008e90:	20676e69 	.word	0x20676e69
 8008e94:	70736572 	.word	0x70736572
 8008e98:	65736e6f 	.word	0x65736e6f
 8008e9c:	000a0a21 	.word	0x000a0a21
 8008ea0:	6f727245 	.word	0x6f727245
 8008ea4:	65732072 	.word	0x65732072
 8008ea8:	6e69646e 	.word	0x6e69646e
 8008eac:	75512067 	.word	0x75512067
 8008eb0:	21657565 	.word	0x21657565
 8008eb4:	00000a0a 	.word	0x00000a0a
 8008eb8:	61727075 	.word	0x61727075
 8008ebc:	0000706d 	.word	0x0000706d
 8008ec0:	6f727245 	.word	0x6f727245
 8008ec4:	73203a72 	.word	0x73203a72
 8008ec8:	64656570 	.word	0x64656570
 8008ecc:	20736920 	.word	0x20736920
 8008ed0:	2074756f 	.word	0x2074756f
 8008ed4:	7220666f 	.word	0x7220666f
 8008ed8:	65676e61 	.word	0x65676e61
 8008edc:	35315b20 	.word	0x35315b20
 8008ee0:	3030332c 	.word	0x3030332c
 8008ee4:	3a20705d 	.word	0x3a20705d
 8008ee8:	0a642520 	.word	0x0a642520
 8008eec:	0000000a 	.word	0x0000000a
 8008ef0:	72207055 	.word	0x72207055
 8008ef4:	20706d61 	.word	0x20706d61
 8008ef8:	63637573 	.word	0x63637573
 8008efc:	66736573 	.word	0x66736573
 8008f00:	796c6c75 	.word	0x796c6c75
 8008f04:	74657320 	.word	0x74657320
 8008f08:	000a0a2e 	.word	0x000a0a2e
 8008f0c:	6e776f64 	.word	0x6e776f64
 8008f10:	706d6172 	.word	0x706d6172
 8008f14:	00000000 	.word	0x00000000
 8008f18:	65657053 	.word	0x65657053
 8008f1c:	73692064 	.word	0x73692064
 8008f20:	32252020 	.word	0x32252020
 8008f24:	32252e64 	.word	0x32252e64
 8008f28:	0a207064 	.word	0x0a207064
 8008f2c:	0000000a 	.word	0x0000000a
 8008f30:	72207055 	.word	0x72207055
 8008f34:	20706d61 	.word	0x20706d61
 8008f38:	25207369 	.word	0x25207369
 8008f3c:	65732064 	.word	0x65732064
 8008f40:	646e6f63 	.word	0x646e6f63
 8008f44:	000a0a73 	.word	0x000a0a73
 8008f48:	00000000 	.word	0x00000000
 8008f4c:	66206f54 	.word	0x66206f54
 8008f50:	61207765 	.word	0x61207765
 8008f54:	6d756772 	.word	0x6d756772
 8008f58:	73746e65 	.word	0x73746e65
 8008f5c:	0a0a202e 	.word	0x0a0a202e
 8008f60:	00000000 	.word	0x00000000
 8008f64:	706c6568 	.word	0x706c6568
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	67617355 	.word	0x67617355
 8008f70:	6e612065 	.word	0x6e612065
 8008f74:	61702064 	.word	0x61702064
 8008f78:	656d6172 	.word	0x656d6172
 8008f7c:	73726574 	.word	0x73726574
 8008f80:	74706f0a 	.word	0x74706f0a
 8008f84:	736e6f69 	.word	0x736e6f69
 8008f88:	67090a3a 	.word	0x67090a3a
 8008f8c:	2d207465 	.word	0x2d207465
 8008f90:	74656720 	.word	0x74656720
 8008f94:	746f6d20 	.word	0x746f6d20
 8008f98:	7020726f 	.word	0x7020726f
 8008f9c:	6d617261 	.word	0x6d617261
 8008fa0:	72657465 	.word	0x72657465
 8008fa4:	6c617620 	.word	0x6c617620
 8008fa8:	090a6575 	.word	0x090a6575
 8008fac:	20746573 	.word	0x20746573
 8008fb0:	6573202d 	.word	0x6573202d
 8008fb4:	6f6d2074 	.word	0x6f6d2074
 8008fb8:	20726f74 	.word	0x20726f74
 8008fbc:	61726170 	.word	0x61726170
 8008fc0:	6574656d 	.word	0x6574656d
 8008fc4:	61762072 	.word	0x61762072
 8008fc8:	0a65756c 	.word	0x0a65756c
 8008fcc:	61747309 	.word	0x61747309
 8008fd0:	2d207472 	.word	0x2d207472
 8008fd4:	61747320 	.word	0x61747320
 8008fd8:	20737472 	.word	0x20737472
 8008fdc:	6f746f6d 	.word	0x6f746f6d
 8008fe0:	73090a72 	.word	0x73090a72
 8008fe4:	20706f74 	.word	0x20706f74
 8008fe8:	7473202d 	.word	0x7473202d
 8008fec:	2073706f 	.word	0x2073706f
 8008ff0:	6f746f6d 	.word	0x6f746f6d
 8008ff4:	61700a72 	.word	0x61700a72
 8008ff8:	656d6172 	.word	0x656d6172
 8008ffc:	3a737274 	.word	0x3a737274
 8009000:	7073090a 	.word	0x7073090a
 8009004:	20646565 	.word	0x20646565
 8009008:	6573202d 	.word	0x6573202d
 800900c:	73207374 	.word	0x73207374
 8009010:	64656570 	.word	0x64656570
 8009014:	7075090a 	.word	0x7075090a
 8009018:	706d6172 	.word	0x706d6172
 800901c:	6f64090a 	.word	0x6f64090a
 8009020:	61726e77 	.word	0x61726e77
 8009024:	000a706d 	.word	0x000a706d
 8009028:	00000000 	.word	0x00000000
 800902c:	00746573 	.word	0x00746573
 8009030:	00746567 	.word	0x00746567
 8009034:	706f7473 	.word	0x706f7473
 8009038:	00000000 	.word	0x00000000
 800903c:	6f746f4d 	.word	0x6f746f4d
 8009040:	75732072 	.word	0x75732072
 8009044:	65736363 	.word	0x65736363
 8009048:	6c756673 	.word	0x6c756673
 800904c:	7320796c 	.word	0x7320796c
 8009050:	70706f74 	.word	0x70706f74
 8009054:	0a2e6465 	.word	0x0a2e6465
 8009058:	0000000a 	.word	0x0000000a
 800905c:	72617473 	.word	0x72617473
 8009060:	00000074 	.word	0x00000074
 8009064:	6f746f4d 	.word	0x6f746f4d
 8009068:	75732072 	.word	0x75732072
 800906c:	65736363 	.word	0x65736363
 8009070:	6c756673 	.word	0x6c756673
 8009074:	7320796c 	.word	0x7320796c
 8009078:	74726174 	.word	0x74726174
 800907c:	0a2e6465 	.word	0x0a2e6465
 8009080:	0000000a 	.word	0x0000000a
 8009084:	6c6c696b 	.word	0x6c6c696b
 8009088:	00000000 	.word	0x00000000
 800908c:	6b736154 	.word	0x6b736154
 8009090:	6f6d203a 	.word	0x6f6d203a
 8009094:	48726f74 	.word	0x48726f74
 8009098:	75732042 	.word	0x75732042
 800909c:	65736363 	.word	0x65736363
 80090a0:	75667373 	.word	0x75667373
 80090a4:	20796c6c 	.word	0x20796c6c
 80090a8:	6c6c696b 	.word	0x6c6c696b
 80090ac:	000a6465 	.word	0x000a6465
 80090b0:	00000000 	.word	0x00000000
 80090b4:	6f746f6d 	.word	0x6f746f6d
 80090b8:	00424872 	.word	0x00424872
 80090bc:	6b736154 	.word	0x6b736154
 80090c0:	6f6d203a 	.word	0x6f6d203a
 80090c4:	48726f74 	.word	0x48726f74
 80090c8:	75732042 	.word	0x75732042
 80090cc:	65736363 	.word	0x65736363
 80090d0:	75667373 	.word	0x75667373
 80090d4:	20796c6c 	.word	0x20796c6c
 80090d8:	72617473 	.word	0x72617473
 80090dc:	0a646574 	.word	0x0a646574
 80090e0:	00000000 	.word	0x00000000
 80090e4:	6c756e28 	.word	0x6c756e28
 80090e8:	0000296c 	.word	0x0000296c
 80090ec:	6f746f6d 	.word	0x6f746f6d
 80090f0:	00000072 	.word	0x00000072
 80090f4:	6f746f6d 	.word	0x6f746f6d
 80090f8:	5b202072 	.word	0x5b202072
 80090fc:	6974706f 	.word	0x6974706f
 8009100:	5d736e6f 	.word	0x5d736e6f
 8009104:	705ba0c2 	.word	0x705ba0c2
 8009108:	6d617261 	.word	0x6d617261
 800910c:	72657465 	.word	0x72657465
 8009110:	a0c25d73 	.word	0xa0c25d73
 8009114:	7954202d 	.word	0x7954202d
 8009118:	6d206570 	.word	0x6d206570
 800911c:	726f746f 	.word	0x726f746f
 8009120:	6c656820 	.word	0x6c656820
 8009124:	6f662070 	.word	0x6f662070
 8009128:	6f6d2072 	.word	0x6f6d2072
 800912c:	68206572 	.word	0x68206572
 8009130:	0d706c65 	.word	0x0d706c65
 8009134:	00000a0a 	.word	0x00000a0a
 8009138:	6b736174 	.word	0x6b736174
 800913c:	00000000 	.word	0x00000000
 8009140:	6b736174 	.word	0x6b736174
 8009144:	72202d20 	.word	0x72202d20
 8009148:	72757465 	.word	0x72757465
 800914c:	6174206e 	.word	0x6174206e
 8009150:	20736b73 	.word	0x20736b73
 8009154:	7473696c 	.word	0x7473696c
 8009158:	000a0a0d 	.word	0x000a0a0d
 800915c:	00000000 	.word	0x00000000
 8009160:	72617453 	.word	0x72617453
 8009164:	676e6974 	.word	0x676e6974
 8009168:	0000000a 	.word	0x0000000a
 800916c:	73504354 	.word	0x73504354
 8009170:	00007672 	.word	0x00007672
 8009174:	6f746f6d 	.word	0x6f746f6d
 8009178:	00424872 	.word	0x00424872
 800917c:	74696e69 	.word	0x74696e69
 8009180:	3235575f 	.word	0x3235575f
 8009184:	00003030 	.word	0x00003030
 8009188:	454c4449 	.word	0x454c4449
 800918c:	00000000 	.word	0x00000000
 8009190:	09097325 	.word	0x09097325
 8009194:	25096325 	.word	0x25096325
 8009198:	75250975 	.word	0x75250975
 800919c:	0d752509 	.word	0x0d752509
 80091a0:	0000000a 	.word	0x0000000a
 80091a4:	20726d54 	.word	0x20726d54
 80091a8:	00637653 	.word	0x00637653
 80091ac:	706c6568 	.word	0x706c6568
 80091b0:	00000000 	.word	0x00000000
 80091b4:	65680a0d 	.word	0x65680a0d
 80091b8:	0d3a706c 	.word	0x0d3a706c
 80091bc:	694c200a 	.word	0x694c200a
 80091c0:	20737473 	.word	0x20737473
 80091c4:	206c6c61 	.word	0x206c6c61
 80091c8:	20656874 	.word	0x20656874
 80091cc:	69676572 	.word	0x69676572
 80091d0:	72657473 	.word	0x72657473
 80091d4:	63206465 	.word	0x63206465
 80091d8:	616d6d6f 	.word	0x616d6d6f
 80091dc:	0d73646e 	.word	0x0d73646e
 80091e0:	000a0d0a 	.word	0x000a0d0a
 80091e4:	6f636e49 	.word	0x6f636e49
 80091e8:	63657272 	.word	0x63657272
 80091ec:	6f632074 	.word	0x6f632074
 80091f0:	6e616d6d 	.word	0x6e616d6d
 80091f4:	61702064 	.word	0x61702064
 80091f8:	656d6172 	.word	0x656d6172
 80091fc:	28726574 	.word	0x28726574
 8009200:	202e2973 	.word	0x202e2973
 8009204:	746e4520 	.word	0x746e4520
 8009208:	22207265 	.word	0x22207265
 800920c:	706c6568 	.word	0x706c6568
 8009210:	6f742022 	.word	0x6f742022
 8009214:	65697620 	.word	0x65697620
 8009218:	20612077 	.word	0x20612077
 800921c:	7473696c 	.word	0x7473696c
 8009220:	20666f20 	.word	0x20666f20
 8009224:	69617661 	.word	0x69617661
 8009228:	6c62616c 	.word	0x6c62616c
 800922c:	6f632065 	.word	0x6f632065
 8009230:	6e616d6d 	.word	0x6e616d6d
 8009234:	0d2e7364 	.word	0x0d2e7364
 8009238:	000a0d0a 	.word	0x000a0d0a
 800923c:	6d6d6f43 	.word	0x6d6d6f43
 8009240:	20646e61 	.word	0x20646e61
 8009244:	20746f6e 	.word	0x20746f6e
 8009248:	6f636572 	.word	0x6f636572
 800924c:	73696e67 	.word	0x73696e67
 8009250:	202e6465 	.word	0x202e6465
 8009254:	746e4520 	.word	0x746e4520
 8009258:	27207265 	.word	0x27207265
 800925c:	706c6568 	.word	0x706c6568
 8009260:	6f742027 	.word	0x6f742027
 8009264:	65697620 	.word	0x65697620
 8009268:	20612077 	.word	0x20612077
 800926c:	7473696c 	.word	0x7473696c
 8009270:	20666f20 	.word	0x20666f20
 8009274:	69617661 	.word	0x69617661
 8009278:	6c62616c 	.word	0x6c62616c
 800927c:	6f632065 	.word	0x6f632065
 8009280:	6e616d6d 	.word	0x6e616d6d
 8009284:	0d2e7364 	.word	0x0d2e7364
 8009288:	000a0d0a 	.word	0x000a0d0a
 800928c:	2f707041 	.word	0x2f707041
 8009290:	334d5453 	.word	0x334d5453
 8009294:	2d344632 	.word	0x2d344632
 8009298:	63736944 	.word	0x63736944
 800929c:	7265766f 	.word	0x7265766f
 80092a0:	694c2f79 	.word	0x694c2f79
 80092a4:	72617262 	.word	0x72617262
 80092a8:	2f736569 	.word	0x2f736569
 80092ac:	334d5453 	.word	0x334d5453
 80092b0:	78344632 	.word	0x78344632
 80092b4:	74535f78 	.word	0x74535f78
 80092b8:	72655064 	.word	0x72655064
 80092bc:	5f687069 	.word	0x5f687069
 80092c0:	76697244 	.word	0x76697244
 80092c4:	732f7265 	.word	0x732f7265
 80092c8:	6d2f6372 	.word	0x6d2f6372
 80092cc:	2e637369 	.word	0x2e637369
 80092d0:	00000063 	.word	0x00000063
 80092d4:	2f707041 	.word	0x2f707041
 80092d8:	334d5453 	.word	0x334d5453
 80092dc:	2d344632 	.word	0x2d344632
 80092e0:	63736944 	.word	0x63736944
 80092e4:	7265766f 	.word	0x7265766f
 80092e8:	694c2f79 	.word	0x694c2f79
 80092ec:	72617262 	.word	0x72617262
 80092f0:	2f736569 	.word	0x2f736569
 80092f4:	334d5453 	.word	0x334d5453
 80092f8:	78344632 	.word	0x78344632
 80092fc:	74535f78 	.word	0x74535f78
 8009300:	72655064 	.word	0x72655064
 8009304:	5f687069 	.word	0x5f687069
 8009308:	76697244 	.word	0x76697244
 800930c:	732f7265 	.word	0x732f7265
 8009310:	732f6372 	.word	0x732f6372
 8009314:	32336d74 	.word	0x32336d74
 8009318:	78783466 	.word	0x78783466
 800931c:	616d645f 	.word	0x616d645f
 8009320:	0000632e 	.word	0x0000632e
 8009324:	2f707041 	.word	0x2f707041
 8009328:	334d5453 	.word	0x334d5453
 800932c:	2d344632 	.word	0x2d344632
 8009330:	63736944 	.word	0x63736944
 8009334:	7265766f 	.word	0x7265766f
 8009338:	694c2f79 	.word	0x694c2f79
 800933c:	72617262 	.word	0x72617262
 8009340:	2f736569 	.word	0x2f736569
 8009344:	334d5453 	.word	0x334d5453
 8009348:	78344632 	.word	0x78344632
 800934c:	74535f78 	.word	0x74535f78
 8009350:	72655064 	.word	0x72655064
 8009354:	5f687069 	.word	0x5f687069
 8009358:	76697244 	.word	0x76697244
 800935c:	732f7265 	.word	0x732f7265
 8009360:	732f6372 	.word	0x732f6372
 8009364:	32336d74 	.word	0x32336d74
 8009368:	78783466 	.word	0x78783466
 800936c:	7478655f 	.word	0x7478655f
 8009370:	00632e69 	.word	0x00632e69
 8009374:	2f707041 	.word	0x2f707041
 8009378:	334d5453 	.word	0x334d5453
 800937c:	2d344632 	.word	0x2d344632
 8009380:	63736944 	.word	0x63736944
 8009384:	7265766f 	.word	0x7265766f
 8009388:	694c2f79 	.word	0x694c2f79
 800938c:	72617262 	.word	0x72617262
 8009390:	2f736569 	.word	0x2f736569
 8009394:	334d5453 	.word	0x334d5453
 8009398:	78344632 	.word	0x78344632
 800939c:	74535f78 	.word	0x74535f78
 80093a0:	72655064 	.word	0x72655064
 80093a4:	5f687069 	.word	0x5f687069
 80093a8:	76697244 	.word	0x76697244
 80093ac:	732f7265 	.word	0x732f7265
 80093b0:	732f6372 	.word	0x732f6372
 80093b4:	32336d74 	.word	0x32336d74
 80093b8:	78783466 	.word	0x78783466
 80093bc:	6970675f 	.word	0x6970675f
 80093c0:	00632e6f 	.word	0x00632e6f
 80093c4:	2f707041 	.word	0x2f707041
 80093c8:	334d5453 	.word	0x334d5453
 80093cc:	2d344632 	.word	0x2d344632
 80093d0:	63736944 	.word	0x63736944
 80093d4:	7265766f 	.word	0x7265766f
 80093d8:	694c2f79 	.word	0x694c2f79
 80093dc:	72617262 	.word	0x72617262
 80093e0:	2f736569 	.word	0x2f736569
 80093e4:	334d5453 	.word	0x334d5453
 80093e8:	78344632 	.word	0x78344632
 80093ec:	74535f78 	.word	0x74535f78
 80093f0:	72655064 	.word	0x72655064
 80093f4:	5f687069 	.word	0x5f687069
 80093f8:	76697244 	.word	0x76697244
 80093fc:	732f7265 	.word	0x732f7265
 8009400:	732f6372 	.word	0x732f6372
 8009404:	32336d74 	.word	0x32336d74
 8009408:	78783466 	.word	0x78783466
 800940c:	6363725f 	.word	0x6363725f
 8009410:	0000632e 	.word	0x0000632e
 8009414:	2f707041 	.word	0x2f707041
 8009418:	334d5453 	.word	0x334d5453
 800941c:	2d344632 	.word	0x2d344632
 8009420:	63736944 	.word	0x63736944
 8009424:	7265766f 	.word	0x7265766f
 8009428:	694c2f79 	.word	0x694c2f79
 800942c:	72617262 	.word	0x72617262
 8009430:	2f736569 	.word	0x2f736569
 8009434:	334d5453 	.word	0x334d5453
 8009438:	78344632 	.word	0x78344632
 800943c:	74535f78 	.word	0x74535f78
 8009440:	72655064 	.word	0x72655064
 8009444:	5f687069 	.word	0x5f687069
 8009448:	76697244 	.word	0x76697244
 800944c:	732f7265 	.word	0x732f7265
 8009450:	732f6372 	.word	0x732f6372
 8009454:	32336d74 	.word	0x32336d74
 8009458:	78783466 	.word	0x78783466
 800945c:	6970735f 	.word	0x6970735f
 8009460:	0000632e 	.word	0x0000632e
 8009464:	2f707041 	.word	0x2f707041
 8009468:	334d5453 	.word	0x334d5453
 800946c:	2d344632 	.word	0x2d344632
 8009470:	63736944 	.word	0x63736944
 8009474:	7265766f 	.word	0x7265766f
 8009478:	694c2f79 	.word	0x694c2f79
 800947c:	72617262 	.word	0x72617262
 8009480:	2f736569 	.word	0x2f736569
 8009484:	334d5453 	.word	0x334d5453
 8009488:	78344632 	.word	0x78344632
 800948c:	74535f78 	.word	0x74535f78
 8009490:	72655064 	.word	0x72655064
 8009494:	5f687069 	.word	0x5f687069
 8009498:	76697244 	.word	0x76697244
 800949c:	732f7265 	.word	0x732f7265
 80094a0:	732f6372 	.word	0x732f6372
 80094a4:	32336d74 	.word	0x32336d74
 80094a8:	78783466 	.word	0x78783466
 80094ac:	7379735f 	.word	0x7379735f
 80094b0:	2e676663 	.word	0x2e676663
 80094b4:	00000063 	.word	0x00000063
 80094b8:	2f707041 	.word	0x2f707041
 80094bc:	334d5453 	.word	0x334d5453
 80094c0:	2d344632 	.word	0x2d344632
 80094c4:	63736944 	.word	0x63736944
 80094c8:	7265766f 	.word	0x7265766f
 80094cc:	694c2f79 	.word	0x694c2f79
 80094d0:	72617262 	.word	0x72617262
 80094d4:	2f736569 	.word	0x2f736569
 80094d8:	334d5453 	.word	0x334d5453
 80094dc:	78344632 	.word	0x78344632
 80094e0:	74535f78 	.word	0x74535f78
 80094e4:	72655064 	.word	0x72655064
 80094e8:	5f687069 	.word	0x5f687069
 80094ec:	76697244 	.word	0x76697244
 80094f0:	732f7265 	.word	0x732f7265
 80094f4:	732f6372 	.word	0x732f6372
 80094f8:	32336d74 	.word	0x32336d74
 80094fc:	78783466 	.word	0x78783466
 8009500:	6173755f 	.word	0x6173755f
 8009504:	632e7472 	.word	0x632e7472
 8009508:	00000000 	.word	0x00000000

0800950c <table_crc_hi>:
 800950c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800951c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800952c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800953c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800954c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800955c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800956c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800957c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800958c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800959c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80095ac:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80095bc:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80095cc:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80095dc:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80095ec:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80095fc:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@

0800960c <table_crc_lo>:
 800960c:	01c1c000 c20203c3 c70706c6 04c4c505     ................
 800961c:	cd0d0ccc 0ececf0f 0bcbca0a c80809c9     ................
 800962c:	d91918d8 1adadb1b 1fdfde1e dc1c1ddd     ................
 800963c:	15d5d414 d61617d7 d31312d2 10d0d111     ................
 800964c:	f13130f0 32f2f333 37f7f636 f43435f5     .01.3..26..7.54.
 800965c:	3dfdfc3c fe3e3fff fb3b3afa 38f8f939     <..=.?>..:;.9..8
 800966c:	29e9e828 ea2a2beb ef2f2eee 2ceced2d     (..).+*.../.-..,
 800967c:	e52524e4 26e6e727 23e3e222 e02021e1     .$%.'..&"..#.! .
 800968c:	a16160a0 62a2a363 67a7a666 a46465a5     .`a.c..bf..g.ed.
 800969c:	6dadac6c ae6e6faf ab6b6aaa 68a8a969     l..m.on..jk.i..h
 80096ac:	79b9b878 ba7a7bbb bf7f7ebe 7cbcbd7d     x..y.{z..~..}..|
 80096bc:	b57574b4 76b6b777 73b3b272 b07071b1     .tu.w..vr..s.qp.
 80096cc:	51919050 92525393 97575696 54949555     P..Q.SR..VW.U..T
 80096dc:	9d5d5c9c 5e9e9f5f 5b9b9a5a 98585999     .\]._..^Z..[.YX.
 80096ec:	89494888 4a8a8b4b 4f8f8e4e 8c4c4d8d     .HI.K..JN..O.ML.
 80096fc:	45858444 86464787 83434282 40808141     D..E.GF..BC.A..@

0800970c <xMotorCommand>:
 800970c:	080090ec 080090f4 08002645 000000ff     ........E&......

0800971c <xTaskStatsCommand>:
 800971c:	08009138 08009140 080029bd 000000ff     8...@....)......

0800972c <ucExpectedStackBytes.9202>:
 800972c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 800973c:	a5a5a5a5                                ....

08009740 <xHelpCommand>:
 8009740:	080091ac 080091b4 08005ce9 00000000     .........\......
 8009750:	00000043                                C...

08009754 <_global_impure_ptr>:
 8009754:	20000040                                @.. 

08009758 <_ctype_>:
 8009758:	20202000 20202020 28282020 20282828     .         ((((( 
 8009768:	20202020 20202020 20202020 20202020                     
 8009778:	10108820 10101010 10101010 10101010      ...............
 8009788:	04040410 04040404 10040404 10101010     ................
 8009798:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80097a8:	01010101 01010101 01010101 10101010     ................
 80097b8:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80097c8:	02020202 02020202 02020202 10101010     ................
 80097d8:	00000020 00000000 00000000 00000000      ...............
 80097e8:	00000000 00000000 00000000 00000000     ................
 80097f8:	00000000 00000000 00000000 00000000     ................
 8009808:	00000000 00000000 00000000 00000000     ................
 8009818:	00000000 00000000 00000000 00000000     ................
 8009828:	00000000 00000000 00000000 00000000     ................
 8009838:	00000000 00000000 00000000 00000000     ................
 8009848:	00000000 00000000 00000000 00000000     ................
 8009858:	00000000                                ....

0800985c <_init>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr

08009868 <_fini>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr
