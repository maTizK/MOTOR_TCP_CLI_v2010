
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000890c  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08008a94  08008a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08008a9c  08008a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000460  20000000  08008aa0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013f7c  20000460  08008f00  00018460  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200143dc  0801ce7c  00018460  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00018460  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b38c  00000000  00000000  0001848e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002457  00000000  00000000  0002381a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004727  00000000  00000000  00025c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c90  00000000  00000000  0002a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  0002b028  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f73  00000000  00000000  0002bb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042fd  00000000  00000000  00031acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  00035dc8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002cf0  00000000  00000000  00035e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000460 	.word	0x20000460
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a7c 	.word	0x08008a7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008a7c 	.word	0x08008a7c
 80001d0:	20000464 	.word	0x20000464
 80001d4:	20000460 	.word	0x20000460
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
#define pdTrue 	1

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f006 fdfb 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f006 fdf7 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f006 fdf3 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	48b1      	ldr	r0, [pc, #708]	; (8000614 <init_SPIx+0x304>)
 8000350:	4619      	mov	r1, r3
 8000352:	f006 faf7 	bl	8006944 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000376:	48a7      	ldr	r0, [pc, #668]	; (8000614 <init_SPIx+0x304>)
 8000378:	4619      	mov	r1, r3
 800037a:	f006 fae3 	bl	8006944 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039e:	489d      	ldr	r0, [pc, #628]	; (8000614 <init_SPIx+0x304>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f006 facf 	bl	8006944 <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	489b      	ldr	r0, [pc, #620]	; (8000614 <init_SPIx+0x304>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f006 fbe0 	bl	8006b70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	4898      	ldr	r0, [pc, #608]	; (8000614 <init_SPIx+0x304>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f006 fbdb 	bl	8006b70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	4896      	ldr	r0, [pc, #600]	; (8000614 <init_SPIx+0x304>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f006 fbd6 	bl	8006b70 <GPIO_PinAFConfig>


	RCC_AHB1PeriphClockCmd(WIZ_HR_GPIO_CLK, ENABLE);
 80003c4:	2004      	movs	r0, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	f006 fda4 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(WIZ_IT_GPIO_CLK, ENABLE);
 80003cc:	2004      	movs	r0, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	f006 fda0 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	
		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003d4:	2310      	movs	r3, #16
 80003d6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003d8:	2301      	movs	r3, #1
 80003da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <init_SPIx+0x304>)
 80003f6:	4619      	mov	r1, r3
 80003f8:	f006 faa4 	bl	8006944 <GPIO_Init>
	
	CSOFF(); // set PA4 high
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 80003fe:	4a85      	ldr	r2, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 8000400:	8b12      	ldrh	r2, [r2, #24]
 8000402:	b292      	uxth	r2, r2
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	b292      	uxth	r2, r2
 800040a:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = WIZ_HR_PIN;
 800040c:	2320      	movs	r3, #32
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000422:	2301      	movs	r3, #1
 8000424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(WIZ_HR_GPIO_PORT, &GPIO_InitStruct);
 8000428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800042c:	487a      	ldr	r0, [pc, #488]	; (8000618 <init_SPIx+0x308>)
 800042e:	4619      	mov	r1, r3
 8000430:	f006 fa88 	bl	8006944 <GPIO_Init>
	
	RESET_LOW(); // set PA3 high
 8000434:	4b78      	ldr	r3, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000436:	4a78      	ldr	r2, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000438:	8b12      	ldrh	r2, [r2, #24]
 800043a:	b292      	uxth	r2, r2
 800043c:	f042 0220 	orr.w	r2, r2, #32
 8000440:	b292      	uxth	r2, r2
 8000442:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 8000444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000448:	2101      	movs	r1, #1
 800044a:	f006 fd9b 	bl	8006f84 <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800044e:	2300      	movs	r3, #0
 8000450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000462:	2300      	movs	r3, #0
 8000464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800046e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000476:	2308      	movs	r3, #8
 8000478:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPIx, &SPI_InitStruct); 
 8000482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000486:	4865      	ldr	r0, [pc, #404]	; (800061c <init_SPIx+0x30c>)
 8000488:	4619      	mov	r1, r3
 800048a:	f006 fdb3 	bl	8006ff4 <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 800048e:	4863      	ldr	r0, [pc, #396]	; (800061c <init_SPIx+0x30c>)
 8000490:	2101      	movs	r1, #1
 8000492:	f006 fea1 	bl	80071d8 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000496:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800049a:	2101      	movs	r1, #1
 800049c:	f006 fd3a 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 80004a0:	485f      	ldr	r0, [pc, #380]	; (8000620 <init_SPIx+0x310>)
 80004a2:	f005 f967 	bl	8005774 <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 80004a6:	485f      	ldr	r0, [pc, #380]	; (8000624 <init_SPIx+0x314>)
 80004a8:	f005 f964 	bl	8005774 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 80004ac:	bf00      	nop
 80004ae:	485c      	ldr	r0, [pc, #368]	; (8000620 <init_SPIx+0x310>)
 80004b0:	f005 fd70 	bl	8005f94 <DMA_GetCmdStatus>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <init_SPIx+0x19e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 80004ba:	bf00      	nop
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <init_SPIx+0x314>)
 80004be:	f005 fd69 	bl	8005f94 <DMA_GetCmdStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <init_SPIx+0x1ac>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f005 fc2b 	bl	8005d28 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <init_SPIx+0x318>)
 80004e2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <init_SPIx+0x31c>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <init_SPIx+0x310>)
 8000510:	4619      	mov	r1, r3
 8000512:	f005 fa45 	bl	80059a0 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 8000516:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800051a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <init_SPIx+0x320>)
 8000522:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000528:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <init_SPIx+0x314>)
 8000530:	4619      	mov	r1, r3
 8000532:	f005 fa35 	bl	80059a0 <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <init_SPIx+0x310>)
 8000538:	2110      	movs	r1, #16
 800053a:	2201      	movs	r2, #1
 800053c:	f005 fda8 	bl	8006090 <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000540:	4838      	ldr	r0, [pc, #224]	; (8000624 <init_SPIx+0x314>)
 8000542:	2110      	movs	r1, #16
 8000544:	2201      	movs	r2, #1
 8000546:	f005 fda3 	bl	8006090 <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <init_SPIx+0x30c>)
 800054c:	2102      	movs	r1, #2
 800054e:	f006 ff41 	bl	80073d4 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <init_SPIx+0x30c>)
 8000554:	2101      	movs	r1, #1
 8000556:	f006 ff3d 	bl	80073d4 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 800055a:	233b      	movs	r3, #59	; 0x3b
 800055c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;
 800055e:	2306      	movs	r3, #6
 8000560:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000562:	2301      	movs	r3, #1
 8000564:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f005 f886 	bl	8005680 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 8000574:	233a      	movs	r3, #58	; 0x3a
 8000576:	733b      	strb	r3, [r7, #12]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;
 8000578:	2306      	movs	r3, #6
 800057a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 800057c:	2301      	movs	r3, #1
 800057e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f005 f879 	bl	8005680 <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800058e:	4823      	ldr	r0, [pc, #140]	; (800061c <init_SPIx+0x30c>)
 8000590:	2102      	movs	r1, #2
 8000592:	2201      	movs	r2, #1
 8000594:	f006 fe62 	bl	800725c <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <init_SPIx+0x30c>)
 800059a:	2101      	movs	r1, #1
 800059c:	2201      	movs	r2, #1
 800059e:	f006 fe5d 	bl	800725c <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin */
	GPIO_InitStruct.GPIO_Pin = WIZ_IT_PIN;
 80005a2:	2310      	movs	r3, #16
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(WIZ_IT_GPIO_PORT, &GPIO_InitStruct);	
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <init_SPIx+0x308>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	f006 f9bd 	bl	8006944 <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2101      	movs	r1, #1
 80005d0:	f006 fcd8 	bl	8006f84 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(WIZ_IT_EXTI_PORT_SOURCE, WIZ_IT_EXTI_PIN_SOURCE);
 80005d4:	2002      	movs	r0, #2
 80005d6:	2104      	movs	r1, #4
 80005d8:	f006 ff36 	bl	8007448 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = WIZ_IT_EXTI_LINE;
 80005dc:	2310      	movs	r3, #16
 80005de:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005e0:	2300      	movs	r3, #0
 80005e2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005e4:	230c      	movs	r3, #12
 80005e6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 f86c 	bl	80066cc <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = WIZ_IT_EXTI_IRQn;
 80005f4:	230a      	movs	r3, #10
 80005f6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 5;
 80005f8:	230a      	movs	r3, #10
 80005fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f005 f83a 	bl	8005680 <NVIC_Init>


	
}
 800060c:	3768      	adds	r7, #104	; 0x68
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020800 	.word	0x40020800
 800061c:	40013000 	.word	0x40013000
 8000620:	40026458 	.word	0x40026458
 8000624:	40026440 	.word	0x40026440
 8000628:	4001300c 	.word	0x4001300c
 800062c:	200139d8 	.word	0x200139d8
 8000630:	20013200 	.word	0x20013200

08000634 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 800063a:	491e      	ldr	r1, [pc, #120]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800063c:	f005 fdde 	bl	80061fc <DMA_GetITStatus>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02a      	beq.n	800069c <DMA2_Stream2_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000648:	491a      	ldr	r1, [pc, #104]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800064a:	f005 ff93 	bl	8006574 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800064e:	bf00      	nop
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	f006 fe60 	bl	8007318 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <DMA2_Stream2_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000662:	8b12      	ldrh	r2, [r2, #24]
 8000664:	b292      	uxth	r2, r2
 8000666:	f042 0210 	orr.w	r2, r2, #16
 800066a:	b292      	uxth	r2, r2
 800066c:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000670:	2100      	movs	r1, #0
 8000672:	f005 fb8f 	bl	8005d94 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000678:	2100      	movs	r1, #0
 800067a:	f005 fb8b 	bl	8005d94 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 800067e:	f004 f9b5 	bl	80049ec <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xHigherPriorityTaskWoken = pdFalse;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA2_Stream2_IRQHandler+0x94>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	2100      	movs	r1, #0
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000692:	2300      	movs	r3, #0
 8000694:	f003 fdbc 	bl	8004210 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 8000698:	f004 f9b8 	bl	8004a0c <vPortExitCritical>
  }	

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <DMA2_Stream2_IRQHandler+0x78>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <DMA2_Stream2_IRQHandler+0x98>)
 80006a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40026440 	.word	0x40026440
 80006b4:	10208000 	.word	0x10208000
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40026458 	.word	0x40026458
 80006c4:	2000047c 	.word	0x2000047c
 80006c8:	200131ec 	.word	0x200131ec
 80006cc:	e000ed04 	.word	0xe000ed04

080006d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006d6:	491e      	ldr	r1, [pc, #120]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006d8:	f005 fd90 	bl	80061fc <DMA_GetITStatus>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d02a      	beq.n	8000738 <DMA2_Stream3_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006e6:	f005 ff45 	bl	8006574 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006ea:	bf00      	nop
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	f006 fe12 	bl	8007318 <SPI_I2S_GetFlagStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0f8      	beq.n	80006ec <DMA2_Stream3_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fe:	8b12      	ldrh	r2, [r2, #24]
 8000700:	b292      	uxth	r2, r2
 8000702:	f042 0210 	orr.w	r2, r2, #16
 8000706:	b292      	uxth	r2, r2
 8000708:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 800070c:	2100      	movs	r1, #0
 800070e:	f005 fb41 	bl	8005d94 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000714:	2100      	movs	r1, #0
 8000716:	f005 fb3d 	bl	8005d94 <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 800071a:	f004 f967 	bl	80049ec <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xHigherPriorityTaskWoken = pdFalse;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <DMA2_Stream3_IRQHandler+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800072e:	2300      	movs	r3, #0
 8000730:	f003 fd6e 	bl	8004210 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000734:	f004 f96a 	bl	8004a0c <vPortExitCritical>
 }
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <DMA2_Stream3_IRQHandler+0x78>
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DMA2_Stream3_IRQHandler+0x98>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40026458 	.word	0x40026458
 8000750:	18008000 	.word	0x18008000
 8000754:	40013000 	.word	0x40013000
 8000758:	40020000 	.word	0x40020000
 800075c:	40026440 	.word	0x40026440
 8000760:	2000047c 	.word	0x2000047c
 8000764:	200131ec 	.word	0x200131ec
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <spi_dma_send>:


/*---------------------------- Matic Knap 25 Jun 2014 ---------------------*/

void spi_dma_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
{
 800076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	460b      	mov	r3, r1
 8000776:	603a      	str	r2, [r7, #0]
 8000778:	4602      	mov	r2, r0
 800077a:	80fa      	strh	r2, [r7, #6]
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	466b      	mov	r3, sp
 8000780:	461e      	mov	r6, r3
		uint8_t buffer[data_len+4];
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	1d19      	adds	r1, r3, #4
 8000786:	1e4b      	subs	r3, r1, #1
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	460b      	mov	r3, r1
 800078c:	461a      	mov	r2, r3
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000796:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800079a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800079e:	460b      	mov	r3, r1
 80007a0:	461a      	mov	r2, r3
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	00dd      	lsls	r5, r3, #3
 80007a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80007ac:	00d4      	lsls	r4, r2, #3
 80007ae:	460b      	mov	r3, r1
 80007b0:	3307      	adds	r3, #7
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	ebad 0d03 	sub.w	sp, sp, r3
 80007ba:	466b      	mov	r3, sp
 80007bc:	3300      	adds	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80007da:	121b      	asrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007f2:	2304      	movs	r3, #4
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <spi_dma_send+0xa4>
			buffer[i] = (data_buf[i-4]);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	440b      	add	r3, r1
 8000808:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
		buffer[3] = (data_len & 0x00ff);

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	1d1a      	adds	r2, r3, #4
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	429a      	cmp	r2, r3
 8000818:	dcee      	bgt.n	80007f8 <spi_dma_send+0x8c>
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	3304      	adds	r3, #4
 800081e:	b29b      	uxth	r3, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <spi_dma_send+0x100>)
 8000822:	4619      	mov	r1, r3
 8000824:	f005 fb42 	bl	8005eac <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <spi_dma_send+0x100>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <spi_dma_send+0x104>)
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <spi_dma_send+0x104>)
 8000832:	8b52      	ldrh	r2, [r2, #26]
 8000834:	b292      	uxth	r2, r2
 8000836:	f042 0210 	orr.w	r2, r2, #16
 800083a:	b292      	uxth	r2, r2
 800083c:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <spi_dma_send+0x100>)
 8000840:	2101      	movs	r1, #1
 8000842:	f005 faa7 	bl	8005d94 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <spi_dma_send+0x108>)
 8000848:	2101      	movs	r1, #1
 800084a:	f005 faa3 	bl	8005d94 <DMA_Cmd>
		/* Block until the semaphore is given */
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <spi_dma_send+0x10c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800085a:	2300      	movs	r3, #0
 800085c:	f003 fd42 	bl	80042e4 <xQueueGenericReceive>
 8000860:	46b5      	mov	sp, r6

	//	CSOFF(); // chip deselect 
			
	
}
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800086a:	bf00      	nop
 800086c:	40026458 	.word	0x40026458
 8000870:	40020000 	.word	0x40020000
 8000874:	40026440 	.word	0x40026440
 8000878:	200131ec 	.word	0x200131ec

0800087c <spi_dma_send2B>:

void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4602      	mov	r2, r0
 8000884:	460b      	mov	r3, r1
 8000886:	80fa      	strh	r2, [r7, #6]
 8000888:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[6];
	uint16_t data_len = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	81fb      	strh	r3, [r7, #14]
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	723b      	strb	r3, [r7, #8]
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	727b      	strb	r3, [r7, #9]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	 buffer[3] = (data_len & 0x00ff);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	72fb      	strb	r3, [r7, #11]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	733b      	strb	r3, [r7, #12]
	 buffer[5] = (data_buf & 0x00ff);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	737b      	strb	r3, [r7, #13]
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <spi_dma_send2B+0x94>)
 80008ca:	2106      	movs	r1, #6
 80008cc:	f005 faee 	bl	8005eac <DMA_SetCurrDataCounter>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <spi_dma_send2B+0x94>)
 80008d2:	f107 0208 	add.w	r2, r7, #8
 80008d6:	60da      	str	r2, [r3, #12]
	CSON(); // chip select 
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008dc:	8b52      	ldrh	r2, [r2, #26]
 80008de:	b292      	uxth	r2, r2
 80008e0:	f042 0210 	orr.w	r2, r2, #16
 80008e4:	b292      	uxth	r2, r2
 80008e6:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <spi_dma_send2B+0x94>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	f005 fa52 	bl	8005d94 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <spi_dma_send2B+0x9c>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	f005 fa4e 	bl	8005d94 <DMA_Cmd>
	/* Block until the semaphore is given */
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <spi_dma_send2B+0xa0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000904:	2300      	movs	r3, #0
 8000906:	f003 fced 	bl	80042e4 <xQueueGenericReceive>
	
//	CSOFF(); // chip deselect 
			
}
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40026458 	.word	0x40026458
 8000914:	40020000 	.word	0x40020000
 8000918:	40026440 	.word	0x40026440
 800091c:	200131ec 	.word	0x200131ec

08000920 <spi_dma_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	80fa      	strh	r2, [r7, #6]
 800092c:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[5];
		uint16_t data_len=0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	723b      	strb	r3, [r7, #8]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	727b      	strb	r3, [r7, #9]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000948:	121b      	asrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	72bb      	strb	r3, [r7, #10]
		buffer[3] = (data_len & 0x00ff);
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	72fb      	strb	r3, [r7, #11]
		buffer[4] = data_buf ; 
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	733b      	strb	r3, [r7, #12]
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000962:	2105      	movs	r1, #5
 8000964:	f005 faa2 	bl	8005eac <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <spi_dma_sendByte+0x88>)
 800096a:	f107 0208 	add.w	r2, r7, #8
 800096e:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000974:	8b52      	ldrh	r2, [r2, #26]
 8000976:	b292      	uxth	r2, r2
 8000978:	f042 0210 	orr.w	r2, r2, #16
 800097c:	b292      	uxth	r2, r2
 800097e:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000982:	2101      	movs	r1, #1
 8000984:	f005 fa06 	bl	8005d94 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <spi_dma_sendByte+0x90>)
 800098a:	2101      	movs	r1, #1
 800098c:	f005 fa02 	bl	8005d94 <DMA_Cmd>
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <spi_dma_sendByte+0x94>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	2300      	movs	r3, #0
 800099e:	f003 fca1 	bl	80042e4 <xQueueGenericReceive>
				
//		CSOFF(); // chip deselect 
			
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40026458 	.word	0x40026458
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40026440 	.word	0x40026440
 80009b4:	200131ec 	.word	0x200131ec

080009b8 <spi_dma_read>:

		return (data_buf[0] << 8) | data_buf[1];

}
void spi_dma_read(uint16_t address, uint16_t data_len)
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	80f8      	strh	r0, [r7, #6]
 80009c2:	80b9      	strh	r1, [r7, #4]
 80009c4:	4669      	mov	r1, sp
 80009c6:	4688      	mov	r8, r1
		
		/*! spi_dma_read it has to be used with \n
		 * memcpy from bufferRX right after it has recieve \n
		 * data on SPI. */
		
		uint8_t buffer[data_len+4];
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	1d0e      	adds	r6, r1, #4
 80009cc:	1e71      	subs	r1, r6, #1
 80009ce:	6139      	str	r1, [r7, #16]
 80009d0:	4631      	mov	r1, r6
 80009d2:	4608      	mov	r0, r1
 80009d4:	f04f 0100 	mov.w	r1, #0
 80009d8:	00cd      	lsls	r5, r1, #3
 80009da:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80009de:	00c4      	lsls	r4, r0, #3
 80009e0:	4631      	mov	r1, r6
 80009e2:	4608      	mov	r0, r1
 80009e4:	f04f 0100 	mov.w	r1, #0
 80009e8:	00cb      	lsls	r3, r1, #3
 80009ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009ee:	00c2      	lsls	r2, r0, #3
 80009f0:	4633      	mov	r3, r6
 80009f2:	3307      	adds	r3, #7
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	ebad 0d03 	sub.w	sp, sp, r3
 80009fc:	466b      	mov	r3, sp
 80009fe:	3300      	adds	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x00 | (data_len & 0x7f00) >> 8 ));
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a1c:	121b      	asrs	r3, r3, #8
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) buffer[i] = 0x0;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e007      	b.n	8000a42 <spi_dma_read+0x8a>
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dcf2      	bgt.n	8000a32 <spi_dma_read+0x7a>

		DMA_SetCurrDataCounter(SPIx_RX_DMA_STREAM, data_len+4);
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a54:	4619      	mov	r1, r3
 8000a56:	f005 fa29 	bl	8005eac <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 4+data_len);
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a62:	4619      	mov	r1, r3
 8000a64:	f005 fa22 	bl	8005eac <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
		SPIx_RX_DMA_STREAM->M0AR =(uint32_t)&bufferRX;	
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <spi_dma_read+0x100>)
 8000a72:	60da      	str	r2, [r3, #12]

		CSON(); // chip select 
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a78:	8b52      	ldrh	r2, [r2, #26]
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	f042 0210 	orr.w	r2, r2, #16
 8000a80:	b292      	uxth	r2, r2
 8000a82:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	f005 f984 	bl	8005d94 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f005 f980 	bl	8005d94 <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <spi_dma_read+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f003 fc1f 	bl	80042e4 <xQueueGenericReceive>
 8000aa6:	46c5      	mov	sp, r8
		//CSOFF(); // chip deselect		

}	
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	40026440 	.word	0x40026440
 8000ab4:	40026458 	.word	0x40026458
 8000ab8:	20013200 	.word	0x20013200
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	200131ec 	.word	0x200131ec

08000ac4 <init_W5200>:
//==================================================================================//
//===	func 	init_W5200							 ===//
//==================================================================================//

void init_W5200(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
	 *
	 * */


	// mac address
	uint8_t address[6] =	{0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 8000aca:	4a58      	ldr	r2, [pc, #352]	; (8000c2c <init_W5200+0x168>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	8892      	ldrh	r2, [r2, #4]
 8000ad6:	809a      	strh	r2, [r3, #4]
	
	// ip 
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 8000ad8:	4a55      	ldr	r2, [pc, #340]	; (8000c30 <init_W5200+0x16c>)
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	6810      	ldr	r0, [r2, #0]
 8000ae0:	6018      	str	r0, [r3, #0]
	// subnet 
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8000ae2:	4a54      	ldr	r2, [pc, #336]	; (8000c34 <init_W5200+0x170>)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
	// gateway
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 8000aec:	4a52      	ldr	r2, [pc, #328]	; (8000c38 <init_W5200+0x174>)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	6810      	ldr	r0, [r2, #0]
 8000af4:	6018      	str	r0, [r3, #0]
	
	portTickType xLastWakeTime;	
	
	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 8000af6:	2001      	movs	r0, #1
 8000af8:	2100      	movs	r1, #0
 8000afa:	2203      	movs	r2, #3
 8000afc:	f003 fa96 	bl	800402c <xQueueGenericCreate>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <init_W5200+0x178>)
 8000b04:	601a      	str	r2, [r3, #0]

//	vTaskSuspend(set_macTaskHandle);
	
	xLastWakeTime = xTaskGetTickCount();
 8000b06:	f002 fd97 	bl	8003638 <xTaskGetTickCount>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60bb      	str	r3, [r7, #8]

	RESET_HIGH();
 8000b0e:	4b4c      	ldr	r3, [pc, #304]	; (8000c40 <init_W5200+0x17c>)
 8000b10:	4a4b      	ldr	r2, [pc, #300]	; (8000c40 <init_W5200+0x17c>)
 8000b12:	8b52      	ldrh	r2, [r2, #26]
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f042 0220 	orr.w	r2, r2, #32
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	835a      	strh	r2, [r3, #26]
	RESET_LOW();	
 8000b1e:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <init_W5200+0x17c>)
 8000b20:	4a47      	ldr	r2, [pc, #284]	; (8000c40 <init_W5200+0x17c>)
 8000b22:	8b12      	ldrh	r2, [r2, #24]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	831a      	strh	r2, [r3, #24]

	vTaskDelay( 500/portTICK_RATE_MS );		
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f002 fbc5 	bl	80032c0 <vTaskDelay>
	const portTickType xFrequency = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
	
	// ===================================================//
	//SW reset 
	spi_dma_sendByte(W5200_MR, W5200_MR_RST);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	f7ff feef 	bl	8000920 <spi_dma_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	71fb      	strb	r3, [r7, #7]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 8000b46:	bf00      	nop
		spi_dma_read(W5200_MR, 1);
		memcpy(&data, bufferRX+4, 1);
	}
		
	// PING enable, PPPoE disable 
	spi_dma_sendByte(W5200_MR, 0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f7ff fee8 	bl	8000920 <spi_dma_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_dma_sendByte(W5200_IMR, 0xff);
 8000b50:	2016      	movs	r0, #22
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	f7ff fee4 	bl	8000920 <spi_dma_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_dma_sendByte(W5200_IMR2, 0);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f7ff fee0 	bl	8000920 <spi_dma_sendByte>
	// set timeoput to 200msec
	spi_dma_sendByte(W5200_RTR, 200);
 8000b60:	2017      	movs	r0, #23
 8000b62:	21c8      	movs	r1, #200	; 0xc8
 8000b64:	f7ff fedc 	bl	8000920 <spi_dma_sendByte>
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	f7ff fed8 	bl	8000920 <spi_dma_sendByte>

	int n = 0; 
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

	for (n = 0; n < 8; n++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e02b      	b.n	8000bd2 <init_W5200+0x10e>
	{
		spi_dma_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b86:	331e      	adds	r3, #30
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	f7ff fec7 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b9e:	331f      	adds	r3, #31
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	f7ff febb 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_IMR(n), 0xff);	
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000bb6:	332c      	adds	r3, #44	; 0x2c
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	21ff      	movs	r1, #255	; 0xff
 8000bbe:	f7ff feaf 	bl	8000920 <spi_dma_sendByte>
		socket_flg[n] = 0;
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <init_W5200+0x180>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	ddd0      	ble.n	8000b7a <init_W5200+0xb6>
		socket_flg[n] = 0;
			
	}	
	// =========================================================//
		
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be2:	f002 fb15 	bl	8003210 <vTaskDelayUntil>

	W5200_configure_network(ip, subnet, gw);
 8000be6:	f107 0114 	add.w	r1, r7, #20
 8000bea:	f107 0210 	add.w	r2, r7, #16
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f000 f834 	bl	8000c64 <W5200_configure_network>
	W5200_set_hardware_address(address);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f823 	bl	8000c4c <W5200_set_hardware_address>
	
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c10:	f002 fafe 	bl	8003210 <vTaskDelayUntil>
	// end of initialization W5200 
	// delete task

	// unblock set_macTask
	
	vTaskResume( set_macTaskHandle); 
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <init_W5200+0x184>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fbf3 	bl	8003404 <vTaskResume>

	vTaskDelete ( NULL );
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f002 fab0 	bl	8003184 <vTaskDelete>
	
	
	
	
}
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	080081b4 	.word	0x080081b4
 8000c30:	080081bc 	.word	0x080081bc
 8000c34:	080081c0 	.word	0x080081c0
 8000c38:	080081c4 	.word	0x080081c4
 8000c3c:	200131ec 	.word	0x200131ec
 8000c40:	40020800 	.word	0x40020800
 8000c44:	20000480 	.word	0x20000480
 8000c48:	200141b8 	.word	0x200141b8

08000c4c <W5200_set_hardware_address>:

//==================================================================================//
//===	func W5200_set_hardware_address
//==================================================================================//
void  W5200_set_hardware_address(const macaddress_t address)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	/*! Function set wiznet register to address via SPI DMA
	 */

	spi_dma_send(W5200_SHAR, 6, address);
 8000c54:	2009      	movs	r0, #9
 8000c56:	2106      	movs	r1, #6
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	f7ff fd87 	bl	800076c <spi_dma_send>
}
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <W5200_configure_network>:


void  W5200_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	/*! It configures ip, subnet and gateway */
	spi_dma_send(W5200_SIPR, 4, address);
 8000c70:	200f      	movs	r0, #15
 8000c72:	2104      	movs	r1, #4
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	f7ff fd79 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_SUBR, 4, subnet);
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f7ff fd74 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_GAR, 4 , gateway);
 8000c84:	2001      	movs	r0, #1
 8000c86:	2104      	movs	r1, #4
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	f7ff fd6f 	bl	800076c <spi_dma_send>
}
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <get_CRStatus>:
//==================================================================================//



static uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_CR(sck_fd),1);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f7ff fe81 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <get_CRStatus+0x34>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	73fb      	strb	r3, [r7, #15]
	return var;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20013204 	.word	0x20013204

08000ccc <get_SRStatus>:


static uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_SR(sck_fd), 1);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ce2:	3303      	adds	r3, #3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	2101      	movs	r1, #1
 8000cea:	f7ff fe65 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <get_SRStatus+0x34>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	73fb      	strb	r3, [r7, #15]
	return var;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20013204 	.word	0x20013204

08000d04 <get_TXFSRStatus>:

static uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_FSR(sck_fd), 2);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d1a:	3320      	adds	r3, #32
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	2102      	movs	r1, #2
 8000d22:	f7ff fe49 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <get_TXFSRStatus+0x44>)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	8812      	ldrh	r2, [r2, #0]
 8000d2e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b29b      	uxth	r3, r3
	
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20013204 	.word	0x20013204

08000d4c <get_TXWRStatus>:

static uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_WR(sck_fd), 2 );
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d62:	3324      	adds	r3, #36	; 0x24
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	2102      	movs	r1, #2
 8000d6a:	f7ff fe25 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <get_TXWRStatus+0x44>)
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	7b7b      	ldrb	r3, [r7, #13]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b29b      	uxth	r3, r3

	
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20013204 	.word	0x20013204

08000d94 <get_TXRD>:
static uint16_t get_TXRD(uint8_t sck_fd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_RD(sck_fd), 2);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000daa:	3322      	adds	r3, #34	; 0x22
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	2102      	movs	r1, #2
 8000db2:	f7ff fe01 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <get_TXRD+0x44>)
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	7b7b      	ldrb	r3, [r7, #13]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b29b      	uxth	r3, r3
	
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20013204 	.word	0x20013204

08000ddc <set_TXWR>:

static void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	71fa      	strb	r2, [r7, #7]
 8000de8:	80bb      	strh	r3, [r7, #4]
 	spi_dma_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000df6:	3324      	adds	r3, #36	; 0x24
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fd3c 	bl	800087c <spi_dma_send2B>
}
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop

08000e0c <get_RXRSR>:

static uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RSR(sck_fd), 2);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e22:	3326      	adds	r3, #38	; 0x26
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	2102      	movs	r1, #2
 8000e2a:	f7ff fdc5 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <get_RXRSR+0x44>)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b29b      	uxth	r3, r3

}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20013204 	.word	0x20013204

08000e54 <get_RXRD>:

static uint16_t get_RXRD(uint8_t sck_fd)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RD(sck_fd), 2 );
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e6a:	3328      	adds	r3, #40	; 0x28
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	2102      	movs	r1, #2
 8000e72:	f7ff fda1 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <get_RXRD+0x44>)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	8812      	ldrh	r2, [r2, #0]
 8000e7e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	7b7b      	ldrb	r3, [r7, #13]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b29b      	uxth	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20013204 	.word	0x20013204

08000e9c <set_RXRD>:

static void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	71fa      	strb	r2, [r7, #7]
 8000ea8:	80bb      	strh	r3, [r7, #4]
	spi_dma_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000eb6:	3328      	adds	r3, #40	; 0x28
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fcdc 	bl	800087c <spi_dma_send2B>
}
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop

08000ecc <write_memory>:
//		func write_memory 
//===============================================================================================//


void write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60ba      	str	r2, [r7, #8]
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	73fa      	strb	r2, [r7, #15]
 8000ed8:	460a      	mov	r2, r1
 8000eda:	81ba      	strh	r2, [r7, #12]
 8000edc:	80fb      	strh	r3, [r7, #6]
	*/
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000ede:	89bb      	ldrh	r3, [r7, #12]
 8000ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000efc:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000efe:	8afa      	ldrh	r2, [r7, #22]
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	441a      	add	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f0c:	3320      	adds	r3, #32
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dd2a      	ble.n	8000f68 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	8afb      	ldrh	r3, [r7, #22]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f28:	827b      	strh	r3, [r7, #18]
		spi_dma_send( memory_addr,upper_size, buf);
 8000f2a:	8aba      	ldrh	r2, [r7, #20]
 8000f2c:	8a7b      	ldrh	r3, [r7, #18]
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f7ff fc1a 	bl	800076c <spi_dma_send>
		buf += upper_size;
 8000f38:	8a7b      	ldrh	r3, [r7, #18]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	8a7b      	ldrh	r3, [r7, #18]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	823b      	strh	r3, [r7, #16]
		spi_dma_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	f7ff fc03 	bl	800076c <spi_dma_send>
 8000f66:	e006      	b.n	8000f76 <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_dma_send( memory_addr,len,  buf);
 8000f68:	8aba      	ldrh	r2, [r7, #20]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	f7ff fbfb 	bl	800076c <spi_dma_send>
	}
}
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <read_memory>:
// 			func read_memory
//==================================================================================//


void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	4602      	mov	r2, r0
 8000f86:	73fa      	strb	r2, [r7, #15]
 8000f88:	460a      	mov	r2, r1
 8000f8a:	81ba      	strh	r2, [r7, #12]
 8000f8c:	80fb      	strh	r3, [r7, #6]

	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f94:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fac:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000fae:	8afa      	ldrh	r2, [r7, #22]
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fb8:	dd2f      	ble.n	800101a <read_memory+0x9e>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000fc0:	827b      	strh	r3, [r7, #18]
		spi_dma_read( memory_addr,upper_size);
 8000fc2:	8aba      	ldrh	r2, [r7, #20]
 8000fc4:	8a7b      	ldrh	r3, [r7, #18]
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fcf5 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, upper_size);
 8000fce:	8a7b      	ldrh	r3, [r7, #18]
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	4919      	ldr	r1, [pc, #100]	; (8001038 <read_memory+0xbc>)
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f7ff f901 	bl	80001dc <memcpy>

		buf += upper_size;
 8000fda:	8a7b      	ldrh	r3, [r7, #18]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	8a7b      	ldrh	r3, [r7, #18]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	823b      	strh	r3, [r7, #16]
		spi_dma_read(W5200_SOCKET_RX_BASE(sck_fd), left_size);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	8a3b      	ldrh	r3, [r7, #16]
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fcd9 	bl	80009b8 <spi_dma_read>
		memcpy(buf+upper_size, bufferRX+4, left_size);
 8001006:	8a7b      	ldrh	r3, [r7, #18]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	441a      	add	r2, r3
 800100c:	8a3b      	ldrh	r3, [r7, #16]
 800100e:	4610      	mov	r0, r2
 8001010:	4909      	ldr	r1, [pc, #36]	; (8001038 <read_memory+0xbc>)
 8001012:	461a      	mov	r2, r3
 8001014:	f7ff f8e2 	bl	80001dc <memcpy>
 8001018:	e00b      	b.n	8001032 <read_memory+0xb6>
	}else{

		// copy len size bytes
		spi_dma_read( memory_addr,len);
 800101a:	8aba      	ldrh	r2, [r7, #20]
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fcc9 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, len);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	4903      	ldr	r1, [pc, #12]	; (8001038 <read_memory+0xbc>)
 800102c:	461a      	mov	r2, r3
 800102e:	f7ff f8d5 	bl	80001dc <memcpy>
	}
}
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20013204 	.word	0x20013204

0800103c <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4613      	mov	r3, r2
 8001044:	4602      	mov	r2, r0
 8001046:	71fa      	strb	r2, [r7, #7]
 8001048:	460a      	mov	r2, r1
 800104a:	80ba      	strh	r2, [r7, #4]
 800104c:	71bb      	strb	r3, [r7, #6]
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e00c      	b.n	800106e <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <socket+0x14c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <socket+0x14c>)
 8001062:	2101      	movs	r1, #1
 8001064:	54d1      	strb	r1, [r2, r3]
			break;
 8001066:	e005      	b.n	8001074 <socket+0x38>
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9ef      	bls.n	8001054 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b07      	cmp	r3, #7
 8001078:	d901      	bls.n	800107e <socket+0x42>
 800107a:	23ff      	movs	r3, #255	; 0xff
 800107c:	e07f      	b.n	800117e <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	2b08      	cmp	r3, #8
 8001086:	dd01      	ble.n	800108c <socket+0x50>
 8001088:	23ff      	movs	r3, #255	; 0xff
 800108a:	e078      	b.n	800117e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	2b02      	cmp	r3, #2
 8001094:	d005      	beq.n	80010a2 <socket+0x66>
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	da01      	bge.n	80010a2 <socket+0x66>
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	e06d      	b.n	800117e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d006      	beq.n	80010ba <socket+0x7e>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <socket+0x7e>
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	e061      	b.n	800117e <socket+0x142>

	// set MODE register
	spi_dma_sendByte(W5200_Sn_MR(sck_fd) , mode);
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fc27 	bl	8000920 <spi_dma_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	db29      	blt.n	8001134 <socket+0xf8>
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	dd02      	ble.n	80010ea <socket+0xae>
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d018      	beq.n	800111a <socket+0xde>
 80010e8:	e024      	b.n	8001134 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	737b      	strb	r3, [r7, #13]
		spi_dma_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001106:	3304      	adds	r3, #4
 8001108:	b29a      	uxth	r2, r3
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4610      	mov	r0, r2
 8001110:	2102      	movs	r1, #2
 8001112:	461a      	mov	r2, r3
 8001114:	f7ff fb2a 	bl	800076c <spi_dma_send>
		
		break;
 8001118:	e00c      	b.n	8001134 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_dma_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001126:	3314      	adds	r3, #20
 8001128:	b29a      	uxth	r2, r3
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fbf6 	bl	8000920 <spi_dma_sendByte>
	}

	// execute socket open
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	b29b      	uxth	r3, r3
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b29b      	uxth	r3, r3
 800113c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	2101      	movs	r1, #1
 8001148:	f7ff fbea 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 800114c:	bf00      	nop
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fd9f 	bl	8000c94 <get_CRStatus>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f8      	bne.n	800114e <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fdb4 	bl	8000ccc <get_SRStatus>
 8001164:	4603      	mov	r3, r0
 8001166:	2b13      	cmp	r3, #19
 8001168:	bf0c      	ite	eq
 800116a:	2300      	moveq	r3, #0
 800116c:	2301      	movne	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73bb      	strb	r3, [r7, #14]
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <socket+0x140>
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	e000      	b.n	800117e <socket+0x142>

	// success return
	return sck_fd;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000480 	.word	0x20000480

0800118c <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 800118c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001190:	b08b      	sub	sp, #44	; 0x2c
 8001192:	af00      	add	r7, sp, #0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4601      	mov	r1, r0
 8001198:	73f9      	strb	r1, [r7, #15]
 800119a:	81ba      	strh	r2, [r7, #12]
 800119c:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	
	/// get real len 
	int i = 0; 
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]

	while ( buf[i] != '\0' && i < len) i++; 
 80011a2:	e002      	b.n	80011aa <send+0x1e>
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	3301      	adds	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <send+0x32>
 80011b6:	89ba      	ldrh	r2, [r7, #12]
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dcf2      	bgt.n	80011a4 <send+0x18>

	len = i;
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	81bb      	strh	r3, [r7, #12]
	
	uint16_t status = get_SRStatus(sck_fd);
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd81 	bl	8000ccc <get_SRStatus>
 80011ca:	4603      	mov	r3, r0
 80011cc:	83fb      	strh	r3, [r7, #30]

	
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b07      	cmp	r3, #7
 80011d2:	d804      	bhi.n	80011de <send+0x52>
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4a56      	ldr	r2, [pc, #344]	; (8001330 <send+0x1a4>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d002      	beq.n	80011e4 <send+0x58>
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e2:	e0a0      	b.n	8001326 <send+0x19a>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <send+0x64>
 80011ea:	89bb      	ldrh	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <send+0x6a>
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f4:	e097      	b.n	8001326 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd67 	bl	8000ccc <get_SRStatus>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b17      	cmp	r3, #23
 8001202:	d001      	beq.n	8001208 <send+0x7c>
 8001204:	2300      	movs	r3, #0
 8001206:	e08e      	b.n	8001326 <send+0x19a>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001208:	e004      	b.n	8001214 <send+0x88>
		if(flag == 1) return 0;	// NONE BLOCKING
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <send+0x88>
 8001210:	2300      	movs	r3, #0
 8001212:	e088      	b.n	8001326 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd74 	bl	8000d04 <get_TXFSRStatus>
 800121c:	4603      	mov	r3, r0
 800121e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f1      	beq.n	800120a <send+0x7e>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fd8f 	bl	8000d4c <get_TXWRStatus>
 800122e:	4603      	mov	r3, r0
 8001230:	83bb      	strh	r3, [r7, #28]

	// check write length
	if(send_size > len) send_size = len;
 8001232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001234:	89bb      	ldrh	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d901      	bls.n	800123e <send+0xb2>
 800123a:	89bb      	ldrh	r3, [r7, #12]
 800123c:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 800123e:	7bf9      	ldrb	r1, [r7, #15]
 8001240:	8bba      	ldrh	r2, [r7, #28]
 8001242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	f7ff fe3f 	bl	8000ecc <write_memory>

	// pointer update
	write_ptr += send_size;
 800124e:	8bba      	ldrh	r2, [r7, #28]
 8001250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001252:	4413      	add	r3, r2
 8001254:	83bb      	strh	r3, [r7, #28]
	set_TXWR(sck_fd, write_ptr);
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	8bbb      	ldrh	r3, [r7, #28]
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fdbd 	bl	8000ddc <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd95 	bl	8000d94 <get_TXRD>
 800126a:	4603      	mov	r3, r0
 800126c:	837b      	strh	r3, [r7, #26]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd6b 	bl	8000d4c <get_TXWRStatus>
 8001276:	4603      	mov	r3, r0
 8001278:	833b      	strh	r3, [r7, #24]
	uint8_t data [write_ptr-start]; 	
 800127a:	8bba      	ldrh	r2, [r7, #28]
 800127c:	8b7b      	ldrh	r3, [r7, #26]
 800127e:	1ad1      	subs	r1, r2, r3
 8001280:	466b      	mov	r3, sp
 8001282:	461e      	mov	r6, r3
 8001284:	1e4b      	subs	r3, r1, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	460b      	mov	r3, r1
 800128a:	461a      	mov	r2, r3
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001294:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001298:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800129c:	460b      	mov	r3, r1
 800129e:	461a      	mov	r2, r3
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	00dd      	lsls	r5, r3, #3
 80012a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80012aa:	00d4      	lsls	r4, r2, #3
 80012ac:	460b      	mov	r3, r1
 80012ae:	3307      	adds	r3, #7
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	ebad 0d03 	sub.w	sp, sp, r3
 80012b8:	466b      	mov	r3, sp
 80012ba:	3300      	adds	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
	spi_dma_read(start+0x8000, write_ptr-start );
 80012be:	8b7b      	ldrh	r3, [r7, #26]
 80012c0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	8bb9      	ldrh	r1, [r7, #28]
 80012c8:	8b7b      	ldrh	r3, [r7, #26]
 80012ca:	1acb      	subs	r3, r1, r3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fb71 	bl	80009b8 <spi_dma_read>
	memcpy(data, bufferRX +4, write_ptr-start);
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	8bb9      	ldrh	r1, [r7, #28]
 80012da:	8b7b      	ldrh	r3, [r7, #26]
 80012dc:	1acb      	subs	r3, r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	4914      	ldr	r1, [pc, #80]	; (8001334 <send+0x1a8>)
 80012e2:	461a      	mov	r2, r3
 80012e4:	f7fe ff7a 	bl	80001dc <memcpy>

	
	// test function 
	
	// send command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012f4:	3301      	adds	r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	2120      	movs	r1, #32
 80012fc:	f7ff fb10 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001300:	bf00      	nop
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fcc5 	bl	8000c94 <get_CRStatus>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f8      	bne.n	8001302 <send+0x176>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 8001310:	bf00      	nop
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd3d 	bl	8000d94 <get_TXRD>
 800131a:	4603      	mov	r3, r0
 800131c:	8bba      	ldrh	r2, [r7, #28]
 800131e:	429a      	cmp	r2, r3
 8001320:	d1f7      	bne.n	8001312 <send+0x186>

	return send_size;
 8001322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001324:	46b5      	mov	sp, r6
}
 8001326:	4618      	mov	r0, r3
 8001328:	372c      	adds	r7, #44	; 0x2c
 800132a:	46bd      	mov	sp, r7
 800132c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001330:	20000480 	.word	0x20000480
 8001334:	20013204 	.word	0x20013204

08001338 <recv>:
	return code is received data size.
	if received disconnectÂ@from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	4601      	mov	r1, r0
 8001342:	73f9      	strb	r1, [r7, #15]
 8001344:	81ba      	strh	r2, [r7, #12]
 8001346:	80fb      	strh	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d804      	bhi.n	8001358 <recv+0x20>
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	4a31      	ldr	r2, [pc, #196]	; (8001418 <recv+0xe0>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d002      	beq.n	800135e <recv+0x26>
 8001358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135c:	e057      	b.n	800140e <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <recv+0x32>
 8001364:	89bb      	ldrh	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <recv+0x38>
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	e04e      	b.n	800140e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fcaa 	bl	8000ccc <get_SRStatus>
 8001378:	4603      	mov	r3, r0
 800137a:	2b17      	cmp	r3, #23
 800137c:	d001      	beq.n	8001382 <recv+0x4a>
 800137e:	2300      	movs	r3, #0
 8001380:	e045      	b.n	800140e <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8001382:	e004      	b.n	800138e <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <recv+0x56>
 800138a:	2300      	movs	r3, #0
 800138c:	e03f      	b.n	800140e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fd3b 	bl	8000e0c <get_RXRSR>
 8001396:	4603      	mov	r3, r0
 8001398:	82fb      	strh	r3, [r7, #22]
 800139a:	8afb      	ldrh	r3, [r7, #22]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f1      	beq.n	8001384 <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fd56 	bl	8000e54 <get_RXRD>
 80013a8:	4603      	mov	r3, r0
 80013aa:	82bb      	strh	r3, [r7, #20]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 80013ac:	89ba      	ldrh	r2, [r7, #12]
 80013ae:	8afb      	ldrh	r3, [r7, #22]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	bf38      	it	cc
 80013b4:	4613      	movcc	r3, r2
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	7bf9      	ldrb	r1, [r7, #15]
 80013ba:	8aba      	ldrh	r2, [r7, #20]
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	f7ff fddb 	bl	8000f7c <read_memory>

	// update pointer
	read_ptr += read_len;
 80013c6:	8aba      	ldrh	r2, [r7, #20]
 80013c8:	8afb      	ldrh	r3, [r7, #22]
 80013ca:	4413      	add	r3, r2
 80013cc:	82bb      	strh	r3, [r7, #20]
	set_RXRD(sck_fd, read_ptr);
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	8abb      	ldrh	r3, [r7, #20]
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fd61 	bl	8000e9c <set_RXRD>

	// recive command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013e6:	3301      	adds	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	f7ff fa97 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 80013f2:	bf00      	nop
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fc4c 	bl	8000c94 <get_CRStatus>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f8      	bne.n	80013f4 <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 8001402:	89ba      	ldrh	r2, [r7, #12]
 8001404:	8afb      	ldrh	r3, [r7, #22]
 8001406:	429a      	cmp	r2, r3
 8001408:	bf38      	it	cc
 800140a:	4613      	movcc	r3, r2
 800140c:	b29b      	uxth	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000480 	.word	0x20000480

0800141c <listen>:
//	func listen 
//==================================================================================//


int	listen(int sck_fd)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db08      	blt.n	800143c <listen+0x20>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b07      	cmp	r3, #7
 800142e:	dc05      	bgt.n	800143c <listen+0x20>
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <listen+0xa0>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d002      	beq.n	8001442 <listen+0x26>
 800143c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001440:	e038      	b.n	80014b4 <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc40 	bl	8000ccc <get_SRStatus>
 800144c:	4603      	mov	r3, r0
 800144e:	2b13      	cmp	r3, #19
 8001450:	d002      	beq.n	8001458 <listen+0x3c>
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001456:	e02d      	b.n	80014b4 <listen+0x98>


	uint8_t b;
	spi_dma_read(W5200_Sn_IR(sck_fd), 1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	b29b      	uxth	r3, r3
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001464:	3302      	adds	r3, #2
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	2101      	movs	r1, #1
 800146c:	f7ff faa4 	bl	80009b8 <spi_dma_read>
	memcpy(&b, bufferRX + 4, 1);
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <listen+0xa4>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	73fb      	strb	r3, [r7, #15]

	// CONNECT command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	b29b      	uxth	r3, r3
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	2102      	movs	r1, #2
 800148a:	f7ff fa49 	bl	8000920 <spi_dma_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 800148e:	bf00      	nop
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fbfd 	bl	8000c94 <get_CRStatus>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f7      	bne.n	8001490 <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 80014a0:	bf00      	nop
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fc10 	bl	8000ccc <get_SRStatus>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b14      	cmp	r3, #20
 80014b0:	d1f7      	bne.n	80014a2 <listen+0x86>
	 
	return 0;	// listen success complete
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000480 	.word	0x20000480
 80014c0:	20013204 	.word	0x20013204

080014c4 <locate_interrupt>:

//==================================================================================
////	func locate_interrupt
//==================================================================================
void locate_interrupt()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	*  Function used by interrupt service routine. \n
	* Reads wiznet interrupt registers and identify 
	* interupt plus on which socket interrupt occured. \n
	* It depends on interrupt what follows
	* ****************************************************** */
	uint8_t code = 0x4; 
 80014ca:	2304      	movs	r3, #4
 80014cc:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_IMR2, 1);
 80014ce:	2036      	movs	r0, #54	; 0x36
 80014d0:	2101      	movs	r1, #1
 80014d2:	f7ff fa71 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX + 4, 1);
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <locate_interrupt+0xac>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_Sn_IR(code), 1);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014e6:	3302      	adds	r3, #2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	2101      	movs	r1, #1
 80014ee:	f7ff fa63 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX +4 , 1);
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <locate_interrupt+0xac>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
       
	
	spi_dma_sendByte(W5200_Sn_IR(0x0), 0xff);
 80014f8:	f244 0002 	movw	r0, #16386	; 0x4002
 80014fc:	21ff      	movs	r1, #255	; 0xff
 80014fe:	f7ff fa0f 	bl	8000920 <spi_dma_sendByte>
	switch (code )
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	3b01      	subs	r3, #1
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d82d      	bhi.n	8001566 <locate_interrupt+0xa2>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <locate_interrupt+0x4c>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001567 	.word	0x08001567
 8001514:	08001567 	.word	0x08001567
 8001518:	08001567 	.word	0x08001567
 800151c:	08001551 	.word	0x08001551
 8001520:	08001567 	.word	0x08001567
 8001524:	08001567 	.word	0x08001567
 8001528:	08001567 	.word	0x08001567
 800152c:	08001567 	.word	0x08001567
 8001530:	08001567 	.word	0x08001567
 8001534:	08001567 	.word	0x08001567
 8001538:	08001567 	.word	0x08001567
 800153c:	08001567 	.word	0x08001567
 8001540:	08001567 	.word	0x08001567
 8001544:	08001567 	.word	0x08001567
 8001548:	08001567 	.word	0x08001567
 800154c:	08001567 	.word	0x08001567
			
			//vTaskSuspend(motorHBHandle);

			break;
		case 0x4:
			vTaskResume(motorHBHandle);
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <locate_interrupt+0xb0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f001 ff55 	bl	8003404 <vTaskResume>
			vTaskResume(set_macTaskHandle); 
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <locate_interrupt+0xb4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f001 ff50 	bl	8003404 <vTaskResume>
			break;
 8001564:	e000      	b.n	8001568 <locate_interrupt+0xa4>
		case 0x10:
			break;
		default:
			break;		
 8001566:	bf00      	nop
	}
}
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20013204 	.word	0x20013204
 8001574:	200131f0 	.word	0x200131f0
 8001578:	200141b8 	.word	0x200141b8

0800157c <EXTI4_IRQHandler>:

//==================================================================================
//// EXTI4_IRQHandler
//==================================================================================
void EXTI4_IRQHandler(void) //EXTI0 ISR
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	 * Interuppt service routine for wiznet it locates interrupt and resets 
	 * interrupt line. 
	 * *******************************************************************/
	
	
	if(EXTI_GetITStatus(WIZ_IT_EXTI_LINE) != RESET) //check if EXTI line is asserted
 8001580:	2010      	movs	r0, #16
 8001582:	f005 f961 	bl	8006848 <EXTI_GetITStatus>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <EXTI4_IRQHandler+0x1a>
	{
		locate_interrupt();	
 800158c:	f7ff ff9a 	bl	80014c4 <locate_interrupt>
		EXTI_ClearFlag(WIZ_IT_EXTI_LINE); //clear interrupt
 8001590:	2010      	movs	r0, #16
 8001592:	f005 f93f 	bl	8006814 <EXTI_ClearFlag>
 	
	}
}
 8001596:	bd80      	pop	{r7, pc}

08001598 <set_macTask>:
//============================================================================/
// func set_macTask 
//==================================================================================

void set_macTask(void *pvParameters)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0b6      	sub	sp, #216	; 0xd8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	 * **********************************************************************/


	/* suspend task until init_W5200 is finished */
	//vTaskSuspend(set_macTaskHandle);
	vTaskSuspend(NULL);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f001 feb5 	bl	8003310 <vTaskSuspend>
	uint8_t	buf[100], buf1[100]; 
	int len; 
	int gl;
		/*create socket and send byte */
	socket_0 = socket(W5200_Sn_MR_TCP, 80, 0);
 80015a6:	2001      	movs	r0, #1
 80015a8:	2150      	movs	r1, #80	; 0x50
 80015aa:	2200      	movs	r2, #0
 80015ac:	f7ff fd46 	bl	800103c <socket>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <set_macTask+0x7c>)
 80015b6:	601a      	str	r2, [r3, #0]
	listen(socket_0);
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <set_macTask+0x7c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff2d 	bl	800141c <listen>
        {

	
		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(NULL);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f001 fea4 	bl	8003310 <vTaskSuspend>
		
		// interrupt on W5200 occured 
		// receive data 
		len = recv(socket_0, buf, 100, 0);
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <set_macTask+0x7c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	2264      	movs	r2, #100	; 0x64
 80015d8:	2300      	movs	r3, #0
 80015da:	f7ff fead 	bl	8001338 <recv>
 80015de:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		
		// proces data with CLI 
		
		FreeRTOS_CLIProcessCommand ( buf, buf1, gl);
 80015e2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80015f2:	f003 fd61 	bl	80050b8 <FreeRTOS_CLIProcessCommand>

		send(socket_0, buf1, 100, gl);
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <set_macTask+0x7c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b2d9      	uxtb	r1, r3
 80015fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001600:	b29b      	uxth	r3, r3
 8001602:	f107 0208 	add.w	r2, r7, #8
 8001606:	4608      	mov	r0, r1
 8001608:	4611      	mov	r1, r2
 800160a:	2264      	movs	r2, #100	; 0x64
 800160c:	f7ff fdbe 	bl	800118c <send>

		

		
	}	
 8001610:	e7d7      	b.n	80015c2 <set_macTask+0x2a>
 8001612:	bf00      	nop
 8001614:	200131f4 	.word	0x200131f4

08001618 <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1


void init_USARTx(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 800161e:	2020      	movs	r0, #32
 8001620:	2101      	movs	r1, #1
 8001622:	f005 fcaf 	bl	8006f84 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 8001626:	2004      	movs	r0, #4
 8001628:	2101      	movs	r1, #1
 800162a:	f005 fc73 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 800162e:	2004      	movs	r0, #4
 8001630:	2101      	movs	r1, #1
 8001632:	f005 fc6f 	bl	8006f14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 8001636:	2040      	movs	r0, #64	; 0x40
 8001638:	2101      	movs	r1, #1
 800163a:	f005 fc6b 	bl	8006f14 <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 8001642:	2302      	movs	r3, #2
 8001644:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 8001646:	2303      	movs	r3, #3
 8001648:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 800164a:	2300      	movs	r3, #0
 800164c:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 800164e:	2301      	movs	r3, #1
 8001650:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	4829      	ldr	r0, [pc, #164]	; (80016fc <init_USARTx+0xe4>)
 8001658:	4619      	mov	r1, r3
 800165a:	f005 f973 	bl	8006944 <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 800165e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001662:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001664:	2301      	movs	r3, #1
 8001666:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001668:	2300      	movs	r3, #0
 800166a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800166c:	2303      	movs	r3, #3
 800166e:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001670:	2301      	movs	r3, #1
 8001672:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	4821      	ldr	r0, [pc, #132]	; (8001700 <init_USARTx+0xe8>)
 800167a:	4619      	mov	r1, r3
 800167c:	f005 f962 	bl	8006944 <GPIO_Init>

	DD() // set PG8 high
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <init_USARTx+0xe8>)
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <init_USARTx+0xe8>)
 8001684:	8b12      	ldrh	r2, [r2, #24]
 8001686:	b292      	uxth	r2, r2
 8001688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800168c:	b292      	uxth	r2, r2
 800168e:	831a      	strh	r2, [r3, #24]
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 8001690:	481a      	ldr	r0, [pc, #104]	; (80016fc <init_USARTx+0xe4>)
 8001692:	2106      	movs	r1, #6
 8001694:	2208      	movs	r2, #8
 8001696:	f005 fa6b 	bl	8006b70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <init_USARTx+0xe4>)
 800169c:	2107      	movs	r1, #7
 800169e:	2208      	movs	r2, #8
 80016a0:	f005 fa66 	bl	8006b70 <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 80016a4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80016a8:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80016aa:	2300      	movs	r3, #0
 80016ac:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 80016ae:	2300      	movs	r3, #0
 80016b0:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 80016b2:	2300      	movs	r3, #0
 80016b4:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80016b6:	2300      	movs	r3, #0
 80016b8:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80016ba:	230c      	movs	r3, #12
 80016bc:	827b      	strh	r3, [r7, #18]
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4810      	ldr	r0, [pc, #64]	; (8001704 <init_USARTx+0xec>)
 80016c4:	4619      	mov	r1, r3
 80016c6:	f005 ff51 	bl	800756c <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <init_USARTx+0xec>)
 80016cc:	f240 5125 	movw	r1, #1317	; 0x525
 80016d0:	2201      	movs	r2, #1
 80016d2:	f006 f905 	bl	80078e0 <USART_ITConfig>
	
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 80016d6:	2347      	movs	r3, #71	; 0x47
 80016d8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 4;;// this sets the priority group of the USART1 interrupts
 80016da:	2309      	movs	r3, #9
 80016dc:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x6;		 // this sets the subpriority inside the group
 80016de:	2306      	movs	r3, #6
 80016e0:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 80016e2:	2301      	movs	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 ffc9 	bl	8005680 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <init_USARTx+0xec>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	f006 f8a1 	bl	8007838 <USART_Cmd>
}
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40020800 	.word	0x40020800
 8001700:	40021800 	.word	0x40021800
 8001704:	40011400 	.word	0x40011400

08001708 <USART_puts>:


void USART_puts(uint8_t *s, int nb)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	 * 
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
	while(i < nb && *s){
 8001716:	e010      	b.n	800173a <USART_puts+0x32>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) ); 
 8001718:	bf00      	nop
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <USART_puts+0x4c>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f8      	beq.n	800171a <USART_puts+0x12>
		//USART_SendData(USART6, s[i]);
		USARTx->DR = s[i];
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <USART_puts+0x4c>)
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	440a      	add	r2, r1
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	809a      	strh	r2, [r3, #4]
		i++;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
	while(i < nb && *s){
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	da03      	bge.n	800174a <USART_puts+0x42>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1e6      	bne.n	8001718 <USART_puts+0x10>
		i++;
	
	}
	
	
}
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40011400 	.word	0x40011400

08001758 <USART6_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART6 interrupts
void USART6_IRQHandler(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	
	

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USARTx, USART_IT_RXNE) ){
 800175e:	4820      	ldr	r0, [pc, #128]	; (80017e0 <USART6_IRQHandler+0x88>)
 8001760:	f240 5125 	movw	r1, #1317	; 0x525
 8001764:	f006 f97a 	bl	8007a5c <USART_GetITStatus>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d02d      	beq.n	80017ca <USART6_IRQHandler+0x72>
		
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USARTx->DR; // the character from the USART1 data register is saved in t
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <USART6_IRQHandler+0x88>)
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	b29b      	uxth	r3, r3
 8001774:	71fb      	strb	r3, [r7, #7]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		xHigherPriorityTaskWoken_usart = pdFalse;
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <USART6_IRQHandler+0x8c>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

		
		if( (cnt < rx_length  ) && (cnt < MAX_STRLEN) ){ 
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <USART6_IRQHandler+0x90>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <USART6_IRQHandler+0x94>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	da0b      	bge.n	80017a2 <USART6_IRQHandler+0x4a>
			received_string[cnt] = t;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <USART6_IRQHandler+0x90>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <USART6_IRQHandler+0x98>)
 8001790:	79f9      	ldrb	r1, [r7, #7]
 8001792:	54d1      	strb	r1, [r2, r3]
			cnt++;
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <USART6_IRQHandler+0x90>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <USART6_IRQHandler+0x90>)
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e013      	b.n	80017ca <USART6_IRQHandler+0x72>
		}
		else{ // otherwise reset the character counter and print the received string
			received_string[cnt] = t; 
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <USART6_IRQHandler+0x90>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <USART6_IRQHandler+0x98>)
 80017a8:	79f9      	ldrb	r1, [r7, #7]
 80017aa:	54d1      	strb	r1, [r2, r3]
			cnt = 0;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <USART6_IRQHandler+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
		//	USART_ITConfig(USART6, USART_IT_RXNE, DISABLE); 
		taskENTER_CRITICAL();
 80017b2:	f003 f91b 	bl	80049ec <vPortEnterCritical>
			xSemaphoreGiveFromISR(xSmphrUSART,&xHigherPriorityTaskWoken_usart );
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <USART6_IRQHandler+0x9c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <USART6_IRQHandler+0x8c>)
 80017c0:	2300      	movs	r3, #0
 80017c2:	f002 fd25 	bl	8004210 <xQueueGenericSendFromISR>
		taskEXIT_CRITICAL();
 80017c6:	f003 f921 	bl	8004a0c <vPortExitCritical>
			//USART_puts(USART1, received_string);
		}


	}
 portYIELD_FROM_ISR( xHigherPriorityTaskWoken_usart );
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <USART6_IRQHandler+0x8c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <USART6_IRQHandler+0x82>
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <USART6_IRQHandler+0xa0>)
 80017d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d8:	601a      	str	r2, [r3, #0]
	
}
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40011400 	.word	0x40011400
 80017e4:	20000488 	.word	0x20000488
 80017e8:	2000048c 	.word	0x2000048c
 80017ec:	200141d4 	.word	0x200141d4
 80017f0:	200141d8 	.word	0x200141d8
 80017f4:	200141a8 	.word	0x200141a8
 80017f8:	e000ed04 	.word	0xe000ed04

080017fc <crc16>:



/* function for  */
uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001808:	23ff      	movs	r3, #255	; 0xff
 800180a:	73fb      	strb	r3, [r7, #15]
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800180c:	23ff      	movs	r3, #255	; 0xff
 800180e:	73bb      	strb	r3, [r7, #14]
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 8001810:	e013      	b.n	800183a <crc16+0x3e>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	4053      	eors	r3, r2
 800181e:	b2db      	uxtb	r3, r3
 8001820:	60bb      	str	r3, [r7, #8]
         crc_hi = crc_lo ^ table_crc_hi[i];
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <crc16+0x64>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	4053      	eors	r3, r2
 800182e:	73fb      	strb	r3, [r7, #15]
         crc_lo = table_crc_lo[i];
 8001830:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <crc16+0x68>)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	73bb      	strb	r3, [r7, #14]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	1e5a      	subs	r2, r3, #1
 800183e:	807a      	strh	r2, [r7, #2]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1e6      	bne.n	8001812 <crc16+0x16>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
         crc_hi = crc_lo ^ table_crc_hi[i];
         crc_lo = table_crc_lo[i];
     }
 
     return (crc_hi << 8 | crc_lo);
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b29b      	uxth	r3, r3
 8001852:	b29b      	uxth	r3, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	0800873c 	.word	0x0800873c
 8001864:	0800883c 	.word	0x0800883c

08001868 <write_read_modbus>:


/* write to modbus */
void write_read_modbus( uint8_t * req, uint8_t * rsp, int write_len, int read_len )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
	int i; 

	// tell ISR we expect only specific amount of data
	rx_length = read_len + write_len - 1 ; 
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	1e5a      	subs	r2, r3, #1
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <write_read_modbus+0xac>)
 8001880:	601a      	str	r2, [r3, #0]

	// driver disable 
	DD();
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <write_read_modbus+0xb0>)
 8001884:	4a24      	ldr	r2, [pc, #144]	; (8001918 <write_read_modbus+0xb0>)
 8001886:	8b12      	ldrh	r2, [r2, #24]
 8001888:	b292      	uxth	r2, r2
 800188a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800188e:	b292      	uxth	r2, r2
 8001890:	831a      	strh	r2, [r3, #24]
	for (i=0; i < 4000; i++) ;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e002      	b.n	800189e <write_read_modbus+0x36>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80018a4:	dbf8      	blt.n	8001898 <write_read_modbus+0x30>
	USART_puts(req,write_len);
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	f7ff ff2d 	bl	8001708 <USART_puts>
	for (i = 0; i < 4000; i++);
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e002      	b.n	80018ba <write_read_modbus+0x52>
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80018c0:	dbf8      	blt.n	80018b4 <write_read_modbus+0x4c>
	// driver enable 
	DE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <write_read_modbus+0xb0>)
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <write_read_modbus+0xb0>)
 80018c6:	8b52      	ldrh	r2, [r2, #26]
 80018c8:	b292      	uxth	r2, r2
 80018ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ce:	b292      	uxth	r2, r2
 80018d0:	835a      	strh	r2, [r3, #26]

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <write_read_modbus+0xb4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018de:	2300      	movs	r3, #0
 80018e0:	f002 fd00 	bl	80042e4 <xQueueGenericReceive>
	
	for (i = 0; i < read_len; i++) 
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00c      	b.n	8001904 <write_read_modbus+0x9c>
		rsp[i] = received_string[i+write_len]; 
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	4413      	add	r3, r2
 80018f0:	6979      	ldr	r1, [r7, #20]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	440a      	add	r2, r1
 80018f6:	490a      	ldr	r1, [pc, #40]	; (8001920 <write_read_modbus+0xb8>)
 80018f8:	5c8a      	ldrb	r2, [r1, r2]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]
	// driver enable 
	DE();

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
	
	for (i = 0; i < read_len; i++) 
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbee      	blt.n	80018ea <write_read_modbus+0x82>
		rsp[i] = received_string[i+write_len]; 

}
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200141d4 	.word	0x200141d4
 8001918:	40021800 	.word	0x40021800
 800191c:	200141a8 	.word	0x200141a8
 8001920:	200141d8 	.word	0x200141d8

08001924 <modbus_WIB>:
}


/* modbus write input bits */
void modbus_WIB( uint16_t address, int nb, uint8_t *src )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800192a:	af00      	add	r7, sp, #0
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	6019      	str	r1, [r3, #0]
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f107 030e 	add.w	r3, r7, #14
 800193a:	4602      	mov	r2, r0
 800193c:	801a      	strh	r2, [r3, #0]
	/* first send request */

	uint8_t req[REQ_MAX_LEN];
	int byte_count; 
	int req_length; 
	int bit_check = 0; 
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	int pos = 0; 
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	
	req[0] = 0x36; 
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	2236      	movs	r2, #54	; 0x36
 8001950:	701a      	strb	r2, [r3, #0]
	req[1] = 0xF;
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	220f      	movs	r2, #15
 8001958:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 800195a:	f107 030e 	add.w	r3, r7, #14
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2da      	uxtb	r2, r3
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 800196c:	f107 030e 	add.w	r3, r7, #14
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	121b      	asrs	r3, r3, #8
 8001982:	b2da      	uxtb	r2, r3
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001998:	2306      	movs	r3, #6
 800199a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da00      	bge.n	80019aa <modbus_WIB+0x86>
 80019a8:	3307      	adds	r3, #7
 80019aa:	10db      	asrs	r3, r3, #3
 80019ac:	461a      	mov	r2, r3
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2300      	moveq	r3, #0
 80019be:	2301      	movne	r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  	req[req_length++] = byte_count;
 80019c8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 80019d2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80019d6:	b2d1      	uxtb	r1, r2
 80019d8:	f107 0214 	add.w	r2, r7, #20
 80019dc:	54d1      	strb	r1, [r2, r3]

	int i; 
    	for (i = 0; i < byte_count; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80019e4:	e05c      	b.n	8001aa0 <modbus_WIB+0x17c>
        
		int bit;
		bit = 0x01;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        	req[req_length] = 0;
 80019ec:	f107 0214 	add.w	r2, r7, #20
 80019f0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80019f4:	4413      	add	r3, r2
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 80019fa:	e038      	b.n	8001a6e <modbus_WIB+0x14a>
            		if (src[pos++])
 80019fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8001a06:	1d3a      	adds	r2, r7, #4
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d013      	beq.n	8001a3a <modbus_WIB+0x116>
                		req[req_length] |= bit;
 8001a12:	f107 0214 	add.w	r2, r7, #20
 8001a16:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	f107 0114 	add.w	r1, r7, #20
 8001a30:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a34:	440b      	add	r3, r1
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e014      	b.n	8001a64 <modbus_WIB+0x140>
            		else
                		req[req_length] &=~ bit;
 8001a3a:	f107 0214 	add.w	r2, r7, #20
 8001a3e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4013      	ands	r3, r2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	f107 0114 	add.w	r1, r7, #20
 8001a5c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a60:	440b      	add	r3, r1
 8001a62:	701a      	strb	r2, [r3, #0]

            		bit = bit << 1;
 8001a64:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        
		int bit;
		bit = 0x01;
        	req[req_length] = 0;

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 8001a6e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <modbus_WIB+0x168>
 8001a78:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	f8c7 2228 	str.w	r2, [r7, #552]	; 0x228
 8001a82:	f107 0208 	add.w	r2, r7, #8
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	dbb7      	blt.n	80019fc <modbus_WIB+0xd8>
                		req[req_length] &=~ bit;

            		bit = bit << 1;
        	}	
        	
		req_length++;
 8001a8c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a90:	3301      	adds	r3, #1
 8001a92:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
  	req[req_length++] = byte_count;

	int i; 
    	for (i = 0; i < byte_count; i++) {
 8001a96:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001aa0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001aa4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	db9c      	blt.n	80019e6 <modbus_WIB+0xc2>
        	}	
        	
		req_length++;
	 }

	uint16_t crc = crc16(req, req_length);
 8001aac:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f107 0214 	add.w	r2, r7, #20
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff fe9f 	bl	80017fc <crc16>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

	req[req_length++] = crc >> 8; 
 8001ac4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001ace:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 8001ad2:	0a12      	lsrs	r2, r2, #8
 8001ad4:	b292      	uxth	r2, r2
 8001ad6:	b2d1      	uxtb	r1, r2
 8001ad8:	f107 0214 	add.w	r2, r7, #20
 8001adc:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001ade:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001ae8:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 8001aec:	b2d1      	uxtb	r1, r2
 8001aee:	f107 0214 	add.w	r2, r7, #20
 8001af2:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req,req, req_length ,8); 
 8001af4:	f107 0214 	add.w	r2, r7, #20
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001b04:	2308      	movs	r3, #8
 8001b06:	f7ff feaf 	bl	8001868 <write_read_modbus>
	
}
 8001b0a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <modbus_WR>:

/* Write the values from the array to the registers of the remote device */
void modbus_WR( int address, int nb, const uint16_t *src)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	6018      	str	r0, [r3, #0]
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	6019      	str	r1, [r3, #0]
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	601a      	str	r2, [r3, #0]
    	int req_length;
    	int byte_count;

    	uint8_t req[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	2236      	movs	r2, #54	; 0x36
 8001b32:	701a      	strb	r2, [r3, #0]
	req[1] = 0x10;
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	2210      	movs	r2, #16
 8001b3a:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	121b      	asrs	r3, r3, #8
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	121b      	asrs	r3, r3, #8
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001b78:	2306      	movs	r3, #6
 8001b7a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	
   	byte_count = nb * 2;
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    	req[req_length++] = byte_count;
 8001b8a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001b94:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001b98:	b2d1      	uxtb	r1, r2
 8001b9a:	f107 0210 	add.w	r2, r7, #16
 8001b9e:	54d1      	strb	r1, [r2, r3]

    for (i = 0; i < nb; i++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001ba6:	e026      	b.n	8001bf6 <modbus_WR+0xe2>
		req[req_length++] = src[i] >> 8;
 8001ba8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001bb2:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	1d39      	adds	r1, r7, #4
 8001bba:	6809      	ldr	r1, [r1, #0]
 8001bbc:	440a      	add	r2, r1
 8001bbe:	8812      	ldrh	r2, [r2, #0]
 8001bc0:	0a12      	lsrs	r2, r2, #8
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	b2d1      	uxtb	r1, r2
 8001bc6:	f107 0210 	add.w	r2, r7, #16
 8001bca:	54d1      	strb	r1, [r2, r3]
        	req[req_length++] = src[i] & 0x00ff;
 8001bcc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001bd6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001bda:	0052      	lsls	r2, r2, #1
 8001bdc:	1d39      	adds	r1, r7, #4
 8001bde:	6809      	ldr	r1, [r1, #0]
 8001be0:	440a      	add	r2, r1
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	b2d1      	uxtb	r1, r2
 8001be6:	f107 0210 	add.w	r2, r7, #16
 8001bea:	54d1      	strb	r1, [r2, r3]
	req_length = 6; 
	
   	byte_count = nb * 2;
    	req[req_length++] = byte_count;

    for (i = 0; i < nb; i++) {
 8001bec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbd1      	blt.n	8001ba8 <modbus_WR+0x94>
		req[req_length++] = src[i] >> 8;
        	req[req_length++] = src[i] & 0x00ff;
    	}

	uint16_t crc = crc16(req, req_length);
 8001c04:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f107 0210 	add.w	r2, r7, #16
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7ff fdf3 	bl	80017fc <crc16>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212

	req[req_length++] = crc >> 8; 
 8001c1c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001c26:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8001c2a:	0a12      	lsrs	r2, r2, #8
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	b2d1      	uxtb	r1, r2
 8001c30:	f107 0210 	add.w	r2, r7, #16
 8001c34:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff;
 8001c36:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001c40:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8001c44:	b2d1      	uxtb	r1, r2
 8001c46:	f107 0210 	add.w	r2, r7, #16
 8001c4a:	54d1      	strb	r1, [r2, r3]

	/* write request  to modbus line */
	write_read_modbus( req, req, req_length, 8); 
 8001c4c:	f107 0210 	add.w	r2, r7, #16
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	f7ff fe03 	bl	8001868 <write_read_modbus>

}
 8001c62:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop

08001c6c <modbus_RR>:
}


/* Read the values from the array to the registers of the remote device */
void modbus_RR( int address, int nb, uint16_t *src)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	6018      	str	r0, [r3, #0]
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	6019      	str	r1, [r3, #0]
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	601a      	str	r2, [r3, #0]
    	int req_length;
	int byte_count;
    	uint8_t req[REQ_MAX_LEN];
  	uint8_t rsp[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001c84:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c88:	2236      	movs	r2, #54	; 0x36
 8001c8a:	701a      	strb	r2, [r3, #0]
	req[1] = 0x4;
 8001c8c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c90:	2204      	movs	r2, #4
 8001c92:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	121b      	asrs	r3, r3, #8
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001ca2:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001cb0:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	121b      	asrs	r3, r3, #8
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001cc0:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001cce:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
   	
	byte_count = nb * 2;
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    	req[req_length++] = byte_count;
 8001ce2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001cec:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001cf0:	b2d1      	uxtb	r1, r2
 8001cf2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001cf6:	54d1      	strb	r1, [r2, r3]
	
	
	uint16_t crc = crc16(req, req_length);
 8001cf8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7ff fd79 	bl	80017fc <crc16>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a

	req[req_length++] = crc >> 8; 
 8001d10:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001d1a:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001d1e:	0a12      	lsrs	r2, r2, #8
 8001d20:	b292      	uxth	r2, r2
 8001d22:	b2d1      	uxtb	r1, r2
 8001d24:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001d28:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001d2a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001d34:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001d38:	b2d1      	uxtb	r1, r2
 8001d3a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001d3e:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	3305      	adds	r3, #5
 8001d4a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001d4e:	f107 0214 	add.w	r2, r7, #20
 8001d52:	4608      	mov	r0, r1
 8001d54:	4611      	mov	r1, r2
 8001d56:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001d5a:	f7ff fd85 	bl	8001868 <write_read_modbus>
	
	int offset = 2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	
	for (i = 0; i < nb; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001d6a:	e024      	b.n	8001db6 <modbus_RR+0x14a>
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001d6c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	1d3a      	adds	r2, r7, #4
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001d7c:	1c51      	adds	r1, r2, #1
 8001d7e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001d82:	0052      	lsls	r2, r2, #1
 8001d84:	440a      	add	r2, r1
 8001d86:	f107 0114 	add.w	r1, r7, #20
 8001d8a:	5c8a      	ldrb	r2, [r1, r2]
 8001d8c:	0212      	lsls	r2, r2, #8
 8001d8e:	b291      	uxth	r1, r2
                rsp[offset + 2 + (i << 1)];
 8001d90:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001d94:	1c90      	adds	r0, r2, #2
 8001d96:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	4402      	add	r2, r0
 8001d9e:	f107 0014 	add.w	r0, r7, #20
 8001da2:	5c82      	ldrb	r2, [r0, r2]
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001da4:	430a      	orrs	r2, r1
 8001da6:	b292      	uxth	r2, r2
 8001da8:	b292      	uxth	r2, r2
 8001daa:	801a      	strh	r2, [r3, #0]
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
 8001dac:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001db0:	3301      	adds	r3, #1
 8001db2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbd3      	blt.n	8001d6c <modbus_RR+0x100>
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
                rsp[offset + 2 + (i << 1)];
		
        }

	return 0;
 8001dc4:	bf00      	nop
}
 8001dc6:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop

08001dd0 <motorControl_task>:


}

void motorControl_task(void * pvParameters)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b096      	sub	sp, #88	; 0x58
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	uint16_t spd[5]; 
	

	

	src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	
	spd[0]=1500;spd[1]=0;spd[2]=2250;spd[3]=10;spd[4]=10;
 8001df0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001df4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001dfe:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001e02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001e06:	230a      	movs	r3, #10
 8001e08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	
	// create usart semaphore 
	xSmphrUSART = xSemaphoreCreateBinary();	
 8001e12:	2001      	movs	r0, #1
 8001e14:	2100      	movs	r1, #0
 8001e16:	2203      	movs	r2, #3
 8001e18:	f002 f908 	bl	800402c <xQueueGenericCreate>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <motorControl_task+0x20c>)
 8001e20:	601a      	str	r2, [r3, #0]
	
	portTickType xDelay = 3000 / portTICK_RATE_MS;	
 8001e22:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e26:	657b      	str	r3, [r7, #84]	; 0x54
	while (1)
	{

		
	
		if (xQueueReceive(QSpd_handle, (void *)&telegramR, xDelay  ) == pdPASS)
 8001e28:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <motorControl_task+0x210>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e36:	2300      	movs	r3, #0
 8001e38:	f002 fa54 	bl	80042e4 <xQueueGenericReceive>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	f040 80be 	bne.w	8001fc0 <motorControl_task+0x1f0>
		{
			switch ( telegramR.Qcmd )
 8001e44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	f200 80ab 	bhi.w	8001fa4 <motorControl_task+0x1d4>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <motorControl_task+0x84>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e6d 	.word	0x08001e6d
 8001e58:	08001ecd 	.word	0x08001ecd
 8001e5c:	08001fa5 	.word	0x08001fa5
 8001e60:	08001fa5 	.word	0x08001fa5
 8001e64:	08001eff 	.word	0x08001eff
 8001e68:	08001f5d 	.word	0x08001f5d
			{
				case SETDATA:

					src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

					modbus_WIB( 0 , 3, src); 
 8001e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e88:	2000      	movs	r0, #0
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f7ff fd49 	bl	8001924 <modbus_WIB>
					vTaskDelay ( 500 / portTICK_RATE_MS);
 8001e92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e96:	f001 fa13 	bl	80032c0 <vTaskDelay>
					
					modbus_WR(0, 5, telegramR.data);
 8001e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	2105      	movs	r1, #5
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f7ff fe35 	bl	8001b14 <modbus_WR>
					vTaskDelay ( 500 / portTICK_RATE_MS);
 8001eaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eae:	f001 fa07 	bl	80032c0 <vTaskDelay>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <motorControl_task+0x210>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f002 f8f3 	bl	80040b0 <xQueueGenericSend>

					break;
 8001eca:	e078      	b.n	8001fbe <motorControl_task+0x1ee>
				       	
				
				case GETDATA:
					modbus_RR(0, 10, telegramS.data);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	3308      	adds	r3, #8
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	210a      	movs	r1, #10
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff fec8 	bl	8001c6c <modbus_RR>
					vTaskDelay ( 500 / portTICK_RATE_MS);
 8001edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee0:	f001 f9ee 	bl	80032c0 <vTaskDelay>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001ee4:	2306      	movs	r3, #6
 8001ee6:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <motorControl_task+0x210>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f002 f8da 	bl	80040b0 <xQueueGenericSend>

					break;
 8001efc:	e05f      	b.n	8001fbe <motorControl_task+0x1ee>

				
				case START: 
					
					// set motor speed to 10% 
				         src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

					modbus_WIB( 0 , 3, src); 
 8001f16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f7ff fd00 	bl	8001924 <modbus_WIB>
					vTaskDelay ( 500 / portTICK_RATE_MS);
 8001f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f28:	f001 f9ca 	bl	80032c0 <vTaskDelay>

					modbus_WR( 0, 5, spd);
 8001f2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f30:	2000      	movs	r0, #0
 8001f32:	2105      	movs	r1, #5
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff fded 	bl	8001b14 <modbus_WR>
					vTaskDelay ( 500 / portTICK_RATE_MS);
 8001f3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3e:	f001 f9bf 	bl	80032c0 <vTaskDelay>

				//	vTaskResume(motorHeartBeatHandle);

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001f42:	2306      	movs	r3, #6
 8001f44:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <motorControl_task+0x210>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f54:	2300      	movs	r3, #0
 8001f56:	f002 f8ab 	bl	80040b0 <xQueueGenericSend>

					break;
 8001f5a:	e030      	b.n	8001fbe <motorControl_task+0x1ee>
				
				case STOP:
					
					// send stop bits to motor 
					src[0]=0; src[1]=0; src[2]=0; src[3]=0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					modbus_WIB( 0 , 3, src); 
 8001f74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f78:	2000      	movs	r0, #0
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f7ff fcd1 	bl	8001924 <modbus_WIB>
					vTaskDelay ( 500 / portTICK_RATE_MS);
 8001f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f86:	f001 f99b 	bl	80032c0 <vTaskDelay>



					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <motorControl_task+0x210>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f002 f887 	bl	80040b0 <xQueueGenericSend>

					break; 
 8001fa2:	e00c      	b.n	8001fbe <motorControl_task+0x1ee>

				default:

					telegramS.Qcmd = ERROR_MODBUS;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <motorControl_task+0x210>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f002 f87a 	bl	80040b0 <xQueueGenericSend>
					break;
 8001fbc:	bf00      	nop
	
		

		
	
	}
 8001fbe:	e733      	b.n	8001e28 <motorControl_task+0x58>


					
			}
		}
		else{vTaskDelay( 500 / portTICK_RATE_MS
 8001fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc4:	f001 f97c 	bl	80032c0 <vTaskDelay>
				);
		modbus_RR(0, 10, telegramS.data);
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	3308      	adds	r3, #8
 8001fce:	2000      	movs	r0, #0
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f7ff fe4a 	bl	8001c6c <modbus_RR>
	
		

		
	
	}
 8001fd8:	e726      	b.n	8001e28 <motorControl_task+0x58>
 8001fda:	bf00      	nop
 8001fdc:	200141a8 	.word	0x200141a8
 8001fe0:	200131f8 	.word	0x200131f8

08001fe4 <handleVariable_set>:
				int xParamLength,
				xQueueHandle Qhandle,
				uint8_t * Value,
				int xValueLength,
				int socket )
{
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	b5b0      	push	{r4, r5, r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	f107 0c20 	add.w	ip, r7, #32
 8001ff0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 8001ff4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ff6:	499b      	ldr	r1, [pc, #620]	; (8002264 <handleVariable_set+0x280>)
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	f005 ff3d 	bl	8007e78 <strncmp>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 8089 	bne.w	8002118 <handleVariable_set+0x134>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 8002006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002008:	3b02      	subs	r3, #2
 800200a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800200c:	4413      	add	r3, r2
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 8002012:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002014:	f005 fdf8 	bl	8007c08 <atoi>
 8002018:	4603      	mov	r3, r0
 800201a:	81fb      	strh	r3, [r7, #14]
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 800201c:	89fb      	ldrh	r3, [r7, #14]
 800201e:	2b09      	cmp	r3, #9
 8002020:	d902      	bls.n	8002028 <handleVariable_set+0x44>
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d907      	bls.n	8002038 <handleVariable_set+0x54>
		{
			// send error via TCP
			sprintf(pcWriteBuffer, "Error: speed is out of range [1,100]p : %d\n\n\0", s1);
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800202c:	498e      	ldr	r1, [pc, #568]	; (8002268 <handleVariable_set+0x284>)
 800202e:	461a      	mov	r2, r3
 8002030:	f000 fe1c 	bl	8002c6c <sprintf>
		//	pcWriteBuffer[11+ 3] = "\0"; 
			
			////send( socket_0, buf, 11+3, 0);

	       		return pdFALSE; 	
 8002034:	2300      	movs	r3, #0
 8002036:	e187      	b.n	8002348 <handleVariable_set+0x364>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	461a      	mov	r2, r3
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	4413      	add	r3, r2
 8002040:	461a      	mov	r2, r3
 8002042:	0091      	lsls	r1, r2, #2
 8002044:	461a      	mov	r2, r3
 8002046:	460b      	mov	r3, r1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	81fb      	strh	r3, [r7, #14]
		
		
		// setup telegram 
		
		telegram.data[0] = s1;
 800204e:	89fb      	ldrh	r3, [r7, #14]
 8002050:	853b      	strh	r3, [r7, #40]	; 0x28
		telegram.data[1] = 0;	
 8002052:	2300      	movs	r3, #0
 8002054:	857b      	strh	r3, [r7, #42]	; 0x2a
		telegram.data[2] = 2250;
 8002056:	f640 03ca 	movw	r3, #2250	; 0x8ca
 800205a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		telegram.data[3] = 10;	
 800205c:	230a      	movs	r3, #10
 800205e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		telegram.data[4] = 10;	
 8002060:	230a      	movs	r3, #10
 8002062:	863b      	strh	r3, [r7, #48]	; 0x30
		telegram.size = 5;
 8002064:	2305      	movs	r3, #5
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
		telegram.Qcmd = SETDATA;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3020 	strb.w	r3, [r7, #32]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <handleVariable_set+0x288>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <handleVariable_set+0x28c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4610      	mov	r0, r2
 8002078:	f107 0120 	add.w	r1, r7, #32
 800207c:	461a      	mov	r2, r3
 800207e:	2300      	movs	r3, #0
 8002080:	f002 f816 	bl	80040b0 <xQueueGenericSend>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d133      	bne.n	80020f2 <handleVariable_set+0x10e>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
 800208a:	4b78      	ldr	r3, [pc, #480]	; (800226c <handleVariable_set+0x288>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b78      	ldr	r3, [pc, #480]	; (8002270 <handleVariable_set+0x28c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4610      	mov	r0, r2
 8002094:	f107 0120 	add.w	r1, r7, #32
 8002098:	461a      	mov	r2, r3
 800209a:	2300      	movs	r3, #0
 800209c:	f002 f922 	bl	80042e4 <xQueueGenericReceive>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d114      	bne.n	80020d0 <handleVariable_set+0xec>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 80020a6:	2306      	movs	r3, #6
 80020a8:	f887 3020 	strb.w	r3, [r7, #32]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 80020ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ae:	4b71      	ldr	r3, [pc, #452]	; (8002274 <handleVariable_set+0x290>)
 80020b0:	4615      	mov	r5, r2
 80020b2:	461c      	mov	r4, r3
 80020b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b6:	6028      	str	r0, [r5, #0]
 80020b8:	6069      	str	r1, [r5, #4]
 80020ba:	60aa      	str	r2, [r5, #8]
 80020bc:	60eb      	str	r3, [r5, #12]
 80020be:	cc03      	ldmia	r4!, {r0, r1}
 80020c0:	6128      	str	r0, [r5, #16]
 80020c2:	6169      	str	r1, [r5, #20]
 80020c4:	8823      	ldrh	r3, [r4, #0]
 80020c6:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 80020c8:	2319      	movs	r3, #25
 80020ca:	60bb      	str	r3, [r7, #8]
				//	//send( socket, buf, len, 0);


					return pdPASS;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e13b      	b.n	8002348 <handleVariable_set+0x364>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 80020d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d2:	4b69      	ldr	r3, [pc, #420]	; (8002278 <handleVariable_set+0x294>)
 80020d4:	4615      	mov	r5, r2
 80020d6:	461c      	mov	r4, r3
 80020d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020da:	6028      	str	r0, [r5, #0]
 80020dc:	6069      	str	r1, [r5, #4]
 80020de:	60aa      	str	r2, [r5, #8]
 80020e0:	60eb      	str	r3, [r5, #12]
 80020e2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80020e4:	6128      	str	r0, [r5, #16]
 80020e6:	6169      	str	r1, [r5, #20]
 80020e8:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 80020ea:	231b      	movs	r3, #27
 80020ec:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 80020ee:	2300      	movs	r3, #0
 80020f0:	e12a      	b.n	8002348 <handleVariable_set+0x364>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80020f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f4:	4b61      	ldr	r3, [pc, #388]	; (800227c <handleVariable_set+0x298>)
 80020f6:	4614      	mov	r4, r2
 80020f8:	461d      	mov	r5, r3
 80020fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fc:	6020      	str	r0, [r4, #0]
 80020fe:	6061      	str	r1, [r4, #4]
 8002100:	60a2      	str	r2, [r4, #8]
 8002102:	60e3      	str	r3, [r4, #12]
 8002104:	6828      	ldr	r0, [r5, #0]
 8002106:	6120      	str	r0, [r4, #16]
 8002108:	88aa      	ldrh	r2, [r5, #4]
 800210a:	79ab      	ldrb	r3, [r5, #6]
 800210c:	82a2      	strh	r2, [r4, #20]
 800210e:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002110:	2316      	movs	r3, #22
 8002112:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8002114:	2300      	movs	r3, #0
 8002116:	e117      	b.n	8002348 <handleVariable_set+0x364>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8002118:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800211a:	4959      	ldr	r1, [pc, #356]	; (8002280 <handleVariable_set+0x29c>)
 800211c:	2206      	movs	r2, #6
 800211e:	f005 feab 	bl	8007e78 <strncmp>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d170      	bne.n	800220a <handleVariable_set+0x226>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 8002128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212a:	3b02      	subs	r3, #2
 800212c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800212e:	4413      	add	r3, r2
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 8002134:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002136:	f005 fd67 	bl	8007c08 <atoi>
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b09      	cmp	r3, #9
 8002142:	d902      	bls.n	800214a <handleVariable_set+0x166>
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d909      	bls.n	800215e <handleVariable_set+0x17a>
		{
			// send error via TCP
			//
			xWriteBufferLen = 100; 
 800214a:	2364      	movs	r3, #100	; 0x64
 800214c:	60bb      	str	r3, [r7, #8]
		//	uint8_t buf [len]; //= "Error: speed is out of range!\n\n");
			sprintf(pcWriteBuffer, "Error: speed is out of range [1,100]p : %d\n\n\0", s1);
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002152:	4945      	ldr	r1, [pc, #276]	; (8002268 <handleVariable_set+0x284>)
 8002154:	461a      	mov	r2, r3
 8002156:	f000 fd89 	bl	8002c6c <sprintf>
			//send( socket_0, buf, len, 0);

	       		return pdFALSE; 	
 800215a:	2300      	movs	r3, #0
 800215c:	e0f4      	b.n	8002348 <handleVariable_set+0x364>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	461a      	mov	r2, r3
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4413      	add	r3, r2
 8002166:	461a      	mov	r2, r3
 8002168:	0091      	lsls	r1, r2, #2
 800216a:	461a      	mov	r2, r3
 800216c:	460b      	mov	r3, r1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	80fb      	strh	r3, [r7, #6]
		
		
		// setup telegram 
		
		telegram.data[0] = s1; 
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	853b      	strh	r3, [r7, #40]	; 0x28
		telegram.size = 1; 
 8002178:	2301      	movs	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
		telegram.Qcmd = SETDATA;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3020 	strb.w	r3, [r7, #32]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <handleVariable_set+0x288>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <handleVariable_set+0x28c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4610      	mov	r0, r2
 800218c:	f107 0120 	add.w	r1, r7, #32
 8002190:	461a      	mov	r2, r3
 8002192:	2300      	movs	r3, #0
 8002194:	f001 ff8c 	bl	80040b0 <xQueueGenericSend>
 8002198:	4603      	mov	r3, r0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d122      	bne.n	80021e4 <handleVariable_set+0x200>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <handleVariable_set+0x288>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <handleVariable_set+0x28c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4610      	mov	r0, r2
 80021a8:	f107 0120 	add.w	r1, r7, #32
 80021ac:	461a      	mov	r2, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	f002 f898 	bl	80042e4 <xQueueGenericReceive>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d027      	beq.n	800220a <handleVariable_set+0x226>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 80021ba:	2306      	movs	r3, #6
 80021bc:	f887 3020 	strb.w	r3, [r7, #32]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 80021c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <handleVariable_set+0x290>)
 80021c4:	4615      	mov	r5, r2
 80021c6:	461c      	mov	r4, r3
 80021c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ca:	6028      	str	r0, [r5, #0]
 80021cc:	6069      	str	r1, [r5, #4]
 80021ce:	60aa      	str	r2, [r5, #8]
 80021d0:	60eb      	str	r3, [r5, #12]
 80021d2:	cc03      	ldmia	r4!, {r0, r1}
 80021d4:	6128      	str	r0, [r5, #16]
 80021d6:	6169      	str	r1, [r5, #20]
 80021d8:	8823      	ldrh	r3, [r4, #0]
 80021da:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 80021dc:	2319      	movs	r3, #25
 80021de:	60bb      	str	r3, [r7, #8]
					//send( socket, buf, len, 0);


					return pdPASS;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b1      	b.n	8002348 <handleVariable_set+0x364>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80021e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <handleVariable_set+0x298>)
 80021e8:	4614      	mov	r4, r2
 80021ea:	461d      	mov	r5, r3
 80021ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ee:	6020      	str	r0, [r4, #0]
 80021f0:	6061      	str	r1, [r4, #4]
 80021f2:	60a2      	str	r2, [r4, #8]
 80021f4:	60e3      	str	r3, [r4, #12]
 80021f6:	6828      	ldr	r0, [r5, #0]
 80021f8:	6120      	str	r0, [r4, #16]
 80021fa:	88aa      	ldrh	r2, [r5, #4]
 80021fc:	79ab      	ldrb	r3, [r5, #6]
 80021fe:	82a2      	strh	r2, [r4, #20]
 8002200:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002202:	2316      	movs	r3, #22
 8002204:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8002206:	2300      	movs	r3, #0
 8002208:	e09e      	b.n	8002348 <handleVariable_set+0x364>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 800220a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800220c:	491d      	ldr	r1, [pc, #116]	; (8002284 <handleVariable_set+0x2a0>)
 800220e:	2208      	movs	r2, #8
 8002210:	f005 fe32 	bl	8007e78 <strncmp>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8090 	bne.w	800233c <handleVariable_set+0x358>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 800221c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221e:	3b02      	subs	r3, #2
 8002220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002222:	4413      	add	r3, r2
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 8002228:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800222a:	f005 fced 	bl	8007c08 <atoi>
 800222e:	4603      	mov	r3, r0
 8002230:	80bb      	strh	r3, [r7, #4]
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	2b09      	cmp	r3, #9
 8002236:	d902      	bls.n	800223e <handleVariable_set+0x25a>
 8002238:	88bb      	ldrh	r3, [r7, #4]
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d928      	bls.n	8002290 <handleVariable_set+0x2ac>
		{
			// send error via TCP
			//
			xWriteBufferLen = strlen ( Value ) + 11 ; 
 800223e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002240:	f005 fdea 	bl	8007e18 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	330b      	adds	r3, #11
 8002248:	60bb      	str	r3, [r7, #8]
			//uint8_t buf [len]; //= "Error: speed is out of range!\n\n");
			sprintf(pcWriteBuffer, "Errror : %d\n\n", s1);
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <handleVariable_set+0x2a4>)
 8002250:	461a      	mov	r2, r3
 8002252:	f000 fd0b 	bl	8002c6c <sprintf>
			pcWriteBuffer[11+ 3] = "\0"; 
 8002256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002258:	330e      	adds	r3, #14
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <handleVariable_set+0x2a8>)
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]
			//send( socket_0, buf, len, 0);

	       		return pdFALSE; 	
 8002260:	2300      	movs	r3, #0
 8002262:	e071      	b.n	8002348 <handleVariable_set+0x364>
 8002264:	0800821c 	.word	0x0800821c
 8002268:	08008224 	.word	0x08008224
 800226c:	200131f8 	.word	0x200131f8
 8002270:	20000000 	.word	0x20000000
 8002274:	08008254 	.word	0x08008254
 8002278:	08008270 	.word	0x08008270
 800227c:	0800828c 	.word	0x0800828c
 8002280:	080082a4 	.word	0x080082a4
 8002284:	080082ac 	.word	0x080082ac
 8002288:	080082b8 	.word	0x080082b8
 800228c:	080082c8 	.word	0x080082c8
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8002290:	88bb      	ldrh	r3, [r7, #4]
 8002292:	461a      	mov	r2, r3
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	4413      	add	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	0091      	lsls	r1, r2, #2
 800229c:	461a      	mov	r2, r3
 800229e:	460b      	mov	r3, r1
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	80bb      	strh	r3, [r7, #4]
		
		
		// setup telegram 
		
		telegram.data[0] = s1; 
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	853b      	strh	r3, [r7, #40]	; 0x28
		telegram.size = 1; 
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
		telegram.Qcmd = SETDATA;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 3020 	strb.w	r3, [r7, #32]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <handleVariable_set+0x374>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <handleVariable_set+0x378>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4610      	mov	r0, r2
 80022be:	f107 0120 	add.w	r1, r7, #32
 80022c2:	461a      	mov	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	f001 fef3 	bl	80040b0 <xQueueGenericSend>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d122      	bne.n	8002316 <handleVariable_set+0x332>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <handleVariable_set+0x374>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <handleVariable_set+0x378>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4610      	mov	r0, r2
 80022da:	f107 0120 	add.w	r1, r7, #32
 80022de:	461a      	mov	r2, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	f001 ffff 	bl	80042e4 <xQueueGenericReceive>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d027      	beq.n	800233c <handleVariable_set+0x358>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 80022ec:	2306      	movs	r3, #6
 80022ee:	f887 3020 	strb.w	r3, [r7, #32]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 80022f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <handleVariable_set+0x37c>)
 80022f6:	4615      	mov	r5, r2
 80022f8:	461c      	mov	r4, r3
 80022fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fc:	6028      	str	r0, [r5, #0]
 80022fe:	6069      	str	r1, [r5, #4]
 8002300:	60aa      	str	r2, [r5, #8]
 8002302:	60eb      	str	r3, [r5, #12]
 8002304:	cc03      	ldmia	r4!, {r0, r1}
 8002306:	6128      	str	r0, [r5, #16]
 8002308:	6169      	str	r1, [r5, #20]
 800230a:	8823      	ldrh	r3, [r4, #0]
 800230c:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 800230e:	2319      	movs	r3, #25
 8002310:	60bb      	str	r3, [r7, #8]
					//send( socket, buf, len, 0);


					return pdPASS;
 8002312:	2301      	movs	r3, #1
 8002314:	e018      	b.n	8002348 <handleVariable_set+0x364>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8002316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <handleVariable_set+0x380>)
 800231a:	4614      	mov	r4, r2
 800231c:	461d      	mov	r5, r3
 800231e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002320:	6020      	str	r0, [r4, #0]
 8002322:	6061      	str	r1, [r4, #4]
 8002324:	60a2      	str	r2, [r4, #8]
 8002326:	60e3      	str	r3, [r4, #12]
 8002328:	6828      	ldr	r0, [r5, #0]
 800232a:	6120      	str	r0, [r4, #16]
 800232c:	88aa      	ldrh	r2, [r5, #4]
 800232e:	79ab      	ldrb	r3, [r5, #6]
 8002330:	82a2      	strh	r2, [r4, #20]
 8002332:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002334:	2316      	movs	r3, #22
 8002336:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8002338:	2300      	movs	r3, #0
 800233a:	e005      	b.n	8002348 <handleVariable_set+0x364>
		}
	}

	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <handleVariable_set+0x384>)
 800233e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002340:	4619      	mov	r1, r3
 8002342:	f005 fd0b 	bl	8007d5c <strcpy>

			return 0; 
 8002346:	2300      	movs	r3, #0

}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002352:	b004      	add	sp, #16
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200131f8 	.word	0x200131f8
 800235c:	20000000 	.word	0x20000000
 8002360:	08008254 	.word	0x08008254
 8002364:	0800828c 	.word	0x0800828c
 8002368:	080081d0 	.word	0x080081d0

0800236c <handleVariable_get>:
				size_t xWriteBufferLen,
				uint8_t * Param, 
				int xParamLength,
				xQueueHandle Qhandle,
				int socket )
{
 800236c:	b084      	sub	sp, #16
 800236e:	b5b0      	push	{r4, r5, r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	f107 0c18 	add.w	ip, r7, #24
 8002378:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 800237c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800237e:	4982      	ldr	r1, [pc, #520]	; (8002588 <handleVariable_get+0x21c>)
 8002380:	2205      	movs	r2, #5
 8002382:	f005 fd79 	bl	8007e78 <strncmp>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d15a      	bne.n	8002442 <handleVariable_get+0xd6>
	{	
	
		telegram.Qcmd = GETDATA; 
 800238c:	2301      	movs	r3, #1
 800238e:	763b      	strb	r3, [r7, #24]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8002390:	4b7e      	ldr	r3, [pc, #504]	; (800258c <handleVariable_get+0x220>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <handleVariable_get+0x224>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4610      	mov	r0, r2
 800239a:	f107 0118 	add.w	r1, r7, #24
 800239e:	461a      	mov	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	f001 fe85 	bl	80040b0 <xQueueGenericSend>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d137      	bne.n	800241c <handleVariable_get+0xb0>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
 80023ac:	4b77      	ldr	r3, [pc, #476]	; (800258c <handleVariable_get+0x220>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b77      	ldr	r3, [pc, #476]	; (8002590 <handleVariable_get+0x224>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4610      	mov	r0, r2
 80023b6:	f107 0118 	add.w	r1, r7, #24
 80023ba:	461a      	mov	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	f001 ff91 	bl	80042e4 <xQueueGenericReceive>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d118      	bne.n	80023fa <handleVariable_get+0x8e>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 80023c8:	2306      	movs	r3, #6
 80023ca:	763b      	strb	r3, [r7, #24]
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
					telegram.data[3]/100,
 80023cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
			{
				if ( telegram.Qcmd = SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 80023ce:	4b71      	ldr	r3, [pc, #452]	; (8002594 <handleVariable_get+0x228>)
 80023d0:	fba3 0302 	umull	r0, r3, r3, r2
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
					telegram.data[3]/100,
					telegram.data[3] % 100);
 80023da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
			{
				if ( telegram.Qcmd = SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 80023dc:	496d      	ldr	r1, [pc, #436]	; (8002594 <handleVariable_get+0x228>)
 80023de:	fba1 c103 	umull	ip, r1, r1, r3
 80023e2:	0949      	lsrs	r1, r1, #5
 80023e4:	2064      	movs	r0, #100	; 0x64
 80023e6:	fb00 f101 	mul.w	r1, r0, r1
 80023ea:	1a5b      	subs	r3, r3, r1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023f0:	4969      	ldr	r1, [pc, #420]	; (8002598 <handleVariable_get+0x22c>)
 80023f2:	f000 fc3b 	bl	8002c6c <sprintf>
					telegram.data[3] % 100);
				
					//send( socket, buf, len, 0);


					return pdPASS;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0bf      	b.n	800257a <handleVariable_get+0x20e>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 80023fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023fc:	4b67      	ldr	r3, [pc, #412]	; (800259c <handleVariable_get+0x230>)
 80023fe:	4615      	mov	r5, r2
 8002400:	461c      	mov	r4, r3
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	6028      	str	r0, [r5, #0]
 8002406:	6069      	str	r1, [r5, #4]
 8002408:	60aa      	str	r2, [r5, #8]
 800240a:	60eb      	str	r3, [r5, #12]
 800240c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800240e:	6128      	str	r0, [r5, #16]
 8002410:	6169      	str	r1, [r5, #20]
 8002412:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 8002414:	231b      	movs	r3, #27
 8002416:	607b      	str	r3, [r7, #4]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 8002418:	2300      	movs	r3, #0
 800241a:	e0ae      	b.n	800257a <handleVariable_get+0x20e>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 800241c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241e:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <handleVariable_get+0x234>)
 8002420:	4614      	mov	r4, r2
 8002422:	461d      	mov	r5, r3
 8002424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002426:	6020      	str	r0, [r4, #0]
 8002428:	6061      	str	r1, [r4, #4]
 800242a:	60a2      	str	r2, [r4, #8]
 800242c:	60e3      	str	r3, [r4, #12]
 800242e:	6828      	ldr	r0, [r5, #0]
 8002430:	6120      	str	r0, [r4, #16]
 8002432:	88aa      	ldrh	r2, [r5, #4]
 8002434:	79ab      	ldrb	r3, [r5, #6]
 8002436:	82a2      	strh	r2, [r4, #20]
 8002438:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 800243a:	2316      	movs	r3, #22
 800243c:	607b      	str	r3, [r7, #4]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 800243e:	2300      	movs	r3, #0
 8002440:	e09b      	b.n	800257a <handleVariable_get+0x20e>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8002442:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002444:	4957      	ldr	r1, [pc, #348]	; (80025a4 <handleVariable_get+0x238>)
 8002446:	2206      	movs	r2, #6
 8002448:	f005 fd16 	bl	8007e78 <strncmp>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d142      	bne.n	80024d8 <handleVariable_get+0x16c>
	
		
			
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8002452:	4b4e      	ldr	r3, [pc, #312]	; (800258c <handleVariable_get+0x220>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b4e      	ldr	r3, [pc, #312]	; (8002590 <handleVariable_get+0x224>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4610      	mov	r0, r2
 800245c:	f107 0118 	add.w	r1, r7, #24
 8002460:	461a      	mov	r2, r3
 8002462:	2300      	movs	r3, #0
 8002464:	f001 fe24 	bl	80040b0 <xQueueGenericSend>
 8002468:	4603      	mov	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d121      	bne.n	80024b2 <handleVariable_get+0x146>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <handleVariable_get+0x220>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <handleVariable_get+0x224>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4610      	mov	r0, r2
 8002478:	f107 0118 	add.w	r1, r7, #24
 800247c:	461a      	mov	r2, r3
 800247e:	2300      	movs	r3, #0
 8002480:	f001 ff30 	bl	80042e4 <xQueueGenericReceive>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d026      	beq.n	80024d8 <handleVariable_get+0x16c>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 800248a:	2306      	movs	r3, #6
 800248c:	763b      	strb	r3, [r7, #24]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 800248e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002490:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <handleVariable_get+0x23c>)
 8002492:	4615      	mov	r5, r2
 8002494:	461c      	mov	r4, r3
 8002496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002498:	6028      	str	r0, [r5, #0]
 800249a:	6069      	str	r1, [r5, #4]
 800249c:	60aa      	str	r2, [r5, #8]
 800249e:	60eb      	str	r3, [r5, #12]
 80024a0:	cc03      	ldmia	r4!, {r0, r1}
 80024a2:	6128      	str	r0, [r5, #16]
 80024a4:	6169      	str	r1, [r5, #20]
 80024a6:	8823      	ldrh	r3, [r4, #0]
 80024a8:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 80024aa:	2319      	movs	r3, #25
 80024ac:	607b      	str	r3, [r7, #4]
					//send( socket, buf, len, 0);


					return pdPASS;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e063      	b.n	800257a <handleVariable_get+0x20e>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80024b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <handleVariable_get+0x234>)
 80024b6:	4614      	mov	r4, r2
 80024b8:	461d      	mov	r5, r3
 80024ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024bc:	6020      	str	r0, [r4, #0]
 80024be:	6061      	str	r1, [r4, #4]
 80024c0:	60a2      	str	r2, [r4, #8]
 80024c2:	60e3      	str	r3, [r4, #12]
 80024c4:	6828      	ldr	r0, [r5, #0]
 80024c6:	6120      	str	r0, [r4, #16]
 80024c8:	88aa      	ldrh	r2, [r5, #4]
 80024ca:	79ab      	ldrb	r3, [r5, #6]
 80024cc:	82a2      	strh	r2, [r4, #20]
 80024ce:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80024d0:	2316      	movs	r3, #22
 80024d2:	607b      	str	r3, [r7, #4]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80024d4:	2300      	movs	r3, #0
 80024d6:	e050      	b.n	800257a <handleVariable_get+0x20e>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 80024d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024da:	4934      	ldr	r1, [pc, #208]	; (80025ac <handleVariable_get+0x240>)
 80024dc:	2208      	movs	r2, #8
 80024de:	f005 fccb 	bl	8007e78 <strncmp>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d142      	bne.n	800256e <handleVariable_get+0x202>
	
	
				
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <handleVariable_get+0x220>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <handleVariable_get+0x224>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4610      	mov	r0, r2
 80024f2:	f107 0118 	add.w	r1, r7, #24
 80024f6:	461a      	mov	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	f001 fdd9 	bl	80040b0 <xQueueGenericSend>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d121      	bne.n	8002548 <handleVariable_get+0x1dc>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 8002504:	4b21      	ldr	r3, [pc, #132]	; (800258c <handleVariable_get+0x220>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <handleVariable_get+0x224>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4610      	mov	r0, r2
 800250e:	f107 0118 	add.w	r1, r7, #24
 8002512:	461a      	mov	r2, r3
 8002514:	2300      	movs	r3, #0
 8002516:	f001 fee5 	bl	80042e4 <xQueueGenericReceive>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d026      	beq.n	800256e <handleVariable_get+0x202>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8002520:	2306      	movs	r3, #6
 8002522:	763b      	strb	r3, [r7, #24]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 8002524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <handleVariable_get+0x23c>)
 8002528:	4615      	mov	r5, r2
 800252a:	461c      	mov	r4, r3
 800252c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252e:	6028      	str	r0, [r5, #0]
 8002530:	6069      	str	r1, [r5, #4]
 8002532:	60aa      	str	r2, [r5, #8]
 8002534:	60eb      	str	r3, [r5, #12]
 8002536:	cc03      	ldmia	r4!, {r0, r1}
 8002538:	6128      	str	r0, [r5, #16]
 800253a:	6169      	str	r1, [r5, #20]
 800253c:	8823      	ldrh	r3, [r4, #0]
 800253e:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8002540:	2319      	movs	r3, #25
 8002542:	607b      	str	r3, [r7, #4]
					//send( socket, buf, len, 0);


					return pdPASS;
 8002544:	2301      	movs	r3, #1
 8002546:	e018      	b.n	800257a <handleVariable_get+0x20e>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8002548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <handleVariable_get+0x234>)
 800254c:	4614      	mov	r4, r2
 800254e:	461d      	mov	r5, r3
 8002550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002552:	6020      	str	r0, [r4, #0]
 8002554:	6061      	str	r1, [r4, #4]
 8002556:	60a2      	str	r2, [r4, #8]
 8002558:	60e3      	str	r3, [r4, #12]
 800255a:	6828      	ldr	r0, [r5, #0]
 800255c:	6120      	str	r0, [r4, #16]
 800255e:	88aa      	ldrh	r2, [r5, #4]
 8002560:	79ab      	ldrb	r3, [r5, #6]
 8002562:	82a2      	strh	r2, [r4, #20]
 8002564:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002566:	2316      	movs	r3, #22
 8002568:	607b      	str	r3, [r7, #4]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 800256a:	2300      	movs	r3, #0
 800256c:	e005      	b.n	800257a <handleVariable_get+0x20e>
		}
	}


	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <handleVariable_get+0x244>)
 8002570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002572:	4619      	mov	r1, r3
 8002574:	f005 fbf2 	bl	8007d5c <strcpy>


			return 0; 
 8002578:	2300      	movs	r3, #0

}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002584:	b004      	add	sp, #16
 8002586:	4770      	bx	lr
 8002588:	0800821c 	.word	0x0800821c
 800258c:	200131f8 	.word	0x200131f8
 8002590:	20000000 	.word	0x20000000
 8002594:	51eb851f 	.word	0x51eb851f
 8002598:	080082cc 	.word	0x080082cc
 800259c:	08008270 	.word	0x08008270
 80025a0:	0800828c 	.word	0x0800828c
 80025a4:	080082a4 	.word	0x080082a4
 80025a8:	08008254 	.word	0x08008254
 80025ac:	080082ac 	.word	0x080082ac
 80025b0:	080081d0 	.word	0x080081d0

080025b4 <prvMotorCommand>:
// prototypes of CLI functions 

portBASE_TYPE prvMotorCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b09e      	sub	sp, #120	; 0x78
 80025b8:	af0c      	add	r7, sp, #48	; 0x30
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	int xOptionLength, xParamLength, xValueLength; 
	QueueTelegram telegram; 
	
	// get option from command line 

	Option = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80025c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	2101      	movs	r1, #1
 80025c8:	461a      	mov	r2, r3
 80025ca:	f002 fdfb 	bl	80051c4 <FreeRTOS_CLIGetParameter>
 80025ce:	6478      	str	r0, [r7, #68]	; 0x44
					  1,  		   // first parameter
				  	  &xOptionLength // parameter string length
					  
					 );

	if ( Option == NULL)
 80025d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10e      	bne.n	80025f4 <prvMotorCommand+0x40>
	{
		sprintf(pcWriteBuffer, "To few arguments. \n\n\0");
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4ba0      	ldr	r3, [pc, #640]	; (800285c <prvMotorCommand+0x2a8>)
 80025da:	4615      	mov	r5, r2
 80025dc:	461c      	mov	r4, r3
 80025de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e0:	6028      	str	r0, [r5, #0]
 80025e2:	6069      	str	r1, [r5, #4]
 80025e4:	60aa      	str	r2, [r5, #8]
 80025e6:	60eb      	str	r3, [r5, #12]
 80025e8:	6820      	ldr	r0, [r4, #0]
 80025ea:	6128      	str	r0, [r5, #16]
 80025ec:	7923      	ldrb	r3, [r4, #4]
 80025ee:	752b      	strb	r3, [r5, #20]
		return pdFALSE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e168      	b.n	80028c6 <prvMotorCommand+0x312>
	}


	vTaskResume(motorHBHandle);
 80025f4:	4b9a      	ldr	r3, [pc, #616]	; (8002860 <prvMotorCommand+0x2ac>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 ff03 	bl	8003404 <vTaskResume>

	//================================================================================//
	//		CASE COMMAND SET [parameter name] [value]
	//================================================================================//

	if( !strncmp( Option, "set", 3) ) 
 80025fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002600:	4998      	ldr	r1, [pc, #608]	; (8002864 <prvMotorCommand+0x2b0>)
 8002602:	2203      	movs	r2, #3
 8002604:	f005 fc38 	bl	8007e78 <strncmp>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d13d      	bne.n	800268a <prvMotorCommand+0xd6>
	{

		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 800260e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	2102      	movs	r1, #2
 8002616:	461a      	mov	r2, r3
 8002618:	f002 fdd4 	bl	80051c4 <FreeRTOS_CLIGetParameter>
 800261c:	6438      	str	r0, [r7, #64]	; 0x40
					  2,  		   // 2nd parameter
				  	  &xParamLength // parameter string length
					  
					 );
		Value = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 800261e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	2103      	movs	r1, #3
 8002626:	461a      	mov	r2, r3
 8002628:	f002 fdcc 	bl	80051c4 <FreeRTOS_CLIGetParameter>
 800262c:	63f8      	str	r0, [r7, #60]	; 0x3c
					  
					 );
		
		// return pdFALSE if there is no 3rd parameter 

		if (Value == NULL)
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <prvMotorCommand+0x8e>
		{
			strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 8002634:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <prvMotorCommand+0x2b4>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	4619      	mov	r1, r3
 800263a:	f005 fb8f 	bl	8007d5c <strcpy>

			return pdFALSE; 
 800263e:	2300      	movs	r3, #0
 8002640:	e141      	b.n	80028c6 <prvMotorCommand+0x312>

		}
		
		if ( handleVariable_set ( telegram, 
 8002642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002644:	4b89      	ldr	r3, [pc, #548]	; (800286c <prvMotorCommand+0x2b8>)
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <prvMotorCommand+0x2bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fc      	ldr	r4, [r7, #12]
 8002650:	9403      	str	r4, [sp, #12]
 8002652:	68bc      	ldr	r4, [r7, #8]
 8002654:	9404      	str	r4, [sp, #16]
 8002656:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002658:	9405      	str	r4, [sp, #20]
 800265a:	9006      	str	r0, [sp, #24]
 800265c:	9107      	str	r1, [sp, #28]
 800265e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002660:	9108      	str	r1, [sp, #32]
 8002662:	9209      	str	r2, [sp, #36]	; 0x24
 8002664:	930a      	str	r3, [sp, #40]	; 0x28
 8002666:	466b      	mov	r3, sp
 8002668:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800266c:	ca07      	ldmia	r2, {r0, r1, r2}
 800266e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002678:	f7ff fcb4 	bl	8001fe4 <handleVariable_set>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <prvMotorCommand+0xd2>
					   Param, 
					   xParamLength, 
					   QSpd_handle, 
					   Value,
					   xValueLength,  
					   socket_0)) return pdPASS;
 8002682:	2301      	movs	r3, #1
 8002684:	e11f      	b.n	80028c6 <prvMotorCommand+0x312>

		
			
		return pdFALSE;
 8002686:	2300      	movs	r3, #0
 8002688:	e11d      	b.n	80028c6 <prvMotorCommand+0x312>
	//================================================================================//
	//		CASE COMMAND GET [parameter name] [value]
	//================================================================================//


	if (!strncmp ( Option, "get", 3))
 800268a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800268c:	4979      	ldr	r1, [pc, #484]	; (8002874 <prvMotorCommand+0x2c0>)
 800268e:	2203      	movs	r2, #3
 8002690:	f005 fbf2 	bl	8007e78 <strncmp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d12c      	bne.n	80026f4 <prvMotorCommand+0x140>
	{
		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 800269a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	2102      	movs	r1, #2
 80026a2:	461a      	mov	r2, r3
 80026a4:	f002 fd8e 	bl	80051c4 <FreeRTOS_CLIGetParameter>
 80026a8:	6438      	str	r0, [r7, #64]	; 0x40
					  
					 );
			
		// return pdFALSE if there is no 3rd parameter 

		if (Param == NULL) return pdFALSE; 
 80026aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <prvMotorCommand+0x100>
 80026b0:	2300      	movs	r3, #0
 80026b2:	e108      	b.n	80028c6 <prvMotorCommand+0x312>

		
		if ( handleVariable_get ( telegram,
 80026b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <prvMotorCommand+0x2b8>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <prvMotorCommand+0x2bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	9003      	str	r0, [sp, #12]
 80026c2:	68b8      	ldr	r0, [r7, #8]
 80026c4:	9004      	str	r0, [sp, #16]
 80026c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80026c8:	9005      	str	r0, [sp, #20]
 80026ca:	9106      	str	r1, [sp, #24]
 80026cc:	9207      	str	r2, [sp, #28]
 80026ce:	9308      	str	r3, [sp, #32]
 80026d0:	466b      	mov	r3, sp
 80026d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80026d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e2:	f7ff fe43 	bl	800236c <handleVariable_get>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <prvMotorCommand+0x13c>
					   xWriteBufferLen,
	
				           Param, 
					   xParamLength, 
					   QSpd_handle, 
					   socket_0)) return pdPASS;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0ea      	b.n	80028c6 <prvMotorCommand+0x312>
		return pdFALSE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e0e8      	b.n	80028c6 <prvMotorCommand+0x312>
	}
		
	//================================================================================//
	//		CASE COMMAND STOP 
	//================================================================================//
	if (!strncmp ( Option, "stop", 4))
 80026f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026f6:	4960      	ldr	r1, [pc, #384]	; (8002878 <prvMotorCommand+0x2c4>)
 80026f8:	2204      	movs	r2, #4
 80026fa:	f005 fbbd 	bl	8007e78 <strncmp>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d15a      	bne.n	80027ba <prvMotorCommand+0x206>
	{

		telegram.Qcmd = STOP; 
 8002704:	2305      	movs	r3, #5
 8002706:	753b      	strb	r3, [r7, #20]
		telegram.size = 0; 
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) )
 800270c:	4b57      	ldr	r3, [pc, #348]	; (800286c <prvMotorCommand+0x2b8>)
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	4b5a      	ldr	r3, [pc, #360]	; (800287c <prvMotorCommand+0x2c8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f107 0214 	add.w	r2, r7, #20
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	2300      	movs	r3, #0
 8002720:	f001 fcc6 	bl	80040b0 <xQueueGenericSend>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d034      	beq.n	8002794 <prvMotorCommand+0x1e0>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <prvMotorCommand+0x2b8>)
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <prvMotorCommand+0x2c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f107 0214 	add.w	r2, r7, #20
 8002736:	4608      	mov	r0, r1
 8002738:	4611      	mov	r1, r2
 800273a:	461a      	mov	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	f001 fdd1 	bl	80042e4 <xQueueGenericReceive>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d014      	beq.n	8002772 <prvMotorCommand+0x1be>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8002748:	2306      	movs	r3, #6
 800274a:	753b      	strb	r3, [r7, #20]
				{	
					sprintf(pcWriteBuffer ,"Motor succsesfully stopped.\n\n");
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <prvMotorCommand+0x2cc>)
 8002750:	4615      	mov	r5, r2
 8002752:	461c      	mov	r4, r3
 8002754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002756:	6028      	str	r0, [r5, #0]
 8002758:	6069      	str	r1, [r5, #4]
 800275a:	60aa      	str	r2, [r5, #8]
 800275c:	60eb      	str	r3, [r5, #12]
 800275e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002760:	6128      	str	r0, [r5, #16]
 8002762:	6169      	str	r1, [r5, #20]
 8002764:	61aa      	str	r2, [r5, #24]
 8002766:	8823      	ldrh	r3, [r4, #0]
 8002768:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29; 	
 800276a:	231d      	movs	r3, #29
 800276c:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 800276e:	2301      	movs	r3, #1
 8002770:	e0a9      	b.n	80028c6 <prvMotorCommand+0x312>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4b43      	ldr	r3, [pc, #268]	; (8002884 <prvMotorCommand+0x2d0>)
 8002776:	4615      	mov	r5, r2
 8002778:	461c      	mov	r4, r3
 800277a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277c:	6028      	str	r0, [r5, #0]
 800277e:	6069      	str	r1, [r5, #4]
 8002780:	60aa      	str	r2, [r5, #8]
 8002782:	60eb      	str	r3, [r5, #12]
 8002784:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002786:	6128      	str	r0, [r5, #16]
 8002788:	6169      	str	r1, [r5, #20]
 800278a:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 800278c:	231b      	movs	r3, #27
 800278e:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 8002790:	2300      	movs	r3, #0
 8002792:	e098      	b.n	80028c6 <prvMotorCommand+0x312>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <prvMotorCommand+0x2d4>)
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279e:	6020      	str	r0, [r4, #0]
 80027a0:	6061      	str	r1, [r4, #4]
 80027a2:	60a2      	str	r2, [r4, #8]
 80027a4:	60e3      	str	r3, [r4, #12]
 80027a6:	6828      	ldr	r0, [r5, #0]
 80027a8:	6120      	str	r0, [r4, #16]
 80027aa:	88aa      	ldrh	r2, [r5, #4]
 80027ac:	79ab      	ldrb	r3, [r5, #6]
 80027ae:	82a2      	strh	r2, [r4, #20]
 80027b0:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80027b2:	2316      	movs	r3, #22
 80027b4:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80027b6:	2300      	movs	r3, #0
 80027b8:	e085      	b.n	80028c6 <prvMotorCommand+0x312>
	}
	//================================================================================//
	//		CASE COMMAND START
	//================================================================================//

	if (!strncmp ( Option, "start", 5))
 80027ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027bc:	4933      	ldr	r1, [pc, #204]	; (800288c <prvMotorCommand+0x2d8>)
 80027be:	2205      	movs	r2, #5
 80027c0:	f005 fb5a 	bl	8007e78 <strncmp>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d177      	bne.n	80028ba <prvMotorCommand+0x306>
	{
		telegram.Qcmd = START; 
 80027ca:	2304      	movs	r3, #4
 80027cc:	753b      	strb	r3, [r7, #20]
		telegram.size = 0; 
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <prvMotorCommand+0x2b8>)
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <prvMotorCommand+0x2c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f107 0214 	add.w	r2, r7, #20
 80027de:	4608      	mov	r0, r1
 80027e0:	4611      	mov	r1, r2
 80027e2:	461a      	mov	r2, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	f001 fc63 	bl	80040b0 <xQueueGenericSend>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d151      	bne.n	8002894 <prvMotorCommand+0x2e0>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay) == pdPASS)
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <prvMotorCommand+0x2b8>)
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <prvMotorCommand+0x2c8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f107 0214 	add.w	r2, r7, #20
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	2300      	movs	r3, #0
 8002804:	f001 fd6e 	bl	80042e4 <xQueueGenericReceive>
 8002808:	4603      	mov	r3, r0
 800280a:	2b01      	cmp	r3, #1
 800280c:	d114      	bne.n	8002838 <prvMotorCommand+0x284>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 800280e:	2306      	movs	r3, #6
 8002810:	753b      	strb	r3, [r7, #20]
				{	
					sprintf(pcWriteBuffer , "Motor succsesfully started.\n\n");
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <prvMotorCommand+0x2dc>)
 8002816:	4615      	mov	r5, r2
 8002818:	461c      	mov	r4, r3
 800281a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281c:	6028      	str	r0, [r5, #0]
 800281e:	6069      	str	r1, [r5, #4]
 8002820:	60aa      	str	r2, [r5, #8]
 8002822:	60eb      	str	r3, [r5, #12]
 8002824:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002826:	6128      	str	r0, [r5, #16]
 8002828:	6169      	str	r1, [r5, #20]
 800282a:	61aa      	str	r2, [r5, #24]
 800282c:	8823      	ldrh	r3, [r4, #0]
 800282e:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29; 	
 8002830:	231d      	movs	r3, #29
 8002832:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 8002834:	2301      	movs	r3, #1
 8002836:	e046      	b.n	80028c6 <prvMotorCommand+0x312>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <prvMotorCommand+0x2d0>)
 800283c:	4615      	mov	r5, r2
 800283e:	461c      	mov	r4, r3
 8002840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002842:	6028      	str	r0, [r5, #0]
 8002844:	6069      	str	r1, [r5, #4]
 8002846:	60aa      	str	r2, [r5, #8]
 8002848:	60eb      	str	r3, [r5, #12]
 800284a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800284c:	6128      	str	r0, [r5, #16]
 800284e:	6169      	str	r1, [r5, #20]
 8002850:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 8002852:	231b      	movs	r3, #27
 8002854:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 8002856:	2300      	movs	r3, #0
 8002858:	e035      	b.n	80028c6 <prvMotorCommand+0x312>
 800285a:	bf00      	nop
 800285c:	080082e4 	.word	0x080082e4
 8002860:	200131f0 	.word	0x200131f0
 8002864:	080082fc 	.word	0x080082fc
 8002868:	080081d0 	.word	0x080081d0
 800286c:	200131f8 	.word	0x200131f8
 8002870:	200131f4 	.word	0x200131f4
 8002874:	08008300 	.word	0x08008300
 8002878:	08008304 	.word	0x08008304
 800287c:	20000000 	.word	0x20000000
 8002880:	0800830c 	.word	0x0800830c
 8002884:	08008270 	.word	0x08008270
 8002888:	0800828c 	.word	0x0800828c
 800288c:	0800832c 	.word	0x0800832c
 8002890:	08008334 	.word	0x08008334
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer,"Error sending Queue!\n\n");
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <prvMotorCommand+0x31c>)
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289e:	6020      	str	r0, [r4, #0]
 80028a0:	6061      	str	r1, [r4, #4]
 80028a2:	60a2      	str	r2, [r4, #8]
 80028a4:	60e3      	str	r3, [r4, #12]
 80028a6:	6828      	ldr	r0, [r5, #0]
 80028a8:	6120      	str	r0, [r4, #16]
 80028aa:	88aa      	ldrh	r2, [r5, #4]
 80028ac:	79ab      	ldrb	r3, [r5, #6]
 80028ae:	82a2      	strh	r2, [r4, #20]
 80028b0:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80028b2:	2316      	movs	r3, #22
 80028b4:	60bb      	str	r3, [r7, #8]
			//send( socket_0, buf, len, 0);

			return pdFALSE; 	
 80028b6:	2300      	movs	r3, #0
 80028b8:	e005      	b.n	80028c6 <prvMotorCommand+0x312>


	}


	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <prvMotorCommand+0x320>)
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	4619      	mov	r1, r3
 80028c0:	f005 fa4c 	bl	8007d5c <strcpy>
		
	return pdFALSE;
 80028c4:	2300      	movs	r3, #0


}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3748      	adds	r7, #72	; 0x48
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdb0      	pop	{r4, r5, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	0800828c 	.word	0x0800828c
 80028d4:	080081d0 	.word	0x080081d0

080028d8 <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <printchar+0x24>
		**str = (char)c;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
		++(*str);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <prints>:
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
static int prints(char **out, const char *string, int width, int pad)
{
 8002908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8002918:	2400      	movs	r4, #0
 800291a:	2620      	movs	r6, #32

	if (width > 0) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	dd19      	ble.n	8002956 <prints+0x4e>
		register int len = 0;
 8002922:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8002924:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8002928:	e002      	b.n	8002930 <prints+0x28>
 800292a:	3501      	adds	r5, #1
 800292c:	f108 0801 	add.w	r8, r8, #1
 8002930:	f898 3000 	ldrb.w	r3, [r8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f8      	bne.n	800292a <prints+0x22>
		if (len >= width) width = 0;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	429d      	cmp	r5, r3
 800293c:	db02      	blt.n	8002944 <prints+0x3c>
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	e002      	b.n	800294a <prints+0x42>
		else width -= len;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1b5b      	subs	r3, r3, r5
 8002948:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d000      	beq.n	8002956 <prints+0x4e>
 8002954:	2630      	movs	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10b      	bne.n	8002978 <prints+0x70>
		for ( ; width > 0; --width) {
 8002960:	e007      	b.n	8002972 <prints+0x6a>
			printchar (out, padchar);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	4631      	mov	r1, r6
 8002966:	f7ff ffb7 	bl	80028d8 <printchar>
			++pc;
 800296a:	3401      	adds	r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	dcf4      	bgt.n	8002962 <prints+0x5a>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002978:	e009      	b.n	800298e <prints+0x86>
		printchar (out, *string);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	4619      	mov	r1, r3
 8002982:	f7ff ffa9 	bl	80028d8 <printchar>
		++pc;
 8002986:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3301      	adds	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f1      	bne.n	800297a <prints+0x72>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8002996:	e007      	b.n	80029a8 <prints+0xa0>
		printchar (out, padchar);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	4631      	mov	r1, r6
 800299c:	f7ff ff9c 	bl	80028d8 <printchar>
		++pc;
 80029a0:	3401      	adds	r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	dcf4      	bgt.n	8002998 <prints+0x90>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 80029ae:	4623      	mov	r3, r4
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ba:	bf00      	nop

080029bc <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80029bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029c0:	b089      	sub	sp, #36	; 0x24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80029cc:	f04f 0900 	mov.w	r9, #0
 80029d0:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
 80029d4:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <printi+0x3c>
		print_buf[0] = '0';
 80029dc:	2330      	movs	r3, #48	; 0x30
 80029de:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 80029e0:	2300      	movs	r3, #0
 80029e2:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	4619      	mov	r1, r3
 80029ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f0:	f7ff ff8a 	bl	8002908 <prints>
 80029f4:	4603      	mov	r3, r0
 80029f6:	e049      	b.n	8002a8c <printi+0xd0>
	}

	if (sg && b == 10 && i < 0) {
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <printi+0x58>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b0a      	cmp	r3, #10
 8002a02:	d107      	bne.n	8002a14 <printi+0x58>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da04      	bge.n	8002a14 <printi+0x58>
		neg = 1;
 8002a0a:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	425b      	negs	r3, r3
 8002a12:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8002a14:	f107 0414 	add.w	r4, r7, #20
 8002a18:	340b      	adds	r4, #11
	*s = '\0';
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	7023      	strb	r3, [r4, #0]

	while (u) {
 8002a1e:	e013      	b.n	8002a48 <printi+0x8c>
		t = (unsigned int)u % b;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	fbb5 f2f3 	udiv	r2, r5, r3
 8002a26:	fb03 f302 	mul.w	r3, r3, r2
 8002a2a:	1aeb      	subs	r3, r5, r3
 8002a2c:	461e      	mov	r6, r3
		if( t >= 10 )
 8002a2e:	2e09      	cmp	r6, #9
 8002a30:	dd02      	ble.n	8002a38 <printi+0x7c>
			t += letbase - '0' - 10;
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a34:	3b3a      	subs	r3, #58	; 0x3a
 8002a36:	441e      	add	r6, r3
		*--s = (char)(t + '0');
 8002a38:	3c01      	subs	r4, #1
 8002a3a:	b2f3      	uxtb	r3, r6
 8002a3c:	3330      	adds	r3, #48	; 0x30
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	7023      	strb	r3, [r4, #0]
		u /= b;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8002a48:	2d00      	cmp	r5, #0
 8002a4a:	d1e9      	bne.n	8002a20 <printi+0x64>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
 8002a4c:	f1b9 0f00 	cmp.w	r9, #0
 8002a50:	d014      	beq.n	8002a7c <printi+0xc0>
		if( width && (pad & PAD_ZERO) ) {
 8002a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <printi+0xba>
 8002a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <printi+0xba>
			printchar (out, '-');
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	212d      	movs	r1, #45	; 0x2d
 8002a66:	f7ff ff37 	bl	80028d8 <printchar>
			++pc;
 8002a6a:	f108 0801 	add.w	r8, r8, #1
			--width;
 8002a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a70:	3b01      	subs	r3, #1
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40
 8002a74:	e002      	b.n	8002a7c <printi+0xc0>
		}
		else {
			*--s = '-';
 8002a76:	3c01      	subs	r4, #1
 8002a78:	232d      	movs	r3, #45	; 0x2d
 8002a7a:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	4621      	mov	r1, r4
 8002a80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a84:	f7ff ff40 	bl	8002908 <prints>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4443      	add	r3, r8
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3724      	adds	r7, #36	; 0x24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a96:	bf00      	nop

08002a98 <print>:

static int print( char **out, const char *format, va_list args )
{
 8002a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9c:	b08a      	sub	sp, #40	; 0x28
 8002a9e:	af04      	add	r7, sp, #16
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8002aa6:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8002aa8:	e0cc      	b.n	8002c44 <print+0x1ac>
		if (*format == '%') {
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b25      	cmp	r3, #37	; 0x25
 8002ab0:	f040 80be 	bne.w	8002c30 <print+0x198>
			++format;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8002aba:	2600      	movs	r6, #0
 8002abc:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d100      	bne.n	8002ac8 <print+0x30>
 8002ac6:	e0c2      	b.n	8002c4e <print+0x1b6>
			if (*format == '%') goto out;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b25      	cmp	r3, #37	; 0x25
 8002ace:	d100      	bne.n	8002ad2 <print+0x3a>
 8002ad0:	e0ae      	b.n	8002c30 <print+0x198>
			if (*format == '-') {
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b2d      	cmp	r3, #45	; 0x2d
 8002ad8:	d104      	bne.n	8002ae4 <print+0x4c>
				++format;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8002ae0:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8002ae2:	e005      	b.n	8002af0 <print+0x58>
 8002ae4:	e004      	b.n	8002af0 <print+0x58>
				++format;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8002aec:	f046 0602 	orr.w	r6, r6, #2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b30      	cmp	r3, #48	; 0x30
 8002af6:	d0f6      	beq.n	8002ae6 <print+0x4e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002af8:	e00b      	b.n	8002b12 <print+0x7a>
				width *= 10;
 8002afa:	462b      	mov	r3, r5
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	442b      	add	r3, r5
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	461d      	mov	r5, r3
				width += *format - '0';
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	3b30      	subs	r3, #48	; 0x30
 8002b0a:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b2f      	cmp	r3, #47	; 0x2f
 8002b18:	d903      	bls.n	8002b22 <print+0x8a>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b39      	cmp	r3, #57	; 0x39
 8002b20:	d9eb      	bls.n	8002afa <print+0x62>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b73      	cmp	r3, #115	; 0x73
 8002b28:	d113      	bne.n	8002b52 <print+0xba>
				register char *s = (char *)va_arg( args, int );
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1d1a      	adds	r2, r3, #4
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8002b34:	f1b8 0f00 	cmp.w	r8, #0
 8002b38:	d001      	beq.n	8002b3e <print+0xa6>
 8002b3a:	4643      	mov	r3, r8
 8002b3c:	e000      	b.n	8002b40 <print+0xa8>
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <print+0x1d0>)
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	4619      	mov	r1, r3
 8002b44:	462a      	mov	r2, r5
 8002b46:	4633      	mov	r3, r6
 8002b48:	f7ff fede 	bl	8002908 <prints>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	441c      	add	r4, r3
				continue;
 8002b50:	e075      	b.n	8002c3e <print+0x1a6>
			}
			if( *format == 'd' || *format == 'i' ) {
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d003      	beq.n	8002b62 <print+0xca>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b69      	cmp	r3, #105	; 0x69
 8002b60:	d110      	bne.n	8002b84 <print+0xec>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	1d1a      	adds	r2, r3, #4
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	9500      	str	r5, [sp, #0]
 8002b6c:	9601      	str	r6, [sp, #4]
 8002b6e:	2261      	movs	r2, #97	; 0x61
 8002b70:	9202      	str	r2, [sp, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	4619      	mov	r1, r3
 8002b76:	220a      	movs	r2, #10
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f7ff ff1f 	bl	80029bc <printi>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	441c      	add	r4, r3
				continue;
 8002b82:	e05c      	b.n	8002c3e <print+0x1a6>
			}
			if( *format == 'x' ) {
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b78      	cmp	r3, #120	; 0x78
 8002b8a:	d110      	bne.n	8002bae <print+0x116>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1d1a      	adds	r2, r3, #4
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	9500      	str	r5, [sp, #0]
 8002b96:	9601      	str	r6, [sp, #4]
 8002b98:	2261      	movs	r2, #97	; 0x61
 8002b9a:	9202      	str	r2, [sp, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f7ff ff0a 	bl	80029bc <printi>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	441c      	add	r4, r3
				continue;
 8002bac:	e047      	b.n	8002c3e <print+0x1a6>
			}
			if( *format == 'X' ) {
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b58      	cmp	r3, #88	; 0x58
 8002bb4:	d110      	bne.n	8002bd8 <print+0x140>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	1d1a      	adds	r2, r3, #4
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	9500      	str	r5, [sp, #0]
 8002bc0:	9601      	str	r6, [sp, #4]
 8002bc2:	2241      	movs	r2, #65	; 0x41
 8002bc4:	9202      	str	r2, [sp, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	2210      	movs	r2, #16
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f7ff fef5 	bl	80029bc <printi>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	441c      	add	r4, r3
				continue;
 8002bd6:	e032      	b.n	8002c3e <print+0x1a6>
			}
			if( *format == 'u' ) {
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b75      	cmp	r3, #117	; 0x75
 8002bde:	d110      	bne.n	8002c02 <print+0x16a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	1d1a      	adds	r2, r3, #4
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	9500      	str	r5, [sp, #0]
 8002bea:	9601      	str	r6, [sp, #4]
 8002bec:	2261      	movs	r2, #97	; 0x61
 8002bee:	9202      	str	r2, [sp, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	220a      	movs	r2, #10
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f7ff fee0 	bl	80029bc <printi>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	441c      	add	r4, r3
				continue;
 8002c00:	e01d      	b.n	8002c3e <print+0x1a6>
			}
			if( *format == 'c' ) {
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b63      	cmp	r3, #99	; 0x63
 8002c08:	d119      	bne.n	8002c3e <print+0x1a6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1d1a      	adds	r2, r3, #4
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8002c16:	2300      	movs	r3, #0
 8002c18:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	4619      	mov	r1, r3
 8002c22:	462a      	mov	r2, r5
 8002c24:	4633      	mov	r3, r6
 8002c26:	f7ff fe6f 	bl	8002908 <prints>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	441c      	add	r4, r3
				continue;
 8002c2e:	e006      	b.n	8002c3e <print+0x1a6>
			}
		}
		else {
		out:
			printchar (out, *format);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7ff fe4e 	bl	80028d8 <printchar>
			++pc;
 8002c3c:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f af2e 	bne.w	8002aaa <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <print+0x1c4>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8002c5c:	4623      	mov	r3, r4
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c68:	08008354 	.word	0x08008354

08002c6c <sprintf>:
	va_start( args, format );
	return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8002c6c:	b40e      	push	{r1, r2, r3}
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args, format );
 8002c76:	f107 0320 	add.w	r3, r7, #32
 8002c7a:	60fb      	str	r3, [r7, #12]
	return print( &out, format, args );
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	4618      	mov	r0, r3
 8002c80:	69f9      	ldr	r1, [r7, #28]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f7ff ff08 	bl	8002a98 <print>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c94:	b003      	add	sp, #12
 8002c96:	4770      	bx	lr

08002c98 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <NVIC_SetPendingIRQ+0x30>)
 8002ca4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002ca8:	0952      	lsrs	r2, r2, #5
 8002caa:	79f9      	ldrb	r1, [r7, #7]
 8002cac:	f001 011f 	and.w	r1, r1, #31
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f101 	lsl.w	r1, r0, r1
 8002cb6:	3240      	adds	r2, #64	; 0x40
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af04      	add	r7, sp, #16
	/*<! Configure the hardware ready to run the test. */
	prvSetupHardware();;
 8002cd2:	f000 f841 	bl	8002d58 <prvSetupHardware>
	
	// ============now register CLI commands ===================
	
	FreeRTOS_CLIRegisterCommand( &xMotorCommand );
 8002cd6:	4818      	ldr	r0, [pc, #96]	; (8002d38 <main+0x6c>)
 8002cd8:	f002 f9ba 	bl	8005050 <FreeRTOS_CLIRegisterCommand>
       		

	// =============== register CLI commands ===================
	int sr = sizeof(QueueTelegram);
 8002cdc:	231c      	movs	r3, #28
 8002cde:	607b      	str	r3, [r7, #4]
	sr = sizeof (QueueTelegram *);
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	607b      	str	r3, [r7, #4]
	// create queues 
	QSpd_handle = xQueueCreate(1, sizeof(QueueTelegram));
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	211c      	movs	r1, #28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f001 f99f 	bl	800402c <xQueueGenericCreate>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <main+0x70>)
 8002cf2:	601a      	str	r2, [r3, #0]


/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/

	// echo server task 
	xTaskCreate(set_macTask, "SETMAC", configMINIMAL_STACK_SIZE*10, 
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <main+0x74>)
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9303      	str	r3, [sp, #12]
 8002d04:	480f      	ldr	r0, [pc, #60]	; (8002d44 <main+0x78>)
 8002d06:	4910      	ldr	r1, [pc, #64]	; (8002d48 <main+0x7c>)
 8002d08:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f000 f985 	bl	800301c <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY , &set_macTaskHandle);
	
	// run motor task 
	xTaskCreate(motorControl_task, "motorH", configMINIMAL_STACK_SIZE*19,
 8002d12:	2301      	movs	r3, #1
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <main+0x80>)
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9303      	str	r3, [sp, #12]
 8002d22:	480b      	ldr	r0, [pc, #44]	; (8002d50 <main+0x84>)
 8002d24:	490b      	ldr	r1, [pc, #44]	; (8002d54 <main+0x88>)
 8002d26:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f000 f976 	bl	800301c <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8002d30:	f000 fbb6 	bl	80034a0 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8002d34:	e7fe      	b.n	8002d34 <main+0x68>
 8002d36:	bf00      	nop
 8002d38:	0800893c 	.word	0x0800893c
 8002d3c:	200131f8 	.word	0x200131f8
 8002d40:	200141b8 	.word	0x200141b8
 8002d44:	08001599 	.word	0x08001599
 8002d48:	080083b0 	.word	0x080083b0
 8002d4c:	200131f0 	.word	0x200131f0
 8002d50:	08001dd1 	.word	0x08001dd1
 8002d54:	080083b8 	.word	0x080083b8

08002d58 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af04      	add	r7, sp, #16
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8002d5e:	f000 f8af 	bl	8002ec0 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002d62:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002d66:	f002 fc61 	bl	800562c <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 8002d6a:	f7fd fad1 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 8002d6e:	f7fe fc53 	bl	8001618 <init_USARTx>
	 * Function : 		init_W5200 from W5200.c file 
	 * Stack size :		5 times minimial stack size 
	 * Task priority :	main flash task priority + 1 
	 * Parameters 	 :	no parameters (NULL)
	 */  
	xTaskCreate(init_W5200, "init_W5200", configMINIMAL_STACK_SIZE*5, 
 8002d72:	2302      	movs	r3, #2
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9303      	str	r3, [sp, #12]
 8002d82:	4804      	ldr	r0, [pc, #16]	; (8002d94 <prvSetupHardware+0x3c>)
 8002d84:	4904      	ldr	r1, [pc, #16]	; (8002d98 <prvSetupHardware+0x40>)
 8002d86:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f000 f946 	bl	800301c <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY + 1 , NULL);
	
	
}
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	08000ac5 	.word	0x08000ac5
 8002d98:	080083c0 	.word	0x080083c0

08002d9c <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <vApplicationTickHook+0x20>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <vApplicationTickHook+0x20>)
 8002da8:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8002daa:	201c      	movs	r0, #28
 8002dac:	f7ff ff74 	bl	8002c98 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8002db0:	4b02      	ldr	r3, [pc, #8]	; (8002dbc <vApplicationTickHook+0x20>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	4b01      	ldr	r3, [pc, #4]	; (8002dbc <vApplicationTickHook+0x20>)
 8002db8:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000490 	.word	0x20000490

08002dc0 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <TIM3_IRQHandler+0x34>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <TIM3_IRQHandler+0x34>)
 8002dcc:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <TIM3_IRQHandler+0x34>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <TIM3_IRQHandler+0x38>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d903      	bls.n	8002de2 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <TIM3_IRQHandler+0x34>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <TIM3_IRQHandler+0x38>)
 8002de0:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <TIM3_IRQHandler+0x34>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	1e5a      	subs	r2, r3, #1
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <TIM3_IRQHandler+0x34>)
 8002dea:	601a      	str	r2, [r3, #0]
}
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	20000490 	.word	0x20000490
 8002df8:	20000494 	.word	0x20000494

08002dfc <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <TIM2_IRQHandler+0x20>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <TIM2_IRQHandler+0x20>)
 8002e08:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8002e0a:	201d      	movs	r0, #29
 8002e0c:	f7ff ff44 	bl	8002c98 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <TIM2_IRQHandler+0x20>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1e5a      	subs	r2, r3, #1
 8002e16:	4b01      	ldr	r3, [pc, #4]	; (8002e1c <TIM2_IRQHandler+0x20>)
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000490 	.word	0x20000490

08002e20 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8002e24:	f001 fe04 	bl	8004a30 <ulPortSetInterruptMask>
	for( ;; );
 8002e28:	e7fe      	b.n	8002e28 <vApplicationMallocFailedHook+0x8>
 8002e2a:	bf00      	nop

08002e2c <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8002e42:	f001 fdf5 	bl	8004a30 <ulPortSetInterruptMask>
	for( ;; );
 8002e46:	e7fe      	b.n	8002e46 <vApplicationStackOverflowHook+0xe>

08002e48 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]

}
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <Reset_Handler>:
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	f000 b804 	b.w	8002e6a <LoopCopyDataInit>

08002e62 <CopyDataInit>:
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <LoopFillZerobss+0x22>)
 8002e64:	585b      	ldr	r3, [r3, r1]
 8002e66:	5043      	str	r3, [r0, r1]
 8002e68:	3104      	adds	r1, #4

08002e6a <LoopCopyDataInit>:
 8002e6a:	480f      	ldr	r0, [pc, #60]	; (8002ea8 <LoopFillZerobss+0x26>)
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <LoopFillZerobss+0x2a>)
 8002e6e:	1842      	adds	r2, r0, r1
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f4ff aff6 	bcc.w	8002e62 <CopyDataInit>
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <LoopFillZerobss+0x2e>)
 8002e78:	f000 b803 	b.w	8002e82 <LoopFillZerobss>

08002e7c <FillZerobss>:
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f842 3b04 	str.w	r3, [r2], #4

08002e82 <LoopFillZerobss>:
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <LoopFillZerobss+0x32>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f4ff aff9 	bcc.w	8002e7c <FillZerobss>
 8002e8a:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x36>)
 8002e8c:	6801      	ldr	r1, [r0, #0]
 8002e8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e92:	6001      	str	r1, [r0, #0]
 8002e94:	f000 f814 	bl	8002ec0 <SystemInit>
 8002e98:	f004 feba 	bl	8007c10 <__libc_init_array>
 8002e9c:	f7ff ff16 	bl	8002ccc <main>
 8002ea0:	4770      	bx	lr
 8002ea2:	0000      	.short	0x0000
 8002ea4:	08008aa0 	.word	0x08008aa0
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000460 	.word	0x20000460
 8002eb0:	20000460 	.word	0x20000460
 8002eb4:	200143dc 	.word	0x200143dc
 8002eb8:	e000ed88 	.word	0xe000ed88

08002ebc <ADC_IRQHandler>:
 8002ebc:	f7ff bffe 	b.w	8002ebc <ADC_IRQHandler>

08002ec0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec4:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <SystemInit+0x5c>)
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <SystemInit+0x5c>)
 8002ec8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002ecc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <SystemInit+0x60>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <SystemInit+0x60>)
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <SystemInit+0x60>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <SystemInit+0x60>)
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <SystemInit+0x60>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <SystemInit+0x60>)
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <SystemInit+0x64>)
 8002efa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <SystemInit+0x60>)
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <SystemInit+0x60>)
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f06:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <SystemInit+0x60>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002f0e:	f000 f80b 	bl	8002f28 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f12:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <SystemInit+0x5c>)
 8002f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f18:	609a      	str	r2, [r3, #8]
#endif
}
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000ed00 	.word	0xe000ed00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	24003010 	.word	0x24003010

08002f28 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <SetSysClock+0xe4>)
 8002f38:	4a34      	ldr	r2, [pc, #208]	; (800300c <SetSysClock+0xe4>)
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f40:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <SetSysClock+0xe4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d103      	bne.n	8002f60 <SetSysClock+0x38>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002f5e:	d1f0      	bne.n	8002f42 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <SetSysClock+0xe4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	e001      	b.n	8002f76 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d142      	bne.n	8003002 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002f7c:	4b23      	ldr	r3, [pc, #140]	; (800300c <SetSysClock+0xe4>)
 8002f7e:	4a23      	ldr	r2, [pc, #140]	; (800300c <SetSysClock+0xe4>)
 8002f80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <SetSysClock+0xe8>)
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <SetSysClock+0xe8>)
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f92:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <SetSysClock+0xe4>)
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <SetSysClock+0xe4>)
 8002f98:	6892      	ldr	r2, [r2, #8]
 8002f9a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <SetSysClock+0xe4>)
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	; (800300c <SetSysClock+0xe4>)
 8002fa0:	6892      	ldr	r2, [r2, #8]
 8002fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa6:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <SetSysClock+0xe4>)
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <SetSysClock+0xe4>)
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8002fb2:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <SetSysClock+0xe4>)
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <SetSysClock+0xec>)
 8002fb8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <SetSysClock+0xe4>)
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <SetSysClock+0xe4>)
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002fc4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002fc6:	bf00      	nop
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <SetSysClock+0xe4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f9      	beq.n	8002fc8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8002fd4:	4b10      	ldr	r3, [pc, #64]	; (8003018 <SetSysClock+0xf0>)
 8002fd6:	f240 6204 	movw	r2, #1540	; 0x604
 8002fda:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <SetSysClock+0xe4>)
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <SetSysClock+0xe4>)
 8002fe0:	6892      	ldr	r2, [r2, #8]
 8002fe2:	f022 0203 	bic.w	r2, r2, #3
 8002fe6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <SetSysClock+0xe4>)
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <SetSysClock+0xe4>)
 8002fec:	6892      	ldr	r2, [r2, #8]
 8002fee:	f042 0202 	orr.w	r2, r2, #2
 8002ff2:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002ff4:	bf00      	nop
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <SetSysClock+0xe4>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d1f9      	bne.n	8002ff6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40023800 	.word	0x40023800
 8003010:	40007000 	.word	0x40007000
 8003014:	07404b19 	.word	0x07404b19
 8003018:	40023c00 	.word	0x40023c00

0800301c <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <xTaskGenericCreate+0x1c>
 8003032:	f001 fcfd 	bl	8004a30 <ulPortSetInterruptMask>
 8003036:	e7fe      	b.n	8003036 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	2b04      	cmp	r3, #4
 800303c:	d902      	bls.n	8003044 <xTaskGenericCreate+0x28>
 800303e:	f001 fcf7 	bl	8004a30 <ulPortSetInterruptMask>
 8003042:	e7fe      	b.n	8003042 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	4618      	mov	r0, r3
 8003048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800304a:	f000 fe8f 	bl	8003d6c <prvAllocateTCBAndStack>
 800304e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d072      	beq.n	800313c <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003060:	3b01      	subs	r3, #1
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0307 	bic.w	r3, r3, #7
 800306e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <xTaskGenericCreate+0x64>
 800307a:	f001 fcd9 	bl	8004a30 <ulPortSetInterruptMask>
 800307e:	e7fe      	b.n	800307e <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	69b8      	ldr	r0, [r7, #24]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308c:	f000 fd78 	bl	8003b80 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003090:	6978      	ldr	r0, [r7, #20]
 8003092:	68f9      	ldr	r1, [r7, #12]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	f001 fbd9 	bl	800484c <pxPortInitialiseStack>
 800309a:	4602      	mov	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80030ac:	f001 fc9e 	bl	80049ec <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <xTaskGenericCreate+0x150>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <xTaskGenericCreate+0x150>)
 80030b8:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <xTaskGenericCreate+0x154>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <xTaskGenericCreate+0x154>)
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <xTaskGenericCreate+0x150>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10f      	bne.n	80030f0 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80030d0:	f000 fd9e 	bl	8003c10 <prvInitialiseTaskLists>
 80030d4:	e00c      	b.n	80030f0 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <xTaskGenericCreate+0x158>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <xTaskGenericCreate+0x154>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d802      	bhi.n	80030f0 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <xTaskGenericCreate+0x154>)
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <xTaskGenericCreate+0x15c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <xTaskGenericCreate+0x15c>)
 80030f8:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <xTaskGenericCreate+0x15c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <xTaskGenericCreate+0x160>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d903      	bls.n	8003116 <xTaskGenericCreate+0xfa>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <xTaskGenericCreate+0x160>)
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a17      	ldr	r2, [pc, #92]	; (8003180 <xTaskGenericCreate+0x164>)
 8003124:	441a      	add	r2, r3
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3304      	adds	r3, #4
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	f001 fb07 	bl	8004740 <vListInsertEnd>

			xReturn = pdPASS;
 8003132:	2301      	movs	r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8003136:	f001 fc69 	bl	8004a0c <vPortExitCritical>
 800313a:	e002      	b.n	8003142 <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003140:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10b      	bne.n	8003160 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <xTaskGenericCreate+0x158>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <xTaskGenericCreate+0x154>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	429a      	cmp	r2, r3
 800315a:	d201      	bcs.n	8003160 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 800315c:	f001 fc36 	bl	80049cc <vPortYield>
			}
		}
	}

	return xReturn;
 8003160:	69fb      	ldr	r3, [r7, #28]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000570 	.word	0x20000570
 8003170:	20000498 	.word	0x20000498
 8003174:	2000057c 	.word	0x2000057c
 8003178:	20000590 	.word	0x20000590
 800317c:	20000578 	.word	0x20000578
 8003180:	2000049c 	.word	0x2000049c

08003184 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle xTaskToDelete )
	{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 800318c:	f001 fc2e 	bl	80049ec <vPortEnterCritical>
		{
			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <vTaskDelete+0x18>
 8003196:	4b19      	ldr	r3, [pc, #100]	; (80031fc <vTaskDelete+0x78>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	e000      	b.n	800319e <vTaskDelete+0x1a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 fb27 	bl	80047f8 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d004      	beq.n	80031bc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3318      	adds	r3, #24
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fb1e 	bl	80047f8 <uxListRemove>
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3304      	adds	r3, #4
 80031c0:	480f      	ldr	r0, [pc, #60]	; (8003200 <vTaskDelete+0x7c>)
 80031c2:	4619      	mov	r1, r3
 80031c4:	f001 fabc 	bl	8004740 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <vTaskDelete+0x80>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <vTaskDelete+0x80>)
 80031d0:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <vTaskDelete+0x84>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <vTaskDelete+0x84>)
 80031da:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80031dc:	f001 fc16 	bl	8004a0c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <vTaskDelete+0x88>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <vTaskDelete+0x72>
		{
			if( pxTCB == pxCurrentTCB )
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <vTaskDelete+0x78>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d101      	bne.n	80031f6 <vTaskDelete+0x72>
			{
				portYIELD_WITHIN_API();
 80031f2:	f001 fbeb 	bl	80049cc <vPortYield>
			}
		}
	}
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000498 	.word	0x20000498
 8003200:	20000544 	.word	0x20000544
 8003204:	20000558 	.word	0x20000558
 8003208:	20000590 	.word	0x20000590
 800320c:	2000057c 	.word	0x2000057c

08003210 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <vTaskDelayUntil+0x1a>
 8003224:	f001 fc04 	bl	8004a30 <ulPortSetInterruptMask>
 8003228:	e7fe      	b.n	8003228 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <vTaskDelayUntil+0x26>
 8003230:	f001 fbfe 	bl	8004a30 <ulPortSetInterruptMask>
 8003234:	e7fe      	b.n	8003234 <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 8003236:	f000 f96b 	bl	8003510 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <vTaskDelayUntil+0xa8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d90b      	bls.n	800326c <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	429a      	cmp	r2, r3
 800325c:	d911      	bls.n	8003282 <vTaskDelayUntil+0x72>
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	429a      	cmp	r2, r3
 8003264:	d90d      	bls.n	8003282 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e00a      	b.n	8003282 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	429a      	cmp	r2, r3
 8003274:	d803      	bhi.n	800327e <vTaskDelayUntil+0x6e>
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	429a      	cmp	r2, r3
 800327c:	d901      	bls.n	8003282 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 800327e:	2301      	movs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <vTaskDelayUntil+0xac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3304      	adds	r3, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f001 faaf 	bl	80047f8 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fd30 	bl	8003d00 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80032a0:	f000 f944 	bl	800352c <xTaskResumeAll>
 80032a4:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 80032ac:	f001 fb8e 	bl	80049cc <vPortYield>
		}
	}
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000574 	.word	0x20000574
 80032bc:	20000498 	.word	0x20000498

080032c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d012      	beq.n	80032f8 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 80032d2:	f000 f91d 	bl	8003510 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <vTaskDelay+0x48>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <vTaskDelay+0x4c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 fa86 	bl	80047f8 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f000 fd07 	bl	8003d00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032f2:	f000 f91b 	bl	800352c <xTaskResumeAll>
 80032f6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 80032fe:	f001 fb65 	bl	80049cc <vPortYield>
		}
	}
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000574 	.word	0x20000574
 800330c:	20000498 	.word	0x20000498

08003310 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8003318:	f001 fb68 	bl	80049ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <vTaskSuspend+0x18>
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <vTaskSuspend+0x80>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	e000      	b.n	800332a <vTaskSuspend+0x1a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3304      	adds	r3, #4
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fa61 	bl	80047f8 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3318      	adds	r3, #24
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fa58 	bl	80047f8 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3304      	adds	r3, #4
 800334c:	4811      	ldr	r0, [pc, #68]	; (8003394 <vTaskSuspend+0x84>)
 800334e:	4619      	mov	r1, r3
 8003350:	f001 f9f6 	bl	8004740 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8003354:	f001 fb5a 	bl	8004a0c <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <vTaskSuspend+0x80>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	429a      	cmp	r2, r3
 8003360:	d112      	bne.n	8003388 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <vTaskSuspend+0x88>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 800336a:	f001 fb2f 	bl	80049cc <vPortYield>
 800336e:	e00b      	b.n	8003388 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <vTaskSuspend+0x84>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <vTaskSuspend+0x8c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d103      	bne.n	8003384 <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <vTaskSuspend+0x80>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e001      	b.n	8003388 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 8003384:	f000 fa40 	bl	8003808 <vTaskSwitchContext>
				}
			}
		}
	}
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000498 	.word	0x20000498
 8003394:	2000055c 	.word	0x2000055c
 8003398:	2000057c 	.word	0x2000057c
 800339c:	20000570 	.word	0x20000570

080033a0 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <xTaskIsTaskSuspended+0x1c>
 80033b6:	f001 fb3b 	bl	8004a30 <ulPortSetInterruptMask>
 80033ba:	e7fe      	b.n	80033ba <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <xTaskIsTaskSuspended+0x5c>)
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d101      	bne.n	80033ca <xTaskIsTaskSuspended+0x2a>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <xTaskIsTaskSuspended+0x2c>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00f      	beq.n	80033f0 <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <xTaskIsTaskSuspended+0x60>)
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d00a      	beq.n	80033f0 <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <xTaskIsTaskSuspended+0x46>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <xTaskIsTaskSuspended+0x48>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 80033f0:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000055c 	.word	0x2000055c
 8003400:	20000530 	.word	0x20000530

08003404 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <vTaskResume+0x18>
 8003416:	f001 fb0b 	bl	8004a30 <ulPortSetInterruptMask>
 800341a:	e7fe      	b.n	800341a <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d034      	beq.n	800348c <vTaskResume+0x88>
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <vTaskResume+0x90>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d02f      	beq.n	800348c <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 800342c:	f001 fade 	bl	80049ec <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff ffb5 	bl	80033a0 <xTaskIsTaskSuspended>
 8003436:	4603      	mov	r3, r0
 8003438:	2b01      	cmp	r3, #1
 800343a:	d125      	bne.n	8003488 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3304      	adds	r3, #4
 8003440:	4618      	mov	r0, r3
 8003442:	f001 f9d9 	bl	80047f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <vTaskResume+0x94>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d903      	bls.n	800345a <vTaskResume+0x56>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <vTaskResume+0x94>)
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4a0d      	ldr	r2, [pc, #52]	; (800349c <vTaskResume+0x98>)
 8003468:	441a      	add	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3304      	adds	r3, #4
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f001 f965 	bl	8004740 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <vTaskResume+0x90>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	429a      	cmp	r2, r3
 8003482:	d301      	bcc.n	8003488 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8003484:	f001 faa2 	bl	80049cc <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8003488:	f001 fac0 	bl	8004a0c <vPortExitCritical>
		}
	}
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000498 	.word	0x20000498
 8003498:	20000578 	.word	0x20000578
 800349c:	2000049c 	.word	0x2000049c

080034a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80034a6:	2300      	movs	r3, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9302      	str	r3, [sp, #8]
 80034b2:	2300      	movs	r3, #0
 80034b4:	9303      	str	r3, [sp, #12]
 80034b6:	4812      	ldr	r0, [pc, #72]	; (8003500 <vTaskStartScheduler+0x60>)
 80034b8:	4912      	ldr	r1, [pc, #72]	; (8003504 <vTaskStartScheduler+0x64>)
 80034ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034be:	2300      	movs	r3, #0
 80034c0:	f7ff fdac 	bl	800301c <xTaskGenericCreate>
 80034c4:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
 80034cc:	f001 fb4a 	bl	8004b64 <xTimerCreateTimerTask>
 80034d0:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10a      	bne.n	80034ee <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80034d8:	f001 faaa 	bl	8004a30 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <vTaskStartScheduler+0x68>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <vTaskStartScheduler+0x6c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034e8:	f001 fa0a 	bl	8004900 <xPortStartScheduler>
 80034ec:	e005      	b.n	80034fa <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <vTaskStartScheduler+0x5a>
 80034f4:	f001 fa9c 	bl	8004a30 <ulPortSetInterruptMask>
 80034f8:	e7fe      	b.n	80034f8 <vTaskStartScheduler+0x58>
	}
}
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	08003b5d 	.word	0x08003b5d
 8003504:	080083cc 	.word	0x080083cc
 8003508:	2000057c 	.word	0x2000057c
 800350c:	20000574 	.word	0x20000574

08003510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <vTaskSuspendAll+0x18>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	4b03      	ldr	r3, [pc, #12]	; (8003528 <vTaskSuspendAll+0x18>)
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000580 	.word	0x20000580

0800352c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003536:	4b38      	ldr	r3, [pc, #224]	; (8003618 <xTaskResumeAll+0xec>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <xTaskResumeAll+0x18>
 800353e:	f001 fa77 	bl	8004a30 <ulPortSetInterruptMask>
 8003542:	e7fe      	b.n	8003542 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003544:	f001 fa52 	bl	80049ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003548:	4b33      	ldr	r3, [pc, #204]	; (8003618 <xTaskResumeAll+0xec>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	4b32      	ldr	r3, [pc, #200]	; (8003618 <xTaskResumeAll+0xec>)
 8003550:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <xTaskResumeAll+0xec>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d156      	bne.n	8003608 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 800355a:	4b30      	ldr	r3, [pc, #192]	; (800361c <xTaskResumeAll+0xf0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d052      	beq.n	8003608 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003562:	e02f      	b.n	80035c4 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <xTaskResumeAll+0xf4>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	3318      	adds	r3, #24
 8003570:	4618      	mov	r0, r3
 8003572:	f001 f941 	bl	80047f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	3304      	adds	r3, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f001 f93c 	bl	80047f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4b27      	ldr	r3, [pc, #156]	; (8003624 <xTaskResumeAll+0xf8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d903      	bls.n	8003594 <xTaskResumeAll+0x68>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <xTaskResumeAll+0xf8>)
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <xTaskResumeAll+0xfc>)
 80035a2:	441a      	add	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	f001 f8c8 	bl	8004740 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <xTaskResumeAll+0x100>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 80035be:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <xTaskResumeAll+0x104>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <xTaskResumeAll+0xf4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1cb      	bne.n	8003564 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <xTaskResumeAll+0x108>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80035d4:	e00c      	b.n	80035f0 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80035d6:	f000 f841 	bl	800365c <xTaskIncrementTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <xTaskResumeAll+0x104>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <xTaskResumeAll+0x108>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <xTaskResumeAll+0x108>)
 80035ee:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <xTaskResumeAll+0x108>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ee      	bne.n	80035d6 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 80035f8:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <xTaskResumeAll+0x104>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d103      	bne.n	8003608 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8003604:	f001 f9e2 	bl	80049cc <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8003608:	f001 fa00 	bl	8004a0c <vPortExitCritical>

	return xAlreadyYielded;
 800360c:	687b      	ldr	r3, [r7, #4]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000580 	.word	0x20000580
 800361c:	20000570 	.word	0x20000570
 8003620:	20000530 	.word	0x20000530
 8003624:	20000578 	.word	0x20000578
 8003628:	2000049c 	.word	0x2000049c
 800362c:	20000498 	.word	0x20000498
 8003630:	20000588 	.word	0x20000588
 8003634:	20000584 	.word	0x20000584

08003638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800363e:	f001 f9d5 	bl	80049ec <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <xTaskGetTickCount+0x20>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8003648:	f001 f9e0 	bl	8004a0c <vPortExitCritical>

	return xTicks;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000574 	.word	0x20000574

0800365c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003666:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <xTaskIncrementTick+0x180>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 80a4 	bne.w	80037b8 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8003670:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <xTaskIncrementTick+0x184>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	4b5a      	ldr	r3, [pc, #360]	; (80037e0 <xTaskIncrementTick+0x184>)
 8003678:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 800367a:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <xTaskIncrementTick+0x184>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d12e      	bne.n	80036e4 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8003686:	4b57      	ldr	r3, [pc, #348]	; (80037e4 <xTaskIncrementTick+0x188>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <xTaskIncrementTick+0x3a>
 8003690:	f001 f9ce 	bl	8004a30 <ulPortSetInterruptMask>
 8003694:	e7fe      	b.n	8003694 <xTaskIncrementTick+0x38>
 8003696:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <xTaskIncrementTick+0x188>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <xTaskIncrementTick+0x18c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <xTaskIncrementTick+0x188>)
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <xTaskIncrementTick+0x18c>)
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b50      	ldr	r3, [pc, #320]	; (80037ec <xTaskIncrementTick+0x190>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <xTaskIncrementTick+0x190>)
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <xTaskIncrementTick+0x188>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <xTaskIncrementTick+0x66>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xTaskIncrementTick+0x68>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <xTaskIncrementTick+0x76>
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <xTaskIncrementTick+0x194>)
 80036ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e008      	b.n	80036e4 <xTaskIncrementTick+0x88>
 80036d2:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <xTaskIncrementTick+0x188>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <xTaskIncrementTick+0x194>)
 80036e2:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <xTaskIncrementTick+0x194>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d34f      	bcc.n	800378e <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ee:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <xTaskIncrementTick+0x188>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <xTaskIncrementTick+0xa0>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <xTaskIncrementTick+0xa2>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <xTaskIncrementTick+0x194>)
 8003704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003708:	601a      	str	r2, [r3, #0]
						break;
 800370a:	e040      	b.n	800378e <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <xTaskIncrementTick+0x188>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d203      	bcs.n	800372c <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8003724:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <xTaskIncrementTick+0x194>)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
							break;
 800372a:	e030      	b.n	800378e <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	3304      	adds	r3, #4
 8003730:	4618      	mov	r0, r3
 8003732:	f001 f861 	bl	80047f8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3318      	adds	r3, #24
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f858 	bl	80047f8 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <xTaskIncrementTick+0x198>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d903      	bls.n	800375c <xTaskIncrementTick+0x100>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <xTaskIncrementTick+0x198>)
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <xTaskIncrementTick+0x19c>)
 800376a:	441a      	add	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3304      	adds	r3, #4
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f000 ffe4 	bl	8004740 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <xTaskIncrementTick+0x1a0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8003786:	2301      	movs	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 800378a:	e7b0      	b.n	80036ee <xTaskIncrementTick+0x92>
 800378c:	e7af      	b.n	80036ee <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800378e:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <xTaskIncrementTick+0x1a0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	4918      	ldr	r1, [pc, #96]	; (80037f8 <xTaskIncrementTick+0x19c>)
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d901      	bls.n	80037aa <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <xTaskIncrementTick+0x1a4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 80037b2:	f7ff faf3 	bl	8002d9c <vApplicationTickHook>
 80037b6:	e006      	b.n	80037c6 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <xTaskIncrementTick+0x1a4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <xTaskIncrementTick+0x1a4>)
 80037c0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80037c2:	f7ff faeb 	bl	8002d9c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037c6:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <xTaskIncrementTick+0x1a8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 80037ce:	2301      	movs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037d2:	697b      	ldr	r3, [r7, #20]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000580 	.word	0x20000580
 80037e0:	20000574 	.word	0x20000574
 80037e4:	20000528 	.word	0x20000528
 80037e8:	2000052c 	.word	0x2000052c
 80037ec:	2000058c 	.word	0x2000058c
 80037f0:	20000008 	.word	0x20000008
 80037f4:	20000578 	.word	0x20000578
 80037f8:	2000049c 	.word	0x2000049c
 80037fc:	20000498 	.word	0x20000498
 8003800:	20000584 	.word	0x20000584
 8003804:	20000588 	.word	0x20000588

08003808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800380e:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <vTaskSwitchContext+0xdc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <vTaskSwitchContext+0xe0>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e05e      	b.n	80038dc <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <vTaskSwitchContext+0xe0>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8003824:	4b31      	ldr	r3, [pc, #196]	; (80038ec <vTaskSwitchContext+0xe4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <vTaskSwitchContext+0xe4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	429a      	cmp	r2, r3
 8003832:	d808      	bhi.n	8003846 <vTaskSwitchContext+0x3e>
 8003834:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <vTaskSwitchContext+0xe4>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <vTaskSwitchContext+0xe4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3334      	adds	r3, #52	; 0x34
 800383e:	4610      	mov	r0, r2
 8003840:	4619      	mov	r1, r3
 8003842:	f7ff faf9 	bl	8002e38 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8003846:	4b29      	ldr	r3, [pc, #164]	; (80038ec <vTaskSwitchContext+0xe4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	4618      	mov	r0, r3
 800384e:	4928      	ldr	r1, [pc, #160]	; (80038f0 <vTaskSwitchContext+0xe8>)
 8003850:	2214      	movs	r2, #20
 8003852:	f004 fa05 	bl	8007c60 <memcmp>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d009      	beq.n	8003870 <vTaskSwitchContext+0x68>
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <vTaskSwitchContext+0xe4>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b22      	ldr	r3, [pc, #136]	; (80038ec <vTaskSwitchContext+0xe4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3334      	adds	r3, #52	; 0x34
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	f7ff fae5 	bl	8002e38 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800386e:	e00c      	b.n	800388a <vTaskSwitchContext+0x82>
 8003870:	e00b      	b.n	800388a <vTaskSwitchContext+0x82>
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <vTaskSwitchContext+0xec>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <vTaskSwitchContext+0x78>
 800387a:	f001 f8d9 	bl	8004a30 <ulPortSetInterruptMask>
 800387e:	e7fe      	b.n	800387e <vTaskSwitchContext+0x76>
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <vTaskSwitchContext+0xec>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <vTaskSwitchContext+0xec>)
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <vTaskSwitchContext+0xec>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	491a      	ldr	r1, [pc, #104]	; (80038f8 <vTaskSwitchContext+0xf0>)
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0e8      	beq.n	8003872 <vTaskSwitchContext+0x6a>
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <vTaskSwitchContext+0xec>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <vTaskSwitchContext+0xf0>)
 80038ae:	4413      	add	r3, r2
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3308      	adds	r3, #8
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d104      	bne.n	80038d2 <vTaskSwitchContext+0xca>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <vTaskSwitchContext+0xe4>)
 80038da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000580 	.word	0x20000580
 80038e8:	20000588 	.word	0x20000588
 80038ec:	20000498 	.word	0x20000498
 80038f0:	0800894c 	.word	0x0800894c
 80038f4:	20000578 	.word	0x20000578
 80038f8:	2000049c 	.word	0x2000049c

080038fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <vTaskPlaceOnEventList+0x16>
 800390c:	f001 f890 	bl	8004a30 <ulPortSetInterruptMask>
 8003910:	e7fe      	b.n	8003910 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <vTaskPlaceOnEventList+0x60>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3318      	adds	r3, #24
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4619      	mov	r1, r3
 800391c:	f000 ff34 	bl	8004788 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <vTaskPlaceOnEventList+0x60>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3304      	adds	r3, #4
 8003926:	4618      	mov	r0, r3
 8003928:	f000 ff66 	bl	80047f8 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d107      	bne.n	8003944 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <vTaskPlaceOnEventList+0x60>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3304      	adds	r3, #4
 800393a:	4809      	ldr	r0, [pc, #36]	; (8003960 <vTaskPlaceOnEventList+0x64>)
 800393c:	4619      	mov	r1, r3
 800393e:	f000 feff 	bl	8004740 <vListInsertEnd>
 8003942:	e007      	b.n	8003954 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <vTaskPlaceOnEventList+0x68>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f9d6 	bl	8003d00 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000498 	.word	0x20000498
 8003960:	2000055c 	.word	0x2000055c
 8003964:	20000574 	.word	0x20000574

08003968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <vTaskPlaceOnEventListRestricted+0x16>
 8003978:	f001 f85a 	bl	8004a30 <ulPortSetInterruptMask>
 800397c:	e7fe      	b.n	800397c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <vTaskPlaceOnEventListRestricted+0x48>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3318      	adds	r3, #24
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4619      	mov	r1, r3
 8003988:	f000 feda 	bl	8004740 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <vTaskPlaceOnEventListRestricted+0x48>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3304      	adds	r3, #4
 8003992:	4618      	mov	r0, r3
 8003994:	f000 ff30 	bl	80047f8 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <vTaskPlaceOnEventListRestricted+0x4c>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f9ac 	bl	8003d00 <prvAddCurrentTaskToDelayedList>
	}
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000498 	.word	0x20000498
 80039b4:	20000574 	.word	0x20000574

080039b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <xTaskRemoveFromEventList+0x1c>
 80039ce:	f001 f82f 	bl	8004a30 <ulPortSetInterruptMask>
 80039d2:	e7fe      	b.n	80039d2 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3318      	adds	r3, #24
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 ff0d 	bl	80047f8 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80039de:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <xTaskRemoveFromEventList+0xa0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 ff04 	bl	80047f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <xTaskRemoveFromEventList+0xa4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d903      	bls.n	8003a04 <xTaskRemoveFromEventList+0x4c>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <xTaskRemoveFromEventList+0xa4>)
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <xTaskRemoveFromEventList+0xa8>)
 8003a12:	441a      	add	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f000 fe90 	bl	8004740 <vListInsertEnd>
 8003a20:	e005      	b.n	8003a2e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3318      	adds	r3, #24
 8003a26:	480f      	ldr	r0, [pc, #60]	; (8003a64 <xTaskRemoveFromEventList+0xac>)
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f000 fe89 	bl	8004740 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <xTaskRemoveFromEventList+0xb0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d305      	bcc.n	8003a48 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <xTaskRemoveFromEventList+0xb4>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e001      	b.n	8003a4c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000580 	.word	0x20000580
 8003a5c:	20000578 	.word	0x20000578
 8003a60:	2000049c 	.word	0x2000049c
 8003a64:	20000530 	.word	0x20000530
 8003a68:	20000498 	.word	0x20000498
 8003a6c:	20000588 	.word	0x20000588

08003a70 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <vTaskSetTimeOutState+0x14>
 8003a7e:	f000 ffd7 	bl	8004a30 <ulPortSetInterruptMask>
 8003a82:	e7fe      	b.n	8003a82 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <vTaskSetTimeOutState+0x2c>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <vTaskSetTimeOutState+0x30>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	605a      	str	r2, [r3, #4]
}
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000058c 	.word	0x2000058c
 8003aa0:	20000574 	.word	0x20000574

08003aa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <xTaskCheckForTimeOut+0x16>
 8003ab4:	f000 ffbc 	bl	8004a30 <ulPortSetInterruptMask>
 8003ab8:	e7fe      	b.n	8003ab8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <xTaskCheckForTimeOut+0x22>
 8003ac0:	f000 ffb6 	bl	8004a30 <ulPortSetInterruptMask>
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8003ac6:	f000 ff91 	bl	80049ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8003aca:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <xTaskCheckForTimeOut+0x98>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad8:	d102      	bne.n	8003ae0 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e026      	b.n	8003b2e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <xTaskCheckForTimeOut+0x9c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d007      	beq.n	8003afc <xTaskCheckForTimeOut+0x58>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d802      	bhi.n	8003afc <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003af6:	2301      	movs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e018      	b.n	8003b2e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	1ad2      	subs	r2, r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d20e      	bcs.n	8003b2a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	1acb      	subs	r3, r1, r3
 8003b18:	441a      	add	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ffa6 	bl	8003a70 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e001      	b.n	8003b2e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b2e:	f000 ff6d 	bl	8004a0c <vPortExitCritical>

	return xReturn;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000574 	.word	0x20000574
 8003b40:	2000058c 	.word	0x2000058c

08003b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <vTaskMissedYield+0x14>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000588 	.word	0x20000588

08003b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003b64:	f000 f892 	bl	8003c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <prvIdleTask+0x20>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d901      	bls.n	8003b74 <prvIdleTask+0x18>
			{
				taskYIELD();
 8003b70:	f000 ff2c 	bl	80049cc <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003b74:	f7ff f95a 	bl	8002e2c <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003b78:	e7f4      	b.n	8003b64 <prvIdleTask+0x8>
 8003b7a:	bf00      	nop
 8003b7c:	2000049c 	.word	0x2000049c

08003b80 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e012      	b.n	8003bba <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4413      	add	r3, r2
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3330      	adds	r3, #48	; 0x30
 8003ba4:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4413      	add	r3, r2
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d100      	bne.n	8003bb4 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8003bb2:	e005      	b.n	8003bc0 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d9e9      	bls.n	8003b94 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d901      	bls.n	8003bd2 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8003bce:	2304      	movs	r3, #4
 8003bd0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fda0 	bl	8004728 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3318      	adds	r3, #24
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fd9b 	bl	8004728 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1c3 0205 	rsb	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop

08003c10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	e00c      	b.n	8003c36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <prvInitialiseTaskLists+0x5c>)
 8003c28:	4413      	add	r3, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fd5c 	bl	80046e8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3301      	adds	r3, #1
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d9ef      	bls.n	8003c1c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c3c:	480c      	ldr	r0, [pc, #48]	; (8003c70 <prvInitialiseTaskLists+0x60>)
 8003c3e:	f000 fd53 	bl	80046e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c42:	480c      	ldr	r0, [pc, #48]	; (8003c74 <prvInitialiseTaskLists+0x64>)
 8003c44:	f000 fd50 	bl	80046e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c48:	480b      	ldr	r0, [pc, #44]	; (8003c78 <prvInitialiseTaskLists+0x68>)
 8003c4a:	f000 fd4d 	bl	80046e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c4e:	480b      	ldr	r0, [pc, #44]	; (8003c7c <prvInitialiseTaskLists+0x6c>)
 8003c50:	f000 fd4a 	bl	80046e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c54:	480a      	ldr	r0, [pc, #40]	; (8003c80 <prvInitialiseTaskLists+0x70>)
 8003c56:	f000 fd47 	bl	80046e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <prvInitialiseTaskLists+0x74>)
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <prvInitialiseTaskLists+0x60>)
 8003c5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <prvInitialiseTaskLists+0x78>)
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <prvInitialiseTaskLists+0x64>)
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2000049c 	.word	0x2000049c
 8003c70:	20000500 	.word	0x20000500
 8003c74:	20000514 	.word	0x20000514
 8003c78:	20000530 	.word	0x20000530
 8003c7c:	20000544 	.word	0x20000544
 8003c80:	2000055c 	.word	0x2000055c
 8003c84:	20000528 	.word	0x20000528
 8003c88:	2000052c 	.word	0x2000052c

08003c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003c92:	e028      	b.n	8003ce6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003c94:	f7ff fc3c 	bl	8003510 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003c98:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <prvCheckTasksWaitingTermination+0x68>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8003ca8:	f7ff fc40 	bl	800352c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8003cb2:	f000 fe9b 	bl	80049ec <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <prvCheckTasksWaitingTermination+0x68>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fd98 	bl	80047f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <prvCheckTasksWaitingTermination+0x6c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	1e5a      	subs	r2, r3, #1
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <prvCheckTasksWaitingTermination+0x6c>)
 8003cd0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvCheckTasksWaitingTermination+0x70>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <prvCheckTasksWaitingTermination+0x70>)
 8003cda:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8003cdc:	f000 fe96 	bl	8004a0c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	f000 f875 	bl	8003dd0 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <prvCheckTasksWaitingTermination+0x70>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1d2      	bne.n	8003c94 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000544 	.word	0x20000544
 8003cf8:	20000570 	.word	0x20000570
 8003cfc:	20000558 	.word	0x20000558

08003d00 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003d08:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <prvAddCurrentTaskToDelayedList+0x58>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <prvAddCurrentTaskToDelayedList+0x5c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d209      	bcs.n	8003d2e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <prvAddCurrentTaskToDelayedList+0x60>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <prvAddCurrentTaskToDelayedList+0x58>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f000 fd2e 	bl	8004788 <vListInsert>
 8003d2c:	e010      	b.n	8003d50 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <prvAddCurrentTaskToDelayedList+0x64>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <prvAddCurrentTaskToDelayedList+0x58>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f000 fd24 	bl	8004788 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <prvAddCurrentTaskToDelayedList+0x68>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d202      	bcs.n	8003d50 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <prvAddCurrentTaskToDelayedList+0x68>)
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000498 	.word	0x20000498
 8003d5c:	20000574 	.word	0x20000574
 8003d60:	2000052c 	.word	0x2000052c
 8003d64:	20000528 	.word	0x20000528
 8003d68:	20000008 	.word	0x20000008

08003d6c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8003d78:	204c      	movs	r0, #76	; 0x4c
 8003d7a:	f001 fadb 	bl	8005334 <pvPortMalloc>
 8003d7e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01f      	beq.n	8003dc6 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <prvAllocateTCBAndStack+0x2e>
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 facf 	bl	8005334 <pvPortMalloc>
 8003d96:	4603      	mov	r3, r0
 8003d98:	e000      	b.n	8003d9c <prvAllocateTCBAndStack+0x30>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f001 fb4f 	bl	800544c <vPortFree>
			pxNewTCB = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e008      	b.n	8003dc6 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	21a5      	movs	r1, #165	; 0xa5
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f003 ff81 	bl	8007cc8 <memset>
		}
	}

	return pxNewTCB;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fb35 	bl	800544c <vPortFree>
		vPortFree( pxTCB );
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f001 fb32 	bl	800544c <vPortFree>
	}
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop

08003df0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <xTaskGetCurrentTaskHandle+0x1c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003dfc:	687b      	ldr	r3, [r7, #4]
	}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000498 	.word	0x20000498

08003e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <xTaskGetSchedulerState+0x34>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	e008      	b.n	8003e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <xTaskGetSchedulerState+0x38>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	e001      	b.n	8003e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e32:	2302      	movs	r3, #2
 8003e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e36:	687b      	ldr	r3, [r7, #4]
	}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	2000057c 	.word	0x2000057c
 8003e48:	20000580 	.word	0x20000580

08003e4c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d046      	beq.n	8003eec <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <vTaskPriorityInherit+0xa8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d23f      	bcs.n	8003eec <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <vTaskPriorityInherit+0xa8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f1c3 0205 	rsb	r2, r3, #5
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6959      	ldr	r1, [r3, #20]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <vTaskPriorityInherit+0xac>)
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4299      	cmp	r1, r3
 8003e90:	d101      	bne.n	8003e96 <vTaskPriorityInherit+0x4a>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <vTaskPriorityInherit+0x4c>
 8003e96:	2300      	movs	r3, #0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d022      	beq.n	8003ee2 <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fca9 	bl	80047f8 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <vTaskPriorityInherit+0xa8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <vTaskPriorityInherit+0xb0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d903      	bls.n	8003ec4 <vTaskPriorityInherit+0x78>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <vTaskPriorityInherit+0xb0>)
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <vTaskPriorityInherit+0xac>)
 8003ed2:	441a      	add	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f000 fc30 	bl	8004740 <vListInsertEnd>
 8003ee0:	e004      	b.n	8003eec <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <vTaskPriorityInherit+0xa8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000498 	.word	0x20000498
 8003ef8:	2000049c 	.word	0x2000049c
 8003efc:	20000578 	.word	0x20000578

08003f00 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02c      	beq.n	8003f6c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d026      	beq.n	8003f6c <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fc68 	bl	80047f8 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f1c3 0205 	rsb	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <vTaskPriorityDisinherit+0x74>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d903      	bls.n	8003f50 <vTaskPriorityDisinherit+0x50>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <vTaskPriorityDisinherit+0x74>)
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <vTaskPriorityDisinherit+0x78>)
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	f000 fbea 	bl	8004740 <vListInsertEnd>
			}
		}
	}
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000578 	.word	0x20000578
 8003f78:	2000049c 	.word	0x2000049c

08003f7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <xQueueGenericReset+0x1a>
 8003f90:	f000 fd4e 	bl	8004a30 <ulPortSetInterruptMask>
 8003f94:	e7fe      	b.n	8003f94 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8003f96:	f000 fd29 	bl	80049ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe4:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10e      	bne.n	800400a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d014      	beq.n	800401e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3310      	adds	r3, #16
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fcdd 	bl	80039b8 <xTaskRemoveFromEventList>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10c      	bne.n	800401e <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8004004:	f000 fce2 	bl	80049cc <vPortYield>
 8004008:	e009      	b.n	800401e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3310      	adds	r3, #16
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fb6a 	bl	80046e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3324      	adds	r3, #36	; 0x24
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fb65 	bl	80046e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800401e:	f000 fcf5 	bl	8004a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004022:	2301      	movs	r3, #1
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02a      	beq.n	800409a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8004044:	2050      	movs	r0, #80	; 0x50
 8004046:	f001 f975 	bl	8005334 <pvPortMalloc>
 800404a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d023      	beq.n	800409a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	3301      	adds	r3, #1
 800405c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f001 f968 	bl	8005334 <pvPortMalloc>
 8004064:	4602      	mov	r2, r0
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d010      	beq.n	8004094 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800407e:	69b8      	ldr	r0, [r7, #24]
 8004080:	2101      	movs	r1, #1
 8004082:	f7ff ff7b 	bl	8003f7c <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	79fa      	ldrb	r2, [r7, #7]
 800408a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e002      	b.n	800409a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8004094:	69b8      	ldr	r0, [r7, #24]
 8004096:	f001 f9d9 	bl	800544c <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <xQueueGenericCreate+0x7a>
 80040a0:	f000 fcc6 	bl	8004a30 <ulPortSetInterruptMask>
 80040a4:	e7fe      	b.n	80040a4 <xQueueGenericCreate+0x78>

	return xReturn;
 80040a6:	69fb      	ldr	r3, [r7, #28]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <xQueueGenericSend+0x22>
 80040cc:	f000 fcb0 	bl	8004a30 <ulPortSetInterruptMask>
 80040d0:	e7fe      	b.n	80040d0 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d103      	bne.n	80040e0 <xQueueGenericSend+0x30>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <xQueueGenericSend+0x34>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <xQueueGenericSend+0x36>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <xQueueGenericSend+0x40>
 80040ea:	f000 fca1 	bl	8004a30 <ulPortSetInterruptMask>
 80040ee:	e7fe      	b.n	80040ee <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d103      	bne.n	80040fe <xQueueGenericSend+0x4e>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <xQueueGenericSend+0x52>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <xQueueGenericSend+0x54>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <xQueueGenericSend+0x5e>
 8004108:	f000 fc92 	bl	8004a30 <ulPortSetInterruptMask>
 800410c:	e7fe      	b.n	800410c <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800410e:	f000 fc6d 	bl	80049ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <xQueueGenericSend+0x74>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d116      	bne.n	8004152 <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004124:	69b8      	ldr	r0, [r7, #24]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	f000 f9a9 	bl	8004480 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	3324      	adds	r3, #36	; 0x24
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fc3c 	bl	80039b8 <xTaskRemoveFromEventList>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8004146:	f000 fc41 	bl	80049cc <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800414a:	f000 fc5f 	bl	8004a0c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800414e:	2301      	movs	r3, #1
 8004150:	e059      	b.n	8004206 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004158:	f000 fc58 	bl	8004a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800415c:	2300      	movs	r3, #0
 800415e:	e052      	b.n	8004206 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004166:	f107 0310 	add.w	r3, r7, #16
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fc80 	bl	8003a70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8004174:	f000 fc4a 	bl	8004a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004178:	f7ff f9ca 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800417c:	f000 fc36 	bl	80049ec <vPortEnterCritical>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004188:	d102      	bne.n	8004190 <xQueueGenericSend+0xe0>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2200      	movs	r2, #0
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004198:	d102      	bne.n	80041a0 <xQueueGenericSend+0xf0>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2200      	movs	r2, #0
 800419e:	649a      	str	r2, [r3, #72]	; 0x48
 80041a0:	f000 fc34 	bl	8004a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f7ff fc79 	bl	8003aa4 <xTaskCheckForTimeOut>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11e      	bne.n	80041f6 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041b8:	69b8      	ldr	r0, [r7, #24]
 80041ba:	f000 fa51 	bl	8004660 <prvIsQueueFull>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d012      	beq.n	80041ea <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f103 0210 	add.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	f7ff fb94 	bl	80038fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041d4:	69b8      	ldr	r0, [r7, #24]
 80041d6:	f000 f9e1 	bl	800459c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041da:	f7ff f9a7 	bl	800352c <xTaskResumeAll>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 80041e4:	f000 fbf2 	bl	80049cc <vPortYield>
 80041e8:	e00c      	b.n	8004204 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041ea:	69b8      	ldr	r0, [r7, #24]
 80041ec:	f000 f9d6 	bl	800459c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041f0:	f7ff f99c 	bl	800352c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80041f4:	e78b      	b.n	800410e <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041f6:	69b8      	ldr	r0, [r7, #24]
 80041f8:	f000 f9d0 	bl	800459c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041fc:	f7ff f996 	bl	800352c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <xQueueGenericSend+0x156>
		}
	}
 8004204:	e783      	b.n	800410e <xQueueGenericSend+0x5e>
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop

08004210 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <xQueueGenericSendFromISR+0x1e>
 8004228:	f000 fc02 	bl	8004a30 <ulPortSetInterruptMask>
 800422c:	e7fe      	b.n	800422c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <xQueueGenericSendFromISR+0x2c>
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <xQueueGenericSendFromISR+0x30>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <xQueueGenericSendFromISR+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <xQueueGenericSendFromISR+0x3c>
 8004246:	f000 fbf3 	bl	8004a30 <ulPortSetInterruptMask>
 800424a:	e7fe      	b.n	800424a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d103      	bne.n	800425a <xQueueGenericSendFromISR+0x4a>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <xQueueGenericSendFromISR+0x4e>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <xQueueGenericSendFromISR+0x50>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <xQueueGenericSendFromISR+0x5a>
 8004264:	f000 fbe4 	bl	8004a30 <ulPortSetInterruptMask>
 8004268:	e7fe      	b.n	8004268 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800426a:	f000 fc4f 	bl	8004b0c <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800426e:	f000 fbdf 	bl	8004a30 <ulPortSetInterruptMask>
 8004272:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <xQueueGenericSendFromISR+0x76>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d124      	bne.n	80042d0 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004286:	69b8      	ldr	r0, [r7, #24]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	f000 f8f8 	bl	8004480 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004298:	d112      	bne.n	80042c0 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d013      	beq.n	80042ca <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	3324      	adds	r3, #36	; 0x24
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fb86 	bl	80039b8 <xTaskRemoveFromEventList>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e004      	b.n	80042ca <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e001      	b.n	80042d4 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80042d4:	6978      	ldr	r0, [r7, #20]
 80042d6:	f000 fbb5 	bl	8004a44 <vPortClearInterruptMask>

	return xReturn;
 80042da:	69fb      	ldr	r3, [r7, #28]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <xQueueGenericReceive+0x22>
 8004300:	f000 fb96 	bl	8004a30 <ulPortSetInterruptMask>
 8004304:	e7fe      	b.n	8004304 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <xQueueGenericReceive+0x30>
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <xQueueGenericReceive+0x34>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <xQueueGenericReceive+0x36>
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <xQueueGenericReceive+0x40>
 800431e:	f000 fb87 	bl	8004a30 <ulPortSetInterruptMask>
 8004322:	e7fe      	b.n	8004322 <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004324:	f000 fb62 	bl	80049ec <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d03b      	beq.n	80043a8 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004336:	6a38      	ldr	r0, [r7, #32]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	f000 f909 	bl	8004550 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11c      	bne.n	800437e <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	1e5a      	subs	r2, r3, #1
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8004356:	f7ff fd4b 	bl	8003df0 <xTaskGetCurrentTaskHandle>
 800435a:	4602      	mov	r2, r0
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	3310      	adds	r3, #16
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fb23 	bl	80039b8 <xTaskRemoveFromEventList>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d113      	bne.n	80043a0 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8004378:	f000 fb28 	bl	80049cc <vPortYield>
 800437c:	e010      	b.n	80043a0 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	3324      	adds	r3, #36	; 0x24
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fb11 	bl	80039b8 <xTaskRemoveFromEventList>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 800439c:	f000 fb16 	bl	80049cc <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 80043a0:	f000 fb34 	bl	8004a0c <vPortExitCritical>
				return pdPASS;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e066      	b.n	8004476 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ae:	f000 fb2d 	bl	8004a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e05f      	b.n	8004476 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fb55 	bl	8003a70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043c6:	2301      	movs	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ca:	f000 fb1f 	bl	8004a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ce:	f7ff f89f 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043d2:	f000 fb0b 	bl	80049ec <vPortEnterCritical>
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043de:	d102      	bne.n	80043e6 <xQueueGenericReceive+0x102>
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	2200      	movs	r2, #0
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ee:	d102      	bne.n	80043f6 <xQueueGenericReceive+0x112>
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	2200      	movs	r2, #0
 80043f4:	649a      	str	r2, [r3, #72]	; 0x48
 80043f6:	f000 fb09 	bl	8004a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043fa:	f107 0214 	add.w	r2, r7, #20
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	f7ff fb4e 	bl	8003aa4 <xTaskCheckForTimeOut>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d12b      	bne.n	8004466 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800440e:	6a38      	ldr	r0, [r7, #32]
 8004410:	f000 f910 	bl	8004634 <prvIsQueueEmpty>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01f      	beq.n	800445a <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 8004422:	f000 fae3 	bl	80049ec <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fd0e 	bl	8003e4c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8004430:	f000 faec 	bl	8004a0c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	f7ff fa5c 	bl	80038fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004444:	6a38      	ldr	r0, [r7, #32]
 8004446:	f000 f8a9 	bl	800459c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800444a:	f7ff f86f 	bl	800352c <xTaskResumeAll>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10f      	bne.n	8004474 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8004454:	f000 faba 	bl	80049cc <vPortYield>
 8004458:	e00c      	b.n	8004474 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800445a:	6a38      	ldr	r0, [r7, #32]
 800445c:	f000 f89e 	bl	800459c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004460:	f7ff f864 	bl	800352c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8004464:	e75e      	b.n	8004324 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8004466:	6a38      	ldr	r0, [r7, #32]
 8004468:	f000 f898 	bl	800459c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800446c:	f7ff f85e 	bl	800352c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <xQueueGenericReceive+0x192>
		}
	}
 8004474:	e756      	b.n	8004324 <xQueueGenericReceive+0x40>
}
 8004476:	4618      	mov	r0, r3
 8004478:	3728      	adds	r7, #40	; 0x28
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop

08004480 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10c      	bne.n	80044ae <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d151      	bne.n	8004540 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fd2d 	bl	8003f00 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e048      	b.n	8004540 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11a      	bne.n	80044ea <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	4610      	mov	r0, r2
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f7fb fe8b 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	441a      	add	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d32f      	bcc.n	8004540 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	e02a      	b.n	8004540 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4610      	mov	r0, r2
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f7fb fe70 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	425b      	negs	r3, r3
 8004506:	441a      	add	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d207      	bcs.n	8004528 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	425b      	negs	r3, r3
 8004522:	441a      	add	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d108      	bne.n	8004540 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	1e5a      	subs	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
}
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d019      	beq.n	8004596 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	441a      	add	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d303      	bcc.n	8004584 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	6838      	ldr	r0, [r7, #0]
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	f7fb fe23 	bl	80001dc <memcpy>
	}
}
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045a4:	f000 fa22 	bl	80049ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80045a8:	e014      	b.n	80045d4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3324      	adds	r3, #36	; 0x24
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff f9fe 	bl	80039b8 <xTaskRemoveFromEventList>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80045c2:	f7ff fabf 	bl	8003b44 <vTaskMissedYield>
 80045c6:	e000      	b.n	80045ca <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 80045c8:	e008      	b.n	80045dc <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ce:	1e5a      	subs	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d8:	2b00      	cmp	r3, #0
 80045da:	dce6      	bgt.n	80045aa <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80045e4:	f000 fa12 	bl	8004a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045e8:	f000 fa00 	bl	80049ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80045ec:	e014      	b.n	8004618 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00f      	beq.n	8004616 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3310      	adds	r3, #16
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff f9dc 	bl	80039b8 <xTaskRemoveFromEventList>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8004606:	f7ff fa9d 	bl	8003b44 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	1e5a      	subs	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
 8004614:	e000      	b.n	8004618 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8004616:	e003      	b.n	8004620 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	2b00      	cmp	r3, #0
 800461e:	dce6      	bgt.n	80045ee <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004626:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004628:	f000 f9f0 	bl	8004a0c <vPortExitCritical>
}
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop

08004634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 800463c:	f000 f9d6 	bl	80049ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e001      	b.n	8004652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004652:	f000 f9db 	bl	8004a0c <vPortExitCritical>

	return xReturn;
 8004656:	68fb      	ldr	r3, [r7, #12]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004668:	f000 f9c0 	bl	80049ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	429a      	cmp	r2, r3
 8004676:	d102      	bne.n	800467e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004678:	2301      	movs	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e001      	b.n	8004682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004682:	f000 f9c3 	bl	8004a0c <vPortExitCritical>

	return xReturn;
 8004686:	68fb      	ldr	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800469e:	f000 f9a5 	bl	80049ec <vPortEnterCritical>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046aa:	d102      	bne.n	80046b2 <vQueueWaitForMessageRestricted+0x22>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ba:	d102      	bne.n	80046c2 <vQueueWaitForMessageRestricted+0x32>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	649a      	str	r2, [r3, #72]	; 0x48
 80046c2:	f000 f9a3 	bl	8004a0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3324      	adds	r3, #36	; 0x24
 80046d2:	4618      	mov	r0, r3
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	f7ff f947 	bl	8003968 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ff5e 	bl	800459c <prvUnlockQueue>
	}
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop

080046e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f103 0208 	add.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004700:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f103 0208 	add.w	r2, r3, #8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f103 0208 	add.w	r2, r3, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
}
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop

08004728 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	611a      	str	r2, [r3, #16]
}
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]
}
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop

08004788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479e:	d103      	bne.n	80047a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e00c      	b.n	80047c2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3308      	adds	r3, #8
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e002      	b.n	80047b6 <vListInsert+0x2e>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d9f6      	bls.n	80047b0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6852      	ldr	r2, [r2, #4]
 8004812:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d103      	bne.n	800482c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3b04      	subs	r3, #4
 800485c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b04      	subs	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b04      	subs	r3, #4
 8004876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8004878:	4a0c      	ldr	r2, [pc, #48]	; (80048ac <pxPortInitialiseStack+0x60>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b14      	subs	r3, #20
 8004882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3b04      	subs	r3, #4
 800488e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f06f 0202 	mvn.w	r2, #2
 8004896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b20      	subs	r3, #32
 800489c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800489e:	68fb      	ldr	r3, [r7, #12]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	080048b1 	.word	0x080048b1

080048b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <prvTaskExitError+0x1c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048bc:	d002      	beq.n	80048c4 <prvTaskExitError+0x14>
 80048be:	f000 f8b7 	bl	8004a30 <ulPortSetInterruptMask>
 80048c2:	e7fe      	b.n	80048c2 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 80048c4:	f000 f8b4 	bl	8004a30 <ulPortSetInterruptMask>
	for( ;; );
 80048c8:	e7fe      	b.n	80048c8 <prvTaskExitError+0x18>
 80048ca:	bf00      	nop
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <pxCurrentTCBConst2>)
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	f380 8809 	msr	PSP, r0
 80048de:	f04f 0000 	mov.w	r0, #0
 80048e2:	f380 8811 	msr	BASEPRI, r0
 80048e6:	4770      	bx	lr

080048e8 <pxCurrentTCBConst2>:
 80048e8:	20000498 	.word	0x20000498

080048ec <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80048ec:	4803      	ldr	r0, [pc, #12]	; (80048fc <prvPortStartFirstTask+0x10>)
 80048ee:	6800      	ldr	r0, [r0, #0]
 80048f0:	6800      	ldr	r0, [r0, #0]
 80048f2:	f380 8808 	msr	MSP, r0
 80048f6:	b662      	cpsie	i
 80048f8:	df00      	svc	0
 80048fa:	bf00      	nop
 80048fc:	e000ed08 	.word	0xe000ed08

08004900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004906:	4b2b      	ldr	r3, [pc, #172]	; (80049b4 <xPortStartScheduler+0xb4>)
 8004908:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	22ff      	movs	r2, #255	; 0xff
 8004916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004928:	b2da      	uxtb	r2, r3
 800492a:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <xPortStartScheduler+0xb8>)
 800492c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <xPortStartScheduler+0xbc>)
 8004930:	2207      	movs	r2, #7
 8004932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004934:	e009      	b.n	800494a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004936:	4b21      	ldr	r3, [pc, #132]	; (80049bc <xPortStartScheduler+0xbc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <xPortStartScheduler+0xbc>)
 800493e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	b2db      	uxtb	r3, r3
 8004948:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	b25b      	sxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	dbef      	blt.n	8004936 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004956:	4b19      	ldr	r3, [pc, #100]	; (80049bc <xPortStartScheduler+0xbc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	021a      	lsls	r2, r3, #8
 800495c:	4b17      	ldr	r3, [pc, #92]	; (80049bc <xPortStartScheduler+0xbc>)
 800495e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004960:	4b16      	ldr	r3, [pc, #88]	; (80049bc <xPortStartScheduler+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <xPortStartScheduler+0xbc>)
 800496a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <xPortStartScheduler+0xc0>)
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <xPortStartScheduler+0xc0>)
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800497e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <xPortStartScheduler+0xc0>)
 8004982:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <xPortStartScheduler+0xc0>)
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800498a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800498c:	f000 f89a 	bl	8004ac4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <xPortStartScheduler+0xc4>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004996:	f000 f8af 	bl	8004af8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <xPortStartScheduler+0xc8>)
 800499c:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <xPortStartScheduler+0xc8>)
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80049a4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049a6:	f7ff ffa1 	bl	80048ec <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	e000e400 	.word	0xe000e400
 80049b8:	20000594 	.word	0x20000594
 80049bc:	20000598 	.word	0x20000598
 80049c0:	e000ed20 	.word	0xe000ed20
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	e000ef34 	.word	0xe000ef34

080049cc <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <vPortYield+0x1c>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80049d8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80049dc:	f3bf 8f6f 	isb	sy
}
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80049f0:	f000 f81e 	bl	8004a30 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <vPortEnterCritical+0x1c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <vPortEnterCritical+0x1c>)
 80049fc:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80049fe:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004a02:	f3bf 8f6f 	isb	sy
}
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	2000000c 	.word	0x2000000c

08004a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <vPortExitCritical+0x20>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <vPortExitCritical+0x20>)
 8004a18:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <vPortExitCritical+0x20>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 8004a22:	2000      	movs	r0, #0
 8004a24:	f000 f80e 	bl	8004a44 <vPortClearInterruptMask>
	}
}
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000000c 	.word	0x2000000c

08004a30 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8004a30:	f3ef 8011 	mrs	r0, BASEPRI
 8004a34:	f04f 0150 	mov.w	r1, #80	; 0x50
 8004a38:	f381 8811 	msr	BASEPRI, r1
 8004a3c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bf00      	nop

08004a44 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8004a44:	f380 8811 	msr	BASEPRI, r0
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop

08004a4c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a4c:	f3ef 8009 	mrs	r0, PSP
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <pxCurrentTCBConst>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	f01e 0f10 	tst.w	lr, #16
 8004a58:	bf08      	it	eq
 8004a5a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a5e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a62:	6010      	str	r0, [r2, #0]
 8004a64:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a68:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a6c:	f380 8811 	msr	BASEPRI, r0
 8004a70:	f7fe feca 	bl	8003808 <vTaskSwitchContext>
 8004a74:	f04f 0000 	mov.w	r0, #0
 8004a78:	f380 8811 	msr	BASEPRI, r0
 8004a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	6808      	ldr	r0, [r1, #0]
 8004a84:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	f01e 0f10 	tst.w	lr, #16
 8004a8c:	bf08      	it	eq
 8004a8e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a92:	f380 8809 	msr	PSP, r0
 8004a96:	4770      	bx	lr

08004a98 <pxCurrentTCBConst>:
 8004a98:	20000498 	.word	0x20000498

08004a9c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa0:	f7ff ffc6 	bl	8004a30 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004aa4:	f7fe fdda 	bl	800365c <xTaskIncrementTick>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <SysTick_Handler+0x24>)
 8004ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f7ff ffc4 	bl	8004a44 <vPortClearInterruptMask>
}
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <vPortSetupTimerInterrupt+0x24>)
 8004aca:	4a08      	ldr	r2, [pc, #32]	; (8004aec <vPortSetupTimerInterrupt+0x28>)
 8004acc:	6811      	ldr	r1, [r2, #0]
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <vPortSetupTimerInterrupt+0x2c>)
 8004ad0:	fba2 0201 	umull	r0, r2, r2, r1
 8004ad4:	0992      	lsrs	r2, r2, #6
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <vPortSetupTimerInterrupt+0x30>)
 8004adc:	2207      	movs	r2, #7
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000e014 	.word	0xe000e014
 8004aec:	20000004 	.word	0x20000004
 8004af0:	10624dd3 	.word	0x10624dd3
 8004af4:	e000e010 	.word	0xe000e010

08004af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b08 <vPortEnableVFP+0x10>
 8004afc:	6801      	ldr	r1, [r0, #0]
 8004afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b02:	6001      	str	r1, [r0, #0]
 8004b04:	4770      	bx	lr
 8004b06:	0000      	.short	0x0000
 8004b08:	e000ed88 	.word	0xe000ed88

08004b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004b12:	f3ef 8305 	mrs	r3, IPSR
 8004b16:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b0f      	cmp	r3, #15
 8004b1c:	d90c      	bls.n	8004b38 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b1e:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <vPortValidateInterruptPriority+0x48>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <vPortValidateInterruptPriority+0x4c>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d202      	bcs.n	8004b38 <vPortValidateInterruptPriority+0x2c>
 8004b32:	f7ff ff7d 	bl	8004a30 <ulPortSetInterruptMask>
 8004b36:	e7fe      	b.n	8004b36 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <vPortValidateInterruptPriority+0x50>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <vPortValidateInterruptPriority+0x54>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d902      	bls.n	8004b4e <vPortValidateInterruptPriority+0x42>
 8004b48:	f7ff ff72 	bl	8004a30 <ulPortSetInterruptMask>
 8004b4c:	e7fe      	b.n	8004b4c <vPortValidateInterruptPriority+0x40>
	}
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	e000e3f0 	.word	0xe000e3f0
 8004b58:	20000594 	.word	0x20000594
 8004b5c:	e000ed0c 	.word	0xe000ed0c
 8004b60:	20000598 	.word	0x20000598

08004b64 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b6e:	f000 fa45 	bl	8004ffc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b72:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <xTimerCreateTimerTask+0x4c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00f      	beq.n	8004b9a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9302      	str	r3, [sp, #8]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	480a      	ldr	r0, [pc, #40]	; (8004bb4 <xTimerCreateTimerTask+0x50>)
 8004b8c:	490a      	ldr	r1, [pc, #40]	; (8004bb8 <xTimerCreateTimerTask+0x54>)
 8004b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b92:	2300      	movs	r3, #0
 8004b94:	f7fe fa42 	bl	800301c <xTaskGenericCreate>
 8004b98:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <xTimerCreateTimerTask+0x42>
 8004ba0:	f7ff ff46 	bl	8004a30 <ulPortSetInterruptMask>
 8004ba4:	e7fe      	b.n	8004ba4 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8004ba6:	687b      	ldr	r3, [r7, #4]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	200005cc 	.word	0x200005cc
 8004bb4:	08004cb9 	.word	0x08004cb9
 8004bb8:	080083d4 	.word	0x080083d4

08004bbc <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bce:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <xTimerGenericCommand+0x88>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d030      	beq.n	8004c38 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11c      	bne.n	8004c22 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004be8:	f7ff f912 	bl	8003e10 <xTaskGetSchedulerState>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d10b      	bne.n	8004c0a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <xTimerGenericCommand+0x88>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f107 0310 	add.w	r3, r7, #16
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c00:	2300      	movs	r3, #0
 8004c02:	f7ff fa55 	bl	80040b0 <xQueueGenericSend>
 8004c06:	61f8      	str	r0, [r7, #28]
 8004c08:	e016      	b.n	8004c38 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <xTimerGenericCommand+0x88>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f107 0310 	add.w	r3, r7, #16
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	2200      	movs	r2, #0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f7ff fa49 	bl	80040b0 <xQueueGenericSend>
 8004c1e:	61f8      	str	r0, [r7, #28]
 8004c20:	e00a      	b.n	8004c38 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <xTimerGenericCommand+0x88>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f107 0310 	add.w	r3, r7, #16
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	f7ff faed 	bl	8004210 <xQueueGenericSendFromISR>
 8004c36:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8004c38:	69fb      	ldr	r3, [r7, #28]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200005cc 	.word	0x200005cc

08004c48 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c52:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <prvProcessExpiredTimer+0x6c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fdc9 	bl	80047f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d11b      	bne.n	8004ca6 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f000 f8a9 	bl	8004dd4 <prvInsertTimerInActiveList>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d10e      	bne.n	8004ca6 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	2100      	movs	r1, #0
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	2300      	movs	r3, #0
 8004c94:	f7ff ff92 	bl	8004bbc <xTimerGenericCommand>
 8004c98:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <prvProcessExpiredTimer+0x5e>
 8004ca0:	f7ff fec6 	bl	8004a30 <ulPortSetInterruptMask>
 8004ca4:	e7fe      	b.n	8004ca4 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	4798      	blx	r3
}
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200005c4 	.word	0x200005c4

08004cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cc0:	f107 0308 	add.w	r3, r7, #8
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f83f 	bl	8004d48 <prvGetNextExpireTime>
 8004cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f000 f803 	bl	8004cdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004cd6:	f000 f8bf 	bl	8004e58 <prvProcessReceivedCommands>
	}
 8004cda:	e7f1      	b.n	8004cc0 <prvTimerTask+0x8>

08004cdc <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ce6:	f7fe fc13 	bl	8003510 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f84e 	bl	8004d90 <prvSampleTimeNow>
 8004cf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d11e      	bne.n	8004d3a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <prvProcessTimerOrBlockTask+0x3c>
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d806      	bhi.n	8004d18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d0a:	f7fe fc0f 	bl	800352c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	68f9      	ldr	r1, [r7, #12]
 8004d12:	f7ff ff99 	bl	8004c48 <prvProcessExpiredTimer>
 8004d16:	e012      	b.n	8004d3e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <prvProcessTimerOrBlockTask+0x68>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1acb      	subs	r3, r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	f7ff fcb3 	bl	8004690 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004d2a:	f7fe fbff 	bl	800352c <xTaskResumeAll>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8004d34:	f7ff fe4a 	bl	80049cc <vPortYield>
 8004d38:	e001      	b.n	8004d3e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004d3a:	f7fe fbf7 	bl	800352c <xTaskResumeAll>
		}
	}
}
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200005cc 	.word	0x200005cc

08004d48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d50:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <prvGetNextExpireTime+0x44>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf14      	ite	ne
 8004d5a:	2300      	movne	r3, #0
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d105      	bne.n	8004d7a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d6e:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <prvGetNextExpireTime+0x44>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e001      	b.n	8004d7e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	200005c4 	.word	0x200005c4

08004d90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d98:	f7fe fc4e 	bl	8003638 <xTaskGetTickCount>
 8004d9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <prvSampleTimeNow+0x40>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d208      	bcs.n	8004dba <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <prvSampleTimeNow+0x40>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f8cb 	bl	8004f48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e002      	b.n	8004dc0 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <prvSampleTimeNow+0x40>)
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	200005d0 	.word	0x200005d0

08004dd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d812      	bhi.n	8004e20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e01b      	b.n	8004e46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <prvInsertTimerInActiveList+0x7c>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f7ff fcb5 	bl	8004788 <vListInsert>
 8004e1e:	e012      	b.n	8004e46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d206      	bcs.n	8004e36 <prvInsertTimerInActiveList+0x62>
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d302      	bcc.n	8004e36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e007      	b.n	8004e46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e36:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <prvInsertTimerInActiveList+0x80>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7ff fca1 	bl	8004788 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e46:	697b      	ldr	r3, [r7, #20]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200005c8 	.word	0x200005c8
 8004e54:	200005c4 	.word	0x200005c4

08004e58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e5e:	e060      	b.n	8004f22 <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fcc1 	bl	80047f8 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff89 	bl	8004d90 <prvSampleTimeNow>
 8004e7e:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d84c      	bhi.n	8004f20 <prvProcessReceivedCommands+0xc8>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <prvProcessReceivedCommands+0x34>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004f21 	.word	0x08004f21
 8004e94:	08004eef 	.word	0x08004eef
 8004e98:	08004f19 	.word	0x08004f19
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	441a      	add	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	69f8      	ldr	r0, [r7, #28]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	f7ff ff92 	bl	8004dd4 <prvInsertTimerInActiveList>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d11a      	bne.n	8004eec <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	69f8      	ldr	r0, [r7, #28]
 8004ebc:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d112      	bne.n	8004eec <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4413      	add	r3, r2
 8004ece:	2200      	movs	r2, #0
 8004ed0:	9200      	str	r2, [sp, #0]
 8004ed2:	69f8      	ldr	r0, [r7, #28]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f7ff fe6f 	bl	8004bbc <xTimerGenericCommand>
 8004ede:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <prvProcessReceivedCommands+0x94>
 8004ee6:	f7ff fda3 	bl	8004a30 <ulPortSetInterruptMask>
 8004eea:	e7fe      	b.n	8004eea <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 8004eec:	e019      	b.n	8004f22 <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <prvProcessReceivedCommands+0xaa>
 8004efc:	f7ff fd98 	bl	8004a30 <ulPortSetInterruptMask>
 8004f00:	e7fe      	b.n	8004f00 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	4413      	add	r3, r2
 8004f0a:	69f8      	ldr	r0, [r7, #28]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f7ff ff5f 	bl	8004dd4 <prvInsertTimerInActiveList>
				break;
 8004f16:	e004      	b.n	8004f22 <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8004f18:	69f8      	ldr	r0, [r7, #28]
 8004f1a:	f000 fa97 	bl	800544c <vPortFree>
				break;
 8004f1e:	e000      	b.n	8004f22 <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 8004f20:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <prvProcessReceivedCommands+0xec>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	f107 0308 	add.w	r3, r7, #8
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2300      	movs	r3, #0
 8004f32:	f7ff f9d7 	bl	80042e4 <xQueueGenericReceive>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d191      	bne.n	8004e60 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200005cc 	.word	0x200005cc

08004f48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f50:	e03d      	b.n	8004fce <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f52:	4b28      	ldr	r3, [pc, #160]	; (8004ff4 <prvSwitchTimerLists+0xac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <prvSwitchTimerLists+0xac>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fc44 	bl	80047f8 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	69b8      	ldr	r0, [r7, #24]
 8004f76:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d126      	bne.n	8004fce <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d90e      	bls.n	8004fb0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <prvSwitchTimerLists+0xac>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f7ff fbed 	bl	8004788 <vListInsert>
 8004fae:	e00e      	b.n	8004fce <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	69b8      	ldr	r0, [r7, #24]
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f7ff fdfe 	bl	8004bbc <xTimerGenericCommand>
 8004fc0:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <prvSwitchTimerLists+0x86>
 8004fc8:	f7ff fd32 	bl	8004a30 <ulPortSetInterruptMask>
 8004fcc:	e7fe      	b.n	8004fcc <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fce:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <prvSwitchTimerLists+0xac>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1bc      	bne.n	8004f52 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <prvSwitchTimerLists+0xac>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <prvSwitchTimerLists+0xb0>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <prvSwitchTimerLists+0xac>)
 8004fe4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004fe6:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <prvSwitchTimerLists+0xb0>)
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]
}
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	200005c4 	.word	0x200005c4
 8004ff8:	200005c8 	.word	0x200005c8

08004ffc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005000:	f7ff fcf4 	bl	80049ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <prvCheckForValidListAndQueue+0x40>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d113      	bne.n	8005034 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 800500c:	480c      	ldr	r0, [pc, #48]	; (8005040 <prvCheckForValidListAndQueue+0x44>)
 800500e:	f7ff fb6b 	bl	80046e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005012:	480c      	ldr	r0, [pc, #48]	; (8005044 <prvCheckForValidListAndQueue+0x48>)
 8005014:	f7ff fb68 	bl	80046e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <prvCheckForValidListAndQueue+0x4c>)
 800501a:	4a09      	ldr	r2, [pc, #36]	; (8005040 <prvCheckForValidListAndQueue+0x44>)
 800501c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <prvCheckForValidListAndQueue+0x50>)
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <prvCheckForValidListAndQueue+0x48>)
 8005022:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8005024:	200a      	movs	r0, #10
 8005026:	210c      	movs	r1, #12
 8005028:	2200      	movs	r2, #0
 800502a:	f7fe ffff 	bl	800402c <xQueueGenericCreate>
 800502e:	4602      	mov	r2, r0
 8005030:	4b02      	ldr	r3, [pc, #8]	; (800503c <prvCheckForValidListAndQueue+0x40>)
 8005032:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8005034:	f7ff fcea 	bl	8004a0c <vPortExitCritical>
}
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200005cc 	.word	0x200005cc
 8005040:	2000059c 	.word	0x2000059c
 8005044:	200005b0 	.word	0x200005b0
 8005048:	200005c4 	.word	0x200005c4
 800504c:	200005c8 	.word	0x200005c8

08005050 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <FreeRTOS_CLIRegisterCommand+0x18>
 8005062:	f7ff fce5 	bl	8004a30 <ulPortSetInterruptMask>
 8005066:	e7fe      	b.n	8005066 <FreeRTOS_CLIRegisterCommand+0x16>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8005068:	2008      	movs	r0, #8
 800506a:	f000 f963 	bl	8005334 <pvPortMalloc>
 800506e:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <FreeRTOS_CLIRegisterCommand+0x2c>
 8005076:	f7ff fcdb 	bl	8004a30 <ulPortSetInterruptMask>
 800507a:	e7fe      	b.n	800507a <FreeRTOS_CLIRegisterCommand+0x2a>

	if( pxNewListItem != NULL )
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d012      	beq.n	80050a8 <FreeRTOS_CLIRegisterCommand+0x58>
	{
		taskENTER_CRITICAL();
 8005082:	f7ff fcb3 	bl	80049ec <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <FreeRTOS_CLIRegisterCommand+0x64>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <FreeRTOS_CLIRegisterCommand+0x64>)
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 80050a0:	f7ff fcb4 	bl	8004a0c <vPortExitCritical>

		xReturn = pdPASS;
 80050a4:	2301      	movs	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000018 	.word	0x20000018

080050b8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
portBASE_TYPE xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80050c8:	4b3a      	ldr	r3, [pc, #232]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d141      	bne.n	8005154 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80050d0:	4b38      	ldr	r3, [pc, #224]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 80050d2:	4a39      	ldr	r2, [pc, #228]	; (80051b8 <FreeRTOS_CLIProcessCommand+0x100>)
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e039      	b.n	800514c <FreeRTOS_CLIProcessCommand+0x94>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80050d8:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80050e2:	69b8      	ldr	r0, [r7, #24]
 80050e4:	f002 fe98 	bl	8007e18 <strlen>
 80050e8:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b25b      	sxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d005      	beq.n	8005104 <FreeRTOS_CLIProcessCommand+0x4c>
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11e      	bne.n	8005142 <FreeRTOS_CLIProcessCommand+0x8a>
			{
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	69b9      	ldr	r1, [r7, #24]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	f002 feb5 	bl	8007e78 <strncmp>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d116      	bne.n	8005142 <FreeRTOS_CLIProcessCommand+0x8a>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8005114:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	7b1b      	ldrb	r3, [r3, #12]
 800511c:	b25b      	sxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	db0e      	blt.n	8005140 <FreeRTOS_CLIProcessCommand+0x88>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f8d8 	bl	80052d8 <prvGetNumberOfParameters>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	7b1b      	ldrb	r3, [r3, #12]
 8005134:	b25b      	sxtb	r3, r3
 8005136:	429a      	cmp	r2, r3
 8005138:	d002      	beq.n	8005140 <FreeRTOS_CLIProcessCommand+0x88>
						{
							xReturn = pdFALSE;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 800513e:	e009      	b.n	8005154 <FreeRTOS_CLIProcessCommand+0x9c>
 8005140:	e008      	b.n	8005154 <FreeRTOS_CLIProcessCommand+0x9c>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1c1      	bne.n	80050d8 <FreeRTOS_CLIProcessCommand+0x20>
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <FreeRTOS_CLIProcessCommand+0xbc>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8005162:	68b8      	ldr	r0, [r7, #8]
 8005164:	4915      	ldr	r1, [pc, #84]	; (80051bc <FreeRTOS_CLIProcessCommand+0x104>)
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	f002 fee0 	bl	8007f2c <strncpy>
		pxCommand = NULL;
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e01a      	b.n	80051aa <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00f      	beq.n	800519c <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	68b8      	ldr	r0, [r7, #8]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4798      	blx	r3
 800518c:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e006      	b.n	80051aa <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( ( char * ) pcWriteBuffer, ( const char * const ) "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800519c:	68b8      	ldr	r0, [r7, #8]
 800519e:	4908      	ldr	r1, [pc, #32]	; (80051c0 <FreeRTOS_CLIProcessCommand+0x108>)
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	f002 fec3 	bl	8007f2c <strncpy>
		xReturn = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80051aa:	69fb      	ldr	r3, [r7, #28]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3720      	adds	r7, #32
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200005d4 	.word	0x200005d4
 80051b8:	20000010 	.word	0x20000010
 80051bc:	08008414 	.word	0x08008414
 80051c0:	0800846c 	.word	0x0800846c

080051c4 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const int8_t *FreeRTOS_CLIGetParameter( const int8_t *pcCommandString, unsigned portBASE_TYPE uxWantedParameter, portBASE_TYPE *pxParameterStringLength )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
unsigned portBASE_TYPE uxParametersFound = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
const int8_t *pcReturn = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 80051de:	e041      	b.n	8005264 <FreeRTOS_CLIGetParameter+0xa0>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80051e0:	e002      	b.n	80051e8 <FreeRTOS_CLIGetParameter+0x24>
		{
			pcCommandString++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <FreeRTOS_CLIGetParameter+0x36>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b25b      	sxtb	r3, r3
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d1f3      	bne.n	80051e2 <FreeRTOS_CLIGetParameter+0x1e>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 80051fa:	e002      	b.n	8005202 <FreeRTOS_CLIGetParameter+0x3e>
		{
			pcCommandString++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <FreeRTOS_CLIGetParameter+0x50>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b25b      	sxtb	r3, r3
 8005210:	2b20      	cmp	r3, #32
 8005212:	d0f3      	beq.n	80051fc <FreeRTOS_CLIGetParameter+0x38>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d022      	beq.n	8005262 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	3301      	adds	r3, #1
 8005220:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	429a      	cmp	r2, r3
 8005228:	d11c      	bne.n	8005264 <FreeRTOS_CLIGetParameter+0xa0>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800522e:	e007      	b.n	8005240 <FreeRTOS_CLIGetParameter+0x7c>
				{
					( *pxParameterStringLength )++;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3301      	adds	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <FreeRTOS_CLIGetParameter+0x8e>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b25b      	sxtb	r3, r3
 800524e:	2b20      	cmp	r3, #32
 8005250:	d1ee      	bne.n	8005230 <FreeRTOS_CLIGetParameter+0x6c>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <FreeRTOS_CLIGetParameter+0x9c>
				{
					pcReturn = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
				}

				break;
 800525e:	e005      	b.n	800526c <FreeRTOS_CLIGetParameter+0xa8>
 8005260:	e004      	b.n	800526c <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 8005262:	e003      	b.n	800526c <FreeRTOS_CLIGetParameter+0xa8>
unsigned portBASE_TYPE uxParametersFound = 0;
const int8_t *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d3b9      	bcc.n	80051e0 <FreeRTOS_CLIGetParameter+0x1c>
		{
			break;
		}
	}

	return pcReturn;
 800526c:	693b      	ldr	r3, [r7, #16]
}
 800526e:	4618      	mov	r0, r3
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop

0800527c <prvHelpCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
signed portBASE_TYPE xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <prvHelpCommand+0x54>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <prvHelpCommand+0x54>)
 8005292:	4a10      	ldr	r2, [pc, #64]	; (80052d4 <prvHelpCommand+0x58>)
 8005294:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8005296:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <prvHelpCommand+0x54>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	4619      	mov	r1, r3
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	f002 fe42 	bl	8007f2c <strncpy>
	pxCommand = pxCommand->pxNext;
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <prvHelpCommand+0x54>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <prvHelpCommand+0x54>)
 80052b0:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <prvHelpCommand+0x54>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d102      	bne.n	80052c0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e001      	b.n	80052c4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052c4:	697b      	ldr	r3, [r7, #20]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200005d8 	.word	0x200005d8
 80052d4:	20000010 	.word	0x20000010

080052d8 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 80052e8:	e012      	b.n	8005310 <prvGetNumberOfParameters+0x38>
	{
		if( ( *pcCommandString ) == ' ' )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d108      	bne.n	8005306 <prvGetNumberOfParameters+0x2e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d007      	beq.n	800530a <prvGetNumberOfParameters+0x32>
			{
				cParameters++;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	3301      	adds	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	e001      	b.n	800530a <prvGetNumberOfParameters+0x32>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3301      	adds	r3, #1
 800530e:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e8      	bne.n	80052ea <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d102      	bne.n	8005324 <prvGetNumberOfParameters+0x4c>
	{
		cParameters--;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	3b01      	subs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	b25b      	sxtb	r3, r3
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005340:	f7fe f8e6 	bl	8003510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005344:	4b3d      	ldr	r3, [pc, #244]	; (800543c <pvPortMalloc+0x108>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800534c:	f000 f8c8 	bl	80054e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <pvPortMalloc+0x10c>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d163      	bne.n	8005424 <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 8005362:	2308      	movs	r3, #8
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	4413      	add	r3, r2
 8005368:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	3308      	adds	r3, #8
 800537c:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d04f      	beq.n	8005424 <pvPortMalloc+0xf0>
 8005384:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <pvPortMalloc+0x110>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d84a      	bhi.n	8005424 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800538e:	4b2e      	ldr	r3, [pc, #184]	; (8005448 <pvPortMalloc+0x114>)
 8005390:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005392:	4b2d      	ldr	r3, [pc, #180]	; (8005448 <pvPortMalloc+0x114>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005398:	e004      	b.n	80053a4 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d203      	bcs.n	80053b6 <pvPortMalloc+0x82>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f1      	bne.n	800539a <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 80053b6:	4b21      	ldr	r3, [pc, #132]	; (800543c <pvPortMalloc+0x108>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d031      	beq.n	8005424 <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	2308      	movs	r3, #8
 80053c6:	4413      	add	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	2308      	movs	r3, #8
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	429a      	cmp	r2, r3
 80053e0:	d90f      	bls.n	8005402 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	1ad2      	subs	r2, r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80053fc:	68b8      	ldr	r0, [r7, #8]
 80053fe:	f000 f8bd 	bl	800557c <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <pvPortMalloc+0x110>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <pvPortMalloc+0x110>)
 800540e:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <pvPortMalloc+0x10c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	431a      	orrs	r2, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 8005424:	f7fe f882 	bl	800352c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800542e:	f7fd fcf7 	bl	8002e20 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	200131e4 	.word	0x200131e4
 8005440:	200131e8 	.word	0x200131e8
 8005444:	2000001c 	.word	0x2000001c
 8005448:	200131dc 	.word	0x200131dc

0800544c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d038      	beq.n	80054d0 <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800545e:	2308      	movs	r3, #8
 8005460:	425b      	negs	r3, r3
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <vPortFree+0x8c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <vPortFree+0x34>
 800547a:	f7ff fad9 	bl	8004a30 <ulPortSetInterruptMask>
 800547e:	e7fe      	b.n	800547e <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <vPortFree+0x42>
 8005488:	f7ff fad2 	bl	8004a30 <ulPortSetInterruptMask>
 800548c:	e7fe      	b.n	800548c <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <vPortFree+0x8c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d019      	beq.n	80054d0 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d115      	bne.n	80054d0 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <vPortFree+0x8c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	401a      	ands	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054b4:	f7fe f82c 	bl	8003510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <vPortFree+0x90>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	441a      	add	r2, r3
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <vPortFree+0x90>)
 80054c4:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 80054c6:	68b8      	ldr	r0, [r7, #8]
 80054c8:	f000 f858 	bl	800557c <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 80054cc:	f7fe f82e 	bl	800352c <xTaskResumeAll>
			}
		}
	}
}
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200131e8 	.word	0x200131e8
 80054dc:	2000001c 	.word	0x2000001c

080054e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 80054e6:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <prvHeapInit+0x84>)
 80054e8:	f023 0307 	bic.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054ee:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <prvHeapInit+0x88>)
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <prvHeapInit+0x88>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 80054fa:	4b1c      	ldr	r3, [pc, #112]	; (800556c <prvHeapInit+0x8c>)
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 8005502:	2308      	movs	r3, #8
 8005504:	425b      	negs	r3, r3
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4413      	add	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 800550c:	4b18      	ldr	r3, [pc, #96]	; (8005570 <prvHeapInit+0x90>)
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 8005512:	4b17      	ldr	r3, [pc, #92]	; (8005570 <prvHeapInit+0x90>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <prvHeapInit+0x44>
 800551e:	f7ff fa87 	bl	8004a30 <ulPortSetInterruptMask>
 8005522:	e7fe      	b.n	8005522 <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 8005524:	4b12      	ldr	r3, [pc, #72]	; (8005570 <prvHeapInit+0x90>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2200      	movs	r2, #0
 800552a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <prvHeapInit+0x90>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 8005538:	4a0c      	ldr	r2, [pc, #48]	; (800556c <prvHeapInit+0x8c>)
 800553a:	2308      	movs	r3, #8
 800553c:	1ad2      	subs	r2, r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <prvHeapInit+0x90>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <prvHeapInit+0x94>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	2308      	movs	r3, #8
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <prvHeapInit+0x94>)
 8005554:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <prvHeapInit+0x98>)
 8005558:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800555c:	601a      	str	r2, [r3, #0]
}
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200005e4 	.word	0x200005e4
 8005568:	200131dc 	.word	0x200131dc
 800556c:	00012bf8 	.word	0x00012bf8
 8005570:	200131e4 	.word	0x200131e4
 8005574:	2000001c 	.word	0x2000001c
 8005578:	200131e8 	.word	0x200131e8

0800557c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005584:	4b27      	ldr	r3, [pc, #156]	; (8005624 <prvInsertBlockIntoFreeList+0xa8>)
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e002      	b.n	8005590 <prvInsertBlockIntoFreeList+0x14>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d3f7      	bcc.n	800558a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	441a      	add	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d108      	bne.n	80055be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	441a      	add	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	441a      	add	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d118      	bne.n	8005604 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <prvInsertBlockIntoFreeList+0xac>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d00d      	beq.n	80055fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e008      	b.n	800560c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <prvInsertBlockIntoFreeList+0xac>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e003      	b.n	800560c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d002      	beq.n	800561a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
	}
}
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	200131dc 	.word	0x200131dc
 8005628:	200131e4 	.word	0x200131e4

0800562c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800563a:	d013      	beq.n	8005664 <NVIC_PriorityGroupConfig+0x38>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005642:	d00f      	beq.n	8005664 <NVIC_PriorityGroupConfig+0x38>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800564a:	d00b      	beq.n	8005664 <NVIC_PriorityGroupConfig+0x38>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005652:	d007      	beq.n	8005664 <NVIC_PriorityGroupConfig+0x38>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800565a:	d003      	beq.n	8005664 <NVIC_PriorityGroupConfig+0x38>
 800565c:	4806      	ldr	r0, [pc, #24]	; (8005678 <NVIC_PriorityGroupConfig+0x4c>)
 800565e:	2173      	movs	r1, #115	; 0x73
 8005660:	f7fd fbf2 	bl	8002e48 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005664:	4a05      	ldr	r2, [pc, #20]	; (800567c <NVIC_PriorityGroupConfig+0x50>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800566c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005670:	60d3      	str	r3, [r2, #12]
}
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	080084bc 	.word	0x080084bc
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]
 800568c:	2300      	movs	r3, #0
 800568e:	73bb      	strb	r3, [r7, #14]
 8005690:	230f      	movs	r3, #15
 8005692:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <NVIC_Init+0x2c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d003      	beq.n	80056ac <NVIC_Init+0x2c>
 80056a4:	4830      	ldr	r0, [pc, #192]	; (8005768 <NVIC_Init+0xe8>)
 80056a6:	2187      	movs	r1, #135	; 0x87
 80056a8:	f7fd fbce 	bl	8002e48 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	d903      	bls.n	80056bc <NVIC_Init+0x3c>
 80056b4:	482c      	ldr	r0, [pc, #176]	; (8005768 <NVIC_Init+0xe8>)
 80056b6:	2188      	movs	r1, #136	; 0x88
 80056b8:	f7fd fbc6 	bl	8002e48 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	789b      	ldrb	r3, [r3, #2]
 80056c0:	2b0f      	cmp	r3, #15
 80056c2:	d903      	bls.n	80056cc <NVIC_Init+0x4c>
 80056c4:	4828      	ldr	r0, [pc, #160]	; (8005768 <NVIC_Init+0xe8>)
 80056c6:	2189      	movs	r1, #137	; 0x89
 80056c8:	f7fd fbbe 	bl	8002e48 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	78db      	ldrb	r3, [r3, #3]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d037      	beq.n	8005744 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <NVIC_Init+0xec>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	43db      	mvns	r3, r3
 80056da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	f1c3 0304 	rsb	r3, r3, #4
 80056e8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80056ea:	7b7a      	ldrb	r2, [r7, #13]
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	fa42 f303 	asr.w	r3, r2, r3
 80056f2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	461a      	mov	r2, r3
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	789a      	ldrb	r2, [r3, #2]
 8005706:	7b7b      	ldrb	r3, [r7, #13]
 8005708:	4013      	ands	r3, r2
 800570a:	b2da      	uxtb	r2, r3
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	4313      	orrs	r3, r2
 8005710:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <NVIC_Init+0xf0>)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	4413      	add	r3, r2
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <NVIC_Init+0xf0>)
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	0952      	lsrs	r2, r2, #5
 800572e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	7809      	ldrb	r1, [r1, #0]
 8005734:	f001 011f 	and.w	r1, r1, #31
 8005738:	2001      	movs	r0, #1
 800573a:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800573e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005742:	e00e      	b.n	8005762 <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005744:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <NVIC_Init+0xf0>)
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	0952      	lsrs	r2, r2, #5
 800574c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	7809      	ldrb	r1, [r1, #0]
 8005752:	f001 011f 	and.w	r1, r1, #31
 8005756:	2001      	movs	r0, #1
 8005758:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800575c:	3220      	adds	r2, #32
 800575e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	080084bc 	.word	0x080084bc
 800576c:	e000ed00 	.word	0xe000ed00
 8005770:	e000e100 	.word	0xe000e100

08005774 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	4b72      	ldr	r3, [pc, #456]	; (8005948 <DMA_DeInit+0x1d4>)
 8005780:	429a      	cmp	r2, r3
 8005782:	d03f      	beq.n	8005804 <DMA_DeInit+0x90>
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	4b71      	ldr	r3, [pc, #452]	; (800594c <DMA_DeInit+0x1d8>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d03b      	beq.n	8005804 <DMA_DeInit+0x90>
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4b70      	ldr	r3, [pc, #448]	; (8005950 <DMA_DeInit+0x1dc>)
 8005790:	429a      	cmp	r2, r3
 8005792:	d037      	beq.n	8005804 <DMA_DeInit+0x90>
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <DMA_DeInit+0x1e0>)
 8005798:	429a      	cmp	r2, r3
 800579a:	d033      	beq.n	8005804 <DMA_DeInit+0x90>
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4b6e      	ldr	r3, [pc, #440]	; (8005958 <DMA_DeInit+0x1e4>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d02f      	beq.n	8005804 <DMA_DeInit+0x90>
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4b6d      	ldr	r3, [pc, #436]	; (800595c <DMA_DeInit+0x1e8>)
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d02b      	beq.n	8005804 <DMA_DeInit+0x90>
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	4b6c      	ldr	r3, [pc, #432]	; (8005960 <DMA_DeInit+0x1ec>)
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d027      	beq.n	8005804 <DMA_DeInit+0x90>
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4b6b      	ldr	r3, [pc, #428]	; (8005964 <DMA_DeInit+0x1f0>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d023      	beq.n	8005804 <DMA_DeInit+0x90>
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <DMA_DeInit+0x1f4>)
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d01f      	beq.n	8005804 <DMA_DeInit+0x90>
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4b69      	ldr	r3, [pc, #420]	; (800596c <DMA_DeInit+0x1f8>)
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d01b      	beq.n	8005804 <DMA_DeInit+0x90>
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4b68      	ldr	r3, [pc, #416]	; (8005970 <DMA_DeInit+0x1fc>)
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d017      	beq.n	8005804 <DMA_DeInit+0x90>
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4b67      	ldr	r3, [pc, #412]	; (8005974 <DMA_DeInit+0x200>)
 80057d8:	429a      	cmp	r2, r3
 80057da:	d013      	beq.n	8005804 <DMA_DeInit+0x90>
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4b66      	ldr	r3, [pc, #408]	; (8005978 <DMA_DeInit+0x204>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d00f      	beq.n	8005804 <DMA_DeInit+0x90>
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4b65      	ldr	r3, [pc, #404]	; (800597c <DMA_DeInit+0x208>)
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d00b      	beq.n	8005804 <DMA_DeInit+0x90>
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	4b64      	ldr	r3, [pc, #400]	; (8005980 <DMA_DeInit+0x20c>)
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d007      	beq.n	8005804 <DMA_DeInit+0x90>
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4b63      	ldr	r3, [pc, #396]	; (8005984 <DMA_DeInit+0x210>)
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d003      	beq.n	8005804 <DMA_DeInit+0x90>
 80057fc:	4862      	ldr	r0, [pc, #392]	; (8005988 <DMA_DeInit+0x214>)
 80057fe:	21bf      	movs	r1, #191	; 0xbf
 8005800:	f7fd fb22 	bl	8002e48 <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f023 0201 	bic.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2221      	movs	r2, #33	; 0x21
 8005832:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4b44      	ldr	r3, [pc, #272]	; (8005948 <DMA_DeInit+0x1d4>)
 8005838:	429a      	cmp	r2, r3
 800583a:	d103      	bne.n	8005844 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800583c:	4b53      	ldr	r3, [pc, #332]	; (800598c <DMA_DeInit+0x218>)
 800583e:	223d      	movs	r2, #61	; 0x3d
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	e07e      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4b41      	ldr	r3, [pc, #260]	; (800594c <DMA_DeInit+0x1d8>)
 8005848:	429a      	cmp	r2, r3
 800584a:	d104      	bne.n	8005856 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800584c:	4b4f      	ldr	r3, [pc, #316]	; (800598c <DMA_DeInit+0x218>)
 800584e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	e075      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4b3d      	ldr	r3, [pc, #244]	; (8005950 <DMA_DeInit+0x1dc>)
 800585a:	429a      	cmp	r2, r3
 800585c:	d104      	bne.n	8005868 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800585e:	4b4b      	ldr	r3, [pc, #300]	; (800598c <DMA_DeInit+0x218>)
 8005860:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005864:	609a      	str	r2, [r3, #8]
 8005866:	e06c      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4b3a      	ldr	r3, [pc, #232]	; (8005954 <DMA_DeInit+0x1e0>)
 800586c:	429a      	cmp	r2, r3
 800586e:	d104      	bne.n	800587a <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005870:	4b46      	ldr	r3, [pc, #280]	; (800598c <DMA_DeInit+0x218>)
 8005872:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	e063      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4b36      	ldr	r3, [pc, #216]	; (8005958 <DMA_DeInit+0x1e4>)
 800587e:	429a      	cmp	r2, r3
 8005880:	d103      	bne.n	800588a <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005882:	4b42      	ldr	r3, [pc, #264]	; (800598c <DMA_DeInit+0x218>)
 8005884:	4a42      	ldr	r2, [pc, #264]	; (8005990 <DMA_DeInit+0x21c>)
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	e05b      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4b33      	ldr	r3, [pc, #204]	; (800595c <DMA_DeInit+0x1e8>)
 800588e:	429a      	cmp	r2, r3
 8005890:	d103      	bne.n	800589a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8005892:	4b3e      	ldr	r3, [pc, #248]	; (800598c <DMA_DeInit+0x218>)
 8005894:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <DMA_DeInit+0x220>)
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	e053      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4b30      	ldr	r3, [pc, #192]	; (8005960 <DMA_DeInit+0x1ec>)
 800589e:	429a      	cmp	r2, r3
 80058a0:	d103      	bne.n	80058aa <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80058a2:	4b3a      	ldr	r3, [pc, #232]	; (800598c <DMA_DeInit+0x218>)
 80058a4:	4a3c      	ldr	r2, [pc, #240]	; (8005998 <DMA_DeInit+0x224>)
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e04b      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <DMA_DeInit+0x1f0>)
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d104      	bne.n	80058bc <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80058b2:	4b36      	ldr	r3, [pc, #216]	; (800598c <DMA_DeInit+0x218>)
 80058b4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	e042      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <DMA_DeInit+0x1f4>)
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d103      	bne.n	80058cc <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80058c4:	4b35      	ldr	r3, [pc, #212]	; (800599c <DMA_DeInit+0x228>)
 80058c6:	223d      	movs	r2, #61	; 0x3d
 80058c8:	609a      	str	r2, [r3, #8]
 80058ca:	e03a      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4b27      	ldr	r3, [pc, #156]	; (800596c <DMA_DeInit+0x1f8>)
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d104      	bne.n	80058de <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80058d4:	4b31      	ldr	r3, [pc, #196]	; (800599c <DMA_DeInit+0x228>)
 80058d6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	e031      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4b23      	ldr	r3, [pc, #140]	; (8005970 <DMA_DeInit+0x1fc>)
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d104      	bne.n	80058f0 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80058e6:	4b2d      	ldr	r3, [pc, #180]	; (800599c <DMA_DeInit+0x228>)
 80058e8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80058ec:	609a      	str	r2, [r3, #8]
 80058ee:	e028      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4b20      	ldr	r3, [pc, #128]	; (8005974 <DMA_DeInit+0x200>)
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d104      	bne.n	8005902 <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80058f8:	4b28      	ldr	r3, [pc, #160]	; (800599c <DMA_DeInit+0x228>)
 80058fa:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	e01f      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <DMA_DeInit+0x204>)
 8005906:	429a      	cmp	r2, r3
 8005908:	d103      	bne.n	8005912 <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <DMA_DeInit+0x228>)
 800590c:	4a20      	ldr	r2, [pc, #128]	; (8005990 <DMA_DeInit+0x21c>)
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	e017      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <DMA_DeInit+0x208>)
 8005916:	429a      	cmp	r2, r3
 8005918:	d103      	bne.n	8005922 <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800591a:	4b20      	ldr	r3, [pc, #128]	; (800599c <DMA_DeInit+0x228>)
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <DMA_DeInit+0x220>)
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e00f      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4b16      	ldr	r3, [pc, #88]	; (8005980 <DMA_DeInit+0x20c>)
 8005926:	429a      	cmp	r2, r3
 8005928:	d103      	bne.n	8005932 <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800592a:	4b1c      	ldr	r3, [pc, #112]	; (800599c <DMA_DeInit+0x228>)
 800592c:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <DMA_DeInit+0x224>)
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e007      	b.n	8005942 <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <DMA_DeInit+0x210>)
 8005936:	429a      	cmp	r2, r3
 8005938:	d103      	bne.n	8005942 <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800593a:	4b18      	ldr	r3, [pc, #96]	; (800599c <DMA_DeInit+0x228>)
 800593c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005940:	60da      	str	r2, [r3, #12]
    }
  }
}
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40026010 	.word	0x40026010
 800594c:	40026028 	.word	0x40026028
 8005950:	40026040 	.word	0x40026040
 8005954:	40026058 	.word	0x40026058
 8005958:	40026070 	.word	0x40026070
 800595c:	40026088 	.word	0x40026088
 8005960:	400260a0 	.word	0x400260a0
 8005964:	400260b8 	.word	0x400260b8
 8005968:	40026410 	.word	0x40026410
 800596c:	40026428 	.word	0x40026428
 8005970:	40026440 	.word	0x40026440
 8005974:	40026458 	.word	0x40026458
 8005978:	40026470 	.word	0x40026470
 800597c:	40026488 	.word	0x40026488
 8005980:	400264a0 	.word	0x400264a0
 8005984:	400264b8 	.word	0x400264b8
 8005988:	08008504 	.word	0x08008504
 800598c:	40026000 	.word	0x40026000
 8005990:	2000003d 	.word	0x2000003d
 8005994:	20000f40 	.word	0x20000f40
 8005998:	203d0000 	.word	0x203d0000
 800599c:	40026400 	.word	0x40026400

080059a0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4b98      	ldr	r3, [pc, #608]	; (8005c14 <DMA_Init+0x274>)
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d040      	beq.n	8005a38 <DMA_Init+0x98>
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4b97      	ldr	r3, [pc, #604]	; (8005c18 <DMA_Init+0x278>)
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d03c      	beq.n	8005a38 <DMA_Init+0x98>
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4b96      	ldr	r3, [pc, #600]	; (8005c1c <DMA_Init+0x27c>)
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d038      	beq.n	8005a38 <DMA_Init+0x98>
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4b95      	ldr	r3, [pc, #596]	; (8005c20 <DMA_Init+0x280>)
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d034      	beq.n	8005a38 <DMA_Init+0x98>
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4b94      	ldr	r3, [pc, #592]	; (8005c24 <DMA_Init+0x284>)
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d030      	beq.n	8005a38 <DMA_Init+0x98>
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4b93      	ldr	r3, [pc, #588]	; (8005c28 <DMA_Init+0x288>)
 80059da:	429a      	cmp	r2, r3
 80059dc:	d02c      	beq.n	8005a38 <DMA_Init+0x98>
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	4b92      	ldr	r3, [pc, #584]	; (8005c2c <DMA_Init+0x28c>)
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d028      	beq.n	8005a38 <DMA_Init+0x98>
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4b91      	ldr	r3, [pc, #580]	; (8005c30 <DMA_Init+0x290>)
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d024      	beq.n	8005a38 <DMA_Init+0x98>
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4b90      	ldr	r3, [pc, #576]	; (8005c34 <DMA_Init+0x294>)
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d020      	beq.n	8005a38 <DMA_Init+0x98>
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4b8f      	ldr	r3, [pc, #572]	; (8005c38 <DMA_Init+0x298>)
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d01c      	beq.n	8005a38 <DMA_Init+0x98>
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4b8e      	ldr	r3, [pc, #568]	; (8005c3c <DMA_Init+0x29c>)
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d018      	beq.n	8005a38 <DMA_Init+0x98>
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4b8d      	ldr	r3, [pc, #564]	; (8005c40 <DMA_Init+0x2a0>)
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d014      	beq.n	8005a38 <DMA_Init+0x98>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4b8c      	ldr	r3, [pc, #560]	; (8005c44 <DMA_Init+0x2a4>)
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d010      	beq.n	8005a38 <DMA_Init+0x98>
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	4b8b      	ldr	r3, [pc, #556]	; (8005c48 <DMA_Init+0x2a8>)
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d00c      	beq.n	8005a38 <DMA_Init+0x98>
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4b8a      	ldr	r3, [pc, #552]	; (8005c4c <DMA_Init+0x2ac>)
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d008      	beq.n	8005a38 <DMA_Init+0x98>
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4b89      	ldr	r3, [pc, #548]	; (8005c50 <DMA_Init+0x2b0>)
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d004      	beq.n	8005a38 <DMA_Init+0x98>
 8005a2e:	4889      	ldr	r0, [pc, #548]	; (8005c54 <DMA_Init+0x2b4>)
 8005a30:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8005a34:	f7fd fa08 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d027      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a48:	d022      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a52:	d01d      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005a5c:	d018      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a66:	d013      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005a70:	d00e      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a7a:	d009      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005a84:	d004      	beq.n	8005a90 <DMA_Init+0xf0>
 8005a86:	4873      	ldr	r0, [pc, #460]	; (8005c54 <DMA_Init+0x2b4>)
 8005a88:	f240 113d 	movw	r1, #317	; 0x13d
 8005a8c:	f7fd f9dc 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <DMA_Init+0x112>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d008      	beq.n	8005ab2 <DMA_Init+0x112>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b80      	cmp	r3, #128	; 0x80
 8005aa6:	d004      	beq.n	8005ab2 <DMA_Init+0x112>
 8005aa8:	486a      	ldr	r0, [pc, #424]	; (8005c54 <DMA_Init+0x2b4>)
 8005aaa:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005aae:	f7fd f9cb 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <DMA_Init+0x124>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac2:	d304      	bcc.n	8005ace <DMA_Init+0x12e>
 8005ac4:	4863      	ldr	r0, [pc, #396]	; (8005c54 <DMA_Init+0x2b4>)
 8005ac6:	f240 113f 	movw	r1, #319	; 0x13f
 8005aca:	f7fd f9bd 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad6:	d008      	beq.n	8005aea <DMA_Init+0x14a>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <DMA_Init+0x14a>
 8005ae0:	485c      	ldr	r0, [pc, #368]	; (8005c54 <DMA_Init+0x2b4>)
 8005ae2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ae6:	f7fd f9af 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d008      	beq.n	8005b06 <DMA_Init+0x166>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <DMA_Init+0x166>
 8005afc:	4855      	ldr	r0, [pc, #340]	; (8005c54 <DMA_Init+0x2b4>)
 8005afe:	f240 1141 	movw	r1, #321	; 0x141
 8005b02:	f7fd f9a1 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <DMA_Init+0x18c>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b16:	d009      	beq.n	8005b2c <DMA_Init+0x18c>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d004      	beq.n	8005b2c <DMA_Init+0x18c>
 8005b22:	484c      	ldr	r0, [pc, #304]	; (8005c54 <DMA_Init+0x2b4>)
 8005b24:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005b28:	f7fd f98e 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <DMA_Init+0x1b2>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3c:	d009      	beq.n	8005b52 <DMA_Init+0x1b2>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b46:	d004      	beq.n	8005b52 <DMA_Init+0x1b2>
 8005b48:	4842      	ldr	r0, [pc, #264]	; (8005c54 <DMA_Init+0x2b4>)
 8005b4a:	f240 1143 	movw	r1, #323	; 0x143
 8005b4e:	f7fd f97b 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <DMA_Init+0x1ce>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	d004      	beq.n	8005b6e <DMA_Init+0x1ce>
 8005b64:	483b      	ldr	r0, [pc, #236]	; (8005c54 <DMA_Init+0x2b4>)
 8005b66:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005b6a:	f7fd f96d 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d013      	beq.n	8005b9e <DMA_Init+0x1fe>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7e:	d00e      	beq.n	8005b9e <DMA_Init+0x1fe>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b88:	d009      	beq.n	8005b9e <DMA_Init+0x1fe>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b92:	d004      	beq.n	8005b9e <DMA_Init+0x1fe>
 8005b94:	482f      	ldr	r0, [pc, #188]	; (8005c54 <DMA_Init+0x2b4>)
 8005b96:	f240 1145 	movw	r1, #325	; 0x145
 8005b9a:	f7fd f955 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <DMA_Init+0x218>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d004      	beq.n	8005bb8 <DMA_Init+0x218>
 8005bae:	4829      	ldr	r0, [pc, #164]	; (8005c54 <DMA_Init+0x2b4>)
 8005bb0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005bb4:	f7fd f948 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d010      	beq.n	8005be2 <DMA_Init+0x242>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d00c      	beq.n	8005be2 <DMA_Init+0x242>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d008      	beq.n	8005be2 <DMA_Init+0x242>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d004      	beq.n	8005be2 <DMA_Init+0x242>
 8005bd8:	481e      	ldr	r0, [pc, #120]	; (8005c54 <DMA_Init+0x2b4>)
 8005bda:	f240 1147 	movw	r1, #327	; 0x147
 8005bde:	f7fd f933 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d036      	beq.n	8005c58 <DMA_Init+0x2b8>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bf2:	d031      	beq.n	8005c58 <DMA_Init+0x2b8>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bfc:	d02c      	beq.n	8005c58 <DMA_Init+0x2b8>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c06:	d027      	beq.n	8005c58 <DMA_Init+0x2b8>
 8005c08:	4812      	ldr	r0, [pc, #72]	; (8005c54 <DMA_Init+0x2b4>)
 8005c0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c0e:	f7fd f91b 	bl	8002e48 <assert_failed>
 8005c12:	e021      	b.n	8005c58 <DMA_Init+0x2b8>
 8005c14:	40026010 	.word	0x40026010
 8005c18:	40026028 	.word	0x40026028
 8005c1c:	40026040 	.word	0x40026040
 8005c20:	40026058 	.word	0x40026058
 8005c24:	40026070 	.word	0x40026070
 8005c28:	40026088 	.word	0x40026088
 8005c2c:	400260a0 	.word	0x400260a0
 8005c30:	400260b8 	.word	0x400260b8
 8005c34:	40026410 	.word	0x40026410
 8005c38:	40026428 	.word	0x40026428
 8005c3c:	40026440 	.word	0x40026440
 8005c40:	40026458 	.word	0x40026458
 8005c44:	40026470 	.word	0x40026470
 8005c48:	40026488 	.word	0x40026488
 8005c4c:	400264a0 	.word	0x400264a0
 8005c50:	400264b8 	.word	0x400264b8
 8005c54:	08008504 	.word	0x08008504
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d013      	beq.n	8005c88 <DMA_Init+0x2e8>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c68:	d00e      	beq.n	8005c88 <DMA_Init+0x2e8>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c72:	d009      	beq.n	8005c88 <DMA_Init+0x2e8>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c7c:	d004      	beq.n	8005c88 <DMA_Init+0x2e8>
 8005c7e:	4828      	ldr	r0, [pc, #160]	; (8005d20 <DMA_Init+0x380>)
 8005c80:	f240 1149 	movw	r1, #329	; 0x149
 8005c84:	f7fd f8e0 	bl	8002e48 <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <DMA_Init+0x384>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005ca4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005cb0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005cbc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005cc8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0307 	bic.w	r3, r3, #7
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]
}
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	08008504 	.word	0x08008504
 8005d24:	f01c803f 	.word	0xf01c803f

08005d28 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <DMA_Cmd+0xd4>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d040      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4b30      	ldr	r3, [pc, #192]	; (8005e6c <DMA_Cmd+0xd8>)
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d03c      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <DMA_Cmd+0xdc>)
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d038      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <DMA_Cmd+0xe0>)
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d034      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <DMA_Cmd+0xe4>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d030      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <DMA_Cmd+0xe8>)
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d02c      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <DMA_Cmd+0xec>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d028      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4b2a      	ldr	r3, [pc, #168]	; (8005e84 <DMA_Cmd+0xf0>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d024      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <DMA_Cmd+0xf4>)
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d020      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <DMA_Cmd+0xf8>)
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d01c      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <DMA_Cmd+0xfc>)
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d018      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <DMA_Cmd+0x100>)
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d014      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <DMA_Cmd+0x104>)
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d010      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <DMA_Cmd+0x108>)
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d00c      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <DMA_Cmd+0x10c>)
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d008      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <DMA_Cmd+0x110>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d004      	beq.n	8005e2a <DMA_Cmd+0x96>
 8005e20:	4821      	ldr	r0, [pc, #132]	; (8005ea8 <DMA_Cmd+0x114>)
 8005e22:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e26:	f7fd f80f 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <DMA_Cmd+0xac>
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d004      	beq.n	8005e40 <DMA_Cmd+0xac>
 8005e36:	481c      	ldr	r0, [pc, #112]	; (8005ea8 <DMA_Cmd+0x114>)
 8005e38:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005e3c:	f7fd f804 	bl	8002e48 <assert_failed>

  if (NewState != DISABLE)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d006      	beq.n	8005e54 <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f043 0201 	orr.w	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e005      	b.n	8005e60 <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f023 0201 	bic.w	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
  }
}
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40026010 	.word	0x40026010
 8005e6c:	40026028 	.word	0x40026028
 8005e70:	40026040 	.word	0x40026040
 8005e74:	40026058 	.word	0x40026058
 8005e78:	40026070 	.word	0x40026070
 8005e7c:	40026088 	.word	0x40026088
 8005e80:	400260a0 	.word	0x400260a0
 8005e84:	400260b8 	.word	0x400260b8
 8005e88:	40026410 	.word	0x40026410
 8005e8c:	40026428 	.word	0x40026428
 8005e90:	40026440 	.word	0x40026440
 8005e94:	40026458 	.word	0x40026458
 8005e98:	40026470 	.word	0x40026470
 8005e9c:	40026488 	.word	0x40026488
 8005ea0:	400264a0 	.word	0x400264a0
 8005ea4:	400264b8 	.word	0x400264b8
 8005ea8:	08008504 	.word	0x08008504

08005eac <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <DMA_SetCurrDataCounter+0xa4>)
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d040      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <DMA_SetCurrDataCounter+0xa8>)
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d03c      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <DMA_SetCurrDataCounter+0xac>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d038      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4b22      	ldr	r3, [pc, #136]	; (8005f5c <DMA_SetCurrDataCounter+0xb0>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d034      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <DMA_SetCurrDataCounter+0xb4>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d030      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <DMA_SetCurrDataCounter+0xb8>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d02c      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <DMA_SetCurrDataCounter+0xbc>)
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d028      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <DMA_SetCurrDataCounter+0xc0>)
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d024      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <DMA_SetCurrDataCounter+0xc4>)
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d020      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <DMA_SetCurrDataCounter+0xc8>)
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d01c      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <DMA_SetCurrDataCounter+0xcc>)
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d018      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <DMA_SetCurrDataCounter+0xd0>)
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d014      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <DMA_SetCurrDataCounter+0xd4>)
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d010      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	4b18      	ldr	r3, [pc, #96]	; (8005f84 <DMA_SetCurrDataCounter+0xd8>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d00c      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <DMA_SetCurrDataCounter+0xdc>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d008      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4b16      	ldr	r3, [pc, #88]	; (8005f8c <DMA_SetCurrDataCounter+0xe0>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d004      	beq.n	8005f42 <DMA_SetCurrDataCounter+0x96>
 8005f38:	4815      	ldr	r0, [pc, #84]	; (8005f90 <DMA_SetCurrDataCounter+0xe4>)
 8005f3a:	f240 2175 	movw	r1, #629	; 0x275
 8005f3e:	f7fc ff83 	bl	8002e48 <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8005f42:	887a      	ldrh	r2, [r7, #2]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	605a      	str	r2, [r3, #4]
}
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40026010 	.word	0x40026010
 8005f54:	40026028 	.word	0x40026028
 8005f58:	40026040 	.word	0x40026040
 8005f5c:	40026058 	.word	0x40026058
 8005f60:	40026070 	.word	0x40026070
 8005f64:	40026088 	.word	0x40026088
 8005f68:	400260a0 	.word	0x400260a0
 8005f6c:	400260b8 	.word	0x400260b8
 8005f70:	40026410 	.word	0x40026410
 8005f74:	40026428 	.word	0x40026428
 8005f78:	40026440 	.word	0x40026440
 8005f7c:	40026458 	.word	0x40026458
 8005f80:	40026470 	.word	0x40026470
 8005f84:	40026488 	.word	0x40026488
 8005f88:	400264a0 	.word	0x400264a0
 8005f8c:	400264b8 	.word	0x400264b8
 8005f90:	08008504 	.word	0x08008504

08005f94 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	; (800604c <DMA_GetCmdStatus+0xb8>)
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d040      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4b29      	ldr	r3, [pc, #164]	; (8006050 <DMA_GetCmdStatus+0xbc>)
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d03c      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4b28      	ldr	r3, [pc, #160]	; (8006054 <DMA_GetCmdStatus+0xc0>)
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d038      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4b27      	ldr	r3, [pc, #156]	; (8006058 <DMA_GetCmdStatus+0xc4>)
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d034      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <DMA_GetCmdStatus+0xc8>)
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d030      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4b25      	ldr	r3, [pc, #148]	; (8006060 <DMA_GetCmdStatus+0xcc>)
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d02c      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4b24      	ldr	r3, [pc, #144]	; (8006064 <DMA_GetCmdStatus+0xd0>)
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d028      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4b23      	ldr	r3, [pc, #140]	; (8006068 <DMA_GetCmdStatus+0xd4>)
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d024      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <DMA_GetCmdStatus+0xd8>)
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d020      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4b21      	ldr	r3, [pc, #132]	; (8006070 <DMA_GetCmdStatus+0xdc>)
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d01c      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <DMA_GetCmdStatus+0xe0>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d018      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	; (8006078 <DMA_GetCmdStatus+0xe4>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d014      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4b1e      	ldr	r3, [pc, #120]	; (800607c <DMA_GetCmdStatus+0xe8>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d010      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <DMA_GetCmdStatus+0xec>)
 800600c:	429a      	cmp	r2, r3
 800600e:	d00c      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <DMA_GetCmdStatus+0xf0>)
 8006014:	429a      	cmp	r2, r3
 8006016:	d008      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <DMA_GetCmdStatus+0xf4>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d004      	beq.n	800602a <DMA_GetCmdStatus+0x96>
 8006020:	481a      	ldr	r0, [pc, #104]	; (800608c <DMA_GetCmdStatus+0xf8>)
 8006022:	f240 31a2 	movw	r1, #930	; 0x3a2
 8006026:	f7fc ff0f 	bl	8002e48 <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8006036:	2301      	movs	r3, #1
 8006038:	73fb      	strb	r3, [r7, #15]
 800603a:	e001      	b.n	8006040 <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40026010 	.word	0x40026010
 8006050:	40026028 	.word	0x40026028
 8006054:	40026040 	.word	0x40026040
 8006058:	40026058 	.word	0x40026058
 800605c:	40026070 	.word	0x40026070
 8006060:	40026088 	.word	0x40026088
 8006064:	400260a0 	.word	0x400260a0
 8006068:	400260b8 	.word	0x400260b8
 800606c:	40026410 	.word	0x40026410
 8006070:	40026428 	.word	0x40026428
 8006074:	40026440 	.word	0x40026440
 8006078:	40026458 	.word	0x40026458
 800607c:	40026470 	.word	0x40026470
 8006080:	40026488 	.word	0x40026488
 8006084:	400264a0 	.word	0x400264a0
 8006088:	400264b8 	.word	0x400264b8
 800608c:	08008504 	.word	0x08008504

08006090 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4b45      	ldr	r3, [pc, #276]	; (80061b8 <DMA_ITConfig+0x128>)
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d040      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4b44      	ldr	r3, [pc, #272]	; (80061bc <DMA_ITConfig+0x12c>)
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d03c      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <DMA_ITConfig+0x130>)
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d038      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <DMA_ITConfig+0x134>)
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d034      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4b41      	ldr	r3, [pc, #260]	; (80061c8 <DMA_ITConfig+0x138>)
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d030      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4b40      	ldr	r3, [pc, #256]	; (80061cc <DMA_ITConfig+0x13c>)
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d02c      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4b3f      	ldr	r3, [pc, #252]	; (80061d0 <DMA_ITConfig+0x140>)
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d028      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4b3e      	ldr	r3, [pc, #248]	; (80061d4 <DMA_ITConfig+0x144>)
 80060da:	429a      	cmp	r2, r3
 80060dc:	d024      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4b3d      	ldr	r3, [pc, #244]	; (80061d8 <DMA_ITConfig+0x148>)
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d020      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4b3c      	ldr	r3, [pc, #240]	; (80061dc <DMA_ITConfig+0x14c>)
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d01c      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4b3b      	ldr	r3, [pc, #236]	; (80061e0 <DMA_ITConfig+0x150>)
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d018      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4b3a      	ldr	r3, [pc, #232]	; (80061e4 <DMA_ITConfig+0x154>)
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d014      	beq.n	8006128 <DMA_ITConfig+0x98>
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4b39      	ldr	r3, [pc, #228]	; (80061e8 <DMA_ITConfig+0x158>)
 8006102:	429a      	cmp	r2, r3
 8006104:	d010      	beq.n	8006128 <DMA_ITConfig+0x98>
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4b38      	ldr	r3, [pc, #224]	; (80061ec <DMA_ITConfig+0x15c>)
 800610a:	429a      	cmp	r2, r3
 800610c:	d00c      	beq.n	8006128 <DMA_ITConfig+0x98>
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4b37      	ldr	r3, [pc, #220]	; (80061f0 <DMA_ITConfig+0x160>)
 8006112:	429a      	cmp	r2, r3
 8006114:	d008      	beq.n	8006128 <DMA_ITConfig+0x98>
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <DMA_ITConfig+0x164>)
 800611a:	429a      	cmp	r2, r3
 800611c:	d004      	beq.n	8006128 <DMA_ITConfig+0x98>
 800611e:	4836      	ldr	r0, [pc, #216]	; (80061f8 <DMA_ITConfig+0x168>)
 8006120:	f240 414f 	movw	r1, #1103	; 0x44f
 8006124:	f7fc fe90 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <DMA_ITConfig+0xa8>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <DMA_ITConfig+0xb2>
 8006138:	482f      	ldr	r0, [pc, #188]	; (80061f8 <DMA_ITConfig+0x168>)
 800613a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800613e:	f7fc fe83 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <DMA_ITConfig+0xc8>
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d004      	beq.n	8006158 <DMA_ITConfig+0xc8>
 800614e:	482a      	ldr	r0, [pc, #168]	; (80061f8 <DMA_ITConfig+0x168>)
 8006150:	f240 4151 	movw	r1, #1105	; 0x451
 8006154:	f7fc fe78 	bl	8002e48 <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00f      	beq.n	8006182 <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d006      	beq.n	8006176 <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	615a      	str	r2, [r3, #20]
 8006174:	e005      	b.n	8006182 <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b80      	cmp	r3, #128	; 0x80
 8006186:	d014      	beq.n	80061b2 <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d008      	beq.n	80061a0 <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 031e 	and.w	r3, r3, #30
 8006198:	431a      	orrs	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e008      	b.n	80061b2 <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 031e 	and.w	r3, r3, #30
 80061aa:	43db      	mvns	r3, r3
 80061ac:	401a      	ands	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40026010 	.word	0x40026010
 80061bc:	40026028 	.word	0x40026028
 80061c0:	40026040 	.word	0x40026040
 80061c4:	40026058 	.word	0x40026058
 80061c8:	40026070 	.word	0x40026070
 80061cc:	40026088 	.word	0x40026088
 80061d0:	400260a0 	.word	0x400260a0
 80061d4:	400260b8 	.word	0x400260b8
 80061d8:	40026410 	.word	0x40026410
 80061dc:	40026428 	.word	0x40026428
 80061e0:	40026440 	.word	0x40026440
 80061e4:	40026458 	.word	0x40026458
 80061e8:	40026470 	.word	0x40026470
 80061ec:	40026488 	.word	0x40026488
 80061f0:	400264a0 	.word	0x400264a0
 80061f4:	400264b8 	.word	0x400264b8
 80061f8:	08008504 	.word	0x08008504

080061fc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4b97      	ldr	r3, [pc, #604]	; (8006474 <DMA_GetITStatus+0x278>)
 8006216:	429a      	cmp	r2, r3
 8006218:	d040      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	4b96      	ldr	r3, [pc, #600]	; (8006478 <DMA_GetITStatus+0x27c>)
 800621e:	429a      	cmp	r2, r3
 8006220:	d03c      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4b95      	ldr	r3, [pc, #596]	; (800647c <DMA_GetITStatus+0x280>)
 8006226:	429a      	cmp	r2, r3
 8006228:	d038      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4b94      	ldr	r3, [pc, #592]	; (8006480 <DMA_GetITStatus+0x284>)
 800622e:	429a      	cmp	r2, r3
 8006230:	d034      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4b93      	ldr	r3, [pc, #588]	; (8006484 <DMA_GetITStatus+0x288>)
 8006236:	429a      	cmp	r2, r3
 8006238:	d030      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	4b92      	ldr	r3, [pc, #584]	; (8006488 <DMA_GetITStatus+0x28c>)
 800623e:	429a      	cmp	r2, r3
 8006240:	d02c      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4b91      	ldr	r3, [pc, #580]	; (800648c <DMA_GetITStatus+0x290>)
 8006246:	429a      	cmp	r2, r3
 8006248:	d028      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4b90      	ldr	r3, [pc, #576]	; (8006490 <DMA_GetITStatus+0x294>)
 800624e:	429a      	cmp	r2, r3
 8006250:	d024      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4b8f      	ldr	r3, [pc, #572]	; (8006494 <DMA_GetITStatus+0x298>)
 8006256:	429a      	cmp	r2, r3
 8006258:	d020      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4b8e      	ldr	r3, [pc, #568]	; (8006498 <DMA_GetITStatus+0x29c>)
 800625e:	429a      	cmp	r2, r3
 8006260:	d01c      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4b8d      	ldr	r3, [pc, #564]	; (800649c <DMA_GetITStatus+0x2a0>)
 8006266:	429a      	cmp	r2, r3
 8006268:	d018      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4b8c      	ldr	r3, [pc, #560]	; (80064a0 <DMA_GetITStatus+0x2a4>)
 800626e:	429a      	cmp	r2, r3
 8006270:	d014      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4b8b      	ldr	r3, [pc, #556]	; (80064a4 <DMA_GetITStatus+0x2a8>)
 8006276:	429a      	cmp	r2, r3
 8006278:	d010      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4b8a      	ldr	r3, [pc, #552]	; (80064a8 <DMA_GetITStatus+0x2ac>)
 800627e:	429a      	cmp	r2, r3
 8006280:	d00c      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4b89      	ldr	r3, [pc, #548]	; (80064ac <DMA_GetITStatus+0x2b0>)
 8006286:	429a      	cmp	r2, r3
 8006288:	d008      	beq.n	800629c <DMA_GetITStatus+0xa0>
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4b88      	ldr	r3, [pc, #544]	; (80064b0 <DMA_GetITStatus+0x2b4>)
 800628e:	429a      	cmp	r2, r3
 8006290:	d004      	beq.n	800629c <DMA_GetITStatus+0xa0>
 8006292:	4888      	ldr	r0, [pc, #544]	; (80064b4 <DMA_GetITStatus+0x2b8>)
 8006294:	f240 4187 	movw	r1, #1159	; 0x487
 8006298:	f7fc fdd6 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	4b86      	ldr	r3, [pc, #536]	; (80064b8 <DMA_GetITStatus+0x2bc>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	f000 80a9 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	4b84      	ldr	r3, [pc, #528]	; (80064bc <DMA_GetITStatus+0x2c0>)
 80062aa:	429a      	cmp	r2, r3
 80062ac:	f000 80a4 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	4b83      	ldr	r3, [pc, #524]	; (80064c0 <DMA_GetITStatus+0x2c4>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	f000 809f 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	4b81      	ldr	r3, [pc, #516]	; (80064c4 <DMA_GetITStatus+0x2c8>)
 80062be:	429a      	cmp	r2, r3
 80062c0:	f000 809a 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	4b80      	ldr	r3, [pc, #512]	; (80064c8 <DMA_GetITStatus+0x2cc>)
 80062c8:	429a      	cmp	r2, r3
 80062ca:	f000 8095 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	4b7e      	ldr	r3, [pc, #504]	; (80064cc <DMA_GetITStatus+0x2d0>)
 80062d2:	429a      	cmp	r2, r3
 80062d4:	f000 8090 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	4b7d      	ldr	r3, [pc, #500]	; (80064d0 <DMA_GetITStatus+0x2d4>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	f000 808b 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4b7b      	ldr	r3, [pc, #492]	; (80064d4 <DMA_GetITStatus+0x2d8>)
 80062e6:	429a      	cmp	r2, r3
 80062e8:	f000 8086 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	4b7a      	ldr	r3, [pc, #488]	; (80064d8 <DMA_GetITStatus+0x2dc>)
 80062f0:	429a      	cmp	r2, r3
 80062f2:	f000 8081 	beq.w	80063f8 <DMA_GetITStatus+0x1fc>
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	4b78      	ldr	r3, [pc, #480]	; (80064dc <DMA_GetITStatus+0x2e0>)
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d07c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	4b77      	ldr	r3, [pc, #476]	; (80064e0 <DMA_GetITStatus+0x2e4>)
 8006302:	429a      	cmp	r2, r3
 8006304:	d078      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4b76      	ldr	r3, [pc, #472]	; (80064e4 <DMA_GetITStatus+0x2e8>)
 800630a:	429a      	cmp	r2, r3
 800630c:	d074      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	4b75      	ldr	r3, [pc, #468]	; (80064e8 <DMA_GetITStatus+0x2ec>)
 8006312:	429a      	cmp	r2, r3
 8006314:	d070      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4b74      	ldr	r3, [pc, #464]	; (80064ec <DMA_GetITStatus+0x2f0>)
 800631a:	429a      	cmp	r2, r3
 800631c:	d06c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	4b73      	ldr	r3, [pc, #460]	; (80064f0 <DMA_GetITStatus+0x2f4>)
 8006322:	429a      	cmp	r2, r3
 8006324:	d068      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	4b72      	ldr	r3, [pc, #456]	; (80064f4 <DMA_GetITStatus+0x2f8>)
 800632a:	429a      	cmp	r2, r3
 800632c:	d064      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	4b71      	ldr	r3, [pc, #452]	; (80064f8 <DMA_GetITStatus+0x2fc>)
 8006332:	429a      	cmp	r2, r3
 8006334:	d060      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	4b70      	ldr	r3, [pc, #448]	; (80064fc <DMA_GetITStatus+0x300>)
 800633a:	429a      	cmp	r2, r3
 800633c:	d05c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	4b6f      	ldr	r3, [pc, #444]	; (8006500 <DMA_GetITStatus+0x304>)
 8006342:	429a      	cmp	r2, r3
 8006344:	d058      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	4b6e      	ldr	r3, [pc, #440]	; (8006504 <DMA_GetITStatus+0x308>)
 800634a:	429a      	cmp	r2, r3
 800634c:	d054      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	4b6d      	ldr	r3, [pc, #436]	; (8006508 <DMA_GetITStatus+0x30c>)
 8006352:	429a      	cmp	r2, r3
 8006354:	d050      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	4b6c      	ldr	r3, [pc, #432]	; (800650c <DMA_GetITStatus+0x310>)
 800635a:	429a      	cmp	r2, r3
 800635c:	d04c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	4b6b      	ldr	r3, [pc, #428]	; (8006510 <DMA_GetITStatus+0x314>)
 8006362:	429a      	cmp	r2, r3
 8006364:	d048      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	4b6a      	ldr	r3, [pc, #424]	; (8006514 <DMA_GetITStatus+0x318>)
 800636a:	429a      	cmp	r2, r3
 800636c:	d044      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	4b69      	ldr	r3, [pc, #420]	; (8006518 <DMA_GetITStatus+0x31c>)
 8006372:	429a      	cmp	r2, r3
 8006374:	d040      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	4b68      	ldr	r3, [pc, #416]	; (800651c <DMA_GetITStatus+0x320>)
 800637a:	429a      	cmp	r2, r3
 800637c:	d03c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	4b67      	ldr	r3, [pc, #412]	; (8006520 <DMA_GetITStatus+0x324>)
 8006382:	429a      	cmp	r2, r3
 8006384:	d038      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	4b66      	ldr	r3, [pc, #408]	; (8006524 <DMA_GetITStatus+0x328>)
 800638a:	429a      	cmp	r2, r3
 800638c:	d034      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	4b65      	ldr	r3, [pc, #404]	; (8006528 <DMA_GetITStatus+0x32c>)
 8006392:	429a      	cmp	r2, r3
 8006394:	d030      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	4b64      	ldr	r3, [pc, #400]	; (800652c <DMA_GetITStatus+0x330>)
 800639a:	429a      	cmp	r2, r3
 800639c:	d02c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4b63      	ldr	r3, [pc, #396]	; (8006530 <DMA_GetITStatus+0x334>)
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d028      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	4b62      	ldr	r3, [pc, #392]	; (8006534 <DMA_GetITStatus+0x338>)
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d024      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <DMA_GetITStatus+0x33c>)
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d020      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	4b60      	ldr	r3, [pc, #384]	; (800653c <DMA_GetITStatus+0x340>)
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d01c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	4b5f      	ldr	r3, [pc, #380]	; (8006540 <DMA_GetITStatus+0x344>)
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d018      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	4b5e      	ldr	r3, [pc, #376]	; (8006544 <DMA_GetITStatus+0x348>)
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d014      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	4b5d      	ldr	r3, [pc, #372]	; (8006548 <DMA_GetITStatus+0x34c>)
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d010      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	4b5c      	ldr	r3, [pc, #368]	; (800654c <DMA_GetITStatus+0x350>)
 80063da:	429a      	cmp	r2, r3
 80063dc:	d00c      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	4b5b      	ldr	r3, [pc, #364]	; (8006550 <DMA_GetITStatus+0x354>)
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d008      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4b5a      	ldr	r3, [pc, #360]	; (8006554 <DMA_GetITStatus+0x358>)
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d004      	beq.n	80063f8 <DMA_GetITStatus+0x1fc>
 80063ee:	4831      	ldr	r0, [pc, #196]	; (80064b4 <DMA_GetITStatus+0x2b8>)
 80063f0:	f44f 6191 	mov.w	r1, #1160	; 0x488
 80063f4:	f7fc fd28 	bl	8002e48 <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	4b57      	ldr	r3, [pc, #348]	; (8006558 <DMA_GetITStatus+0x35c>)
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d802      	bhi.n	8006406 <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006400:	4b56      	ldr	r3, [pc, #344]	; (800655c <DMA_GetITStatus+0x360>)
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	e001      	b.n	800640a <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006406:	4b56      	ldr	r3, [pc, #344]	; (8006560 <DMA_GetITStatus+0x364>)
 8006408:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006410:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	0adb      	lsrs	r3, r3, #11
 800641c:	f003 031e 	and.w	r3, r3, #30
 8006420:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]
 800642c:	e004      	b.n	8006438 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e002      	b.n	8006450 <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006456:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800645a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	4013      	ands	r3, r2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d07e      	beq.n	8006564 <DMA_GetITStatus+0x368>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d07b      	beq.n	8006564 <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
 8006470:	e07a      	b.n	8006568 <DMA_GetITStatus+0x36c>
 8006472:	bf00      	nop
 8006474:	40026010 	.word	0x40026010
 8006478:	40026028 	.word	0x40026028
 800647c:	40026040 	.word	0x40026040
 8006480:	40026058 	.word	0x40026058
 8006484:	40026070 	.word	0x40026070
 8006488:	40026088 	.word	0x40026088
 800648c:	400260a0 	.word	0x400260a0
 8006490:	400260b8 	.word	0x400260b8
 8006494:	40026410 	.word	0x40026410
 8006498:	40026428 	.word	0x40026428
 800649c:	40026440 	.word	0x40026440
 80064a0:	40026458 	.word	0x40026458
 80064a4:	40026470 	.word	0x40026470
 80064a8:	40026488 	.word	0x40026488
 80064ac:	400264a0 	.word	0x400264a0
 80064b0:	400264b8 	.word	0x400264b8
 80064b4:	08008504 	.word	0x08008504
 80064b8:	10008020 	.word	0x10008020
 80064bc:	10004010 	.word	0x10004010
 80064c0:	10002008 	.word	0x10002008
 80064c4:	10001004 	.word	0x10001004
 80064c8:	90000001 	.word	0x90000001
 80064cc:	10008800 	.word	0x10008800
 80064d0:	10004400 	.word	0x10004400
 80064d4:	10002200 	.word	0x10002200
 80064d8:	10001100 	.word	0x10001100
 80064dc:	90000040 	.word	0x90000040
 80064e0:	10208000 	.word	0x10208000
 80064e4:	10104000 	.word	0x10104000
 80064e8:	10082000 	.word	0x10082000
 80064ec:	10041000 	.word	0x10041000
 80064f0:	90010000 	.word	0x90010000
 80064f4:	18008000 	.word	0x18008000
 80064f8:	14004000 	.word	0x14004000
 80064fc:	12002000 	.word	0x12002000
 8006500:	11001000 	.word	0x11001000
 8006504:	90400000 	.word	0x90400000
 8006508:	20008020 	.word	0x20008020
 800650c:	20004010 	.word	0x20004010
 8006510:	20002008 	.word	0x20002008
 8006514:	20001004 	.word	0x20001004
 8006518:	a0000001 	.word	0xa0000001
 800651c:	20008800 	.word	0x20008800
 8006520:	20004400 	.word	0x20004400
 8006524:	20002200 	.word	0x20002200
 8006528:	20001100 	.word	0x20001100
 800652c:	a0000040 	.word	0xa0000040
 8006530:	20208000 	.word	0x20208000
 8006534:	20104000 	.word	0x20104000
 8006538:	20082000 	.word	0x20082000
 800653c:	20041000 	.word	0x20041000
 8006540:	a0010000 	.word	0xa0010000
 8006544:	28008000 	.word	0x28008000
 8006548:	24004000 	.word	0x24004000
 800654c:	22002000 	.word	0x22002000
 8006550:	21001000 	.word	0x21001000
 8006554:	a0400000 	.word	0xa0400000
 8006558:	4002640f 	.word	0x4002640f
 800655c:	40026000 	.word	0x40026000
 8006560:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8006564:	2300      	movs	r3, #0
 8006566:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop

08006574 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	4b3d      	ldr	r3, [pc, #244]	; (8006678 <DMA_ClearITPendingBit+0x104>)
 8006582:	429a      	cmp	r2, r3
 8006584:	d040      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4b3c      	ldr	r3, [pc, #240]	; (800667c <DMA_ClearITPendingBit+0x108>)
 800658a:	429a      	cmp	r2, r3
 800658c:	d03c      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4b3b      	ldr	r3, [pc, #236]	; (8006680 <DMA_ClearITPendingBit+0x10c>)
 8006592:	429a      	cmp	r2, r3
 8006594:	d038      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4b3a      	ldr	r3, [pc, #232]	; (8006684 <DMA_ClearITPendingBit+0x110>)
 800659a:	429a      	cmp	r2, r3
 800659c:	d034      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4b39      	ldr	r3, [pc, #228]	; (8006688 <DMA_ClearITPendingBit+0x114>)
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d030      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4b38      	ldr	r3, [pc, #224]	; (800668c <DMA_ClearITPendingBit+0x118>)
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d02c      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4b37      	ldr	r3, [pc, #220]	; (8006690 <DMA_ClearITPendingBit+0x11c>)
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d028      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4b36      	ldr	r3, [pc, #216]	; (8006694 <DMA_ClearITPendingBit+0x120>)
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d024      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	4b35      	ldr	r3, [pc, #212]	; (8006698 <DMA_ClearITPendingBit+0x124>)
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d020      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	4b34      	ldr	r3, [pc, #208]	; (800669c <DMA_ClearITPendingBit+0x128>)
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d01c      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <DMA_ClearITPendingBit+0x12c>)
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d018      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4b32      	ldr	r3, [pc, #200]	; (80066a4 <DMA_ClearITPendingBit+0x130>)
 80065da:	429a      	cmp	r2, r3
 80065dc:	d014      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4b31      	ldr	r3, [pc, #196]	; (80066a8 <DMA_ClearITPendingBit+0x134>)
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d010      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4b30      	ldr	r3, [pc, #192]	; (80066ac <DMA_ClearITPendingBit+0x138>)
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d00c      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4b2f      	ldr	r3, [pc, #188]	; (80066b0 <DMA_ClearITPendingBit+0x13c>)
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d008      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4b2e      	ldr	r3, [pc, #184]	; (80066b4 <DMA_ClearITPendingBit+0x140>)
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d004      	beq.n	8006608 <DMA_ClearITPendingBit+0x94>
 80065fe:	482e      	ldr	r0, [pc, #184]	; (80066b8 <DMA_ClearITPendingBit+0x144>)
 8006600:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8006604:	f7fc fc20 	bl	8002e48 <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800660e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006612:	d00c      	beq.n	800662e <DMA_ClearITPendingBit+0xba>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <DMA_ClearITPendingBit+0xba>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <DMA_ClearITPendingBit+0xba>
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	4b25      	ldr	r3, [pc, #148]	; (80066bc <DMA_ClearITPendingBit+0x148>)
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <DMA_ClearITPendingBit+0xc4>
 800662e:	4822      	ldr	r0, [pc, #136]	; (80066b8 <DMA_ClearITPendingBit+0x144>)
 8006630:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8006634:	f7fc fc08 	bl	8002e48 <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <DMA_ClearITPendingBit+0x14c>)
 800663c:	429a      	cmp	r2, r3
 800663e:	d802      	bhi.n	8006646 <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006640:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <DMA_ClearITPendingBit+0x150>)
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e001      	b.n	800664a <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006646:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <DMA_ClearITPendingBit+0x154>)
 8006648:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800665a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	60d3      	str	r3, [r2, #12]
 8006662:	e006      	b.n	8006672 <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800666a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	6093      	str	r3, [r2, #8]
  }   
}
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40026010 	.word	0x40026010
 800667c:	40026028 	.word	0x40026028
 8006680:	40026040 	.word	0x40026040
 8006684:	40026058 	.word	0x40026058
 8006688:	40026070 	.word	0x40026070
 800668c:	40026088 	.word	0x40026088
 8006690:	400260a0 	.word	0x400260a0
 8006694:	400260b8 	.word	0x400260b8
 8006698:	40026410 	.word	0x40026410
 800669c:	40026428 	.word	0x40026428
 80066a0:	40026440 	.word	0x40026440
 80066a4:	40026458 	.word	0x40026458
 80066a8:	40026470 	.word	0x40026470
 80066ac:	40026488 	.word	0x40026488
 80066b0:	400264a0 	.word	0x400264a0
 80066b4:	400264b8 	.word	0x400264b8
 80066b8:	08008504 	.word	0x08008504
 80066bc:	40820082 	.word	0x40820082
 80066c0:	4002640f 	.word	0x4002640f
 80066c4:	40026000 	.word	0x40026000
 80066c8:	40026400 	.word	0x40026400

080066cc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	791b      	ldrb	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <EXTI_Init+0x24>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	791b      	ldrb	r3, [r3, #4]
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d003      	beq.n	80066f0 <EXTI_Init+0x24>
 80066e8:	4848      	ldr	r0, [pc, #288]	; (800680c <EXTI_Init+0x140>)
 80066ea:	217c      	movs	r1, #124	; 0x7c
 80066ec:	f7fc fbac 	bl	8002e48 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	795b      	ldrb	r3, [r3, #5]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d00b      	beq.n	8006710 <EXTI_Init+0x44>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	795b      	ldrb	r3, [r3, #5]
 80066fc:	2b0c      	cmp	r3, #12
 80066fe:	d007      	beq.n	8006710 <EXTI_Init+0x44>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	795b      	ldrb	r3, [r3, #5]
 8006704:	2b10      	cmp	r3, #16
 8006706:	d003      	beq.n	8006710 <EXTI_Init+0x44>
 8006708:	4840      	ldr	r0, [pc, #256]	; (800680c <EXTI_Init+0x140>)
 800670a:	217d      	movs	r1, #125	; 0x7d
 800670c:	f7fc fb9c 	bl	8002e48 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0ddb      	lsrs	r3, r3, #23
 8006716:	05db      	lsls	r3, r3, #23
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <EXTI_Init+0x58>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <EXTI_Init+0x60>
 8006724:	4839      	ldr	r0, [pc, #228]	; (800680c <EXTI_Init+0x140>)
 8006726:	217e      	movs	r1, #126	; 0x7e
 8006728:	f7fc fb8e 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	799b      	ldrb	r3, [r3, #6]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <EXTI_Init+0x78>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	799b      	ldrb	r3, [r3, #6]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d003      	beq.n	8006744 <EXTI_Init+0x78>
 800673c:	4833      	ldr	r0, [pc, #204]	; (800680c <EXTI_Init+0x140>)
 800673e:	217f      	movs	r1, #127	; 0x7f
 8006740:	f7fc fb82 	bl	8002e48 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 8006744:	4b32      	ldr	r3, [pc, #200]	; (8006810 <EXTI_Init+0x144>)
 8006746:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	799b      	ldrb	r3, [r3, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d04d      	beq.n	80067ec <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8006750:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <EXTI_Init+0x144>)
 8006752:	4a2f      	ldr	r2, [pc, #188]	; (8006810 <EXTI_Init+0x144>)
 8006754:	6811      	ldr	r1, [r2, #0]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	43d2      	mvns	r2, r2
 800675c:	400a      	ands	r2, r1
 800675e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8006760:	4b2b      	ldr	r3, [pc, #172]	; (8006810 <EXTI_Init+0x144>)
 8006762:	4a2b      	ldr	r2, [pc, #172]	; (8006810 <EXTI_Init+0x144>)
 8006764:	6851      	ldr	r1, [r2, #4]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	43d2      	mvns	r2, r2
 800676c:	400a      	ands	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	6811      	ldr	r1, [r2, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006788:	4b21      	ldr	r3, [pc, #132]	; (8006810 <EXTI_Init+0x144>)
 800678a:	4a21      	ldr	r2, [pc, #132]	; (8006810 <EXTI_Init+0x144>)
 800678c:	6891      	ldr	r1, [r2, #8]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	43d2      	mvns	r2, r2
 8006794:	400a      	ands	r2, r1
 8006796:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <EXTI_Init+0x144>)
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <EXTI_Init+0x144>)
 800679c:	68d1      	ldr	r1, [r2, #12]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	43d2      	mvns	r2, r2
 80067a4:	400a      	ands	r2, r1
 80067a6:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	795b      	ldrb	r3, [r3, #5]
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d10e      	bne.n	80067ce <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <EXTI_Init+0x144>)
 80067b2:	4a17      	ldr	r2, [pc, #92]	; (8006810 <EXTI_Init+0x144>)
 80067b4:	6891      	ldr	r1, [r2, #8]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <EXTI_Init+0x144>)
 80067c0:	4a13      	ldr	r2, [pc, #76]	; (8006810 <EXTI_Init+0x144>)
 80067c2:	68d1      	ldr	r1, [r2, #12]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	60da      	str	r2, [r3, #12]
 80067cc:	e01b      	b.n	8006806 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80067ce:	4b10      	ldr	r3, [pc, #64]	; (8006810 <EXTI_Init+0x144>)
 80067d0:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	795b      	ldrb	r3, [r3, #5]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6811      	ldr	r1, [r2, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e00c      	b.n	8006806 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	791b      	ldrb	r3, [r3, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	6811      	ldr	r1, [r2, #0]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6812      	ldr	r2, [r2, #0]
 8006800:	43d2      	mvns	r2, r2
 8006802:	400a      	ands	r2, r1
 8006804:	601a      	str	r2, [r3, #0]
  }
}
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	08008554 	.word	0x08008554
 8006810:	40013c00 	.word	0x40013c00

08006814 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	0ddb      	lsrs	r3, r3, #23
 8006820:	05db      	lsls	r3, r3, #23
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <EXTI_ClearFlag+0x18>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d103      	bne.n	8006834 <EXTI_ClearFlag+0x20>
 800682c:	4804      	ldr	r0, [pc, #16]	; (8006840 <EXTI_ClearFlag+0x2c>)
 800682e:	21f6      	movs	r1, #246	; 0xf6
 8006830:	f7fc fb0a 	bl	8002e48 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <EXTI_ClearFlag+0x30>)
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	615a      	str	r2, [r3, #20]
}
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	08008554 	.word	0x08008554
 8006844:	40013c00 	.word	0x40013c00

08006848 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d055      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d052      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d04f      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b08      	cmp	r3, #8
 800686e:	d04c      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b10      	cmp	r3, #16
 8006874:	d049      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b20      	cmp	r3, #32
 800687a:	d046      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d043      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d040      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688e:	d03c      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d038      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800689e:	d034      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a6:	d030      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	d02c      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b6:	d028      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068be:	d024      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d020      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ce:	d01c      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d6:	d018      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068de:	d014      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068e6:	d010      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ee:	d00c      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068f6:	d008      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068fe:	d004      	beq.n	800690a <EXTI_GetITStatus+0xc2>
 8006900:	480e      	ldr	r0, [pc, #56]	; (800693c <EXTI_GetITStatus+0xf4>)
 8006902:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006906:	f7fc fa9f 	bl	8002e48 <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <EXTI_GetITStatus+0xf8>)
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4013      	ands	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006914:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <EXTI_GetITStatus+0xf8>)
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <EXTI_GetITStatus+0xe4>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
 800692a:	e001      	b.n	8006930 <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	08008554 	.word	0x08008554
 8006940:	40013c00 	.word	0x40013c00

08006944 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4b7a      	ldr	r3, [pc, #488]	; (8006b48 <GPIO_Init+0x204>)
 800695e:	429a      	cmp	r2, r3
 8006960:	d023      	beq.n	80069aa <GPIO_Init+0x66>
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4b79      	ldr	r3, [pc, #484]	; (8006b4c <GPIO_Init+0x208>)
 8006966:	429a      	cmp	r2, r3
 8006968:	d01f      	beq.n	80069aa <GPIO_Init+0x66>
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4b78      	ldr	r3, [pc, #480]	; (8006b50 <GPIO_Init+0x20c>)
 800696e:	429a      	cmp	r2, r3
 8006970:	d01b      	beq.n	80069aa <GPIO_Init+0x66>
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4b77      	ldr	r3, [pc, #476]	; (8006b54 <GPIO_Init+0x210>)
 8006976:	429a      	cmp	r2, r3
 8006978:	d017      	beq.n	80069aa <GPIO_Init+0x66>
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4b76      	ldr	r3, [pc, #472]	; (8006b58 <GPIO_Init+0x214>)
 800697e:	429a      	cmp	r2, r3
 8006980:	d013      	beq.n	80069aa <GPIO_Init+0x66>
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	4b75      	ldr	r3, [pc, #468]	; (8006b5c <GPIO_Init+0x218>)
 8006986:	429a      	cmp	r2, r3
 8006988:	d00f      	beq.n	80069aa <GPIO_Init+0x66>
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4b74      	ldr	r3, [pc, #464]	; (8006b60 <GPIO_Init+0x21c>)
 800698e:	429a      	cmp	r2, r3
 8006990:	d00b      	beq.n	80069aa <GPIO_Init+0x66>
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4b73      	ldr	r3, [pc, #460]	; (8006b64 <GPIO_Init+0x220>)
 8006996:	429a      	cmp	r2, r3
 8006998:	d007      	beq.n	80069aa <GPIO_Init+0x66>
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	4b72      	ldr	r3, [pc, #456]	; (8006b68 <GPIO_Init+0x224>)
 800699e:	429a      	cmp	r2, r3
 80069a0:	d003      	beq.n	80069aa <GPIO_Init+0x66>
 80069a2:	4872      	ldr	r0, [pc, #456]	; (8006b6c <GPIO_Init+0x228>)
 80069a4:	21bb      	movs	r1, #187	; 0xbb
 80069a6:	f7fc fa4f 	bl	8002e48 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <GPIO_Init+0x76>
 80069b2:	486e      	ldr	r0, [pc, #440]	; (8006b6c <GPIO_Init+0x228>)
 80069b4:	21bc      	movs	r1, #188	; 0xbc
 80069b6:	f7fc fa47 	bl	8002e48 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	791b      	ldrb	r3, [r3, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00f      	beq.n	80069e2 <GPIO_Init+0x9e>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d00b      	beq.n	80069e2 <GPIO_Init+0x9e>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	791b      	ldrb	r3, [r3, #4]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d007      	beq.n	80069e2 <GPIO_Init+0x9e>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	791b      	ldrb	r3, [r3, #4]
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d003      	beq.n	80069e2 <GPIO_Init+0x9e>
 80069da:	4864      	ldr	r0, [pc, #400]	; (8006b6c <GPIO_Init+0x228>)
 80069dc:	21bd      	movs	r1, #189	; 0xbd
 80069de:	f7fc fa33 	bl	8002e48 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	79db      	ldrb	r3, [r3, #7]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <GPIO_Init+0xbe>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	79db      	ldrb	r3, [r3, #7]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d007      	beq.n	8006a02 <GPIO_Init+0xbe>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	79db      	ldrb	r3, [r3, #7]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d003      	beq.n	8006a02 <GPIO_Init+0xbe>
 80069fa:	485c      	ldr	r0, [pc, #368]	; (8006b6c <GPIO_Init+0x228>)
 80069fc:	21be      	movs	r1, #190	; 0xbe
 80069fe:	f7fc fa23 	bl	8002e48 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e097      	b.n	8006b38 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	f040 8086 	bne.w	8006b32 <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	2103      	movs	r1, #3
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	43db      	mvns	r3, r3
 8006a36:	401a      	ands	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	791b      	ldrb	r3, [r3, #4]
 8006a44:	4619      	mov	r1, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	791b      	ldrb	r3, [r3, #4]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d003      	beq.n	8006a64 <GPIO_Init+0x120>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	791b      	ldrb	r3, [r3, #4]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d14e      	bne.n	8006b02 <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	795b      	ldrb	r3, [r3, #5]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00f      	beq.n	8006a8c <GPIO_Init+0x148>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	795b      	ldrb	r3, [r3, #5]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d00b      	beq.n	8006a8c <GPIO_Init+0x148>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	795b      	ldrb	r3, [r3, #5]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d007      	beq.n	8006a8c <GPIO_Init+0x148>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	795b      	ldrb	r3, [r3, #5]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d003      	beq.n	8006a8c <GPIO_Init+0x148>
 8006a84:	4839      	ldr	r0, [pc, #228]	; (8006b6c <GPIO_Init+0x228>)
 8006a86:	21d0      	movs	r1, #208	; 0xd0
 8006a88:	f7fc f9de 	bl	8002e48 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	2103      	movs	r1, #3
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	401a      	ands	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	795b      	ldrb	r3, [r3, #5]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	799b      	ldrb	r3, [r3, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <GPIO_Init+0x18e>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	799b      	ldrb	r3, [r3, #6]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d003      	beq.n	8006ad2 <GPIO_Init+0x18e>
 8006aca:	4828      	ldr	r0, [pc, #160]	; (8006b6c <GPIO_Init+0x228>)
 8006acc:	21d7      	movs	r1, #215	; 0xd7
 8006ace:	f7fc f9bb 	bl	8002e48 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2101      	movs	r1, #1
 8006adc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	799b      	ldrb	r3, [r3, #6]
 8006af0:	4619      	mov	r1, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	2103      	movs	r1, #3
 8006b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b12:	43db      	mvns	r3, r3
 8006b14:	401a      	ands	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	79db      	ldrb	r3, [r3, #7]
 8006b22:	4619      	mov	r1, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	3301      	adds	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b0f      	cmp	r3, #15
 8006b3c:	f67f af64 	bls.w	8006a08 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40020000 	.word	0x40020000
 8006b4c:	40020400 	.word	0x40020400
 8006b50:	40020800 	.word	0x40020800
 8006b54:	40020c00 	.word	0x40020c00
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40021400 	.word	0x40021400
 8006b60:	40021800 	.word	0x40021800
 8006b64:	40021c00 	.word	0x40021c00
 8006b68:	40022000 	.word	0x40022000
 8006b6c:	080085a4 	.word	0x080085a4

08006b70 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	460a      	mov	r2, r1
 8006b7c:	807a      	strh	r2, [r7, #2]
 8006b7e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	4b83      	ldr	r3, [pc, #524]	; (8006d98 <GPIO_PinAFConfig+0x228>)
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d024      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4b82      	ldr	r3, [pc, #520]	; (8006d9c <GPIO_PinAFConfig+0x22c>)
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d020      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	4b81      	ldr	r3, [pc, #516]	; (8006da0 <GPIO_PinAFConfig+0x230>)
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d01c      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4b80      	ldr	r3, [pc, #512]	; (8006da4 <GPIO_PinAFConfig+0x234>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d018      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4b7f      	ldr	r3, [pc, #508]	; (8006da8 <GPIO_PinAFConfig+0x238>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d014      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	4b7e      	ldr	r3, [pc, #504]	; (8006dac <GPIO_PinAFConfig+0x23c>)
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d010      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4b7d      	ldr	r3, [pc, #500]	; (8006db0 <GPIO_PinAFConfig+0x240>)
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d00c      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4b7c      	ldr	r3, [pc, #496]	; (8006db4 <GPIO_PinAFConfig+0x244>)
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d008      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4b7b      	ldr	r3, [pc, #492]	; (8006db8 <GPIO_PinAFConfig+0x248>)
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d004      	beq.n	8006bda <GPIO_PinAFConfig+0x6a>
 8006bd0:	487a      	ldr	r0, [pc, #488]	; (8006dbc <GPIO_PinAFConfig+0x24c>)
 8006bd2:	f240 2117 	movw	r1, #535	; 0x217
 8006bd6:	f7fc f937 	bl	8002e48 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d031      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006be0:	887b      	ldrh	r3, [r7, #2]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d02e      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006be6:	887b      	ldrh	r3, [r7, #2]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d02b      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006bec:	887b      	ldrh	r3, [r7, #2]
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d028      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006bf2:	887b      	ldrh	r3, [r7, #2]
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d025      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006bf8:	887b      	ldrh	r3, [r7, #2]
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	d022      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006bfe:	887b      	ldrh	r3, [r7, #2]
 8006c00:	2b06      	cmp	r3, #6
 8006c02:	d01f      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c04:	887b      	ldrh	r3, [r7, #2]
 8006c06:	2b07      	cmp	r3, #7
 8006c08:	d01c      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c0a:	887b      	ldrh	r3, [r7, #2]
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d019      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c10:	887b      	ldrh	r3, [r7, #2]
 8006c12:	2b09      	cmp	r3, #9
 8006c14:	d016      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c16:	887b      	ldrh	r3, [r7, #2]
 8006c18:	2b0a      	cmp	r3, #10
 8006c1a:	d013      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	2b0b      	cmp	r3, #11
 8006c20:	d010      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c22:	887b      	ldrh	r3, [r7, #2]
 8006c24:	2b0c      	cmp	r3, #12
 8006c26:	d00d      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	2b0d      	cmp	r3, #13
 8006c2c:	d00a      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c2e:	887b      	ldrh	r3, [r7, #2]
 8006c30:	2b0e      	cmp	r3, #14
 8006c32:	d007      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c34:	887b      	ldrh	r3, [r7, #2]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d004      	beq.n	8006c44 <GPIO_PinAFConfig+0xd4>
 8006c3a:	4860      	ldr	r0, [pc, #384]	; (8006dbc <GPIO_PinAFConfig+0x24c>)
 8006c3c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8006c40:	f7fc f902 	bl	8002e48 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8006c44:	787b      	ldrb	r3, [r7, #1]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d06d      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c4a:	787b      	ldrb	r3, [r7, #1]
 8006c4c:	2b09      	cmp	r3, #9
 8006c4e:	d06a      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c50:	787b      	ldrb	r3, [r7, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d067      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c56:	787b      	ldrb	r3, [r7, #1]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d064      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c5c:	787b      	ldrb	r3, [r7, #1]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d061      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c62:	787b      	ldrb	r3, [r7, #1]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d05e      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c68:	787b      	ldrb	r3, [r7, #1]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d05b      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c6e:	787b      	ldrb	r3, [r7, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d058      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c74:	787b      	ldrb	r3, [r7, #1]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d055      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c7a:	787b      	ldrb	r3, [r7, #1]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d052      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c80:	787b      	ldrb	r3, [r7, #1]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d04f      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c86:	787b      	ldrb	r3, [r7, #1]
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d04c      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c8c:	787b      	ldrb	r3, [r7, #1]
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d049      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c92:	787b      	ldrb	r3, [r7, #1]
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d046      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c98:	787b      	ldrb	r3, [r7, #1]
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d043      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006c9e:	787b      	ldrb	r3, [r7, #1]
 8006ca0:	2b05      	cmp	r3, #5
 8006ca2:	d040      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006ca4:	787b      	ldrb	r3, [r7, #1]
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d03d      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006caa:	787b      	ldrb	r3, [r7, #1]
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d03a      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cb0:	787b      	ldrb	r3, [r7, #1]
 8006cb2:	2b06      	cmp	r3, #6
 8006cb4:	d037      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cb6:	787b      	ldrb	r3, [r7, #1]
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	d034      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cbc:	787b      	ldrb	r3, [r7, #1]
 8006cbe:	2b07      	cmp	r3, #7
 8006cc0:	d031      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cc2:	787b      	ldrb	r3, [r7, #1]
 8006cc4:	2b07      	cmp	r3, #7
 8006cc6:	d02e      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cc8:	787b      	ldrb	r3, [r7, #1]
 8006cca:	2b07      	cmp	r3, #7
 8006ccc:	d02b      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cce:	787b      	ldrb	r3, [r7, #1]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d028      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cd4:	787b      	ldrb	r3, [r7, #1]
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d025      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cda:	787b      	ldrb	r3, [r7, #1]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d022      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006ce0:	787b      	ldrb	r3, [r7, #1]
 8006ce2:	2b09      	cmp	r3, #9
 8006ce4:	d01f      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006ce6:	787b      	ldrb	r3, [r7, #1]
 8006ce8:	2b09      	cmp	r3, #9
 8006cea:	d01c      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cec:	787b      	ldrb	r3, [r7, #1]
 8006cee:	2b0a      	cmp	r3, #10
 8006cf0:	d019      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cf2:	787b      	ldrb	r3, [r7, #1]
 8006cf4:	2b0a      	cmp	r3, #10
 8006cf6:	d016      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cf8:	787b      	ldrb	r3, [r7, #1]
 8006cfa:	2b0b      	cmp	r3, #11
 8006cfc:	d013      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006cfe:	787b      	ldrb	r3, [r7, #1]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	d010      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006d04:	787b      	ldrb	r3, [r7, #1]
 8006d06:	2b0c      	cmp	r3, #12
 8006d08:	d00d      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006d0a:	787b      	ldrb	r3, [r7, #1]
 8006d0c:	2b0c      	cmp	r3, #12
 8006d0e:	d00a      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006d10:	787b      	ldrb	r3, [r7, #1]
 8006d12:	2b0d      	cmp	r3, #13
 8006d14:	d007      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006d16:	787b      	ldrb	r3, [r7, #1]
 8006d18:	2b0f      	cmp	r3, #15
 8006d1a:	d004      	beq.n	8006d26 <GPIO_PinAFConfig+0x1b6>
 8006d1c:	4827      	ldr	r0, [pc, #156]	; (8006dbc <GPIO_PinAFConfig+0x24c>)
 8006d1e:	f240 2119 	movw	r1, #537	; 0x219
 8006d22:	f7fc f891 	bl	8002e48 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006d26:	787a      	ldrb	r2, [r7, #1]
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006d36:	887b      	ldrh	r3, [r7, #2]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	08db      	lsrs	r3, r3, #3
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4619      	mov	r1, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3108      	adds	r1, #8
 8006d4a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006d4e:	887b      	ldrh	r3, [r7, #2]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	200f      	movs	r0, #15
 8006d58:	fa00 f303 	lsl.w	r3, r0, r3
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	4019      	ands	r1, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3208      	adds	r2, #8
 8006d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8006d68:	887b      	ldrh	r3, [r7, #2]
 8006d6a:	08db      	lsrs	r3, r3, #3
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3208      	adds	r2, #8
 8006d74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8006d7e:	887b      	ldrh	r3, [r7, #2]
 8006d80:	08db      	lsrs	r3, r3, #3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3208      	adds	r2, #8
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40020000 	.word	0x40020000
 8006d9c:	40020400 	.word	0x40020400
 8006da0:	40020800 	.word	0x40020800
 8006da4:	40020c00 	.word	0x40020c00
 8006da8:	40021000 	.word	0x40021000
 8006dac:	40021400 	.word	0x40021400
 8006db0:	40021800 	.word	0x40021800
 8006db4:	40021c00 	.word	0x40021c00
 8006db8:	40022000 	.word	0x40022000
 8006dbc:	080085a4 	.word	0x080085a4

08006dc0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b089      	sub	sp, #36	; 0x24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	2302      	movs	r3, #2
 8006dde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006de0:	4b48      	ldr	r3, [pc, #288]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 030c 	and.w	r3, r3, #12
 8006de8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d007      	beq.n	8006e00 <RCC_GetClocksFreq+0x40>
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d009      	beq.n	8006e08 <RCC_GetClocksFreq+0x48>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d13f      	bne.n	8006e78 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a43      	ldr	r2, [pc, #268]	; (8006f08 <RCC_GetClocksFreq+0x148>)
 8006dfc:	601a      	str	r2, [r3, #0]
      break;
 8006dfe:	e03f      	b.n	8006e80 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a42      	ldr	r2, [pc, #264]	; (8006f0c <RCC_GetClocksFreq+0x14c>)
 8006e04:	601a      	str	r2, [r3, #0]
      break;
 8006e06:	e03b      	b.n	8006e80 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006e08:	4b3e      	ldr	r3, [pc, #248]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e10:	0d9b      	lsrs	r3, r3, #22
 8006e12:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e14:	4b3b      	ldr	r3, [pc, #236]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e1c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006e24:	4a39      	ldr	r2, [pc, #228]	; (8006f0c <RCC_GetClocksFreq+0x14c>)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e2c:	4b35      	ldr	r3, [pc, #212]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006e2e:	6859      	ldr	r1, [r3, #4]
 8006e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e34:	400b      	ands	r3, r1
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	fb03 f302 	mul.w	r3, r3, r2
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e00c      	b.n	8006e5a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8006e40:	4a31      	ldr	r2, [pc, #196]	; (8006f08 <RCC_GetClocksFreq+0x148>)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e48:	4b2e      	ldr	r3, [pc, #184]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006e4a:	6859      	ldr	r1, [r3, #4]
 8006e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e50:	400b      	ands	r3, r1
 8006e52:	099b      	lsrs	r3, r3, #6
 8006e54:	fb03 f302 	mul.w	r3, r3, r2
 8006e58:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006e5a:	4b2a      	ldr	r3, [pc, #168]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e62:	0c1b      	lsrs	r3, r3, #16
 8006e64:	3301      	adds	r3, #1
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
      break;
 8006e76:	e003      	b.n	8006e80 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a23      	ldr	r2, [pc, #140]	; (8006f08 <RCC_GetClocksFreq+0x148>)
 8006e7c:	601a      	str	r2, [r3, #0]
      break;
 8006e7e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8006e80:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006e90:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <RCC_GetClocksFreq+0x150>)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	4413      	add	r3, r2
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	40da      	lsrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8006ea8:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006eb0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	0a9b      	lsrs	r3, r3, #10
 8006eb6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006eb8:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <RCC_GetClocksFreq+0x150>)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	40da      	lsrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <RCC_GetClocksFreq+0x144>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006ed8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	0b5b      	lsrs	r3, r3, #13
 8006ede:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006ee0:	4a0b      	ldr	r2, [pc, #44]	; (8006f10 <RCC_GetClocksFreq+0x150>)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	40da      	lsrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]
}
 8006ef8:	3724      	adds	r7, #36	; 0x24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800
 8006f08:	00f42400 	.word	0x00f42400
 8006f0c:	017d7840 	.word	0x017d7840
 8006f10:	20000020 	.word	0x20000020

08006f14 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <RCC_AHB1PeriphClockCmd+0x64>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d102      	bne.n	8006f30 <RCC_AHB1PeriphClockCmd+0x1c>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <RCC_AHB1PeriphClockCmd+0x26>
 8006f30:	4812      	ldr	r0, [pc, #72]	; (8006f7c <RCC_AHB1PeriphClockCmd+0x68>)
 8006f32:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006f36:	f7fb ff87 	bl	8002e48 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <RCC_AHB1PeriphClockCmd+0x3c>
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d004      	beq.n	8006f50 <RCC_AHB1PeriphClockCmd+0x3c>
 8006f46:	480d      	ldr	r0, [pc, #52]	; (8006f7c <RCC_AHB1PeriphClockCmd+0x68>)
 8006f48:	f240 4142 	movw	r1, #1090	; 0x442
 8006f4c:	f7fb ff7c 	bl	8002e48 <assert_failed>
  if (NewState != DISABLE)
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8006f5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
 8006f62:	e006      	b.n	8006f72 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8006f66:	4a06      	ldr	r2, [pc, #24]	; (8006f80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8006f68:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	43d2      	mvns	r2, r2
 8006f6e:	400a      	ands	r2, r1
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	818bee00 	.word	0x818bee00
 8006f7c:	080085f4 	.word	0x080085f4
 8006f80:	40023800 	.word	0x40023800

08006f84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <RCC_APB2PeriphClockCmd+0x64>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <RCC_APB2PeriphClockCmd+0x1c>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d104      	bne.n	8006faa <RCC_APB2PeriphClockCmd+0x26>
 8006fa0:	4812      	ldr	r0, [pc, #72]	; (8006fec <RCC_APB2PeriphClockCmd+0x68>)
 8006fa2:	f240 41d5 	movw	r1, #1237	; 0x4d5
 8006fa6:	f7fb ff4f 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <RCC_APB2PeriphClockCmd+0x3c>
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d004      	beq.n	8006fc0 <RCC_APB2PeriphClockCmd+0x3c>
 8006fb6:	480d      	ldr	r0, [pc, #52]	; (8006fec <RCC_APB2PeriphClockCmd+0x68>)
 8006fb8:	f240 41d6 	movw	r1, #1238	; 0x4d6
 8006fbc:	f7fb ff44 	bl	8002e48 <assert_failed>

  if (NewState != DISABLE)
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d006      	beq.n	8006fd4 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <RCC_APB2PeriphClockCmd+0x6c>)
 8006fc8:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <RCC_APB2PeriphClockCmd+0x6c>)
 8006fca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8006fd2:	e006      	b.n	8006fe2 <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <RCC_APB2PeriphClockCmd+0x6c>)
 8006fd6:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <RCC_APB2PeriphClockCmd+0x6c>)
 8006fd8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	43d2      	mvns	r2, r2
 8006fde:	400a      	ands	r2, r1
 8006fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	fff8a0cc 	.word	0xfff8a0cc
 8006fec:	080085f4 	.word	0x080085f4
 8006ff0:	40023800 	.word	0x40023800

08006ff4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	4b70      	ldr	r3, [pc, #448]	; (80071c8 <SPI_Init+0x1d4>)
 8007006:	429a      	cmp	r2, r3
 8007008:	d00c      	beq.n	8007024 <SPI_Init+0x30>
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4b6f      	ldr	r3, [pc, #444]	; (80071cc <SPI_Init+0x1d8>)
 800700e:	429a      	cmp	r2, r3
 8007010:	d008      	beq.n	8007024 <SPI_Init+0x30>
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4b6e      	ldr	r3, [pc, #440]	; (80071d0 <SPI_Init+0x1dc>)
 8007016:	429a      	cmp	r2, r3
 8007018:	d004      	beq.n	8007024 <SPI_Init+0x30>
 800701a:	486e      	ldr	r0, [pc, #440]	; (80071d4 <SPI_Init+0x1e0>)
 800701c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007020:	f7fb ff12 	bl	8002e48 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d013      	beq.n	8007054 <SPI_Init+0x60>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007034:	d00e      	beq.n	8007054 <SPI_Init+0x60>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703e:	d009      	beq.n	8007054 <SPI_Init+0x60>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007048:	d004      	beq.n	8007054 <SPI_Init+0x60>
 800704a:	4862      	ldr	r0, [pc, #392]	; (80071d4 <SPI_Init+0x1e0>)
 800704c:	f240 1109 	movw	r1, #265	; 0x109
 8007050:	f7fb fefa 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	885b      	ldrh	r3, [r3, #2]
 8007058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800705c:	d008      	beq.n	8007070 <SPI_Init+0x7c>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <SPI_Init+0x7c>
 8007066:	485b      	ldr	r0, [pc, #364]	; (80071d4 <SPI_Init+0x1e0>)
 8007068:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800706c:	f7fb feec 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	889b      	ldrh	r3, [r3, #4]
 8007074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007078:	d008      	beq.n	800708c <SPI_Init+0x98>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	889b      	ldrh	r3, [r3, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <SPI_Init+0x98>
 8007082:	4854      	ldr	r0, [pc, #336]	; (80071d4 <SPI_Init+0x1e0>)
 8007084:	f240 110b 	movw	r1, #267	; 0x10b
 8007088:	f7fb fede 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	88db      	ldrh	r3, [r3, #6]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <SPI_Init+0xb2>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	88db      	ldrh	r3, [r3, #6]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d004      	beq.n	80070a6 <SPI_Init+0xb2>
 800709c:	484d      	ldr	r0, [pc, #308]	; (80071d4 <SPI_Init+0x1e0>)
 800709e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80070a2:	f7fb fed1 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	891b      	ldrh	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <SPI_Init+0xcc>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	891b      	ldrh	r3, [r3, #8]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d004      	beq.n	80070c0 <SPI_Init+0xcc>
 80070b6:	4847      	ldr	r0, [pc, #284]	; (80071d4 <SPI_Init+0x1e0>)
 80070b8:	f240 110d 	movw	r1, #269	; 0x10d
 80070bc:	f7fb fec4 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	895b      	ldrh	r3, [r3, #10]
 80070c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c8:	d008      	beq.n	80070dc <SPI_Init+0xe8>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	895b      	ldrh	r3, [r3, #10]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <SPI_Init+0xe8>
 80070d2:	4840      	ldr	r0, [pc, #256]	; (80071d4 <SPI_Init+0x1e0>)
 80070d4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80070d8:	f7fb feb6 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	899b      	ldrh	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d020      	beq.n	8007126 <SPI_Init+0x132>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	899b      	ldrh	r3, [r3, #12]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d01c      	beq.n	8007126 <SPI_Init+0x132>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	899b      	ldrh	r3, [r3, #12]
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d018      	beq.n	8007126 <SPI_Init+0x132>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	899b      	ldrh	r3, [r3, #12]
 80070f8:	2b18      	cmp	r3, #24
 80070fa:	d014      	beq.n	8007126 <SPI_Init+0x132>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	899b      	ldrh	r3, [r3, #12]
 8007100:	2b20      	cmp	r3, #32
 8007102:	d010      	beq.n	8007126 <SPI_Init+0x132>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	899b      	ldrh	r3, [r3, #12]
 8007108:	2b28      	cmp	r3, #40	; 0x28
 800710a:	d00c      	beq.n	8007126 <SPI_Init+0x132>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	899b      	ldrh	r3, [r3, #12]
 8007110:	2b30      	cmp	r3, #48	; 0x30
 8007112:	d008      	beq.n	8007126 <SPI_Init+0x132>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	899b      	ldrh	r3, [r3, #12]
 8007118:	2b38      	cmp	r3, #56	; 0x38
 800711a:	d004      	beq.n	8007126 <SPI_Init+0x132>
 800711c:	482d      	ldr	r0, [pc, #180]	; (80071d4 <SPI_Init+0x1e0>)
 800711e:	f240 110f 	movw	r1, #271	; 0x10f
 8007122:	f7fb fe91 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	89db      	ldrh	r3, [r3, #14]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <SPI_Init+0x14c>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	89db      	ldrh	r3, [r3, #14]
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d004      	beq.n	8007140 <SPI_Init+0x14c>
 8007136:	4827      	ldr	r0, [pc, #156]	; (80071d4 <SPI_Init+0x1e0>)
 8007138:	f44f 7188 	mov.w	r1, #272	; 0x110
 800713c:	f7fb fe84 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	8a1b      	ldrh	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <SPI_Init+0x15e>
 8007148:	4822      	ldr	r0, [pc, #136]	; (80071d4 <SPI_Init+0x1e0>)
 800714a:	f240 1111 	movw	r1, #273	; 0x111
 800714e:	f7fb fe7b 	bl	8002e48 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8007158:	89fb      	ldrh	r3, [r7, #14]
 800715a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800715e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	881a      	ldrh	r2, [r3, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	885b      	ldrh	r3, [r3, #2]
 8007168:	4313      	orrs	r3, r2
 800716a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007170:	4313      	orrs	r3, r2
 8007172:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007178:	4313      	orrs	r3, r2
 800717a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007180:	4313      	orrs	r3, r2
 8007182:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007188:	4313      	orrs	r3, r2
 800718a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007190:	4313      	orrs	r3, r2
 8007192:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007198:	4313      	orrs	r3, r2
 800719a:	b29a      	uxth	r2, r3
 800719c:	89fb      	ldrh	r3, [r7, #14]
 800719e:	4313      	orrs	r3, r2
 80071a0:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	89fa      	ldrh	r2, [r7, #14]
 80071a6:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8b9b      	ldrh	r3, [r3, #28]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	8a1a      	ldrh	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	821a      	strh	r2, [r3, #16]
}
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40013000 	.word	0x40013000
 80071cc:	40003800 	.word	0x40003800
 80071d0:	40003c00 	.word	0x40003c00
 80071d4:	08008644 	.word	0x08008644

080071d8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4b19      	ldr	r3, [pc, #100]	; (800724c <SPI_Cmd+0x74>)
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d00c      	beq.n	8007206 <SPI_Cmd+0x2e>
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	4b18      	ldr	r3, [pc, #96]	; (8007250 <SPI_Cmd+0x78>)
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d008      	beq.n	8007206 <SPI_Cmd+0x2e>
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <SPI_Cmd+0x7c>)
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d004      	beq.n	8007206 <SPI_Cmd+0x2e>
 80071fc:	4816      	ldr	r0, [pc, #88]	; (8007258 <SPI_Cmd+0x80>)
 80071fe:	f240 2101 	movw	r1, #513	; 0x201
 8007202:	f7fb fe21 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <SPI_Cmd+0x44>
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d004      	beq.n	800721c <SPI_Cmd+0x44>
 8007212:	4811      	ldr	r0, [pc, #68]	; (8007258 <SPI_Cmd+0x80>)
 8007214:	f240 2102 	movw	r1, #514	; 0x202
 8007218:	f7fb fe16 	bl	8002e48 <assert_failed>
  if (NewState != DISABLE)
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d008      	beq.n	8007234 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	e007      	b.n	8007244 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800723e:	b29a      	uxth	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	801a      	strh	r2, [r3, #0]
  }
}
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40013000 	.word	0x40013000
 8007250:	40003800 	.word	0x40003800
 8007254:	40003c00 	.word	0x40003c00
 8007258:	08008644 	.word	0x08008644

0800725c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	460a      	mov	r2, r1
 8007268:	807a      	strh	r2, [r7, #2]
 800726a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4b25      	ldr	r3, [pc, #148]	; (8007304 <SPI_I2S_DMACmd+0xa8>)
 8007270:	429a      	cmp	r2, r3
 8007272:	d014      	beq.n	800729e <SPI_I2S_DMACmd+0x42>
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <SPI_I2S_DMACmd+0xac>)
 8007278:	429a      	cmp	r2, r3
 800727a:	d010      	beq.n	800729e <SPI_I2S_DMACmd+0x42>
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	4b23      	ldr	r3, [pc, #140]	; (800730c <SPI_I2S_DMACmd+0xb0>)
 8007280:	429a      	cmp	r2, r3
 8007282:	d00c      	beq.n	800729e <SPI_I2S_DMACmd+0x42>
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4b22      	ldr	r3, [pc, #136]	; (8007310 <SPI_I2S_DMACmd+0xb4>)
 8007288:	429a      	cmp	r2, r3
 800728a:	d008      	beq.n	800729e <SPI_I2S_DMACmd+0x42>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8007292:	d004      	beq.n	800729e <SPI_I2S_DMACmd+0x42>
 8007294:	481f      	ldr	r0, [pc, #124]	; (8007314 <SPI_I2S_DMACmd+0xb8>)
 8007296:	f240 31d9 	movw	r1, #985	; 0x3d9
 800729a:	f7fb fdd5 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800729e:	787b      	ldrb	r3, [r7, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <SPI_I2S_DMACmd+0x58>
 80072a4:	787b      	ldrb	r3, [r7, #1]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d004      	beq.n	80072b4 <SPI_I2S_DMACmd+0x58>
 80072aa:	481a      	ldr	r0, [pc, #104]	; (8007314 <SPI_I2S_DMACmd+0xb8>)
 80072ac:	f240 31da 	movw	r1, #986	; 0x3da
 80072b0:	f7fb fdca 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 80072b4:	887a      	ldrh	r2, [r7, #2]
 80072b6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <SPI_I2S_DMACmd+0x6a>
 80072c0:	887b      	ldrh	r3, [r7, #2]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <SPI_I2S_DMACmd+0x74>
 80072c6:	4813      	ldr	r0, [pc, #76]	; (8007314 <SPI_I2S_DMACmd+0xb8>)
 80072c8:	f240 31db 	movw	r1, #987	; 0x3db
 80072cc:	f7fb fdbc 	bl	8002e48 <assert_failed>

  if (NewState != DISABLE)
 80072d0:	787b      	ldrb	r3, [r7, #1]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	889b      	ldrh	r3, [r3, #4]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	887b      	ldrh	r3, [r7, #2]
 80072de:	4313      	orrs	r3, r2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	809a      	strh	r2, [r3, #4]
 80072e6:	e009      	b.n	80072fc <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	889b      	ldrh	r3, [r3, #4]
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	887b      	ldrh	r3, [r7, #2]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	4013      	ands	r3, r2
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	809a      	strh	r2, [r3, #4]
  }
}
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40013000 	.word	0x40013000
 8007308:	40003800 	.word	0x40003800
 800730c:	40003c00 	.word	0x40003c00
 8007310:	40003400 	.word	0x40003400
 8007314:	08008644 	.word	0x08008644

08007318 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <SPI_I2S_GetFlagStatus+0xa8>)
 800732c:	429a      	cmp	r2, r3
 800732e:	d014      	beq.n	800735a <SPI_I2S_GetFlagStatus+0x42>
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <SPI_I2S_GetFlagStatus+0xac>)
 8007334:	429a      	cmp	r2, r3
 8007336:	d010      	beq.n	800735a <SPI_I2S_GetFlagStatus+0x42>
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4b23      	ldr	r3, [pc, #140]	; (80073c8 <SPI_I2S_GetFlagStatus+0xb0>)
 800733c:	429a      	cmp	r2, r3
 800733e:	d00c      	beq.n	800735a <SPI_I2S_GetFlagStatus+0x42>
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	4b22      	ldr	r3, [pc, #136]	; (80073cc <SPI_I2S_GetFlagStatus+0xb4>)
 8007344:	429a      	cmp	r2, r3
 8007346:	d008      	beq.n	800735a <SPI_I2S_GetFlagStatus+0x42>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800734e:	d004      	beq.n	800735a <SPI_I2S_GetFlagStatus+0x42>
 8007350:	481f      	ldr	r0, [pc, #124]	; (80073d0 <SPI_I2S_GetFlagStatus+0xb8>)
 8007352:	f240 4173 	movw	r1, #1139	; 0x473
 8007356:	f7fb fd77 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 800735a:	887b      	ldrh	r3, [r7, #2]
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d01d      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 8007360:	887b      	ldrh	r3, [r7, #2]
 8007362:	2b40      	cmp	r3, #64	; 0x40
 8007364:	d01a      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 8007366:	887b      	ldrh	r3, [r7, #2]
 8007368:	2b20      	cmp	r3, #32
 800736a:	d017      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 800736c:	887b      	ldrh	r3, [r7, #2]
 800736e:	2b10      	cmp	r3, #16
 8007370:	d014      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 8007372:	887b      	ldrh	r3, [r7, #2]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d011      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 8007378:	887b      	ldrh	r3, [r7, #2]
 800737a:	2b04      	cmp	r3, #4
 800737c:	d00e      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 800737e:	887b      	ldrh	r3, [r7, #2]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d00b      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 8007384:	887b      	ldrh	r3, [r7, #2]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d008      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 800738a:	887b      	ldrh	r3, [r7, #2]
 800738c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007390:	d004      	beq.n	800739c <SPI_I2S_GetFlagStatus+0x84>
 8007392:	480f      	ldr	r0, [pc, #60]	; (80073d0 <SPI_I2S_GetFlagStatus+0xb8>)
 8007394:	f240 4174 	movw	r1, #1140	; 0x474
 8007398:	f7fb fd56 	bl	8002e48 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	891b      	ldrh	r3, [r3, #8]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	887b      	ldrh	r3, [r7, #2]
 80073a4:	4013      	ands	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e001      	b.n	80073b6 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40013000 	.word	0x40013000
 80073c4:	40003800 	.word	0x40003800
 80073c8:	40003c00 	.word	0x40003c00
 80073cc:	40003400 	.word	0x40003400
 80073d0:	08008644 	.word	0x08008644

080073d4 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	4b14      	ldr	r3, [pc, #80]	; (8007434 <SPI_I2S_ClearFlag+0x60>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d014      	beq.n	8007412 <SPI_I2S_ClearFlag+0x3e>
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4b13      	ldr	r3, [pc, #76]	; (8007438 <SPI_I2S_ClearFlag+0x64>)
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d010      	beq.n	8007412 <SPI_I2S_ClearFlag+0x3e>
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <SPI_I2S_ClearFlag+0x68>)
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d00c      	beq.n	8007412 <SPI_I2S_ClearFlag+0x3e>
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4b11      	ldr	r3, [pc, #68]	; (8007440 <SPI_I2S_ClearFlag+0x6c>)
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d008      	beq.n	8007412 <SPI_I2S_ClearFlag+0x3e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8007406:	d004      	beq.n	8007412 <SPI_I2S_ClearFlag+0x3e>
 8007408:	480e      	ldr	r0, [pc, #56]	; (8007444 <SPI_I2S_ClearFlag+0x70>)
 800740a:	f240 419b 	movw	r1, #1179	; 0x49b
 800740e:	f7fb fd1b 	bl	8002e48 <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 8007412:	887b      	ldrh	r3, [r7, #2]
 8007414:	2b10      	cmp	r3, #16
 8007416:	d004      	beq.n	8007422 <SPI_I2S_ClearFlag+0x4e>
 8007418:	480a      	ldr	r0, [pc, #40]	; (8007444 <SPI_I2S_ClearFlag+0x70>)
 800741a:	f240 419c 	movw	r1, #1180	; 0x49c
 800741e:	f7fb fd13 	bl	8002e48 <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	43db      	mvns	r3, r3
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	811a      	strh	r2, [r3, #8]
}
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40013000 	.word	0x40013000
 8007438:	40003800 	.word	0x40003800
 800743c:	40003c00 	.word	0x40003c00
 8007440:	40003400 	.word	0x40003400
 8007444:	08008644 	.word	0x08008644

08007448 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	71fa      	strb	r2, [r7, #7]
 8007454:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01b      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d018      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d015      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d012      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	2b04      	cmp	r3, #4
 8007476:	d00f      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b05      	cmp	r3, #5
 800747c:	d00c      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	2b06      	cmp	r3, #6
 8007482:	d009      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	2b07      	cmp	r3, #7
 8007488:	d006      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b08      	cmp	r3, #8
 800748e:	d003      	beq.n	8007498 <SYSCFG_EXTILineConfig+0x50>
 8007490:	4834      	ldr	r0, [pc, #208]	; (8007564 <SYSCFG_EXTILineConfig+0x11c>)
 8007492:	217c      	movs	r1, #124	; 0x7c
 8007494:	f7fb fcd8 	bl	8002e48 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8007498:	79bb      	ldrb	r3, [r7, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d030      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 800749e:	79bb      	ldrb	r3, [r7, #6]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d02d      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074a4:	79bb      	ldrb	r3, [r7, #6]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d02a      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074aa:	79bb      	ldrb	r3, [r7, #6]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d027      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074b0:	79bb      	ldrb	r3, [r7, #6]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d024      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074b6:	79bb      	ldrb	r3, [r7, #6]
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	d021      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074bc:	79bb      	ldrb	r3, [r7, #6]
 80074be:	2b06      	cmp	r3, #6
 80074c0:	d01e      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074c2:	79bb      	ldrb	r3, [r7, #6]
 80074c4:	2b07      	cmp	r3, #7
 80074c6:	d01b      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074c8:	79bb      	ldrb	r3, [r7, #6]
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d018      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074ce:	79bb      	ldrb	r3, [r7, #6]
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	d015      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074d4:	79bb      	ldrb	r3, [r7, #6]
 80074d6:	2b0a      	cmp	r3, #10
 80074d8:	d012      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074da:	79bb      	ldrb	r3, [r7, #6]
 80074dc:	2b0b      	cmp	r3, #11
 80074de:	d00f      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074e0:	79bb      	ldrb	r3, [r7, #6]
 80074e2:	2b0c      	cmp	r3, #12
 80074e4:	d00c      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074e6:	79bb      	ldrb	r3, [r7, #6]
 80074e8:	2b0d      	cmp	r3, #13
 80074ea:	d009      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074ec:	79bb      	ldrb	r3, [r7, #6]
 80074ee:	2b0e      	cmp	r3, #14
 80074f0:	d006      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074f2:	79bb      	ldrb	r3, [r7, #6]
 80074f4:	2b0f      	cmp	r3, #15
 80074f6:	d003      	beq.n	8007500 <SYSCFG_EXTILineConfig+0xb8>
 80074f8:	481a      	ldr	r0, [pc, #104]	; (8007564 <SYSCFG_EXTILineConfig+0x11c>)
 80074fa:	217d      	movs	r1, #125	; 0x7d
 80074fc:	f7fb fca4 	bl	8002e48 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8007500:	79bb      	ldrb	r3, [r7, #6]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	220f      	movs	r2, #15
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8007510:	4b15      	ldr	r3, [pc, #84]	; (8007568 <SYSCFG_EXTILineConfig+0x120>)
 8007512:	79ba      	ldrb	r2, [r7, #6]
 8007514:	0892      	lsrs	r2, r2, #2
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	4913      	ldr	r1, [pc, #76]	; (8007568 <SYSCFG_EXTILineConfig+0x120>)
 800751a:	79b8      	ldrb	r0, [r7, #6]
 800751c:	0880      	lsrs	r0, r0, #2
 800751e:	b2c0      	uxtb	r0, r0
 8007520:	3002      	adds	r0, #2
 8007522:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	43c9      	mvns	r1, r1
 800752a:	4001      	ands	r1, r0
 800752c:	3202      	adds	r2, #2
 800752e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <SYSCFG_EXTILineConfig+0x120>)
 8007534:	79ba      	ldrb	r2, [r7, #6]
 8007536:	0892      	lsrs	r2, r2, #2
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	490b      	ldr	r1, [pc, #44]	; (8007568 <SYSCFG_EXTILineConfig+0x120>)
 800753c:	79b8      	ldrb	r0, [r7, #6]
 800753e:	0880      	lsrs	r0, r0, #2
 8007540:	b2c0      	uxtb	r0, r0
 8007542:	3002      	adds	r0, #2
 8007544:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007548:	79fc      	ldrb	r4, [r7, #7]
 800754a:	79b9      	ldrb	r1, [r7, #6]
 800754c:	f001 0103 	and.w	r1, r1, #3
 8007550:	0089      	lsls	r1, r1, #2
 8007552:	fa04 f101 	lsl.w	r1, r4, r1
 8007556:	4301      	orrs	r1, r0
 8007558:	3202      	adds	r2, #2
 800755a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	bd90      	pop	{r4, r7, pc}
 8007564:	08008694 	.word	0x08008694
 8007568:	40013800 	.word	0x40013800

0800756c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8007576:	2300      	movs	r3, #0
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
 800757a:	2300      	movs	r3, #0
 800757c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8007582:	2300      	movs	r3, #0
 8007584:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4b97      	ldr	r3, [pc, #604]	; (80077e8 <USART_Init+0x27c>)
 800758a:	429a      	cmp	r2, r3
 800758c:	d017      	beq.n	80075be <USART_Init+0x52>
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	4b96      	ldr	r3, [pc, #600]	; (80077ec <USART_Init+0x280>)
 8007592:	429a      	cmp	r2, r3
 8007594:	d013      	beq.n	80075be <USART_Init+0x52>
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4b95      	ldr	r3, [pc, #596]	; (80077f0 <USART_Init+0x284>)
 800759a:	429a      	cmp	r2, r3
 800759c:	d00f      	beq.n	80075be <USART_Init+0x52>
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4b94      	ldr	r3, [pc, #592]	; (80077f4 <USART_Init+0x288>)
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d00b      	beq.n	80075be <USART_Init+0x52>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	4b93      	ldr	r3, [pc, #588]	; (80077f8 <USART_Init+0x28c>)
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d007      	beq.n	80075be <USART_Init+0x52>
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	4b92      	ldr	r3, [pc, #584]	; (80077fc <USART_Init+0x290>)
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d003      	beq.n	80075be <USART_Init+0x52>
 80075b6:	4892      	ldr	r0, [pc, #584]	; (8007800 <USART_Init+0x294>)
 80075b8:	21eb      	movs	r1, #235	; 0xeb
 80075ba:	f7fb fc45 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <USART_Init+0x64>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4b8e      	ldr	r3, [pc, #568]	; (8007804 <USART_Init+0x298>)
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d903      	bls.n	80075d8 <USART_Init+0x6c>
 80075d0:	488b      	ldr	r0, [pc, #556]	; (8007800 <USART_Init+0x294>)
 80075d2:	21ec      	movs	r1, #236	; 0xec
 80075d4:	f7fb fc38 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	889b      	ldrh	r3, [r3, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d008      	beq.n	80075f2 <USART_Init+0x86>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	889b      	ldrh	r3, [r3, #4]
 80075e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e8:	d003      	beq.n	80075f2 <USART_Init+0x86>
 80075ea:	4885      	ldr	r0, [pc, #532]	; (8007800 <USART_Init+0x294>)
 80075ec:	21ed      	movs	r1, #237	; 0xed
 80075ee:	f7fb fc2b 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	88db      	ldrh	r3, [r3, #6]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d012      	beq.n	8007620 <USART_Init+0xb4>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	88db      	ldrh	r3, [r3, #6]
 80075fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007602:	d00d      	beq.n	8007620 <USART_Init+0xb4>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	88db      	ldrh	r3, [r3, #6]
 8007608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800760c:	d008      	beq.n	8007620 <USART_Init+0xb4>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	88db      	ldrh	r3, [r3, #6]
 8007612:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007616:	d003      	beq.n	8007620 <USART_Init+0xb4>
 8007618:	4879      	ldr	r0, [pc, #484]	; (8007800 <USART_Init+0x294>)
 800761a:	21ee      	movs	r1, #238	; 0xee
 800761c:	f7fb fc14 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	891b      	ldrh	r3, [r3, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <USART_Init+0xd8>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	891b      	ldrh	r3, [r3, #8]
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007630:	d008      	beq.n	8007644 <USART_Init+0xd8>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	891b      	ldrh	r3, [r3, #8]
 8007636:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800763a:	d003      	beq.n	8007644 <USART_Init+0xd8>
 800763c:	4870      	ldr	r0, [pc, #448]	; (8007800 <USART_Init+0x294>)
 800763e:	21ef      	movs	r1, #239	; 0xef
 8007640:	f7fb fc02 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	895b      	ldrh	r3, [r3, #10]
 8007648:	461a      	mov	r2, r3
 800764a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800764e:	4013      	ands	r3, r2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <USART_Init+0xf0>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	895b      	ldrh	r3, [r3, #10]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <USART_Init+0xf8>
 800765c:	4868      	ldr	r0, [pc, #416]	; (8007800 <USART_Init+0x294>)
 800765e:	21f0      	movs	r1, #240	; 0xf0
 8007660:	f7fb fbf2 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	899b      	ldrh	r3, [r3, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d012      	beq.n	8007692 <USART_Init+0x126>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	899b      	ldrh	r3, [r3, #12]
 8007670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007674:	d00d      	beq.n	8007692 <USART_Init+0x126>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	899b      	ldrh	r3, [r3, #12]
 800767a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800767e:	d008      	beq.n	8007692 <USART_Init+0x126>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	899b      	ldrh	r3, [r3, #12]
 8007684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007688:	d003      	beq.n	8007692 <USART_Init+0x126>
 800768a:	485d      	ldr	r0, [pc, #372]	; (8007800 <USART_Init+0x294>)
 800768c:	21f1      	movs	r1, #241	; 0xf1
 800768e:	f7fb fbdb 	bl	8002e48 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	899b      	ldrh	r3, [r3, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d013      	beq.n	80076c2 <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	4b52      	ldr	r3, [pc, #328]	; (80077e8 <USART_Init+0x27c>)
 800769e:	429a      	cmp	r2, r3
 80076a0:	d00f      	beq.n	80076c2 <USART_Init+0x156>
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	4b51      	ldr	r3, [pc, #324]	; (80077ec <USART_Init+0x280>)
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d00b      	beq.n	80076c2 <USART_Init+0x156>
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4b50      	ldr	r3, [pc, #320]	; (80077f0 <USART_Init+0x284>)
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d007      	beq.n	80076c2 <USART_Init+0x156>
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	4b51      	ldr	r3, [pc, #324]	; (80077fc <USART_Init+0x290>)
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d003      	beq.n	80076c2 <USART_Init+0x156>
 80076ba:	4851      	ldr	r0, [pc, #324]	; (8007800 <USART_Init+0x294>)
 80076bc:	21f6      	movs	r1, #246	; 0xf6
 80076be:	f7fb fbc3 	bl	8002e48 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	8a1b      	ldrh	r3, [r3, #16]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	88db      	ldrh	r3, [r3, #6]
 80076d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d8:	4313      	orrs	r3, r2
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	899b      	ldrh	r3, [r3, #12]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80076f2:	f023 030c 	bic.w	r3, r3, #12
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	889a      	ldrh	r2, [r3, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	891b      	ldrh	r3, [r3, #8]
 8007700:	4313      	orrs	r3, r2
 8007702:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007708:	4313      	orrs	r3, r2
 800770a:	b29b      	uxth	r3, r3
 800770c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770e:	4313      	orrs	r3, r2
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8a9b      	ldrh	r3, [r3, #20]
 800771e:	b29b      	uxth	r3, r3
 8007720:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007728:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	899b      	ldrh	r3, [r3, #12]
 800772e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007730:	4313      	orrs	r3, r2
 8007732:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800773c:	f107 0308 	add.w	r3, r7, #8
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fb3d 	bl	8006dc0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <USART_Init+0x27c>)
 800774a:	429a      	cmp	r2, r3
 800774c:	d003      	beq.n	8007756 <USART_Init+0x1ea>
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	4b2a      	ldr	r3, [pc, #168]	; (80077fc <USART_Init+0x290>)
 8007752:	429a      	cmp	r2, r3
 8007754:	d102      	bne.n	800775c <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	623b      	str	r3, [r7, #32]
 800775a:	e001      	b.n	8007760 <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	899b      	ldrh	r3, [r3, #12]
 8007764:	b29b      	uxth	r3, r3
 8007766:	b29b      	uxth	r3, r3
 8007768:	b21b      	sxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	da0c      	bge.n	8007788 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009a      	lsls	r2, r3, #2
 8007778:	441a      	add	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	fbb2 f3f3 	udiv	r3, r2, r3
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	e00b      	b.n	80077a0 <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8007788:	6a3a      	ldr	r2, [r7, #32]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009a      	lsls	r2, r3, #2
 8007792:	441a      	add	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	fbb2 f3f3 	udiv	r3, r2, r3
 800779e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	4b19      	ldr	r3, [pc, #100]	; (8007808 <USART_Init+0x29c>)
 80077a4:	fba3 1302 	umull	r1, r3, r3, r2
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	2264      	movs	r2, #100	; 0x64
 80077b4:	fb02 f303 	mul.w	r3, r2, r3
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	899b      	ldrh	r3, [r3, #12]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da1f      	bge.n	800780c <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077d4:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <USART_Init+0x29c>)
 80077d6:	fba3 1302 	umull	r1, r3, r3, r2
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	4313      	orrs	r3, r2
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
 80077e6:	e01e      	b.n	8007826 <USART_Init+0x2ba>
 80077e8:	40011000 	.word	0x40011000
 80077ec:	40004400 	.word	0x40004400
 80077f0:	40004800 	.word	0x40004800
 80077f4:	40004c00 	.word	0x40004c00
 80077f8:	40005000 	.word	0x40005000
 80077fc:	40011400 	.word	0x40011400
 8007800:	080086e8 	.word	0x080086e8
 8007804:	007270e0 	.word	0x007270e0
 8007808:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007814:	4b07      	ldr	r3, [pc, #28]	; (8007834 <USART_Init+0x2c8>)
 8007816:	fba3 1302 	umull	r1, r3, r3, r2
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	4313      	orrs	r3, r2
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	811a      	strh	r2, [r3, #8]
}
 800782e:	3728      	adds	r7, #40	; 0x28
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	51eb851f 	.word	0x51eb851f

08007838 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	4b1f      	ldr	r3, [pc, #124]	; (80078c4 <USART_Cmd+0x8c>)
 8007848:	429a      	cmp	r2, r3
 800784a:	d018      	beq.n	800787e <USART_Cmd+0x46>
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	4b1e      	ldr	r3, [pc, #120]	; (80078c8 <USART_Cmd+0x90>)
 8007850:	429a      	cmp	r2, r3
 8007852:	d014      	beq.n	800787e <USART_Cmd+0x46>
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4b1d      	ldr	r3, [pc, #116]	; (80078cc <USART_Cmd+0x94>)
 8007858:	429a      	cmp	r2, r3
 800785a:	d010      	beq.n	800787e <USART_Cmd+0x46>
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4b1c      	ldr	r3, [pc, #112]	; (80078d0 <USART_Cmd+0x98>)
 8007860:	429a      	cmp	r2, r3
 8007862:	d00c      	beq.n	800787e <USART_Cmd+0x46>
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <USART_Cmd+0x9c>)
 8007868:	429a      	cmp	r2, r3
 800786a:	d008      	beq.n	800787e <USART_Cmd+0x46>
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <USART_Cmd+0xa0>)
 8007870:	429a      	cmp	r2, r3
 8007872:	d004      	beq.n	800787e <USART_Cmd+0x46>
 8007874:	4819      	ldr	r0, [pc, #100]	; (80078dc <USART_Cmd+0xa4>)
 8007876:	f240 119b 	movw	r1, #411	; 0x19b
 800787a:	f7fb fae5 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <USART_Cmd+0x5c>
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d004      	beq.n	8007894 <USART_Cmd+0x5c>
 800788a:	4814      	ldr	r0, [pc, #80]	; (80078dc <USART_Cmd+0xa4>)
 800788c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8007890:	f7fb fada 	bl	8002e48 <assert_failed>
  
  if (NewState != DISABLE)
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	899b      	ldrh	r3, [r3, #12]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	819a      	strh	r2, [r3, #12]
 80078aa:	e007      	b.n	80078bc <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	899b      	ldrh	r3, [r3, #12]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	819a      	strh	r2, [r3, #12]
  }
}
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40011000 	.word	0x40011000
 80078c8:	40004400 	.word	0x40004400
 80078cc:	40004800 	.word	0x40004800
 80078d0:	40004c00 	.word	0x40004c00
 80078d4:	40005000 	.word	0x40005000
 80078d8:	40011400 	.word	0x40011400
 80078dc:	080086e8 	.word	0x080086e8

080078e0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	460a      	mov	r2, r1
 80078ec:	807a      	strh	r2, [r7, #2]
 80078ee:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80078f0:	2300      	movs	r3, #0
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	2300      	movs	r3, #0
 80078fa:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4b4f      	ldr	r3, [pc, #316]	; (8007a40 <USART_ITConfig+0x160>)
 8007904:	429a      	cmp	r2, r3
 8007906:	d018      	beq.n	800793a <USART_ITConfig+0x5a>
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4b4e      	ldr	r3, [pc, #312]	; (8007a44 <USART_ITConfig+0x164>)
 800790c:	429a      	cmp	r2, r3
 800790e:	d014      	beq.n	800793a <USART_ITConfig+0x5a>
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	4b4d      	ldr	r3, [pc, #308]	; (8007a48 <USART_ITConfig+0x168>)
 8007914:	429a      	cmp	r2, r3
 8007916:	d010      	beq.n	800793a <USART_ITConfig+0x5a>
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4b4c      	ldr	r3, [pc, #304]	; (8007a4c <USART_ITConfig+0x16c>)
 800791c:	429a      	cmp	r2, r3
 800791e:	d00c      	beq.n	800793a <USART_ITConfig+0x5a>
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4b4b      	ldr	r3, [pc, #300]	; (8007a50 <USART_ITConfig+0x170>)
 8007924:	429a      	cmp	r2, r3
 8007926:	d008      	beq.n	800793a <USART_ITConfig+0x5a>
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	4b4a      	ldr	r3, [pc, #296]	; (8007a54 <USART_ITConfig+0x174>)
 800792c:	429a      	cmp	r2, r3
 800792e:	d004      	beq.n	800793a <USART_ITConfig+0x5a>
 8007930:	4849      	ldr	r0, [pc, #292]	; (8007a58 <USART_ITConfig+0x178>)
 8007932:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8007936:	f7fb fa87 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 800793a:	887b      	ldrh	r3, [r7, #2]
 800793c:	2b28      	cmp	r3, #40	; 0x28
 800793e:	d025      	beq.n	800798c <USART_ITConfig+0xac>
 8007940:	887a      	ldrh	r2, [r7, #2]
 8007942:	f240 7327 	movw	r3, #1831	; 0x727
 8007946:	429a      	cmp	r2, r3
 8007948:	d020      	beq.n	800798c <USART_ITConfig+0xac>
 800794a:	887a      	ldrh	r2, [r7, #2]
 800794c:	f240 6326 	movw	r3, #1574	; 0x626
 8007950:	429a      	cmp	r2, r3
 8007952:	d01b      	beq.n	800798c <USART_ITConfig+0xac>
 8007954:	887a      	ldrh	r2, [r7, #2]
 8007956:	f240 5325 	movw	r3, #1317	; 0x525
 800795a:	429a      	cmp	r2, r3
 800795c:	d016      	beq.n	800798c <USART_ITConfig+0xac>
 800795e:	887a      	ldrh	r2, [r7, #2]
 8007960:	f240 4324 	movw	r3, #1060	; 0x424
 8007964:	429a      	cmp	r2, r3
 8007966:	d011      	beq.n	800798c <USART_ITConfig+0xac>
 8007968:	887a      	ldrh	r2, [r7, #2]
 800796a:	f640 0346 	movw	r3, #2118	; 0x846
 800796e:	429a      	cmp	r2, r3
 8007970:	d00c      	beq.n	800798c <USART_ITConfig+0xac>
 8007972:	887a      	ldrh	r2, [r7, #2]
 8007974:	f640 136a 	movw	r3, #2410	; 0x96a
 8007978:	429a      	cmp	r2, r3
 800797a:	d007      	beq.n	800798c <USART_ITConfig+0xac>
 800797c:	887b      	ldrh	r3, [r7, #2]
 800797e:	2b60      	cmp	r3, #96	; 0x60
 8007980:	d004      	beq.n	800798c <USART_ITConfig+0xac>
 8007982:	4835      	ldr	r0, [pc, #212]	; (8007a58 <USART_ITConfig+0x178>)
 8007984:	f240 41be 	movw	r1, #1214	; 0x4be
 8007988:	f7fb fa5e 	bl	8002e48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800798c:	787b      	ldrb	r3, [r7, #1]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <USART_ITConfig+0xc2>
 8007992:	787b      	ldrb	r3, [r7, #1]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d004      	beq.n	80079a2 <USART_ITConfig+0xc2>
 8007998:	482f      	ldr	r0, [pc, #188]	; (8007a58 <USART_ITConfig+0x178>)
 800799a:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800799e:	f7fb fa53 	bl	8002e48 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 80079a2:	887a      	ldrh	r2, [r7, #2]
 80079a4:	f640 136a 	movw	r3, #2410	; 0x96a
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d114      	bne.n	80079d6 <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4b24      	ldr	r3, [pc, #144]	; (8007a40 <USART_ITConfig+0x160>)
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d010      	beq.n	80079d6 <USART_ITConfig+0xf6>
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4b23      	ldr	r3, [pc, #140]	; (8007a44 <USART_ITConfig+0x164>)
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d00c      	beq.n	80079d6 <USART_ITConfig+0xf6>
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <USART_ITConfig+0x168>)
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d008      	beq.n	80079d6 <USART_ITConfig+0xf6>
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	4b23      	ldr	r3, [pc, #140]	; (8007a54 <USART_ITConfig+0x174>)
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d004      	beq.n	80079d6 <USART_ITConfig+0xf6>
 80079cc:	4822      	ldr	r0, [pc, #136]	; (8007a58 <USART_ITConfig+0x178>)
 80079ce:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079d2:	f7fb fa39 	bl	8002e48 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80079da:	887b      	ldrh	r3, [r7, #2]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80079e4:	887b      	ldrh	r3, [r7, #2]
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d103      	bne.n	8007a04 <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	330c      	adds	r3, #12
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	e009      	b.n	8007a18 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d103      	bne.n	8007a12 <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	3310      	adds	r3, #16
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	e002      	b.n	8007a18 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3314      	adds	r3, #20
 8007a16:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8007a18:	787b      	ldrb	r3, [r7, #1]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	6811      	ldr	r1, [r2, #0]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e006      	b.n	8007a3a <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	6811      	ldr	r1, [r2, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	43d2      	mvns	r2, r2
 8007a36:	400a      	ands	r2, r1
 8007a38:	601a      	str	r2, [r3, #0]
  }
}
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40011000 	.word	0x40011000
 8007a44:	40004400 	.word	0x40004400
 8007a48:	40004800 	.word	0x40004800
 8007a4c:	40004c00 	.word	0x40004c00
 8007a50:	40005000 	.word	0x40005000
 8007a54:	40011400 	.word	0x40011400
 8007a58:	080086e8 	.word	0x080086e8

08007a5c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	2300      	movs	r3, #0
 8007a72:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8007a74:	2300      	movs	r3, #0
 8007a76:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	4b5c      	ldr	r3, [pc, #368]	; (8007bec <USART_GetITStatus+0x190>)
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d018      	beq.n	8007ab2 <USART_GetITStatus+0x56>
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4b5b      	ldr	r3, [pc, #364]	; (8007bf0 <USART_GetITStatus+0x194>)
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d014      	beq.n	8007ab2 <USART_GetITStatus+0x56>
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4b5a      	ldr	r3, [pc, #360]	; (8007bf4 <USART_GetITStatus+0x198>)
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d010      	beq.n	8007ab2 <USART_GetITStatus+0x56>
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4b59      	ldr	r3, [pc, #356]	; (8007bf8 <USART_GetITStatus+0x19c>)
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d00c      	beq.n	8007ab2 <USART_GetITStatus+0x56>
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4b58      	ldr	r3, [pc, #352]	; (8007bfc <USART_GetITStatus+0x1a0>)
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d008      	beq.n	8007ab2 <USART_GetITStatus+0x56>
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4b57      	ldr	r3, [pc, #348]	; (8007c00 <USART_GetITStatus+0x1a4>)
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d004      	beq.n	8007ab2 <USART_GetITStatus+0x56>
 8007aa8:	4856      	ldr	r0, [pc, #344]	; (8007c04 <USART_GetITStatus+0x1a8>)
 8007aaa:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8007aae:	f7fb f9cb 	bl	8002e48 <assert_failed>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	2b28      	cmp	r3, #40	; 0x28
 8007ab6:	d037      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007ab8:	887a      	ldrh	r2, [r7, #2]
 8007aba:	f240 7327 	movw	r3, #1831	; 0x727
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d032      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007ac2:	887a      	ldrh	r2, [r7, #2]
 8007ac4:	f240 6326 	movw	r3, #1574	; 0x626
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d02d      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007acc:	887a      	ldrh	r2, [r7, #2]
 8007ace:	f240 5325 	movw	r3, #1317	; 0x525
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d028      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007ad6:	887a      	ldrh	r2, [r7, #2]
 8007ad8:	f240 4324 	movw	r3, #1060	; 0x424
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d023      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007ae0:	887a      	ldrh	r2, [r7, #2]
 8007ae2:	f640 0346 	movw	r3, #2118	; 0x846
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d01e      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007aea:	887a      	ldrh	r2, [r7, #2]
 8007aec:	f640 136a 	movw	r3, #2410	; 0x96a
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d019      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007af4:	887b      	ldrh	r3, [r7, #2]
 8007af6:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007afa:	d015      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007afc:	887a      	ldrh	r2, [r7, #2]
 8007afe:	f240 3325 	movw	r3, #805	; 0x325
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d010      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007b06:	887b      	ldrh	r3, [r7, #2]
 8007b08:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007b0c:	d00c      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8007b14:	d008      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007b16:	887b      	ldrh	r3, [r7, #2]
 8007b18:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8007b1c:	d004      	beq.n	8007b28 <USART_GetITStatus+0xcc>
 8007b1e:	4839      	ldr	r0, [pc, #228]	; (8007c04 <USART_GetITStatus+0x1a8>)
 8007b20:	f240 5151 	movw	r1, #1361	; 0x551
 8007b24:	f7fb f990 	bl	8002e48 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 8007b28:	887a      	ldrh	r2, [r7, #2]
 8007b2a:	f640 136a 	movw	r3, #2410	; 0x96a
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d114      	bne.n	8007b5c <USART_GetITStatus+0x100>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4b2d      	ldr	r3, [pc, #180]	; (8007bec <USART_GetITStatus+0x190>)
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d010      	beq.n	8007b5c <USART_GetITStatus+0x100>
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	4b2c      	ldr	r3, [pc, #176]	; (8007bf0 <USART_GetITStatus+0x194>)
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d00c      	beq.n	8007b5c <USART_GetITStatus+0x100>
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <USART_GetITStatus+0x198>)
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d008      	beq.n	8007b5c <USART_GetITStatus+0x100>
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4b2c      	ldr	r3, [pc, #176]	; (8007c00 <USART_GetITStatus+0x1a4>)
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d004      	beq.n	8007b5c <USART_GetITStatus+0x100>
 8007b52:	482c      	ldr	r0, [pc, #176]	; (8007c04 <USART_GetITStatus+0x1a8>)
 8007b54:	f240 5156 	movw	r1, #1366	; 0x556
 8007b58:	f7fb f976 	bl	8002e48 <assert_failed>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007b5c:	887b      	ldrh	r3, [r7, #2]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8007b66:	887b      	ldrh	r3, [r7, #2]
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2201      	movs	r2, #1
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d106      	bne.n	8007b8c <USART_GetITStatus+0x130>
  {
    itmask &= USARTx->CR1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	899b      	ldrh	r3, [r3, #12]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4013      	ands	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	e00f      	b.n	8007bac <USART_GetITStatus+0x150>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d106      	bne.n	8007ba0 <USART_GetITStatus+0x144>
  {
    itmask &= USARTx->CR2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8a1b      	ldrh	r3, [r3, #16]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	e005      	b.n	8007bac <USART_GetITStatus+0x150>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8a9b      	ldrh	r3, [r3, #20]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbc:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <USART_GetITStatus+0x180>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <USART_GetITStatus+0x180>
  {
    bitstatus = SET;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	74fb      	strb	r3, [r7, #19]
 8007bda:	e001      	b.n	8007be0 <USART_GetITStatus+0x184>
  }
  else
  {
    bitstatus = RESET;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8007be0:	7cfb      	ldrb	r3, [r7, #19]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40011000 	.word	0x40011000
 8007bf0:	40004400 	.word	0x40004400
 8007bf4:	40004800 	.word	0x40004800
 8007bf8:	40004c00 	.word	0x40004c00
 8007bfc:	40005000 	.word	0x40005000
 8007c00:	40011400 	.word	0x40011400
 8007c04:	080086e8 	.word	0x080086e8

08007c08 <atoi>:
 8007c08:	2100      	movs	r1, #0
 8007c0a:	220a      	movs	r2, #10
 8007c0c:	f000 ba4a 	b.w	80080a4 <strtol>

08007c10 <__libc_init_array>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	4e0f      	ldr	r6, [pc, #60]	; (8007c50 <__libc_init_array+0x40>)
 8007c14:	4d0f      	ldr	r5, [pc, #60]	; (8007c54 <__libc_init_array+0x44>)
 8007c16:	1b76      	subs	r6, r6, r5
 8007c18:	10b6      	asrs	r6, r6, #2
 8007c1a:	d007      	beq.n	8007c2c <__libc_init_array+0x1c>
 8007c1c:	3d04      	subs	r5, #4
 8007c1e:	2400      	movs	r4, #0
 8007c20:	3401      	adds	r4, #1
 8007c22:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007c26:	4798      	blx	r3
 8007c28:	42a6      	cmp	r6, r4
 8007c2a:	d1f9      	bne.n	8007c20 <__libc_init_array+0x10>
 8007c2c:	4e0a      	ldr	r6, [pc, #40]	; (8007c58 <__libc_init_array+0x48>)
 8007c2e:	4d0b      	ldr	r5, [pc, #44]	; (8007c5c <__libc_init_array+0x4c>)
 8007c30:	1b76      	subs	r6, r6, r5
 8007c32:	f000 ff23 	bl	8008a7c <_init>
 8007c36:	10b6      	asrs	r6, r6, #2
 8007c38:	d008      	beq.n	8007c4c <__libc_init_array+0x3c>
 8007c3a:	3d04      	subs	r5, #4
 8007c3c:	2400      	movs	r4, #0
 8007c3e:	3401      	adds	r4, #1
 8007c40:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007c44:	4798      	blx	r3
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d1f9      	bne.n	8007c3e <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
 8007c4e:	bf00      	nop
 8007c50:	08008a94 	.word	0x08008a94
 8007c54:	08008a94 	.word	0x08008a94
 8007c58:	08008a9c 	.word	0x08008a9c
 8007c5c:	08008a94 	.word	0x08008a94

08007c60 <memcmp>:
 8007c60:	2a03      	cmp	r2, #3
 8007c62:	b470      	push	{r4, r5, r6}
 8007c64:	d928      	bls.n	8007cb8 <memcmp+0x58>
 8007c66:	ea40 0301 	orr.w	r3, r0, r1
 8007c6a:	079b      	lsls	r3, r3, #30
 8007c6c:	d013      	beq.n	8007c96 <memcmp+0x36>
 8007c6e:	7805      	ldrb	r5, [r0, #0]
 8007c70:	780c      	ldrb	r4, [r1, #0]
 8007c72:	42a5      	cmp	r5, r4
 8007c74:	d124      	bne.n	8007cc0 <memcmp+0x60>
 8007c76:	3a01      	subs	r2, #1
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e005      	b.n	8007c88 <memcmp+0x28>
 8007c7c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007c80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c84:	42a5      	cmp	r5, r4
 8007c86:	d11b      	bne.n	8007cc0 <memcmp+0x60>
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	f103 0301 	add.w	r3, r3, #1
 8007c8e:	d1f5      	bne.n	8007c7c <memcmp+0x1c>
 8007c90:	2000      	movs	r0, #0
 8007c92:	bc70      	pop	{r4, r5, r6}
 8007c94:	4770      	bx	lr
 8007c96:	460c      	mov	r4, r1
 8007c98:	4603      	mov	r3, r0
 8007c9a:	6825      	ldr	r5, [r4, #0]
 8007c9c:	681e      	ldr	r6, [r3, #0]
 8007c9e:	42ae      	cmp	r6, r5
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f104 0404 	add.w	r4, r4, #4
 8007ca8:	f103 0304 	add.w	r3, r3, #4
 8007cac:	d104      	bne.n	8007cb8 <memcmp+0x58>
 8007cae:	3a04      	subs	r2, #4
 8007cb0:	2a03      	cmp	r2, #3
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	d8f0      	bhi.n	8007c9a <memcmp+0x3a>
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	d1d8      	bne.n	8007c6e <memcmp+0xe>
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	e7e8      	b.n	8007c92 <memcmp+0x32>
 8007cc0:	1b28      	subs	r0, r5, r4
 8007cc2:	bc70      	pop	{r4, r5, r6}
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop

08007cc8 <memset>:
 8007cc8:	b4f0      	push	{r4, r5, r6, r7}
 8007cca:	0784      	lsls	r4, r0, #30
 8007ccc:	d043      	beq.n	8007d56 <memset+0x8e>
 8007cce:	1e54      	subs	r4, r2, #1
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	d03e      	beq.n	8007d52 <memset+0x8a>
 8007cd4:	b2cd      	uxtb	r5, r1
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	e003      	b.n	8007ce2 <memset+0x1a>
 8007cda:	1e62      	subs	r2, r4, #1
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	d038      	beq.n	8007d52 <memset+0x8a>
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	f803 5b01 	strb.w	r5, [r3], #1
 8007ce6:	079a      	lsls	r2, r3, #30
 8007ce8:	d1f7      	bne.n	8007cda <memset+0x12>
 8007cea:	2c03      	cmp	r4, #3
 8007cec:	d92a      	bls.n	8007d44 <memset+0x7c>
 8007cee:	b2cd      	uxtb	r5, r1
 8007cf0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007cf4:	2c0f      	cmp	r4, #15
 8007cf6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007cfa:	d915      	bls.n	8007d28 <memset+0x60>
 8007cfc:	f1a4 0710 	sub.w	r7, r4, #16
 8007d00:	093f      	lsrs	r7, r7, #4
 8007d02:	f103 0610 	add.w	r6, r3, #16
 8007d06:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	6015      	str	r5, [r2, #0]
 8007d0e:	6055      	str	r5, [r2, #4]
 8007d10:	6095      	str	r5, [r2, #8]
 8007d12:	60d5      	str	r5, [r2, #12]
 8007d14:	3210      	adds	r2, #16
 8007d16:	42b2      	cmp	r2, r6
 8007d18:	d1f8      	bne.n	8007d0c <memset+0x44>
 8007d1a:	f004 040f 	and.w	r4, r4, #15
 8007d1e:	3701      	adds	r7, #1
 8007d20:	2c03      	cmp	r4, #3
 8007d22:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8007d26:	d90d      	bls.n	8007d44 <memset+0x7c>
 8007d28:	461e      	mov	r6, r3
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	3a04      	subs	r2, #4
 8007d2e:	2a03      	cmp	r2, #3
 8007d30:	f846 5b04 	str.w	r5, [r6], #4
 8007d34:	d8fa      	bhi.n	8007d2c <memset+0x64>
 8007d36:	1f22      	subs	r2, r4, #4
 8007d38:	f022 0203 	bic.w	r2, r2, #3
 8007d3c:	3204      	adds	r2, #4
 8007d3e:	4413      	add	r3, r2
 8007d40:	f004 0403 	and.w	r4, r4, #3
 8007d44:	b12c      	cbz	r4, 8007d52 <memset+0x8a>
 8007d46:	b2c9      	uxtb	r1, r1
 8007d48:	441c      	add	r4, r3
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	42a3      	cmp	r3, r4
 8007d50:	d1fb      	bne.n	8007d4a <memset+0x82>
 8007d52:	bcf0      	pop	{r4, r5, r6, r7}
 8007d54:	4770      	bx	lr
 8007d56:	4614      	mov	r4, r2
 8007d58:	4603      	mov	r3, r0
 8007d5a:	e7c6      	b.n	8007cea <memset+0x22>

08007d5c <strcpy>:
 8007d5c:	ea80 0201 	eor.w	r2, r0, r1
 8007d60:	4684      	mov	ip, r0
 8007d62:	f012 0f03 	tst.w	r2, #3
 8007d66:	d14f      	bne.n	8007e08 <strcpy+0xac>
 8007d68:	f011 0f03 	tst.w	r1, #3
 8007d6c:	d132      	bne.n	8007dd4 <strcpy+0x78>
 8007d6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8007d72:	f011 0f04 	tst.w	r1, #4
 8007d76:	f851 3b04 	ldr.w	r3, [r1], #4
 8007d7a:	d00b      	beq.n	8007d94 <strcpy+0x38>
 8007d7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8007d80:	439a      	bics	r2, r3
 8007d82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8007d86:	bf04      	itt	eq
 8007d88:	f84c 3b04 	streq.w	r3, [ip], #4
 8007d8c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007d90:	d116      	bne.n	8007dc0 <strcpy+0x64>
 8007d92:	bf00      	nop
 8007d94:	f851 4b04 	ldr.w	r4, [r1], #4
 8007d98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8007d9c:	439a      	bics	r2, r3
 8007d9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8007da2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8007da6:	d10b      	bne.n	8007dc0 <strcpy+0x64>
 8007da8:	f84c 3b04 	str.w	r3, [ip], #4
 8007dac:	43a2      	bics	r2, r4
 8007dae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8007db2:	bf04      	itt	eq
 8007db4:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007db8:	f84c 4b04 	streq.w	r4, [ip], #4
 8007dbc:	d0ea      	beq.n	8007d94 <strcpy+0x38>
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	f80c 3b01 	strb.w	r3, [ip], #1
 8007dc4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007dc8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8007dcc:	d1f8      	bne.n	8007dc0 <strcpy+0x64>
 8007dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	f011 0f01 	tst.w	r1, #1
 8007dd8:	d006      	beq.n	8007de8 <strcpy+0x8c>
 8007dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dde:	f80c 2b01 	strb.w	r2, [ip], #1
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	bf08      	it	eq
 8007de6:	4770      	bxeq	lr
 8007de8:	f011 0f02 	tst.w	r1, #2
 8007dec:	d0bf      	beq.n	8007d6e <strcpy+0x12>
 8007dee:	f831 2b02 	ldrh.w	r2, [r1], #2
 8007df2:	f012 0fff 	tst.w	r2, #255	; 0xff
 8007df6:	bf16      	itet	ne
 8007df8:	f82c 2b02 	strhne.w	r2, [ip], #2
 8007dfc:	f88c 2000 	strbeq.w	r2, [ip]
 8007e00:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8007e04:	d1b3      	bne.n	8007d6e <strcpy+0x12>
 8007e06:	4770      	bx	lr
 8007e08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0c:	f80c 2b01 	strb.w	r2, [ip], #1
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	d1f9      	bne.n	8007e08 <strcpy+0xac>
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop

08007e18 <strlen>:
 8007e18:	f020 0103 	bic.w	r1, r0, #3
 8007e1c:	f010 0003 	ands.w	r0, r0, #3
 8007e20:	f1c0 0000 	rsb	r0, r0, #0
 8007e24:	f851 3b04 	ldr.w	r3, [r1], #4
 8007e28:	f100 0c04 	add.w	ip, r0, #4
 8007e2c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8007e30:	f06f 0200 	mvn.w	r2, #0
 8007e34:	bf1c      	itt	ne
 8007e36:	fa22 f20c 	lsrne.w	r2, r2, ip
 8007e3a:	4313      	orrne	r3, r2
 8007e3c:	f04f 0c01 	mov.w	ip, #1
 8007e40:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007e44:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007e48:	eba3 020c 	sub.w	r2, r3, ip
 8007e4c:	ea22 0203 	bic.w	r2, r2, r3
 8007e50:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007e54:	bf04      	itt	eq
 8007e56:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007e5a:	3004      	addeq	r0, #4
 8007e5c:	d0f4      	beq.n	8007e48 <strlen+0x30>
 8007e5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e62:	bf1f      	itttt	ne
 8007e64:	3001      	addne	r0, #1
 8007e66:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007e6a:	3001      	addne	r0, #1
 8007e6c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8007e70:	bf18      	it	ne
 8007e72:	3001      	addne	r0, #1
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <strncmp>:
 8007e78:	b430      	push	{r4, r5}
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d04a      	beq.n	8007f14 <strncmp+0x9c>
 8007e7e:	ea40 0301 	orr.w	r3, r0, r1
 8007e82:	f013 0303 	ands.w	r3, r3, #3
 8007e86:	d12d      	bne.n	8007ee4 <strncmp+0x6c>
 8007e88:	2a03      	cmp	r2, #3
 8007e8a:	d92b      	bls.n	8007ee4 <strncmp+0x6c>
 8007e8c:	6804      	ldr	r4, [r0, #0]
 8007e8e:	680d      	ldr	r5, [r1, #0]
 8007e90:	42ac      	cmp	r4, r5
 8007e92:	d127      	bne.n	8007ee4 <strncmp+0x6c>
 8007e94:	3a04      	subs	r2, #4
 8007e96:	d03d      	beq.n	8007f14 <strncmp+0x9c>
 8007e98:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8007e9c:	ea25 0404 	bic.w	r4, r5, r4
 8007ea0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8007ea4:	d13c      	bne.n	8007f20 <strncmp+0xa8>
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	e00e      	b.n	8007eca <strncmp+0x52>
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	6864      	ldr	r4, [r4, #4]
 8007eb0:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	ea25 0503 	bic.w	r5, r5, r3
 8007eba:	d113      	bne.n	8007ee4 <strncmp+0x6c>
 8007ebc:	3a04      	subs	r2, #4
 8007ebe:	d029      	beq.n	8007f14 <strncmp+0x9c>
 8007ec0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8007ec4:	d129      	bne.n	8007f1a <strncmp+0xa2>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	2a03      	cmp	r2, #3
 8007ecc:	f100 0004 	add.w	r0, r0, #4
 8007ed0:	f101 0104 	add.w	r1, r1, #4
 8007ed4:	d8ea      	bhi.n	8007eac <strncmp+0x34>
 8007ed6:	1e55      	subs	r5, r2, #1
 8007ed8:	b92a      	cbnz	r2, 8007ee6 <strncmp+0x6e>
 8007eda:	7918      	ldrb	r0, [r3, #4]
 8007edc:	7922      	ldrb	r2, [r4, #4]
 8007ede:	1a80      	subs	r0, r0, r2
 8007ee0:	bc30      	pop	{r4, r5}
 8007ee2:	4770      	bx	lr
 8007ee4:	1e55      	subs	r5, r2, #1
 8007ee6:	7803      	ldrb	r3, [r0, #0]
 8007ee8:	780a      	ldrb	r2, [r1, #0]
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d11a      	bne.n	8007f24 <strncmp+0xac>
 8007eee:	b1dd      	cbz	r5, 8007f28 <strncmp+0xb0>
 8007ef0:	b1b3      	cbz	r3, 8007f20 <strncmp+0xa8>
 8007ef2:	1c6c      	adds	r4, r5, #1
 8007ef4:	440c      	add	r4, r1
 8007ef6:	1c8b      	adds	r3, r1, #2
 8007ef8:	4601      	mov	r1, r0
 8007efa:	e004      	b.n	8007f06 <strncmp+0x8e>
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	d00c      	beq.n	8007f1a <strncmp+0xa2>
 8007f00:	3301      	adds	r3, #1
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0ec      	beq.n	8007ee0 <strncmp+0x68>
 8007f06:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f0a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8007f0e:	4290      	cmp	r0, r2
 8007f10:	d0f4      	beq.n	8007efc <strncmp+0x84>
 8007f12:	e7e4      	b.n	8007ede <strncmp+0x66>
 8007f14:	4610      	mov	r0, r2
 8007f16:	bc30      	pop	{r4, r5}
 8007f18:	4770      	bx	lr
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	bc30      	pop	{r4, r5}
 8007f1e:	4770      	bx	lr
 8007f20:	4618      	mov	r0, r3
 8007f22:	e7dd      	b.n	8007ee0 <strncmp+0x68>
 8007f24:	4618      	mov	r0, r3
 8007f26:	e7da      	b.n	8007ede <strncmp+0x66>
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e7d9      	b.n	8007ee0 <strncmp+0x68>

08007f2c <strncpy>:
 8007f2c:	ea40 0301 	orr.w	r3, r0, r1
 8007f30:	079b      	lsls	r3, r3, #30
 8007f32:	b470      	push	{r4, r5, r6}
 8007f34:	d12a      	bne.n	8007f8c <strncpy+0x60>
 8007f36:	2a03      	cmp	r2, #3
 8007f38:	d928      	bls.n	8007f8c <strncpy+0x60>
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f854 5b04 	ldr.w	r5, [r4], #4
 8007f44:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8007f48:	ea26 0605 	bic.w	r6, r6, r5
 8007f4c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8007f50:	d105      	bne.n	8007f5e <strncpy+0x32>
 8007f52:	3a04      	subs	r2, #4
 8007f54:	2a03      	cmp	r2, #3
 8007f56:	f843 5b04 	str.w	r5, [r3], #4
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	d8ef      	bhi.n	8007f3e <strncpy+0x12>
 8007f5e:	b19a      	cbz	r2, 8007f88 <strncpy+0x5c>
 8007f60:	780c      	ldrb	r4, [r1, #0]
 8007f62:	701c      	strb	r4, [r3, #0]
 8007f64:	3a01      	subs	r2, #1
 8007f66:	3301      	adds	r3, #1
 8007f68:	b13c      	cbz	r4, 8007f7a <strncpy+0x4e>
 8007f6a:	b16a      	cbz	r2, 8007f88 <strncpy+0x5c>
 8007f6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f70:	f803 4b01 	strb.w	r4, [r3], #1
 8007f74:	3a01      	subs	r2, #1
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d1f7      	bne.n	8007f6a <strncpy+0x3e>
 8007f7a:	b12a      	cbz	r2, 8007f88 <strncpy+0x5c>
 8007f7c:	441a      	add	r2, r3
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f803 1b01 	strb.w	r1, [r3], #1
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d1fb      	bne.n	8007f80 <strncpy+0x54>
 8007f88:	bc70      	pop	{r4, r5, r6}
 8007f8a:	4770      	bx	lr
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	e7e6      	b.n	8007f5e <strncpy+0x32>

08007f90 <_strtol_r>:
 8007f90:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f94:	4c42      	ldr	r4, [pc, #264]	; (80080a0 <_strtol_r+0x110>)
 8007f96:	b082      	sub	sp, #8
 8007f98:	f8d4 c000 	ldr.w	ip, [r4]
 8007f9c:	9001      	str	r0, [sp, #4]
 8007f9e:	460e      	mov	r6, r1
 8007fa0:	e000      	b.n	8007fa4 <_strtol_r+0x14>
 8007fa2:	4626      	mov	r6, r4
 8007fa4:	4634      	mov	r4, r6
 8007fa6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007faa:	eb0c 0005 	add.w	r0, ip, r5
 8007fae:	7840      	ldrb	r0, [r0, #1]
 8007fb0:	f000 0008 	and.w	r0, r0, #8
 8007fb4:	f000 0aff 	and.w	sl, r0, #255	; 0xff
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d1f2      	bne.n	8007fa2 <_strtol_r+0x12>
 8007fbc:	2d2d      	cmp	r5, #45	; 0x2d
 8007fbe:	d05b      	beq.n	8008078 <_strtol_r+0xe8>
 8007fc0:	2d2b      	cmp	r5, #43	; 0x2b
 8007fc2:	bf04      	itt	eq
 8007fc4:	7875      	ldrbeq	r5, [r6, #1]
 8007fc6:	1cb4      	addeq	r4, r6, #2
 8007fc8:	f033 0010 	bics.w	r0, r3, #16
 8007fcc:	d03c      	beq.n	8008048 <_strtol_r+0xb8>
 8007fce:	4699      	mov	r9, r3
 8007fd0:	f1ba 0f00 	cmp.w	sl, #0
 8007fd4:	bf0c      	ite	eq
 8007fd6:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
 8007fda:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
 8007fde:	fbbb f8f9 	udiv	r8, fp, r9
 8007fe2:	2700      	movs	r7, #0
 8007fe4:	fb09 bb18 	mls	fp, r9, r8, fp
 8007fe8:	4638      	mov	r0, r7
 8007fea:	e00c      	b.n	8008006 <_strtol_r+0x76>
 8007fec:	3d30      	subs	r5, #48	; 0x30
 8007fee:	42ab      	cmp	r3, r5
 8007ff0:	dd19      	ble.n	8008026 <_strtol_r+0x96>
 8007ff2:	1c7e      	adds	r6, r7, #1
 8007ff4:	d005      	beq.n	8008002 <_strtol_r+0x72>
 8007ff6:	4540      	cmp	r0, r8
 8007ff8:	d823      	bhi.n	8008042 <_strtol_r+0xb2>
 8007ffa:	d020      	beq.n	800803e <_strtol_r+0xae>
 8007ffc:	fb09 5000 	mla	r0, r9, r0, r5
 8008000:	2701      	movs	r7, #1
 8008002:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008006:	eb0c 0605 	add.w	r6, ip, r5
 800800a:	7876      	ldrb	r6, [r6, #1]
 800800c:	f016 0f04 	tst.w	r6, #4
 8008010:	d1ec      	bne.n	8007fec <_strtol_r+0x5c>
 8008012:	f016 0603 	ands.w	r6, r6, #3
 8008016:	d006      	beq.n	8008026 <_strtol_r+0x96>
 8008018:	2e01      	cmp	r6, #1
 800801a:	bf14      	ite	ne
 800801c:	2657      	movne	r6, #87	; 0x57
 800801e:	2637      	moveq	r6, #55	; 0x37
 8008020:	1bad      	subs	r5, r5, r6
 8008022:	42ab      	cmp	r3, r5
 8008024:	dce5      	bgt.n	8007ff2 <_strtol_r+0x62>
 8008026:	1c7b      	adds	r3, r7, #1
 8008028:	d015      	beq.n	8008056 <_strtol_r+0xc6>
 800802a:	f1ba 0f00 	cmp.w	sl, #0
 800802e:	d121      	bne.n	8008074 <_strtol_r+0xe4>
 8008030:	b10a      	cbz	r2, 8008036 <_strtol_r+0xa6>
 8008032:	b9ef      	cbnz	r7, 8008070 <_strtol_r+0xe0>
 8008034:	6011      	str	r1, [r2, #0]
 8008036:	b002      	add	sp, #8
 8008038:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800803c:	4770      	bx	lr
 800803e:	455d      	cmp	r5, fp
 8008040:	dddc      	ble.n	8007ffc <_strtol_r+0x6c>
 8008042:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008046:	e7dc      	b.n	8008002 <_strtol_r+0x72>
 8008048:	2d30      	cmp	r5, #48	; 0x30
 800804a:	d01a      	beq.n	8008082 <_strtol_r+0xf2>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1be      	bne.n	8007fce <_strtol_r+0x3e>
 8008050:	230a      	movs	r3, #10
 8008052:	4699      	mov	r9, r3
 8008054:	e7bc      	b.n	8007fd0 <_strtol_r+0x40>
 8008056:	9901      	ldr	r1, [sp, #4]
 8008058:	f1ba 0f00 	cmp.w	sl, #0
 800805c:	f04f 0322 	mov.w	r3, #34	; 0x22
 8008060:	bf0c      	ite	eq
 8008062:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008066:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800806a:	600b      	str	r3, [r1, #0]
 800806c:	2a00      	cmp	r2, #0
 800806e:	d0e2      	beq.n	8008036 <_strtol_r+0xa6>
 8008070:	1e61      	subs	r1, r4, #1
 8008072:	e7df      	b.n	8008034 <_strtol_r+0xa4>
 8008074:	4240      	negs	r0, r0
 8008076:	e7db      	b.n	8008030 <_strtol_r+0xa0>
 8008078:	1cb4      	adds	r4, r6, #2
 800807a:	7875      	ldrb	r5, [r6, #1]
 800807c:	f04f 0a01 	mov.w	sl, #1
 8008080:	e7a2      	b.n	8007fc8 <_strtol_r+0x38>
 8008082:	7820      	ldrb	r0, [r4, #0]
 8008084:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008088:	2858      	cmp	r0, #88	; 0x58
 800808a:	d003      	beq.n	8008094 <_strtol_r+0x104>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d19e      	bne.n	8007fce <_strtol_r+0x3e>
 8008090:	2308      	movs	r3, #8
 8008092:	e79c      	b.n	8007fce <_strtol_r+0x3e>
 8008094:	2310      	movs	r3, #16
 8008096:	7865      	ldrb	r5, [r4, #1]
 8008098:	4699      	mov	r9, r3
 800809a:	3402      	adds	r4, #2
 800809c:	e798      	b.n	8007fd0 <_strtol_r+0x40>
 800809e:	bf00      	nop
 80080a0:	2000045c 	.word	0x2000045c

080080a4 <strtol>:
 80080a4:	b430      	push	{r4, r5}
 80080a6:	4c04      	ldr	r4, [pc, #16]	; (80080b8 <strtol+0x14>)
 80080a8:	460d      	mov	r5, r1
 80080aa:	4613      	mov	r3, r2
 80080ac:	4601      	mov	r1, r0
 80080ae:	462a      	mov	r2, r5
 80080b0:	6820      	ldr	r0, [r4, #0]
 80080b2:	bc30      	pop	{r4, r5}
 80080b4:	f7ff bf6c 	b.w	8007f90 <_strtol_r>
 80080b8:	20000458 	.word	0x20000458

080080bc <register_fini>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <register_fini+0xc>)
 80080be:	b113      	cbz	r3, 80080c6 <register_fini+0xa>
 80080c0:	4802      	ldr	r0, [pc, #8]	; (80080cc <register_fini+0x10>)
 80080c2:	f000 b805 	b.w	80080d0 <atexit>
 80080c6:	4770      	bx	lr
 80080c8:	00000000 	.word	0x00000000
 80080cc:	080080dd 	.word	0x080080dd

080080d0 <atexit>:
 80080d0:	4601      	mov	r1, r0
 80080d2:	2000      	movs	r0, #0
 80080d4:	4602      	mov	r2, r0
 80080d6:	4603      	mov	r3, r0
 80080d8:	f000 b818 	b.w	800810c <__register_exitproc>

080080dc <__libc_fini_array>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d09      	ldr	r5, [pc, #36]	; (8008104 <__libc_fini_array+0x28>)
 80080e0:	4c09      	ldr	r4, [pc, #36]	; (8008108 <__libc_fini_array+0x2c>)
 80080e2:	1b64      	subs	r4, r4, r5
 80080e4:	10a4      	asrs	r4, r4, #2
 80080e6:	bf18      	it	ne
 80080e8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 80080ec:	d005      	beq.n	80080fa <__libc_fini_array+0x1e>
 80080ee:	3c01      	subs	r4, #1
 80080f0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80080f4:	4798      	blx	r3
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	d1f9      	bne.n	80080ee <__libc_fini_array+0x12>
 80080fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080fe:	f000 bcc3 	b.w	8008a88 <_fini>
 8008102:	bf00      	nop
 8008104:	08008a9c 	.word	0x08008a9c
 8008108:	08008aa0 	.word	0x08008aa0

0800810c <__register_exitproc>:
 800810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810e:	4c27      	ldr	r4, [pc, #156]	; (80081ac <__register_exitproc+0xa0>)
 8008110:	6826      	ldr	r6, [r4, #0]
 8008112:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8008116:	b085      	sub	sp, #20
 8008118:	4607      	mov	r7, r0
 800811a:	2c00      	cmp	r4, #0
 800811c:	d041      	beq.n	80081a2 <__register_exitproc+0x96>
 800811e:	6865      	ldr	r5, [r4, #4]
 8008120:	2d1f      	cmp	r5, #31
 8008122:	dd1e      	ble.n	8008162 <__register_exitproc+0x56>
 8008124:	4822      	ldr	r0, [pc, #136]	; (80081b0 <__register_exitproc+0xa4>)
 8008126:	b918      	cbnz	r0, 8008130 <__register_exitproc+0x24>
 8008128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800812c:	b005      	add	sp, #20
 800812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008130:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008134:	9103      	str	r1, [sp, #12]
 8008136:	9202      	str	r2, [sp, #8]
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f3af 8000 	nop.w
 800813e:	9903      	ldr	r1, [sp, #12]
 8008140:	9a02      	ldr	r2, [sp, #8]
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	4604      	mov	r4, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	d0ee      	beq.n	8008128 <__register_exitproc+0x1c>
 800814a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 800814e:	6025      	str	r5, [r4, #0]
 8008150:	2000      	movs	r0, #0
 8008152:	6060      	str	r0, [r4, #4]
 8008154:	4605      	mov	r5, r0
 8008156:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800815a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800815e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8008162:	b93f      	cbnz	r7, 8008174 <__register_exitproc+0x68>
 8008164:	1cab      	adds	r3, r5, #2
 8008166:	2000      	movs	r0, #0
 8008168:	3501      	adds	r5, #1
 800816a:	6065      	str	r5, [r4, #4]
 800816c:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008170:	b005      	add	sp, #20
 8008172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008174:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8008178:	f04f 0c01 	mov.w	ip, #1
 800817c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8008180:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8008184:	fa0c f205 	lsl.w	r2, ip, r5
 8008188:	4316      	orrs	r6, r2
 800818a:	2f02      	cmp	r7, #2
 800818c:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8008190:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8008194:	d1e6      	bne.n	8008164 <__register_exitproc+0x58>
 8008196:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800819a:	431a      	orrs	r2, r3
 800819c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80081a0:	e7e0      	b.n	8008164 <__register_exitproc+0x58>
 80081a2:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 80081a6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 80081aa:	e7b8      	b.n	800811e <__register_exitproc+0x12>
 80081ac:	08008974 	.word	0x08008974
 80081b0:	00000000 	.word	0x00000000
 80081b4:	ccbbaadd 	.word	0xccbbaadd
 80081b8:	00002211 	.word	0x00002211
 80081bc:	0800a8c0 	.word	0x0800a8c0
 80081c0:	00ffffff 	.word	0x00ffffff
 80081c4:	0100a8c0 	.word	0x0100a8c0
 80081c8:	6f746f6d 	.word	0x6f746f6d
 80081cc:	00000072 	.word	0x00000072
 80081d0:	6f746f6d 	.word	0x6f746f6d
 80081d4:	5b202072 	.word	0x5b202072
 80081d8:	6974706f 	.word	0x6974706f
 80081dc:	5d736e6f 	.word	0x5d736e6f
 80081e0:	705ba0c2 	.word	0x705ba0c2
 80081e4:	6d617261 	.word	0x6d617261
 80081e8:	72657465 	.word	0x72657465
 80081ec:	a0c25d73 	.word	0xa0c25d73
 80081f0:	6f43203a 	.word	0x6f43203a
 80081f4:	6f72746e 	.word	0x6f72746e
 80081f8:	6d20736c 	.word	0x6d20736c
 80081fc:	726f746f 	.word	0x726f746f
 8008200:	65707320 	.word	0x65707320
 8008204:	202c6465 	.word	0x202c6465
 8008208:	2c6d7072 	.word	0x2c6d7072
 800820c:	63746520 	.word	0x63746520
 8008210:	2e202c2e 	.word	0x2e202c2e
 8008214:	0a0d202e 	.word	0x0a0d202e
 8008218:	0000000a 	.word	0x0000000a
 800821c:	65657073 	.word	0x65657073
 8008220:	00000064 	.word	0x00000064
 8008224:	6f727245 	.word	0x6f727245
 8008228:	73203a72 	.word	0x73203a72
 800822c:	64656570 	.word	0x64656570
 8008230:	20736920 	.word	0x20736920
 8008234:	2074756f 	.word	0x2074756f
 8008238:	7220666f 	.word	0x7220666f
 800823c:	65676e61 	.word	0x65676e61
 8008240:	2c315b20 	.word	0x2c315b20
 8008244:	5d303031 	.word	0x5d303031
 8008248:	203a2070 	.word	0x203a2070
 800824c:	0a0a6425 	.word	0x0a0a6425
 8008250:	00000000 	.word	0x00000000
 8008254:	65657053 	.word	0x65657053
 8008258:	75732064 	.word	0x75732064
 800825c:	65736363 	.word	0x65736363
 8008260:	6c756673 	.word	0x6c756673
 8008264:	7320796c 	.word	0x7320796c
 8008268:	0a2e7465 	.word	0x0a2e7465
 800826c:	0000000a 	.word	0x0000000a
 8008270:	6f727245 	.word	0x6f727245
 8008274:	65722072 	.word	0x65722072
 8008278:	76656963 	.word	0x76656963
 800827c:	20676e69 	.word	0x20676e69
 8008280:	70736572 	.word	0x70736572
 8008284:	65736e6f 	.word	0x65736e6f
 8008288:	000a0a21 	.word	0x000a0a21
 800828c:	6f727245 	.word	0x6f727245
 8008290:	65732072 	.word	0x65732072
 8008294:	6e69646e 	.word	0x6e69646e
 8008298:	75512067 	.word	0x75512067
 800829c:	21657565 	.word	0x21657565
 80082a0:	00000a0a 	.word	0x00000a0a
 80082a4:	61727075 	.word	0x61727075
 80082a8:	0000706d 	.word	0x0000706d
 80082ac:	6e776f64 	.word	0x6e776f64
 80082b0:	706d6172 	.word	0x706d6172
 80082b4:	00000000 	.word	0x00000000
 80082b8:	72727245 	.word	0x72727245
 80082bc:	3a20726f 	.word	0x3a20726f
 80082c0:	0a642520 	.word	0x0a642520
 80082c4:	0000000a 	.word	0x0000000a
 80082c8:	00000000 	.word	0x00000000
 80082cc:	65657053 	.word	0x65657053
 80082d0:	73692064 	.word	0x73692064
 80082d4:	32252020 	.word	0x32252020
 80082d8:	32252e64 	.word	0x32252e64
 80082dc:	0a207064 	.word	0x0a207064
 80082e0:	0000000a 	.word	0x0000000a
 80082e4:	66206f54 	.word	0x66206f54
 80082e8:	61207765 	.word	0x61207765
 80082ec:	6d756772 	.word	0x6d756772
 80082f0:	73746e65 	.word	0x73746e65
 80082f4:	0a0a202e 	.word	0x0a0a202e
 80082f8:	00000000 	.word	0x00000000
 80082fc:	00746573 	.word	0x00746573
 8008300:	00746567 	.word	0x00746567
 8008304:	706f7473 	.word	0x706f7473
 8008308:	00000000 	.word	0x00000000
 800830c:	6f746f4d 	.word	0x6f746f4d
 8008310:	75732072 	.word	0x75732072
 8008314:	65736363 	.word	0x65736363
 8008318:	6c756673 	.word	0x6c756673
 800831c:	7320796c 	.word	0x7320796c
 8008320:	70706f74 	.word	0x70706f74
 8008324:	0a2e6465 	.word	0x0a2e6465
 8008328:	0000000a 	.word	0x0000000a
 800832c:	72617473 	.word	0x72617473
 8008330:	00000074 	.word	0x00000074
 8008334:	6f746f4d 	.word	0x6f746f4d
 8008338:	75732072 	.word	0x75732072
 800833c:	65736363 	.word	0x65736363
 8008340:	6c756673 	.word	0x6c756673
 8008344:	7320796c 	.word	0x7320796c
 8008348:	74726174 	.word	0x74726174
 800834c:	0a2e6465 	.word	0x0a2e6465
 8008350:	0000000a 	.word	0x0000000a
 8008354:	6c756e28 	.word	0x6c756e28
 8008358:	0000296c 	.word	0x0000296c
 800835c:	6f746f6d 	.word	0x6f746f6d
 8008360:	00000072 	.word	0x00000072
 8008364:	6f746f6d 	.word	0x6f746f6d
 8008368:	5b202072 	.word	0x5b202072
 800836c:	6974706f 	.word	0x6974706f
 8008370:	5d736e6f 	.word	0x5d736e6f
 8008374:	705ba0c2 	.word	0x705ba0c2
 8008378:	6d617261 	.word	0x6d617261
 800837c:	72657465 	.word	0x72657465
 8008380:	a0c25d73 	.word	0xa0c25d73
 8008384:	6f43203a 	.word	0x6f43203a
 8008388:	6f72746e 	.word	0x6f72746e
 800838c:	6d20736c 	.word	0x6d20736c
 8008390:	726f746f 	.word	0x726f746f
 8008394:	65707320 	.word	0x65707320
 8008398:	202c6465 	.word	0x202c6465
 800839c:	2c6d7072 	.word	0x2c6d7072
 80083a0:	63746520 	.word	0x63746520
 80083a4:	2e202c2e 	.word	0x2e202c2e
 80083a8:	0a0d202e 	.word	0x0a0d202e
 80083ac:	0000000a 	.word	0x0000000a
 80083b0:	4d544553 	.word	0x4d544553
 80083b4:	00004341 	.word	0x00004341
 80083b8:	6f746f6d 	.word	0x6f746f6d
 80083bc:	00004872 	.word	0x00004872
 80083c0:	74696e69 	.word	0x74696e69
 80083c4:	3235575f 	.word	0x3235575f
 80083c8:	00003030 	.word	0x00003030
 80083cc:	454c4449 	.word	0x454c4449
 80083d0:	00000000 	.word	0x00000000
 80083d4:	20726d54 	.word	0x20726d54
 80083d8:	00637653 	.word	0x00637653
 80083dc:	706c6568 	.word	0x706c6568
 80083e0:	00000000 	.word	0x00000000
 80083e4:	65680a0d 	.word	0x65680a0d
 80083e8:	0d3a706c 	.word	0x0d3a706c
 80083ec:	694c200a 	.word	0x694c200a
 80083f0:	20737473 	.word	0x20737473
 80083f4:	206c6c61 	.word	0x206c6c61
 80083f8:	20656874 	.word	0x20656874
 80083fc:	69676572 	.word	0x69676572
 8008400:	72657473 	.word	0x72657473
 8008404:	63206465 	.word	0x63206465
 8008408:	616d6d6f 	.word	0x616d6d6f
 800840c:	0d73646e 	.word	0x0d73646e
 8008410:	000a0d0a 	.word	0x000a0d0a
 8008414:	6f636e49 	.word	0x6f636e49
 8008418:	63657272 	.word	0x63657272
 800841c:	6f632074 	.word	0x6f632074
 8008420:	6e616d6d 	.word	0x6e616d6d
 8008424:	61702064 	.word	0x61702064
 8008428:	656d6172 	.word	0x656d6172
 800842c:	28726574 	.word	0x28726574
 8008430:	202e2973 	.word	0x202e2973
 8008434:	746e4520 	.word	0x746e4520
 8008438:	22207265 	.word	0x22207265
 800843c:	706c6568 	.word	0x706c6568
 8008440:	6f742022 	.word	0x6f742022
 8008444:	65697620 	.word	0x65697620
 8008448:	20612077 	.word	0x20612077
 800844c:	7473696c 	.word	0x7473696c
 8008450:	20666f20 	.word	0x20666f20
 8008454:	69617661 	.word	0x69617661
 8008458:	6c62616c 	.word	0x6c62616c
 800845c:	6f632065 	.word	0x6f632065
 8008460:	6e616d6d 	.word	0x6e616d6d
 8008464:	0d2e7364 	.word	0x0d2e7364
 8008468:	000a0d0a 	.word	0x000a0d0a
 800846c:	6d6d6f43 	.word	0x6d6d6f43
 8008470:	20646e61 	.word	0x20646e61
 8008474:	20746f6e 	.word	0x20746f6e
 8008478:	6f636572 	.word	0x6f636572
 800847c:	73696e67 	.word	0x73696e67
 8008480:	202e6465 	.word	0x202e6465
 8008484:	746e4520 	.word	0x746e4520
 8008488:	27207265 	.word	0x27207265
 800848c:	706c6568 	.word	0x706c6568
 8008490:	6f742027 	.word	0x6f742027
 8008494:	65697620 	.word	0x65697620
 8008498:	20612077 	.word	0x20612077
 800849c:	7473696c 	.word	0x7473696c
 80084a0:	20666f20 	.word	0x20666f20
 80084a4:	69617661 	.word	0x69617661
 80084a8:	6c62616c 	.word	0x6c62616c
 80084ac:	6f632065 	.word	0x6f632065
 80084b0:	6e616d6d 	.word	0x6e616d6d
 80084b4:	0d2e7364 	.word	0x0d2e7364
 80084b8:	000a0d0a 	.word	0x000a0d0a
 80084bc:	2f707041 	.word	0x2f707041
 80084c0:	334d5453 	.word	0x334d5453
 80084c4:	2d344632 	.word	0x2d344632
 80084c8:	63736944 	.word	0x63736944
 80084cc:	7265766f 	.word	0x7265766f
 80084d0:	694c2f79 	.word	0x694c2f79
 80084d4:	72617262 	.word	0x72617262
 80084d8:	2f736569 	.word	0x2f736569
 80084dc:	334d5453 	.word	0x334d5453
 80084e0:	78344632 	.word	0x78344632
 80084e4:	74535f78 	.word	0x74535f78
 80084e8:	72655064 	.word	0x72655064
 80084ec:	5f687069 	.word	0x5f687069
 80084f0:	76697244 	.word	0x76697244
 80084f4:	732f7265 	.word	0x732f7265
 80084f8:	6d2f6372 	.word	0x6d2f6372
 80084fc:	2e637369 	.word	0x2e637369
 8008500:	00000063 	.word	0x00000063
 8008504:	2f707041 	.word	0x2f707041
 8008508:	334d5453 	.word	0x334d5453
 800850c:	2d344632 	.word	0x2d344632
 8008510:	63736944 	.word	0x63736944
 8008514:	7265766f 	.word	0x7265766f
 8008518:	694c2f79 	.word	0x694c2f79
 800851c:	72617262 	.word	0x72617262
 8008520:	2f736569 	.word	0x2f736569
 8008524:	334d5453 	.word	0x334d5453
 8008528:	78344632 	.word	0x78344632
 800852c:	74535f78 	.word	0x74535f78
 8008530:	72655064 	.word	0x72655064
 8008534:	5f687069 	.word	0x5f687069
 8008538:	76697244 	.word	0x76697244
 800853c:	732f7265 	.word	0x732f7265
 8008540:	732f6372 	.word	0x732f6372
 8008544:	32336d74 	.word	0x32336d74
 8008548:	78783466 	.word	0x78783466
 800854c:	616d645f 	.word	0x616d645f
 8008550:	0000632e 	.word	0x0000632e
 8008554:	2f707041 	.word	0x2f707041
 8008558:	334d5453 	.word	0x334d5453
 800855c:	2d344632 	.word	0x2d344632
 8008560:	63736944 	.word	0x63736944
 8008564:	7265766f 	.word	0x7265766f
 8008568:	694c2f79 	.word	0x694c2f79
 800856c:	72617262 	.word	0x72617262
 8008570:	2f736569 	.word	0x2f736569
 8008574:	334d5453 	.word	0x334d5453
 8008578:	78344632 	.word	0x78344632
 800857c:	74535f78 	.word	0x74535f78
 8008580:	72655064 	.word	0x72655064
 8008584:	5f687069 	.word	0x5f687069
 8008588:	76697244 	.word	0x76697244
 800858c:	732f7265 	.word	0x732f7265
 8008590:	732f6372 	.word	0x732f6372
 8008594:	32336d74 	.word	0x32336d74
 8008598:	78783466 	.word	0x78783466
 800859c:	7478655f 	.word	0x7478655f
 80085a0:	00632e69 	.word	0x00632e69
 80085a4:	2f707041 	.word	0x2f707041
 80085a8:	334d5453 	.word	0x334d5453
 80085ac:	2d344632 	.word	0x2d344632
 80085b0:	63736944 	.word	0x63736944
 80085b4:	7265766f 	.word	0x7265766f
 80085b8:	694c2f79 	.word	0x694c2f79
 80085bc:	72617262 	.word	0x72617262
 80085c0:	2f736569 	.word	0x2f736569
 80085c4:	334d5453 	.word	0x334d5453
 80085c8:	78344632 	.word	0x78344632
 80085cc:	74535f78 	.word	0x74535f78
 80085d0:	72655064 	.word	0x72655064
 80085d4:	5f687069 	.word	0x5f687069
 80085d8:	76697244 	.word	0x76697244
 80085dc:	732f7265 	.word	0x732f7265
 80085e0:	732f6372 	.word	0x732f6372
 80085e4:	32336d74 	.word	0x32336d74
 80085e8:	78783466 	.word	0x78783466
 80085ec:	6970675f 	.word	0x6970675f
 80085f0:	00632e6f 	.word	0x00632e6f
 80085f4:	2f707041 	.word	0x2f707041
 80085f8:	334d5453 	.word	0x334d5453
 80085fc:	2d344632 	.word	0x2d344632
 8008600:	63736944 	.word	0x63736944
 8008604:	7265766f 	.word	0x7265766f
 8008608:	694c2f79 	.word	0x694c2f79
 800860c:	72617262 	.word	0x72617262
 8008610:	2f736569 	.word	0x2f736569
 8008614:	334d5453 	.word	0x334d5453
 8008618:	78344632 	.word	0x78344632
 800861c:	74535f78 	.word	0x74535f78
 8008620:	72655064 	.word	0x72655064
 8008624:	5f687069 	.word	0x5f687069
 8008628:	76697244 	.word	0x76697244
 800862c:	732f7265 	.word	0x732f7265
 8008630:	732f6372 	.word	0x732f6372
 8008634:	32336d74 	.word	0x32336d74
 8008638:	78783466 	.word	0x78783466
 800863c:	6363725f 	.word	0x6363725f
 8008640:	0000632e 	.word	0x0000632e
 8008644:	2f707041 	.word	0x2f707041
 8008648:	334d5453 	.word	0x334d5453
 800864c:	2d344632 	.word	0x2d344632
 8008650:	63736944 	.word	0x63736944
 8008654:	7265766f 	.word	0x7265766f
 8008658:	694c2f79 	.word	0x694c2f79
 800865c:	72617262 	.word	0x72617262
 8008660:	2f736569 	.word	0x2f736569
 8008664:	334d5453 	.word	0x334d5453
 8008668:	78344632 	.word	0x78344632
 800866c:	74535f78 	.word	0x74535f78
 8008670:	72655064 	.word	0x72655064
 8008674:	5f687069 	.word	0x5f687069
 8008678:	76697244 	.word	0x76697244
 800867c:	732f7265 	.word	0x732f7265
 8008680:	732f6372 	.word	0x732f6372
 8008684:	32336d74 	.word	0x32336d74
 8008688:	78783466 	.word	0x78783466
 800868c:	6970735f 	.word	0x6970735f
 8008690:	0000632e 	.word	0x0000632e
 8008694:	2f707041 	.word	0x2f707041
 8008698:	334d5453 	.word	0x334d5453
 800869c:	2d344632 	.word	0x2d344632
 80086a0:	63736944 	.word	0x63736944
 80086a4:	7265766f 	.word	0x7265766f
 80086a8:	694c2f79 	.word	0x694c2f79
 80086ac:	72617262 	.word	0x72617262
 80086b0:	2f736569 	.word	0x2f736569
 80086b4:	334d5453 	.word	0x334d5453
 80086b8:	78344632 	.word	0x78344632
 80086bc:	74535f78 	.word	0x74535f78
 80086c0:	72655064 	.word	0x72655064
 80086c4:	5f687069 	.word	0x5f687069
 80086c8:	76697244 	.word	0x76697244
 80086cc:	732f7265 	.word	0x732f7265
 80086d0:	732f6372 	.word	0x732f6372
 80086d4:	32336d74 	.word	0x32336d74
 80086d8:	78783466 	.word	0x78783466
 80086dc:	7379735f 	.word	0x7379735f
 80086e0:	2e676663 	.word	0x2e676663
 80086e4:	00000063 	.word	0x00000063
 80086e8:	2f707041 	.word	0x2f707041
 80086ec:	334d5453 	.word	0x334d5453
 80086f0:	2d344632 	.word	0x2d344632
 80086f4:	63736944 	.word	0x63736944
 80086f8:	7265766f 	.word	0x7265766f
 80086fc:	694c2f79 	.word	0x694c2f79
 8008700:	72617262 	.word	0x72617262
 8008704:	2f736569 	.word	0x2f736569
 8008708:	334d5453 	.word	0x334d5453
 800870c:	78344632 	.word	0x78344632
 8008710:	74535f78 	.word	0x74535f78
 8008714:	72655064 	.word	0x72655064
 8008718:	5f687069 	.word	0x5f687069
 800871c:	76697244 	.word	0x76697244
 8008720:	732f7265 	.word	0x732f7265
 8008724:	732f6372 	.word	0x732f6372
 8008728:	32336d74 	.word	0x32336d74
 800872c:	78783466 	.word	0x78783466
 8008730:	6173755f 	.word	0x6173755f
 8008734:	632e7472 	.word	0x632e7472
 8008738:	00000000 	.word	0x00000000

0800873c <table_crc_hi>:
 800873c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800874c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800875c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800876c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800877c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800878c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800879c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80087ac:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80087bc:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80087cc:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80087dc:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80087ec:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80087fc:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800880c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800881c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800882c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@

0800883c <table_crc_lo>:
 800883c:	01c1c000 c20203c3 c70706c6 04c4c505     ................
 800884c:	cd0d0ccc 0ececf0f 0bcbca0a c80809c9     ................
 800885c:	d91918d8 1adadb1b 1fdfde1e dc1c1ddd     ................
 800886c:	15d5d414 d61617d7 d31312d2 10d0d111     ................
 800887c:	f13130f0 32f2f333 37f7f636 f43435f5     .01.3..26..7.54.
 800888c:	3dfdfc3c fe3e3fff fb3b3afa 38f8f939     <..=.?>..:;.9..8
 800889c:	29e9e828 ea2a2beb ef2f2eee 2ceced2d     (..).+*.../.-..,
 80088ac:	e52524e4 26e6e727 23e3e222 e02021e1     .$%.'..&"..#.! .
 80088bc:	a16160a0 62a2a363 67a7a666 a46465a5     .`a.c..bf..g.ed.
 80088cc:	6dadac6c ae6e6faf ab6b6aaa 68a8a969     l..m.on..jk.i..h
 80088dc:	79b9b878 ba7a7bbb bf7f7ebe 7cbcbd7d     x..y.{z..~..}..|
 80088ec:	b57574b4 76b6b777 73b3b272 b07071b1     .tu.w..vr..s.qp.
 80088fc:	51919050 92525393 97575696 54949555     P..Q.SR..VW.U..T
 800890c:	9d5d5c9c 5e9e9f5f 5b9b9a5a 98585999     .\]._..^Z..[.YX.
 800891c:	89494888 4a8a8b4b 4f8f8e4e 8c4c4d8d     .HI.K..JN..O.ML.
 800892c:	45858444 86464787 83434282 40808141     D..E.GF..BC.A..@

0800893c <xMotorCommand>:
 800893c:	0800835c 08008364 080025b5 000000ff     \...d....%......

0800894c <ucExpectedStackBytes.8478>:
 800894c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 800895c:	a5a5a5a5                                ....

08008960 <xHelpCommand>:
 8008960:	080083dc 080083e4 0800527d 00000000     ........}R......
 8008970:	00000043                                C...

08008974 <_global_impure_ptr>:
 8008974:	20000030                                0.. 

08008978 <_ctype_>:
 8008978:	20202000 20202020 28282020 20282828     .         ((((( 
 8008988:	20202020 20202020 20202020 20202020                     
 8008998:	10108820 10101010 10101010 10101010      ...............
 80089a8:	04040410 04040404 10040404 10101010     ................
 80089b8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80089c8:	01010101 01010101 01010101 10101010     ................
 80089d8:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80089e8:	02020202 02020202 02020202 10101010     ................
 80089f8:	00000020 00000000 00000000 00000000      ...............
 8008a08:	00000000 00000000 00000000 00000000     ................
 8008a18:	00000000 00000000 00000000 00000000     ................
 8008a28:	00000000 00000000 00000000 00000000     ................
 8008a38:	00000000 00000000 00000000 00000000     ................
 8008a48:	00000000 00000000 00000000 00000000     ................
 8008a58:	00000000 00000000 00000000 00000000     ................
 8008a68:	00000000 00000000 00000000 00000000     ................
 8008a78:	00000000                                ....

08008a7c <_init>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	bf00      	nop
 8008a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a82:	bc08      	pop	{r3}
 8008a84:	469e      	mov	lr, r3
 8008a86:	4770      	bx	lr

08008a88 <_fini>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr
