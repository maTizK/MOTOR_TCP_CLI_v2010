
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e0  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08008368  08008368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08008370  08008370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000460  20000000  08008374  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013f80  20000460  080087d4  00018460  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200143e0  0801c754  00018460  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00018460  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b400  00000000  00000000  0001848e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002466  00000000  00000000  0002388e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004727  00000000  00000000  00025cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c90  00000000  00000000  0002a41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  0002b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f6b  00000000  00000000  0002bbdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000430e  00000000  00000000  00031b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  00035e54  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002cf0  00000000  00000000  00035ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000460 	.word	0x20000460
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008350 	.word	0x08008350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008350 	.word	0x08008350
 80001d0:	20000464 	.word	0x20000464
 80001d4:	20000460 	.word	0x20000460
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
#define pdTrue 	1

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f006 fb09 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f006 fb05 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f006 fb01 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	48b1      	ldr	r0, [pc, #708]	; (8000614 <init_SPIx+0x304>)
 8000350:	4619      	mov	r1, r3
 8000352:	f006 f805 	bl	8006360 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000376:	48a7      	ldr	r0, [pc, #668]	; (8000614 <init_SPIx+0x304>)
 8000378:	4619      	mov	r1, r3
 800037a:	f005 fff1 	bl	8006360 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039e:	489d      	ldr	r0, [pc, #628]	; (8000614 <init_SPIx+0x304>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f005 ffdd 	bl	8006360 <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	489b      	ldr	r0, [pc, #620]	; (8000614 <init_SPIx+0x304>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f006 f8ee 	bl	800658c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	4898      	ldr	r0, [pc, #608]	; (8000614 <init_SPIx+0x304>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f006 f8e9 	bl	800658c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	4896      	ldr	r0, [pc, #600]	; (8000614 <init_SPIx+0x304>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f006 f8e4 	bl	800658c <GPIO_PinAFConfig>


	RCC_AHB1PeriphClockCmd(WIZ_HR_GPIO_CLK, ENABLE);
 80003c4:	2004      	movs	r0, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	f006 fab2 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(WIZ_IT_GPIO_CLK, ENABLE);
 80003cc:	2004      	movs	r0, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	f006 faae 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	
		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003d4:	2310      	movs	r3, #16
 80003d6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003d8:	2301      	movs	r3, #1
 80003da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <init_SPIx+0x304>)
 80003f6:	4619      	mov	r1, r3
 80003f8:	f005 ffb2 	bl	8006360 <GPIO_Init>
	
	CSOFF(); // set PA4 high
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 80003fe:	4a85      	ldr	r2, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 8000400:	8b12      	ldrh	r2, [r2, #24]
 8000402:	b292      	uxth	r2, r2
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	b292      	uxth	r2, r2
 800040a:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = WIZ_HR_PIN;
 800040c:	2320      	movs	r3, #32
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000422:	2301      	movs	r3, #1
 8000424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(WIZ_HR_GPIO_PORT, &GPIO_InitStruct);
 8000428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800042c:	487a      	ldr	r0, [pc, #488]	; (8000618 <init_SPIx+0x308>)
 800042e:	4619      	mov	r1, r3
 8000430:	f005 ff96 	bl	8006360 <GPIO_Init>
	
	RESET_LOW(); // set PA3 high
 8000434:	4b78      	ldr	r3, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000436:	4a78      	ldr	r2, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000438:	8b12      	ldrh	r2, [r2, #24]
 800043a:	b292      	uxth	r2, r2
 800043c:	f042 0220 	orr.w	r2, r2, #32
 8000440:	b292      	uxth	r2, r2
 8000442:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 8000444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000448:	2101      	movs	r1, #1
 800044a:	f006 faa9 	bl	80069a0 <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800044e:	2300      	movs	r3, #0
 8000450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000462:	2300      	movs	r3, #0
 8000464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800046e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000476:	2308      	movs	r3, #8
 8000478:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPIx, &SPI_InitStruct); 
 8000482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000486:	4865      	ldr	r0, [pc, #404]	; (800061c <init_SPIx+0x30c>)
 8000488:	4619      	mov	r1, r3
 800048a:	f006 fac1 	bl	8006a10 <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 800048e:	4863      	ldr	r0, [pc, #396]	; (800061c <init_SPIx+0x30c>)
 8000490:	2101      	movs	r1, #1
 8000492:	f006 fbaf 	bl	8006bf4 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000496:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800049a:	2101      	movs	r1, #1
 800049c:	f006 fa48 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 80004a0:	485f      	ldr	r0, [pc, #380]	; (8000620 <init_SPIx+0x310>)
 80004a2:	f004 fe75 	bl	8005190 <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 80004a6:	485f      	ldr	r0, [pc, #380]	; (8000624 <init_SPIx+0x314>)
 80004a8:	f004 fe72 	bl	8005190 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 80004ac:	bf00      	nop
 80004ae:	485c      	ldr	r0, [pc, #368]	; (8000620 <init_SPIx+0x310>)
 80004b0:	f005 fa7e 	bl	80059b0 <DMA_GetCmdStatus>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <init_SPIx+0x19e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 80004ba:	bf00      	nop
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <init_SPIx+0x314>)
 80004be:	f005 fa77 	bl	80059b0 <DMA_GetCmdStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <init_SPIx+0x1ac>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f005 f939 	bl	8005744 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <init_SPIx+0x318>)
 80004e2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <init_SPIx+0x31c>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <init_SPIx+0x310>)
 8000510:	4619      	mov	r1, r3
 8000512:	f004 ff53 	bl	80053bc <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 8000516:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800051a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <init_SPIx+0x320>)
 8000522:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000528:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <init_SPIx+0x314>)
 8000530:	4619      	mov	r1, r3
 8000532:	f004 ff43 	bl	80053bc <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <init_SPIx+0x310>)
 8000538:	2110      	movs	r1, #16
 800053a:	2201      	movs	r2, #1
 800053c:	f005 fab6 	bl	8005aac <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000540:	4838      	ldr	r0, [pc, #224]	; (8000624 <init_SPIx+0x314>)
 8000542:	2110      	movs	r1, #16
 8000544:	2201      	movs	r2, #1
 8000546:	f005 fab1 	bl	8005aac <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <init_SPIx+0x30c>)
 800054c:	2102      	movs	r1, #2
 800054e:	f006 fc4f 	bl	8006df0 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <init_SPIx+0x30c>)
 8000554:	2101      	movs	r1, #1
 8000556:	f006 fc4b 	bl	8006df0 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 800055a:	233b      	movs	r3, #59	; 0x3b
 800055c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;
 800055e:	2306      	movs	r3, #6
 8000560:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000562:	2301      	movs	r3, #1
 8000564:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fd94 	bl	800509c <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 8000574:	233a      	movs	r3, #58	; 0x3a
 8000576:	733b      	strb	r3, [r7, #12]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;
 8000578:	2306      	movs	r3, #6
 800057a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 800057c:	2301      	movs	r3, #1
 800057e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f004 fd87 	bl	800509c <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800058e:	4823      	ldr	r0, [pc, #140]	; (800061c <init_SPIx+0x30c>)
 8000590:	2102      	movs	r1, #2
 8000592:	2201      	movs	r2, #1
 8000594:	f006 fb70 	bl	8006c78 <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <init_SPIx+0x30c>)
 800059a:	2101      	movs	r1, #1
 800059c:	2201      	movs	r2, #1
 800059e:	f006 fb6b 	bl	8006c78 <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin */
	GPIO_InitStruct.GPIO_Pin = WIZ_IT_PIN;
 80005a2:	2310      	movs	r3, #16
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(WIZ_IT_GPIO_PORT, &GPIO_InitStruct);	
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <init_SPIx+0x308>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	f005 fecb 	bl	8006360 <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2101      	movs	r1, #1
 80005d0:	f006 f9e6 	bl	80069a0 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(WIZ_IT_EXTI_PORT_SOURCE, WIZ_IT_EXTI_PIN_SOURCE);
 80005d4:	2002      	movs	r0, #2
 80005d6:	2104      	movs	r1, #4
 80005d8:	f006 fc44 	bl	8006e64 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = WIZ_IT_EXTI_LINE;
 80005dc:	2310      	movs	r3, #16
 80005de:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005e0:	2300      	movs	r3, #0
 80005e2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005e4:	230c      	movs	r3, #12
 80005e6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fd7a 	bl	80060e8 <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = WIZ_IT_EXTI_IRQn;
 80005f4:	230a      	movs	r3, #10
 80005f6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 5;
 80005f8:	230a      	movs	r3, #10
 80005fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fd48 	bl	800509c <NVIC_Init>


	
}
 800060c:	3768      	adds	r7, #104	; 0x68
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020800 	.word	0x40020800
 800061c:	40013000 	.word	0x40013000
 8000620:	40026458 	.word	0x40026458
 8000624:	40026440 	.word	0x40026440
 8000628:	4001300c 	.word	0x4001300c
 800062c:	200139dc 	.word	0x200139dc
 8000630:	20013204 	.word	0x20013204

08000634 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 800063a:	491e      	ldr	r1, [pc, #120]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800063c:	f005 faec 	bl	8005c18 <DMA_GetITStatus>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02a      	beq.n	800069c <DMA2_Stream2_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000648:	491a      	ldr	r1, [pc, #104]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800064a:	f005 fca1 	bl	8005f90 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800064e:	bf00      	nop
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	f006 fb6e 	bl	8006d34 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <DMA2_Stream2_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000662:	8b12      	ldrh	r2, [r2, #24]
 8000664:	b292      	uxth	r2, r2
 8000666:	f042 0210 	orr.w	r2, r2, #16
 800066a:	b292      	uxth	r2, r2
 800066c:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000670:	2100      	movs	r1, #0
 8000672:	f005 f89d 	bl	80057b0 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000678:	2100      	movs	r1, #0
 800067a:	f005 f899 	bl	80057b0 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 800067e:	f003 fec3 	bl	8004408 <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xHigherPriorityTaskWoken = pdFalse;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA2_Stream2_IRQHandler+0x94>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	2100      	movs	r1, #0
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000692:	2300      	movs	r3, #0
 8000694:	f003 faca 	bl	8003c2c <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 8000698:	f003 fec6 	bl	8004428 <vPortExitCritical>
  }	

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <DMA2_Stream2_IRQHandler+0x78>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <DMA2_Stream2_IRQHandler+0x98>)
 80006a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40026440 	.word	0x40026440
 80006b4:	10208000 	.word	0x10208000
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40026458 	.word	0x40026458
 80006c4:	2000047c 	.word	0x2000047c
 80006c8:	200131f0 	.word	0x200131f0
 80006cc:	e000ed04 	.word	0xe000ed04

080006d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006d6:	491e      	ldr	r1, [pc, #120]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006d8:	f005 fa9e 	bl	8005c18 <DMA_GetITStatus>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d02a      	beq.n	8000738 <DMA2_Stream3_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006e6:	f005 fc53 	bl	8005f90 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006ea:	bf00      	nop
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	f006 fb20 	bl	8006d34 <SPI_I2S_GetFlagStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0f8      	beq.n	80006ec <DMA2_Stream3_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fe:	8b12      	ldrh	r2, [r2, #24]
 8000700:	b292      	uxth	r2, r2
 8000702:	f042 0210 	orr.w	r2, r2, #16
 8000706:	b292      	uxth	r2, r2
 8000708:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 800070c:	2100      	movs	r1, #0
 800070e:	f005 f84f 	bl	80057b0 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000714:	2100      	movs	r1, #0
 8000716:	f005 f84b 	bl	80057b0 <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 800071a:	f003 fe75 	bl	8004408 <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xHigherPriorityTaskWoken = pdFalse;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <DMA2_Stream3_IRQHandler+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800072e:	2300      	movs	r3, #0
 8000730:	f003 fa7c 	bl	8003c2c <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000734:	f003 fe78 	bl	8004428 <vPortExitCritical>
 }
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <DMA2_Stream3_IRQHandler+0x78>
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DMA2_Stream3_IRQHandler+0x98>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40026458 	.word	0x40026458
 8000750:	18008000 	.word	0x18008000
 8000754:	40013000 	.word	0x40013000
 8000758:	40020000 	.word	0x40020000
 800075c:	40026440 	.word	0x40026440
 8000760:	2000047c 	.word	0x2000047c
 8000764:	200131f0 	.word	0x200131f0
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <spi_dma_send>:


/*---------------------------- Matic Knap 25 Jun 2014 ---------------------*/

void spi_dma_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
{
 800076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	460b      	mov	r3, r1
 8000776:	603a      	str	r2, [r7, #0]
 8000778:	4602      	mov	r2, r0
 800077a:	80fa      	strh	r2, [r7, #6]
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	466b      	mov	r3, sp
 8000780:	461e      	mov	r6, r3
		uint8_t buffer[data_len+4];
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	1d19      	adds	r1, r3, #4
 8000786:	1e4b      	subs	r3, r1, #1
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	460b      	mov	r3, r1
 800078c:	461a      	mov	r2, r3
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000796:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800079a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800079e:	460b      	mov	r3, r1
 80007a0:	461a      	mov	r2, r3
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	00dd      	lsls	r5, r3, #3
 80007a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80007ac:	00d4      	lsls	r4, r2, #3
 80007ae:	460b      	mov	r3, r1
 80007b0:	3307      	adds	r3, #7
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	ebad 0d03 	sub.w	sp, sp, r3
 80007ba:	466b      	mov	r3, sp
 80007bc:	3300      	adds	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80007da:	121b      	asrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007f2:	2304      	movs	r3, #4
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <spi_dma_send+0xa4>
			buffer[i] = (data_buf[i-4]);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	440b      	add	r3, r1
 8000808:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
		buffer[3] = (data_len & 0x00ff);

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	1d1a      	adds	r2, r3, #4
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	429a      	cmp	r2, r3
 8000818:	dcee      	bgt.n	80007f8 <spi_dma_send+0x8c>
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	3304      	adds	r3, #4
 800081e:	b29b      	uxth	r3, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <spi_dma_send+0x100>)
 8000822:	4619      	mov	r1, r3
 8000824:	f005 f850 	bl	80058c8 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <spi_dma_send+0x100>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <spi_dma_send+0x104>)
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <spi_dma_send+0x104>)
 8000832:	8b52      	ldrh	r2, [r2, #26]
 8000834:	b292      	uxth	r2, r2
 8000836:	f042 0210 	orr.w	r2, r2, #16
 800083a:	b292      	uxth	r2, r2
 800083c:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <spi_dma_send+0x100>)
 8000840:	2101      	movs	r1, #1
 8000842:	f004 ffb5 	bl	80057b0 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <spi_dma_send+0x108>)
 8000848:	2101      	movs	r1, #1
 800084a:	f004 ffb1 	bl	80057b0 <DMA_Cmd>
		/* Block until the semaphore is given */
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <spi_dma_send+0x10c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800085a:	2300      	movs	r3, #0
 800085c:	f003 fa50 	bl	8003d00 <xQueueGenericReceive>
 8000860:	46b5      	mov	sp, r6

	//	CSOFF(); // chip deselect 
			
	
}
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800086a:	bf00      	nop
 800086c:	40026458 	.word	0x40026458
 8000870:	40020000 	.word	0x40020000
 8000874:	40026440 	.word	0x40026440
 8000878:	200131f0 	.word	0x200131f0

0800087c <spi_dma_send2B>:

void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4602      	mov	r2, r0
 8000884:	460b      	mov	r3, r1
 8000886:	80fa      	strh	r2, [r7, #6]
 8000888:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[6];
	uint16_t data_len = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	81fb      	strh	r3, [r7, #14]
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	723b      	strb	r3, [r7, #8]
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	727b      	strb	r3, [r7, #9]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	 buffer[3] = (data_len & 0x00ff);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	72fb      	strb	r3, [r7, #11]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	733b      	strb	r3, [r7, #12]
	 buffer[5] = (data_buf & 0x00ff);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	737b      	strb	r3, [r7, #13]
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <spi_dma_send2B+0x94>)
 80008ca:	2106      	movs	r1, #6
 80008cc:	f004 fffc 	bl	80058c8 <DMA_SetCurrDataCounter>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <spi_dma_send2B+0x94>)
 80008d2:	f107 0208 	add.w	r2, r7, #8
 80008d6:	60da      	str	r2, [r3, #12]
	CSON(); // chip select 
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008dc:	8b52      	ldrh	r2, [r2, #26]
 80008de:	b292      	uxth	r2, r2
 80008e0:	f042 0210 	orr.w	r2, r2, #16
 80008e4:	b292      	uxth	r2, r2
 80008e6:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <spi_dma_send2B+0x94>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	f004 ff60 	bl	80057b0 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <spi_dma_send2B+0x9c>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	f004 ff5c 	bl	80057b0 <DMA_Cmd>
	/* Block until the semaphore is given */
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <spi_dma_send2B+0xa0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000904:	2300      	movs	r3, #0
 8000906:	f003 f9fb 	bl	8003d00 <xQueueGenericReceive>
	
//	CSOFF(); // chip deselect 
			
}
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40026458 	.word	0x40026458
 8000914:	40020000 	.word	0x40020000
 8000918:	40026440 	.word	0x40026440
 800091c:	200131f0 	.word	0x200131f0

08000920 <spi_dma_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	80fa      	strh	r2, [r7, #6]
 800092c:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[5];
		uint16_t data_len=0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	723b      	strb	r3, [r7, #8]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	727b      	strb	r3, [r7, #9]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000948:	121b      	asrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	72bb      	strb	r3, [r7, #10]
		buffer[3] = (data_len & 0x00ff);
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	72fb      	strb	r3, [r7, #11]
		buffer[4] = data_buf ; 
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	733b      	strb	r3, [r7, #12]
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000962:	2105      	movs	r1, #5
 8000964:	f004 ffb0 	bl	80058c8 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <spi_dma_sendByte+0x88>)
 800096a:	f107 0208 	add.w	r2, r7, #8
 800096e:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000974:	8b52      	ldrh	r2, [r2, #26]
 8000976:	b292      	uxth	r2, r2
 8000978:	f042 0210 	orr.w	r2, r2, #16
 800097c:	b292      	uxth	r2, r2
 800097e:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000982:	2101      	movs	r1, #1
 8000984:	f004 ff14 	bl	80057b0 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <spi_dma_sendByte+0x90>)
 800098a:	2101      	movs	r1, #1
 800098c:	f004 ff10 	bl	80057b0 <DMA_Cmd>
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <spi_dma_sendByte+0x94>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	2300      	movs	r3, #0
 800099e:	f003 f9af 	bl	8003d00 <xQueueGenericReceive>
				
//		CSOFF(); // chip deselect 
			
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40026458 	.word	0x40026458
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40026440 	.word	0x40026440
 80009b4:	200131f0 	.word	0x200131f0

080009b8 <spi_dma_read>:

		return (data_buf[0] << 8) | data_buf[1];

}
void spi_dma_read(uint16_t address, uint16_t data_len)
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	80f8      	strh	r0, [r7, #6]
 80009c2:	80b9      	strh	r1, [r7, #4]
 80009c4:	4669      	mov	r1, sp
 80009c6:	4688      	mov	r8, r1
		
		/*! spi_dma_read it has to be used with \n
		 * memcpy from bufferRX right after it has recieve \n
		 * data on SPI. */
		
		uint8_t buffer[data_len+4];
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	1d0e      	adds	r6, r1, #4
 80009cc:	1e71      	subs	r1, r6, #1
 80009ce:	6139      	str	r1, [r7, #16]
 80009d0:	4631      	mov	r1, r6
 80009d2:	4608      	mov	r0, r1
 80009d4:	f04f 0100 	mov.w	r1, #0
 80009d8:	00cd      	lsls	r5, r1, #3
 80009da:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80009de:	00c4      	lsls	r4, r0, #3
 80009e0:	4631      	mov	r1, r6
 80009e2:	4608      	mov	r0, r1
 80009e4:	f04f 0100 	mov.w	r1, #0
 80009e8:	00cb      	lsls	r3, r1, #3
 80009ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009ee:	00c2      	lsls	r2, r0, #3
 80009f0:	4633      	mov	r3, r6
 80009f2:	3307      	adds	r3, #7
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	ebad 0d03 	sub.w	sp, sp, r3
 80009fc:	466b      	mov	r3, sp
 80009fe:	3300      	adds	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x00 | (data_len & 0x7f00) >> 8 ));
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a1c:	121b      	asrs	r3, r3, #8
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) buffer[i] = 0x0;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e007      	b.n	8000a42 <spi_dma_read+0x8a>
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dcf2      	bgt.n	8000a32 <spi_dma_read+0x7a>

		DMA_SetCurrDataCounter(SPIx_RX_DMA_STREAM, data_len+4);
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a54:	4619      	mov	r1, r3
 8000a56:	f004 ff37 	bl	80058c8 <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 4+data_len);
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a62:	4619      	mov	r1, r3
 8000a64:	f004 ff30 	bl	80058c8 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
		SPIx_RX_DMA_STREAM->M0AR =(uint32_t)&bufferRX;	
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <spi_dma_read+0x100>)
 8000a72:	60da      	str	r2, [r3, #12]

		CSON(); // chip select 
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a78:	8b52      	ldrh	r2, [r2, #26]
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	f042 0210 	orr.w	r2, r2, #16
 8000a80:	b292      	uxth	r2, r2
 8000a82:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	f004 fe92 	bl	80057b0 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f004 fe8e 	bl	80057b0 <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <spi_dma_read+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f003 f92d 	bl	8003d00 <xQueueGenericReceive>
 8000aa6:	46c5      	mov	sp, r8
		//CSOFF(); // chip deselect		

}	
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	40026440 	.word	0x40026440
 8000ab4:	40026458 	.word	0x40026458
 8000ab8:	20013204 	.word	0x20013204
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	200131f0 	.word	0x200131f0

08000ac4 <init_W5200>:
//==================================================================================//
//===	func 	init_W5200							 ===//
//==================================================================================//

void init_W5200(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
	 *
	 * */


	// mac address
	uint8_t address[6] =	{0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 8000aca:	4a58      	ldr	r2, [pc, #352]	; (8000c2c <init_W5200+0x168>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	8892      	ldrh	r2, [r2, #4]
 8000ad6:	809a      	strh	r2, [r3, #4]
	
	// ip 
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 8000ad8:	4a55      	ldr	r2, [pc, #340]	; (8000c30 <init_W5200+0x16c>)
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	6810      	ldr	r0, [r2, #0]
 8000ae0:	6018      	str	r0, [r3, #0]
	// subnet 
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8000ae2:	4a54      	ldr	r2, [pc, #336]	; (8000c34 <init_W5200+0x170>)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
	// gateway
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 8000aec:	4a52      	ldr	r2, [pc, #328]	; (8000c38 <init_W5200+0x174>)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	6810      	ldr	r0, [r2, #0]
 8000af4:	6018      	str	r0, [r3, #0]
	
	portTickType xLastWakeTime;	
	
	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 8000af6:	2001      	movs	r0, #1
 8000af8:	2100      	movs	r1, #0
 8000afa:	2203      	movs	r2, #3
 8000afc:	f002 ffa4 	bl	8003a48 <xQueueGenericCreate>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <init_W5200+0x178>)
 8000b04:	601a      	str	r2, [r3, #0]

//	vTaskSuspend(set_macTaskHandle);
	
	xLastWakeTime = xTaskGetTickCount();
 8000b06:	f002 faa5 	bl	8003054 <xTaskGetTickCount>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60bb      	str	r3, [r7, #8]

	RESET_HIGH();
 8000b0e:	4b4c      	ldr	r3, [pc, #304]	; (8000c40 <init_W5200+0x17c>)
 8000b10:	4a4b      	ldr	r2, [pc, #300]	; (8000c40 <init_W5200+0x17c>)
 8000b12:	8b52      	ldrh	r2, [r2, #26]
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f042 0220 	orr.w	r2, r2, #32
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	835a      	strh	r2, [r3, #26]
	RESET_LOW();	
 8000b1e:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <init_W5200+0x17c>)
 8000b20:	4a47      	ldr	r2, [pc, #284]	; (8000c40 <init_W5200+0x17c>)
 8000b22:	8b12      	ldrh	r2, [r2, #24]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	831a      	strh	r2, [r3, #24]

	vTaskDelay( 500/portTICK_RATE_MS );		
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f002 f8d3 	bl	8002cdc <vTaskDelay>
	const portTickType xFrequency = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
	
	// ===================================================//
	//SW reset 
	spi_dma_sendByte(W5200_MR, W5200_MR_RST);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	f7ff feef 	bl	8000920 <spi_dma_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	71fb      	strb	r3, [r7, #7]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 8000b46:	bf00      	nop
		spi_dma_read(W5200_MR, 1);
		memcpy(&data, bufferRX+4, 1);
	}
		
	// PING enable, PPPoE disable 
	spi_dma_sendByte(W5200_MR, 0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f7ff fee8 	bl	8000920 <spi_dma_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_dma_sendByte(W5200_IMR, 0xff);
 8000b50:	2016      	movs	r0, #22
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	f7ff fee4 	bl	8000920 <spi_dma_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_dma_sendByte(W5200_IMR2, 0);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f7ff fee0 	bl	8000920 <spi_dma_sendByte>
	// set timeoput to 200msec
	spi_dma_sendByte(W5200_RTR, 200);
 8000b60:	2017      	movs	r0, #23
 8000b62:	21c8      	movs	r1, #200	; 0xc8
 8000b64:	f7ff fedc 	bl	8000920 <spi_dma_sendByte>
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	f7ff fed8 	bl	8000920 <spi_dma_sendByte>

	int n = 0; 
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

	for (n = 0; n < 8; n++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e02b      	b.n	8000bd2 <init_W5200+0x10e>
	{
		spi_dma_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b86:	331e      	adds	r3, #30
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	f7ff fec7 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b9e:	331f      	adds	r3, #31
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	f7ff febb 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_IMR(n), 0xff);	
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000bb6:	332c      	adds	r3, #44	; 0x2c
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	21ff      	movs	r1, #255	; 0xff
 8000bbe:	f7ff feaf 	bl	8000920 <spi_dma_sendByte>
		socket_flg[n] = 0;
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <init_W5200+0x180>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	ddd0      	ble.n	8000b7a <init_W5200+0xb6>
		socket_flg[n] = 0;
			
	}	
	// =========================================================//
		
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be2:	f002 f823 	bl	8002c2c <vTaskDelayUntil>

	W5200_configure_network(ip, subnet, gw);
 8000be6:	f107 0114 	add.w	r1, r7, #20
 8000bea:	f107 0210 	add.w	r2, r7, #16
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f000 f834 	bl	8000c64 <W5200_configure_network>
	W5200_set_hardware_address(address);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f823 	bl	8000c4c <W5200_set_hardware_address>
	
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c10:	f002 f80c 	bl	8002c2c <vTaskDelayUntil>
	// end of initialization W5200 
	// delete task

	// unblock set_macTask
	
	vTaskResume( set_macTaskHandle); 
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <init_W5200+0x184>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 f901 	bl	8002e20 <vTaskResume>

	vTaskDelete ( NULL );
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f001 ffbe 	bl	8002ba0 <vTaskDelete>
	
	
	
	
}
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08007bd0 	.word	0x08007bd0
 8000c30:	08007bd8 	.word	0x08007bd8
 8000c34:	08007bdc 	.word	0x08007bdc
 8000c38:	08007be0 	.word	0x08007be0
 8000c3c:	200131f0 	.word	0x200131f0
 8000c40:	40020800 	.word	0x40020800
 8000c44:	20000480 	.word	0x20000480
 8000c48:	200141bc 	.word	0x200141bc

08000c4c <W5200_set_hardware_address>:

//==================================================================================//
//===	func W5200_set_hardware_address
//==================================================================================//
void  W5200_set_hardware_address(const macaddress_t address)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	/*! Function set wiznet register to address via SPI DMA
	 */

	spi_dma_send(W5200_SHAR, 6, address);
 8000c54:	2009      	movs	r0, #9
 8000c56:	2106      	movs	r1, #6
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	f7ff fd87 	bl	800076c <spi_dma_send>
}
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <W5200_configure_network>:


void  W5200_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	/*! It configures ip, subnet and gateway */
	spi_dma_send(W5200_SIPR, 4, address);
 8000c70:	200f      	movs	r0, #15
 8000c72:	2104      	movs	r1, #4
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	f7ff fd79 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_SUBR, 4, subnet);
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f7ff fd74 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_GAR, 4 , gateway);
 8000c84:	2001      	movs	r0, #1
 8000c86:	2104      	movs	r1, #4
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	f7ff fd6f 	bl	800076c <spi_dma_send>
}
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <get_CRStatus>:
//==================================================================================//



static uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_CR(sck_fd),1);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f7ff fe81 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <get_CRStatus+0x34>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	73fb      	strb	r3, [r7, #15]
	return var;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20013208 	.word	0x20013208

08000ccc <get_SRStatus>:


static uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_SR(sck_fd), 1);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ce2:	3303      	adds	r3, #3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	2101      	movs	r1, #1
 8000cea:	f7ff fe65 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <get_SRStatus+0x34>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	73fb      	strb	r3, [r7, #15]
	return var;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20013208 	.word	0x20013208

08000d04 <get_TXFSRStatus>:

static uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_FSR(sck_fd), 2);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d1a:	3320      	adds	r3, #32
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	2102      	movs	r1, #2
 8000d22:	f7ff fe49 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <get_TXFSRStatus+0x44>)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	8812      	ldrh	r2, [r2, #0]
 8000d2e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b29b      	uxth	r3, r3
	
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20013208 	.word	0x20013208

08000d4c <get_TXWRStatus>:

static uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_WR(sck_fd), 2 );
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d62:	3324      	adds	r3, #36	; 0x24
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	2102      	movs	r1, #2
 8000d6a:	f7ff fe25 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <get_TXWRStatus+0x44>)
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	7b7b      	ldrb	r3, [r7, #13]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b29b      	uxth	r3, r3

	
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20013208 	.word	0x20013208

08000d94 <get_TXRD>:
static uint16_t get_TXRD(uint8_t sck_fd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_RD(sck_fd), 2);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000daa:	3322      	adds	r3, #34	; 0x22
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	2102      	movs	r1, #2
 8000db2:	f7ff fe01 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <get_TXRD+0x44>)
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	7b7b      	ldrb	r3, [r7, #13]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b29b      	uxth	r3, r3
	
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20013208 	.word	0x20013208

08000ddc <set_TXWR>:

static void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	71fa      	strb	r2, [r7, #7]
 8000de8:	80bb      	strh	r3, [r7, #4]
 	spi_dma_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000df6:	3324      	adds	r3, #36	; 0x24
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fd3c 	bl	800087c <spi_dma_send2B>
}
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop

08000e0c <get_RXRSR>:

static uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RSR(sck_fd), 2);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e22:	3326      	adds	r3, #38	; 0x26
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	2102      	movs	r1, #2
 8000e2a:	f7ff fdc5 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <get_RXRSR+0x44>)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b29b      	uxth	r3, r3

}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20013208 	.word	0x20013208

08000e54 <get_RXRD>:

static uint16_t get_RXRD(uint8_t sck_fd)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RD(sck_fd), 2 );
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e6a:	3328      	adds	r3, #40	; 0x28
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	2102      	movs	r1, #2
 8000e72:	f7ff fda1 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <get_RXRD+0x44>)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	8812      	ldrh	r2, [r2, #0]
 8000e7e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	7b7b      	ldrb	r3, [r7, #13]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b29b      	uxth	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20013208 	.word	0x20013208

08000e9c <set_RXRD>:

static void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	71fa      	strb	r2, [r7, #7]
 8000ea8:	80bb      	strh	r3, [r7, #4]
	spi_dma_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000eb6:	3328      	adds	r3, #40	; 0x28
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fcdc 	bl	800087c <spi_dma_send2B>
}
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop

08000ecc <write_memory>:
//		func write_memory 
//===============================================================================================//


void write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60ba      	str	r2, [r7, #8]
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	73fa      	strb	r2, [r7, #15]
 8000ed8:	460a      	mov	r2, r1
 8000eda:	81ba      	strh	r2, [r7, #12]
 8000edc:	80fb      	strh	r3, [r7, #6]
	*/
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000ede:	89bb      	ldrh	r3, [r7, #12]
 8000ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000efc:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000efe:	8afa      	ldrh	r2, [r7, #22]
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	441a      	add	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f0c:	3320      	adds	r3, #32
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dd2a      	ble.n	8000f68 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	8afb      	ldrh	r3, [r7, #22]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f28:	827b      	strh	r3, [r7, #18]
		spi_dma_send( memory_addr,upper_size, buf);
 8000f2a:	8aba      	ldrh	r2, [r7, #20]
 8000f2c:	8a7b      	ldrh	r3, [r7, #18]
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f7ff fc1a 	bl	800076c <spi_dma_send>
		buf += upper_size;
 8000f38:	8a7b      	ldrh	r3, [r7, #18]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	8a7b      	ldrh	r3, [r7, #18]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	823b      	strh	r3, [r7, #16]
		spi_dma_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	f7ff fc03 	bl	800076c <spi_dma_send>
 8000f66:	e006      	b.n	8000f76 <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_dma_send( memory_addr,len,  buf);
 8000f68:	8aba      	ldrh	r2, [r7, #20]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	f7ff fbfb 	bl	800076c <spi_dma_send>
	}
}
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <read_memory>:
// 			func read_memory
//==================================================================================//


void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	4602      	mov	r2, r0
 8000f86:	73fa      	strb	r2, [r7, #15]
 8000f88:	460a      	mov	r2, r1
 8000f8a:	81ba      	strh	r2, [r7, #12]
 8000f8c:	80fb      	strh	r3, [r7, #6]

	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f94:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fac:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000fae:	8afa      	ldrh	r2, [r7, #22]
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fb8:	dd2f      	ble.n	800101a <read_memory+0x9e>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000fc0:	827b      	strh	r3, [r7, #18]
		spi_dma_read( memory_addr,upper_size);
 8000fc2:	8aba      	ldrh	r2, [r7, #20]
 8000fc4:	8a7b      	ldrh	r3, [r7, #18]
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fcf5 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, upper_size);
 8000fce:	8a7b      	ldrh	r3, [r7, #18]
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	4919      	ldr	r1, [pc, #100]	; (8001038 <read_memory+0xbc>)
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f7ff f901 	bl	80001dc <memcpy>

		buf += upper_size;
 8000fda:	8a7b      	ldrh	r3, [r7, #18]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	8a7b      	ldrh	r3, [r7, #18]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	823b      	strh	r3, [r7, #16]
		spi_dma_read(W5200_SOCKET_RX_BASE(sck_fd), left_size);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	8a3b      	ldrh	r3, [r7, #16]
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fcd9 	bl	80009b8 <spi_dma_read>
		memcpy(buf+upper_size, bufferRX+4, left_size);
 8001006:	8a7b      	ldrh	r3, [r7, #18]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	441a      	add	r2, r3
 800100c:	8a3b      	ldrh	r3, [r7, #16]
 800100e:	4610      	mov	r0, r2
 8001010:	4909      	ldr	r1, [pc, #36]	; (8001038 <read_memory+0xbc>)
 8001012:	461a      	mov	r2, r3
 8001014:	f7ff f8e2 	bl	80001dc <memcpy>
 8001018:	e00b      	b.n	8001032 <read_memory+0xb6>
	}else{

		// copy len size bytes
		spi_dma_read( memory_addr,len);
 800101a:	8aba      	ldrh	r2, [r7, #20]
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fcc9 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, len);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	4903      	ldr	r1, [pc, #12]	; (8001038 <read_memory+0xbc>)
 800102c:	461a      	mov	r2, r3
 800102e:	f7ff f8d5 	bl	80001dc <memcpy>
	}
}
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20013208 	.word	0x20013208

0800103c <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4613      	mov	r3, r2
 8001044:	4602      	mov	r2, r0
 8001046:	71fa      	strb	r2, [r7, #7]
 8001048:	460a      	mov	r2, r1
 800104a:	80ba      	strh	r2, [r7, #4]
 800104c:	71bb      	strb	r3, [r7, #6]
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e00c      	b.n	800106e <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <socket+0x14c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <socket+0x14c>)
 8001062:	2101      	movs	r1, #1
 8001064:	54d1      	strb	r1, [r2, r3]
			break;
 8001066:	e005      	b.n	8001074 <socket+0x38>
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9ef      	bls.n	8001054 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b07      	cmp	r3, #7
 8001078:	d901      	bls.n	800107e <socket+0x42>
 800107a:	23ff      	movs	r3, #255	; 0xff
 800107c:	e07f      	b.n	800117e <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	2b08      	cmp	r3, #8
 8001086:	dd01      	ble.n	800108c <socket+0x50>
 8001088:	23ff      	movs	r3, #255	; 0xff
 800108a:	e078      	b.n	800117e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	2b02      	cmp	r3, #2
 8001094:	d005      	beq.n	80010a2 <socket+0x66>
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	da01      	bge.n	80010a2 <socket+0x66>
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	e06d      	b.n	800117e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d006      	beq.n	80010ba <socket+0x7e>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <socket+0x7e>
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	e061      	b.n	800117e <socket+0x142>

	// set MODE register
	spi_dma_sendByte(W5200_Sn_MR(sck_fd) , mode);
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fc27 	bl	8000920 <spi_dma_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	db29      	blt.n	8001134 <socket+0xf8>
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	dd02      	ble.n	80010ea <socket+0xae>
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d018      	beq.n	800111a <socket+0xde>
 80010e8:	e024      	b.n	8001134 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	737b      	strb	r3, [r7, #13]
		spi_dma_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001106:	3304      	adds	r3, #4
 8001108:	b29a      	uxth	r2, r3
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4610      	mov	r0, r2
 8001110:	2102      	movs	r1, #2
 8001112:	461a      	mov	r2, r3
 8001114:	f7ff fb2a 	bl	800076c <spi_dma_send>
		
		break;
 8001118:	e00c      	b.n	8001134 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_dma_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001126:	3314      	adds	r3, #20
 8001128:	b29a      	uxth	r2, r3
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fbf6 	bl	8000920 <spi_dma_sendByte>
	}

	// execute socket open
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	b29b      	uxth	r3, r3
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b29b      	uxth	r3, r3
 800113c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	2101      	movs	r1, #1
 8001148:	f7ff fbea 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 800114c:	bf00      	nop
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fd9f 	bl	8000c94 <get_CRStatus>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f8      	bne.n	800114e <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fdb4 	bl	8000ccc <get_SRStatus>
 8001164:	4603      	mov	r3, r0
 8001166:	2b13      	cmp	r3, #19
 8001168:	bf0c      	ite	eq
 800116a:	2300      	moveq	r3, #0
 800116c:	2301      	movne	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73bb      	strb	r3, [r7, #14]
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <socket+0x140>
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	e000      	b.n	800117e <socket+0x142>

	// success return
	return sck_fd;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000480 	.word	0x20000480

0800118c <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 800118c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001190:	b08b      	sub	sp, #44	; 0x2c
 8001192:	af00      	add	r7, sp, #0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4601      	mov	r1, r0
 8001198:	73f9      	strb	r1, [r7, #15]
 800119a:	81ba      	strh	r2, [r7, #12]
 800119c:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	
	/// get real len 
	int i = 0; 
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]

	while ( buf[i] != '\0' && i < len) i++; 
 80011a2:	e002      	b.n	80011aa <send+0x1e>
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	3301      	adds	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <send+0x32>
 80011b6:	89ba      	ldrh	r2, [r7, #12]
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dcf2      	bgt.n	80011a4 <send+0x18>

	len = i;
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	81bb      	strh	r3, [r7, #12]
	
	uint16_t status = get_SRStatus(sck_fd);
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd81 	bl	8000ccc <get_SRStatus>
 80011ca:	4603      	mov	r3, r0
 80011cc:	83fb      	strh	r3, [r7, #30]

	
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b07      	cmp	r3, #7
 80011d2:	d804      	bhi.n	80011de <send+0x52>
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4a56      	ldr	r2, [pc, #344]	; (8001330 <send+0x1a4>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d002      	beq.n	80011e4 <send+0x58>
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e2:	e0a0      	b.n	8001326 <send+0x19a>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <send+0x64>
 80011ea:	89bb      	ldrh	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <send+0x6a>
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f4:	e097      	b.n	8001326 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd67 	bl	8000ccc <get_SRStatus>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b17      	cmp	r3, #23
 8001202:	d001      	beq.n	8001208 <send+0x7c>
 8001204:	2300      	movs	r3, #0
 8001206:	e08e      	b.n	8001326 <send+0x19a>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001208:	e004      	b.n	8001214 <send+0x88>
		if(flag == 1) return 0;	// NONE BLOCKING
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <send+0x88>
 8001210:	2300      	movs	r3, #0
 8001212:	e088      	b.n	8001326 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd74 	bl	8000d04 <get_TXFSRStatus>
 800121c:	4603      	mov	r3, r0
 800121e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f1      	beq.n	800120a <send+0x7e>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fd8f 	bl	8000d4c <get_TXWRStatus>
 800122e:	4603      	mov	r3, r0
 8001230:	83bb      	strh	r3, [r7, #28]

	// check write length
	if(send_size > len) send_size = len;
 8001232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001234:	89bb      	ldrh	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d901      	bls.n	800123e <send+0xb2>
 800123a:	89bb      	ldrh	r3, [r7, #12]
 800123c:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 800123e:	7bf9      	ldrb	r1, [r7, #15]
 8001240:	8bba      	ldrh	r2, [r7, #28]
 8001242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	f7ff fe3f 	bl	8000ecc <write_memory>

	// pointer update
	write_ptr += send_size;
 800124e:	8bba      	ldrh	r2, [r7, #28]
 8001250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001252:	4413      	add	r3, r2
 8001254:	83bb      	strh	r3, [r7, #28]
	set_TXWR(sck_fd, write_ptr);
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	8bbb      	ldrh	r3, [r7, #28]
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fdbd 	bl	8000ddc <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd95 	bl	8000d94 <get_TXRD>
 800126a:	4603      	mov	r3, r0
 800126c:	837b      	strh	r3, [r7, #26]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd6b 	bl	8000d4c <get_TXWRStatus>
 8001276:	4603      	mov	r3, r0
 8001278:	833b      	strh	r3, [r7, #24]
	uint8_t data [write_ptr-start]; 	
 800127a:	8bba      	ldrh	r2, [r7, #28]
 800127c:	8b7b      	ldrh	r3, [r7, #26]
 800127e:	1ad1      	subs	r1, r2, r3
 8001280:	466b      	mov	r3, sp
 8001282:	461e      	mov	r6, r3
 8001284:	1e4b      	subs	r3, r1, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	460b      	mov	r3, r1
 800128a:	461a      	mov	r2, r3
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001294:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001298:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800129c:	460b      	mov	r3, r1
 800129e:	461a      	mov	r2, r3
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	00dd      	lsls	r5, r3, #3
 80012a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80012aa:	00d4      	lsls	r4, r2, #3
 80012ac:	460b      	mov	r3, r1
 80012ae:	3307      	adds	r3, #7
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	ebad 0d03 	sub.w	sp, sp, r3
 80012b8:	466b      	mov	r3, sp
 80012ba:	3300      	adds	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
	spi_dma_read(start+0x8000, write_ptr-start );
 80012be:	8b7b      	ldrh	r3, [r7, #26]
 80012c0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	8bb9      	ldrh	r1, [r7, #28]
 80012c8:	8b7b      	ldrh	r3, [r7, #26]
 80012ca:	1acb      	subs	r3, r1, r3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fb71 	bl	80009b8 <spi_dma_read>
	memcpy(data, bufferRX +4, write_ptr-start);
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	8bb9      	ldrh	r1, [r7, #28]
 80012da:	8b7b      	ldrh	r3, [r7, #26]
 80012dc:	1acb      	subs	r3, r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	4914      	ldr	r1, [pc, #80]	; (8001334 <send+0x1a8>)
 80012e2:	461a      	mov	r2, r3
 80012e4:	f7fe ff7a 	bl	80001dc <memcpy>

	
	// test function 
	
	// send command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012f4:	3301      	adds	r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	2120      	movs	r1, #32
 80012fc:	f7ff fb10 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001300:	bf00      	nop
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fcc5 	bl	8000c94 <get_CRStatus>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f8      	bne.n	8001302 <send+0x176>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 8001310:	bf00      	nop
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd3d 	bl	8000d94 <get_TXRD>
 800131a:	4603      	mov	r3, r0
 800131c:	8bba      	ldrh	r2, [r7, #28]
 800131e:	429a      	cmp	r2, r3
 8001320:	d1f7      	bne.n	8001312 <send+0x186>

	return send_size;
 8001322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001324:	46b5      	mov	sp, r6
}
 8001326:	4618      	mov	r0, r3
 8001328:	372c      	adds	r7, #44	; 0x2c
 800132a:	46bd      	mov	sp, r7
 800132c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001330:	20000480 	.word	0x20000480
 8001334:	20013208 	.word	0x20013208

08001338 <recv>:
	return code is received data size.
	if received disconnect from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	4601      	mov	r1, r0
 8001342:	73f9      	strb	r1, [r7, #15]
 8001344:	81ba      	strh	r2, [r7, #12]
 8001346:	80fb      	strh	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d804      	bhi.n	8001358 <recv+0x20>
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	4a31      	ldr	r2, [pc, #196]	; (8001418 <recv+0xe0>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d002      	beq.n	800135e <recv+0x26>
 8001358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135c:	e057      	b.n	800140e <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <recv+0x32>
 8001364:	89bb      	ldrh	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <recv+0x38>
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	e04e      	b.n	800140e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fcaa 	bl	8000ccc <get_SRStatus>
 8001378:	4603      	mov	r3, r0
 800137a:	2b17      	cmp	r3, #23
 800137c:	d001      	beq.n	8001382 <recv+0x4a>
 800137e:	2300      	movs	r3, #0
 8001380:	e045      	b.n	800140e <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8001382:	e004      	b.n	800138e <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <recv+0x56>
 800138a:	2300      	movs	r3, #0
 800138c:	e03f      	b.n	800140e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fd3b 	bl	8000e0c <get_RXRSR>
 8001396:	4603      	mov	r3, r0
 8001398:	82fb      	strh	r3, [r7, #22]
 800139a:	8afb      	ldrh	r3, [r7, #22]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f1      	beq.n	8001384 <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fd56 	bl	8000e54 <get_RXRD>
 80013a8:	4603      	mov	r3, r0
 80013aa:	82bb      	strh	r3, [r7, #20]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 80013ac:	89ba      	ldrh	r2, [r7, #12]
 80013ae:	8afb      	ldrh	r3, [r7, #22]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	bf38      	it	cc
 80013b4:	4613      	movcc	r3, r2
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	7bf9      	ldrb	r1, [r7, #15]
 80013ba:	8aba      	ldrh	r2, [r7, #20]
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	f7ff fddb 	bl	8000f7c <read_memory>

	// update pointer
	read_ptr += read_len;
 80013c6:	8aba      	ldrh	r2, [r7, #20]
 80013c8:	8afb      	ldrh	r3, [r7, #22]
 80013ca:	4413      	add	r3, r2
 80013cc:	82bb      	strh	r3, [r7, #20]
	set_RXRD(sck_fd, read_ptr);
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	8abb      	ldrh	r3, [r7, #20]
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fd61 	bl	8000e9c <set_RXRD>

	// recive command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013e6:	3301      	adds	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	f7ff fa97 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 80013f2:	bf00      	nop
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fc4c 	bl	8000c94 <get_CRStatus>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f8      	bne.n	80013f4 <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 8001402:	89ba      	ldrh	r2, [r7, #12]
 8001404:	8afb      	ldrh	r3, [r7, #22]
 8001406:	429a      	cmp	r2, r3
 8001408:	bf38      	it	cc
 800140a:	4613      	movcc	r3, r2
 800140c:	b29b      	uxth	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000480 	.word	0x20000480

0800141c <listen>:
//	func listen 
//==================================================================================//


int	listen(int sck_fd)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db08      	blt.n	800143c <listen+0x20>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b07      	cmp	r3, #7
 800142e:	dc05      	bgt.n	800143c <listen+0x20>
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <listen+0xa0>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d002      	beq.n	8001442 <listen+0x26>
 800143c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001440:	e038      	b.n	80014b4 <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc40 	bl	8000ccc <get_SRStatus>
 800144c:	4603      	mov	r3, r0
 800144e:	2b13      	cmp	r3, #19
 8001450:	d002      	beq.n	8001458 <listen+0x3c>
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001456:	e02d      	b.n	80014b4 <listen+0x98>


	uint8_t b;
	spi_dma_read(W5200_Sn_IR(sck_fd), 1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	b29b      	uxth	r3, r3
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001464:	3302      	adds	r3, #2
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	2101      	movs	r1, #1
 800146c:	f7ff faa4 	bl	80009b8 <spi_dma_read>
	memcpy(&b, bufferRX + 4, 1);
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <listen+0xa4>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	73fb      	strb	r3, [r7, #15]

	// CONNECT command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	b29b      	uxth	r3, r3
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	2102      	movs	r1, #2
 800148a:	f7ff fa49 	bl	8000920 <spi_dma_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 800148e:	bf00      	nop
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fbfd 	bl	8000c94 <get_CRStatus>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f7      	bne.n	8001490 <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 80014a0:	bf00      	nop
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fc10 	bl	8000ccc <get_SRStatus>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b14      	cmp	r3, #20
 80014b0:	d1f7      	bne.n	80014a2 <listen+0x86>
	 
	return 0;	// listen success complete
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000480 	.word	0x20000480
 80014c0:	20013208 	.word	0x20013208

080014c4 <locate_interrupt>:

//==================================================================================
////	func locate_interrupt
//==================================================================================
void locate_interrupt()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	* interupt plus on which socket interrupt occured. \n
	* It depends on interrupt what follows
	* ****************************************************** */
	uint8_t sckt,		code; 
	// read on which socket interrupt occured 
	spi_dma_read(W5200_IMR2, 1);
 80014ca:	2036      	movs	r0, #54	; 0x36
 80014cc:	2101      	movs	r1, #1
 80014ce:	f7ff fa73 	bl	80009b8 <spi_dma_read>
	memcpy(&sckt, bufferRX + 4, 1);
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <locate_interrupt+0xb4>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]

	// read interrupt code 
	spi_dma_read(W5200_Sn_IR(sckt), 1);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014e2:	3302      	adds	r3, #2
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	2101      	movs	r1, #1
 80014ea:	f7ff fa65 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX +4 , 1);
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <locate_interrupt+0xb4>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	71bb      	strb	r3, [r7, #6]
       
	// clear interrupt on W5200
	spi_dma_sendByte(W5200_Sn_IR(sckt), 0xff);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014fe:	3302      	adds	r3, #2
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	21ff      	movs	r1, #255	; 0xff
 8001506:	f7ff fa0b 	bl	8000920 <spi_dma_sendByte>
	switch (code )
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	3b01      	subs	r3, #1
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d82d      	bhi.n	800156e <locate_interrupt+0xaa>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <locate_interrupt+0x54>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	0800156f 	.word	0x0800156f
 800151c:	0800156f 	.word	0x0800156f
 8001520:	0800156f 	.word	0x0800156f
 8001524:	08001559 	.word	0x08001559
 8001528:	0800156f 	.word	0x0800156f
 800152c:	0800156f 	.word	0x0800156f
 8001530:	0800156f 	.word	0x0800156f
 8001534:	0800156f 	.word	0x0800156f
 8001538:	0800156f 	.word	0x0800156f
 800153c:	0800156f 	.word	0x0800156f
 8001540:	0800156f 	.word	0x0800156f
 8001544:	0800156f 	.word	0x0800156f
 8001548:	0800156f 	.word	0x0800156f
 800154c:	0800156f 	.word	0x0800156f
 8001550:	0800156f 	.word	0x0800156f
 8001554:	0800156f 	.word	0x0800156f
			
			//vTaskSuspend(motorHBHandle);

			break;
		case 0x4:
			vTaskResume(motorHBHandle);
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <locate_interrupt+0xb8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fc5f 	bl	8002e20 <vTaskResume>
			vTaskResume(set_macTaskHandle); 
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <locate_interrupt+0xbc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fc5a 	bl	8002e20 <vTaskResume>
			break;
 800156c:	e000      	b.n	8001570 <locate_interrupt+0xac>
		case 0x10:
			break;
		default:
			break;		
 800156e:	bf00      	nop
	}
}
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20013208 	.word	0x20013208
 800157c:	200131f4 	.word	0x200131f4
 8001580:	200141bc 	.word	0x200141bc

08001584 <EXTI4_IRQHandler>:

//==================================================================================
//// EXTI4_IRQHandler
//==================================================================================
void EXTI4_IRQHandler(void) //EXTI0 ISR
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	 * Interuppt service routine for wiznet it locates interrupt and resets 
	 * interrupt line. 
	 * *******************************************************************/
	
	
	if(EXTI_GetITStatus(WIZ_IT_EXTI_LINE) != RESET) //check if EXTI line is asserted
 8001588:	2010      	movs	r0, #16
 800158a:	f004 fe6b 	bl	8006264 <EXTI_GetITStatus>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <EXTI4_IRQHandler+0x1a>
	{
		locate_interrupt();	
 8001594:	f7ff ff96 	bl	80014c4 <locate_interrupt>
		EXTI_ClearFlag(WIZ_IT_EXTI_LINE); //clear interrupt
 8001598:	2010      	movs	r0, #16
 800159a:	f004 fe49 	bl	8006230 <EXTI_ClearFlag>
 	
	}
}
 800159e:	bd80      	pop	{r7, pc}

080015a0 <set_macTask>:
//============================================================================/
// func set_macTask 
//==================================================================================

void set_macTask(void *pvParameters)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0e0      	sub	sp, #384	; 0x180
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	6018      	str	r0, [r3, #0]
	 * **********************************************************************/


	/* suspend task until init_W5200 is finished */
	//vTaskSuspend(set_macTaskHandle);
	vTaskSuspend(NULL);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f001 fbbe 	bl	8002d2c <vTaskSuspend>
	uint8_t	buf[50], buf1[256], oldbuf[50]; 
	int len; 
	int gl;
		/*create socket and send byte */
	socket_0 = socket(W5200_Sn_MR_TCP, 80, 0);
 80015b0:	2001      	movs	r0, #1
 80015b2:	2150      	movs	r1, #80	; 0x50
 80015b4:	2200      	movs	r2, #0
 80015b6:	f7ff fd41 	bl	800103c <socket>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <set_macTask+0xf8>)
 80015c0:	601a      	str	r2, [r3, #0]
	listen(socket_0);
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <set_macTask+0xf8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff28 	bl	800141c <listen>
        {

	
		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(NULL);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f001 fbad 	bl	8002d2c <vTaskSuspend>
		
		// interrupt on W5200 occured 
		// receive data 
		len = recv(socket_0, buf, 100, 0);
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <set_macTask+0xf8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	2264      	movs	r2, #100	; 0x64
 80015e2:	2300      	movs	r3, #0
 80015e4:	f7ff fea8 	bl	8001338 <recv>
 80015e8:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c

		if ( len < 3 )
 80015ec:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	dc1f      	bgt.n	8001634 <set_macTask+0x94>
		{
				
			FreeRTOS_CLIProcessCommand ( oldbuf, buf1, 256);
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001604:	f003 fa66 	bl	8004ad4 <FreeRTOS_CLIProcessCommand>
			
			int slen = strlen(buf1);
 8001608:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800160c:	4618      	mov	r0, r3
 800160e:	f006 f911 	bl	8007834 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			
			send(socket_0, buf1,  slen, gl);
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <set_macTask+0xf8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b2d8      	uxtb	r0, r3
 800161e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001622:	b29a      	uxth	r2, r3
 8001624:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001628:	b29b      	uxth	r3, r3
 800162a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800162e:	f7ff fdad 	bl	800118c <send>
		
	
		

		
	}	
 8001632:	e7cb      	b.n	80015cc <set_macTask+0x2c>

		}	
	
		else 
		{		
			buf[len-2]='\0';
 8001634:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001638:	3b02      	subs	r3, #2
 800163a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800163e:	4413      	add	r3, r2
 8001640:	2200      	movs	r2, #0
 8001642:	f803 2c44 	strb.w	r2, [r3, #-68]
			// proces data with CLI 
		
			FreeRTOS_CLIProcessCommand ( buf, buf1, 256);
 8001646:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800164a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001656:	f003 fa3d 	bl	8004ad4 <FreeRTOS_CLIProcessCommand>
			
			int slen = strlen(buf1);
 800165a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800165e:	4618      	mov	r0, r3
 8001660:	f006 f8e8 	bl	8007834 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			
			send(socket_0, buf1,  slen, gl);
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <set_macTask+0xf8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b2d8      	uxtb	r0, r3
 8001670:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001674:	b29a      	uxth	r2, r3
 8001676:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800167a:	b29b      	uxth	r3, r3
 800167c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001680:	f7ff fd84 	bl	800118c <send>

			strcpy(oldbuf, buf);
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f006 f872 	bl	8007778 <strcpy>
		
	
		

		
	}	
 8001694:	e79a      	b.n	80015cc <set_macTask+0x2c>
 8001696:	bf00      	nop
 8001698:	200131f8 	.word	0x200131f8

0800169c <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1


void init_USARTx(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 80016a2:	2020      	movs	r0, #32
 80016a4:	2101      	movs	r1, #1
 80016a6:	f005 f97b 	bl	80069a0 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 80016aa:	2004      	movs	r0, #4
 80016ac:	2101      	movs	r1, #1
 80016ae:	f005 f93f 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 80016b2:	2004      	movs	r0, #4
 80016b4:	2101      	movs	r1, #1
 80016b6:	f005 f93b 	bl	8006930 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 80016ba:	2040      	movs	r0, #64	; 0x40
 80016bc:	2101      	movs	r1, #1
 80016be:	f005 f937 	bl	8006930 <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 80016c2:	23c0      	movs	r3, #192	; 0xc0
 80016c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 80016c6:	2302      	movs	r3, #2
 80016c8:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 80016ca:	2303      	movs	r3, #3
 80016cc:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 80016ce:	2300      	movs	r3, #0
 80016d0:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 80016d2:	2301      	movs	r3, #1
 80016d4:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	4829      	ldr	r0, [pc, #164]	; (8001780 <init_USARTx+0xe4>)
 80016dc:	4619      	mov	r1, r3
 80016de:	f004 fe3f 	bl	8006360 <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80016e8:	2301      	movs	r3, #1
 80016ea:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80016ec:	2300      	movs	r3, #0
 80016ee:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80016f0:	2303      	movs	r3, #3
 80016f2:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4821      	ldr	r0, [pc, #132]	; (8001784 <init_USARTx+0xe8>)
 80016fe:	4619      	mov	r1, r3
 8001700:	f004 fe2e 	bl	8006360 <GPIO_Init>

	DD() // set PG8 high
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <init_USARTx+0xe8>)
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <init_USARTx+0xe8>)
 8001708:	8b12      	ldrh	r2, [r2, #24]
 800170a:	b292      	uxth	r2, r2
 800170c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001710:	b292      	uxth	r2, r2
 8001712:	831a      	strh	r2, [r3, #24]
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 8001714:	481a      	ldr	r0, [pc, #104]	; (8001780 <init_USARTx+0xe4>)
 8001716:	2106      	movs	r1, #6
 8001718:	2208      	movs	r2, #8
 800171a:	f004 ff37 	bl	800658c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 800171e:	4818      	ldr	r0, [pc, #96]	; (8001780 <init_USARTx+0xe4>)
 8001720:	2107      	movs	r1, #7
 8001722:	2208      	movs	r2, #8
 8001724:	f004 ff32 	bl	800658c <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 8001728:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800172c:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800172e:	2300      	movs	r3, #0
 8001730:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8001732:	2300      	movs	r3, #0
 8001734:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8001736:	2300      	movs	r3, #0
 8001738:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800173a:	2300      	movs	r3, #0
 800173c:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 800173e:	230c      	movs	r3, #12
 8001740:	827b      	strh	r3, [r7, #18]
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4810      	ldr	r0, [pc, #64]	; (8001788 <init_USARTx+0xec>)
 8001748:	4619      	mov	r1, r3
 800174a:	f005 fc1d 	bl	8006f88 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <init_USARTx+0xec>)
 8001750:	f240 5125 	movw	r1, #1317	; 0x525
 8001754:	2201      	movs	r2, #1
 8001756:	f005 fdd1 	bl	80072fc <USART_ITConfig>
	
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 800175a:	2347      	movs	r3, #71	; 0x47
 800175c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 4;;// this sets the priority group of the USART1 interrupts
 800175e:	2309      	movs	r3, #9
 8001760:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x6;		 // this sets the subpriority inside the group
 8001762:	2306      	movs	r3, #6
 8001764:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8001766:	2301      	movs	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fc95 	bl	800509c <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <init_USARTx+0xec>)
 8001774:	2101      	movs	r1, #1
 8001776:	f005 fd6d 	bl	8007254 <USART_Cmd>
}
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020800 	.word	0x40020800
 8001784:	40021800 	.word	0x40021800
 8001788:	40011400 	.word	0x40011400

0800178c <USART6_IRQHandler>:
	
	
}

// this is the interrupt request handler (IRQ) for ALL USART6 interrupts
void USART6_IRQHandler(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	
	

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USARTx, USART_IT_RXNE) ){
 8001792:	4820      	ldr	r0, [pc, #128]	; (8001814 <USART6_IRQHandler+0x88>)
 8001794:	f240 5125 	movw	r1, #1317	; 0x525
 8001798:	f005 fe6e 	bl	8007478 <USART_GetITStatus>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02d      	beq.n	80017fe <USART6_IRQHandler+0x72>
		
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USARTx->DR; // the character from the USART1 data register is saved in t
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <USART6_IRQHandler+0x88>)
 80017a4:	889b      	ldrh	r3, [r3, #4]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	71fb      	strb	r3, [r7, #7]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		xHigherPriorityTaskWoken_usart = pdFalse;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <USART6_IRQHandler+0x8c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

		
		if( (cnt < rx_length  ) && (cnt < MAX_STRLEN) ){ 
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <USART6_IRQHandler+0x90>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <USART6_IRQHandler+0x94>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	da0b      	bge.n	80017d6 <USART6_IRQHandler+0x4a>
			received_string[cnt] = t;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <USART6_IRQHandler+0x90>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <USART6_IRQHandler+0x98>)
 80017c4:	79f9      	ldrb	r1, [r7, #7]
 80017c6:	54d1      	strb	r1, [r2, r3]
			cnt++;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <USART6_IRQHandler+0x90>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <USART6_IRQHandler+0x90>)
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e013      	b.n	80017fe <USART6_IRQHandler+0x72>
		}
		else{ // otherwise reset the character counter and print the received string
			received_string[cnt] = t; 
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <USART6_IRQHandler+0x90>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <USART6_IRQHandler+0x98>)
 80017dc:	79f9      	ldrb	r1, [r7, #7]
 80017de:	54d1      	strb	r1, [r2, r3]
			cnt = 0;
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <USART6_IRQHandler+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		//	USART_ITConfig(USART6, USART_IT_RXNE, DISABLE); 
		taskENTER_CRITICAL();
 80017e6:	f002 fe0f 	bl	8004408 <vPortEnterCritical>
			xSemaphoreGiveFromISR(xSmphrUSART,&xHigherPriorityTaskWoken_usart );
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <USART6_IRQHandler+0x9c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <USART6_IRQHandler+0x8c>)
 80017f4:	2300      	movs	r3, #0
 80017f6:	f002 fa19 	bl	8003c2c <xQueueGenericSendFromISR>
		taskEXIT_CRITICAL();
 80017fa:	f002 fe15 	bl	8004428 <vPortExitCritical>
			//USART_puts(USART1, received_string);
		}


	}
 portYIELD_FROM_ISR( xHigherPriorityTaskWoken_usart );
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <USART6_IRQHandler+0x8c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <USART6_IRQHandler+0x82>
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <USART6_IRQHandler+0xa0>)
 8001808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800180c:	601a      	str	r2, [r3, #0]
	
}
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40011400 	.word	0x40011400
 8001818:	20000488 	.word	0x20000488
 800181c:	2000048c 	.word	0x2000048c
 8001820:	200141d8 	.word	0x200141d8
 8001824:	200141dc 	.word	0x200141dc
 8001828:	200141ac 	.word	0x200141ac
 800182c:	e000ed04 	.word	0xe000ed04

08001830 <motorControl_task>:


}

void motorControl_task(void * pvParameters)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b096      	sub	sp, #88	; 0x58
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	uint16_t spd[5]; 
	

	

	src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800183e:	2301      	movs	r3, #1
 8001840:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	
	spd[0]=1500;spd[1]=0;spd[2]=2250;spd[3]=10;spd[4]=10;
 8001850:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001854:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001858:	2300      	movs	r3, #0
 800185a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800185e:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001862:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001866:	230a      	movs	r3, #10
 8001868:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800186c:	230a      	movs	r3, #10
 800186e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	
	// create usart semaphore 
	xSmphrUSART = xSemaphoreCreateBinary();	
 8001872:	2001      	movs	r0, #1
 8001874:	2100      	movs	r1, #0
 8001876:	2203      	movs	r2, #3
 8001878:	f002 f8e6 	bl	8003a48 <xQueueGenericCreate>
 800187c:	4602      	mov	r2, r0
 800187e:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <motorControl_task+0x194>)
 8001880:	601a      	str	r2, [r3, #0]
	
	portTickType xDelay = 000 / portTICK_RATE_MS;	
 8001882:	2300      	movs	r3, #0
 8001884:	657b      	str	r3, [r7, #84]	; 0x54
	while (1)
	{

		
	
		if (xQueueReceive(QSpd_handle, (void *)&telegramR, xDelay  ) == pdPASS)
 8001886:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <motorControl_task+0x198>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001894:	2300      	movs	r3, #0
 8001896:	f002 fa33 	bl	8003d00 <xQueueGenericReceive>
 800189a:	4603      	mov	r3, r0
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 8090 	bne.w	80019c2 <motorControl_task+0x192>
		{
			switch ( telegramR.Qcmd )
 80018a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d87e      	bhi.n	80019a8 <motorControl_task+0x178>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <motorControl_task+0x80>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	080018c9 	.word	0x080018c9
 80018b4:	0800190b 	.word	0x0800190b
 80018b8:	080019a9 	.word	0x080019a9
 80018bc:	080019a9 	.word	0x080019a9
 80018c0:	0800192d 	.word	0x0800192d
 80018c4:	0800196f 	.word	0x0800196f
			{
				case SETDATA:

					src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80018d4:	2301      	movs	r3, #1
 80018d6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

				//	 //modbus_WIB( 0 , 3, src); 
					vTaskDelay ( 500 / portTICK_RATE_MS);
 80018e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e4:	f001 f9fa 	bl	8002cdc <vTaskDelay>
					
				//	 //modbus_WR(0, 5, telegramR.data);
					vTaskDelay ( 500 / portTICK_RATE_MS);
 80018e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ec:	f001 f9f6 	bl	8002cdc <vTaskDelay>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 80018f0:	2306      	movs	r3, #6
 80018f2:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <motorControl_task+0x198>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001902:	2300      	movs	r3, #0
 8001904:	f002 f8e2 	bl	8003acc <xQueueGenericSend>

					break;
 8001908:	e05b      	b.n	80019c2 <motorControl_task+0x192>
				       	
				
				case GETDATA:
					 //modbus_RR(0, 10, telegramS.data);
					vTaskDelay ( 500 / portTICK_RATE_MS);
 800190a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190e:	f001 f9e5 	bl	8002cdc <vTaskDelay>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001912:	2306      	movs	r3, #6
 8001914:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <motorControl_task+0x198>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001924:	2300      	movs	r3, #0
 8001926:	f002 f8d1 	bl	8003acc <xQueueGenericSend>

					break;
 800192a:	e04a      	b.n	80019c2 <motorControl_task+0x192>

				
				case START: 
					
					// set motor speed to 10% 
				         src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001932:	2301      	movs	r3, #1
 8001934:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001938:	2301      	movs	r3, #1
 800193a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

					 //modbus_WIB( 0 , 3, src); 
					vTaskDelay ( 5000 / portTICK_RATE_MS);
 8001944:	f241 3088 	movw	r0, #5000	; 0x1388
 8001948:	f001 f9c8 	bl	8002cdc <vTaskDelay>

					 //modbus_WR( 0, 5, spd);
					vTaskDelay ( 500 / portTICK_RATE_MS);
 800194c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001950:	f001 f9c4 	bl	8002cdc <vTaskDelay>

				//	vTaskResume(motorHeartBeatHandle);

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001954:	2306      	movs	r3, #6
 8001956:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <motorControl_task+0x198>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001966:	2300      	movs	r3, #0
 8001968:	f002 f8b0 	bl	8003acc <xQueueGenericSend>

					break;
 800196c:	e029      	b.n	80019c2 <motorControl_task+0x192>
				
				case STOP:
					
					// send stop bits to motor 
					src[0]=0; src[1]=0; src[2]=0; src[3]=0;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001974:	2300      	movs	r3, #0
 8001976:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					 //modbus_WIB( 0 , 3, src); 
					vTaskDelay ( 500 / portTICK_RATE_MS);
 8001986:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800198a:	f001 f9a7 	bl	8002cdc <vTaskDelay>



					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 800198e:	2306      	movs	r3, #6
 8001990:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <motorControl_task+0x198>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019a0:	2300      	movs	r3, #0
 80019a2:	f002 f893 	bl	8003acc <xQueueGenericSend>

					break; 
 80019a6:	e00c      	b.n	80019c2 <motorControl_task+0x192>

				default:

					telegramS.Qcmd = ERROR_MODBUS;
 80019a8:	2307      	movs	r3, #7
 80019aa:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <motorControl_task+0x198>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019ba:	2300      	movs	r3, #0
 80019bc:	f002 f886 	bl	8003acc <xQueueGenericSend>
					break;
 80019c0:	bf00      	nop
	
		

		
	
	}
 80019c2:	e760      	b.n	8001886 <motorControl_task+0x56>
 80019c4:	200141ac 	.word	0x200141ac
 80019c8:	200131fc 	.word	0x200131fc

080019cc <handleVariable_set>:
				int xParamLength,
				xQueueHandle Qhandle,
				uint8_t * Value,
				int xValueLength,
				int socket )
{
 80019cc:	b084      	sub	sp, #16
 80019ce:	b5b0      	push	{r4, r5, r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	f107 0c20 	add.w	ip, r7, #32
 80019d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 80019dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019de:	499a      	ldr	r1, [pc, #616]	; (8001c48 <handleVariable_set+0x27c>)
 80019e0:	2205      	movs	r2, #5
 80019e2:	f005 ff57 	bl	8007894 <strncmp>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8088 	bne.w	8001afe <handleVariable_set+0x132>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength] = '\0'; 	
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019f2:	4413      	add	r3, r2
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 80019f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80019fa:	f005 fe13 	bl	8007624 <atoi>
 80019fe:	4603      	mov	r3, r0
 8001a00:	81fb      	strh	r3, [r7, #14]
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	2b09      	cmp	r3, #9
 8001a06:	d902      	bls.n	8001a0e <handleVariable_set+0x42>
 8001a08:	89fb      	ldrh	r3, [r7, #14]
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d907      	bls.n	8001a1e <handleVariable_set+0x52>
		{
			// send error via TCP
			sprintf(pcWriteBuffer, "Error: speed is out of range [1,100]p : %d\n\n\0", s1);
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a12:	498e      	ldr	r1, [pc, #568]	; (8001c4c <handleVariable_set+0x280>)
 8001a14:	461a      	mov	r2, r3
 8001a16:	f000 fe37 	bl	8002688 <sprintf>
		//	pcWriteBuffer[11+ 3] = "\0"; 
			
			////send( socket_0, buf, 11+3, 0);

	       		return pdFALSE; 	
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e186      	b.n	8001d2c <handleVariable_set+0x360>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8001a1e:	89fb      	ldrh	r3, [r7, #14]
 8001a20:	461a      	mov	r2, r3
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	0091      	lsls	r1, r2, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	81fb      	strh	r3, [r7, #14]
		
		
		// setup telegram 
		
		telegram.data[0] = s1;
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	853b      	strh	r3, [r7, #40]	; 0x28
		telegram.data[1] = 0;	
 8001a38:	2300      	movs	r3, #0
 8001a3a:	857b      	strh	r3, [r7, #42]	; 0x2a
		telegram.data[2] = 2250;
 8001a3c:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001a40:	85bb      	strh	r3, [r7, #44]	; 0x2c
		telegram.data[3] = 10;	
 8001a42:	230a      	movs	r3, #10
 8001a44:	85fb      	strh	r3, [r7, #46]	; 0x2e
		telegram.data[4] = 10;	
 8001a46:	230a      	movs	r3, #10
 8001a48:	863b      	strh	r3, [r7, #48]	; 0x30
		telegram.size = 5;
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
		telegram.Qcmd = SETDATA;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3020 	strb.w	r3, [r7, #32]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <handleVariable_set+0x284>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b7e      	ldr	r3, [pc, #504]	; (8001c54 <handleVariable_set+0x288>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f107 0120 	add.w	r1, r7, #32
 8001a62:	461a      	mov	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	f002 f831 	bl	8003acc <xQueueGenericSend>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d133      	bne.n	8001ad8 <handleVariable_set+0x10c>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
 8001a70:	4b77      	ldr	r3, [pc, #476]	; (8001c50 <handleVariable_set+0x284>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <handleVariable_set+0x288>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f107 0120 	add.w	r1, r7, #32
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2300      	movs	r3, #0
 8001a82:	f002 f93d 	bl	8003d00 <xQueueGenericReceive>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d114      	bne.n	8001ab6 <handleVariable_set+0xea>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8001a8c:	2306      	movs	r3, #6
 8001a8e:	f887 3020 	strb.w	r3, [r7, #32]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 8001a92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a94:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <handleVariable_set+0x28c>)
 8001a96:	4615      	mov	r5, r2
 8001a98:	461c      	mov	r4, r3
 8001a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9c:	6028      	str	r0, [r5, #0]
 8001a9e:	6069      	str	r1, [r5, #4]
 8001aa0:	60aa      	str	r2, [r5, #8]
 8001aa2:	60eb      	str	r3, [r5, #12]
 8001aa4:	cc03      	ldmia	r4!, {r0, r1}
 8001aa6:	6128      	str	r0, [r5, #16]
 8001aa8:	6169      	str	r1, [r5, #20]
 8001aaa:	8823      	ldrh	r3, [r4, #0]
 8001aac:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8001aae:	2319      	movs	r3, #25
 8001ab0:	60bb      	str	r3, [r7, #8]
				//	//send( socket, buf, len, 0);


					return pdPASS;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e13a      	b.n	8001d2c <handleVariable_set+0x360>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 8001ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <handleVariable_set+0x290>)
 8001aba:	4615      	mov	r5, r2
 8001abc:	461c      	mov	r4, r3
 8001abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac0:	6028      	str	r0, [r5, #0]
 8001ac2:	6069      	str	r1, [r5, #4]
 8001ac4:	60aa      	str	r2, [r5, #8]
 8001ac6:	60eb      	str	r3, [r5, #12]
 8001ac8:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001aca:	6128      	str	r0, [r5, #16]
 8001acc:	6169      	str	r1, [r5, #20]
 8001ace:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 8001ad0:	231b      	movs	r3, #27
 8001ad2:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e129      	b.n	8001d2c <handleVariable_set+0x360>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8001ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ada:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <handleVariable_set+0x294>)
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae2:	6020      	str	r0, [r4, #0]
 8001ae4:	6061      	str	r1, [r4, #4]
 8001ae6:	60a2      	str	r2, [r4, #8]
 8001ae8:	60e3      	str	r3, [r4, #12]
 8001aea:	6828      	ldr	r0, [r5, #0]
 8001aec:	6120      	str	r0, [r4, #16]
 8001aee:	88aa      	ldrh	r2, [r5, #4]
 8001af0:	79ab      	ldrb	r3, [r5, #6]
 8001af2:	82a2      	strh	r2, [r4, #20]
 8001af4:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8001af6:	2316      	movs	r3, #22
 8001af8:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8001afa:	2300      	movs	r3, #0
 8001afc:	e116      	b.n	8001d2c <handleVariable_set+0x360>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8001afe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b00:	4958      	ldr	r1, [pc, #352]	; (8001c64 <handleVariable_set+0x298>)
 8001b02:	2206      	movs	r2, #6
 8001b04:	f005 fec6 	bl	8007894 <strncmp>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d16f      	bne.n	8001bee <handleVariable_set+0x222>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength] = '\0'; 	
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b12:	4413      	add	r3, r2
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 8001b18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b1a:	f005 fd83 	bl	8007624 <atoi>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b09      	cmp	r3, #9
 8001b26:	d902      	bls.n	8001b2e <handleVariable_set+0x162>
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d909      	bls.n	8001b42 <handleVariable_set+0x176>
		{
			// send error via TCP
			//
			xWriteBufferLen = 100; 
 8001b2e:	2364      	movs	r3, #100	; 0x64
 8001b30:	60bb      	str	r3, [r7, #8]
		//	uint8_t buf [len]; //= "Error: speed is out of range!\n\n");
			sprintf(pcWriteBuffer, "Error: speed is out of range [1,100]p : %d\n\n\0", s1);
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b36:	4945      	ldr	r1, [pc, #276]	; (8001c4c <handleVariable_set+0x280>)
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f000 fda5 	bl	8002688 <sprintf>
			//send( socket_0, buf, len, 0);

	       		return pdFALSE; 	
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e0f4      	b.n	8001d2c <handleVariable_set+0x360>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	461a      	mov	r2, r3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	0091      	lsls	r1, r2, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	80fb      	strh	r3, [r7, #6]
		
		
		// setup telegram 
		
		telegram.data[0] = s1; 
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	853b      	strh	r3, [r7, #40]	; 0x28
		telegram.size = 1; 
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
		telegram.Qcmd = SETDATA;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3020 	strb.w	r3, [r7, #32]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <handleVariable_set+0x284>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <handleVariable_set+0x288>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f107 0120 	add.w	r1, r7, #32
 8001b74:	461a      	mov	r2, r3
 8001b76:	2300      	movs	r3, #0
 8001b78:	f001 ffa8 	bl	8003acc <xQueueGenericSend>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d122      	bne.n	8001bc8 <handleVariable_set+0x1fc>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <handleVariable_set+0x284>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <handleVariable_set+0x288>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f107 0120 	add.w	r1, r7, #32
 8001b90:	461a      	mov	r2, r3
 8001b92:	2300      	movs	r3, #0
 8001b94:	f002 f8b4 	bl	8003d00 <xQueueGenericReceive>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d027      	beq.n	8001bee <handleVariable_set+0x222>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	f887 3020 	strb.w	r3, [r7, #32]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 8001ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <handleVariable_set+0x28c>)
 8001ba8:	4615      	mov	r5, r2
 8001baa:	461c      	mov	r4, r3
 8001bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bae:	6028      	str	r0, [r5, #0]
 8001bb0:	6069      	str	r1, [r5, #4]
 8001bb2:	60aa      	str	r2, [r5, #8]
 8001bb4:	60eb      	str	r3, [r5, #12]
 8001bb6:	cc03      	ldmia	r4!, {r0, r1}
 8001bb8:	6128      	str	r0, [r5, #16]
 8001bba:	6169      	str	r1, [r5, #20]
 8001bbc:	8823      	ldrh	r3, [r4, #0]
 8001bbe:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8001bc0:	2319      	movs	r3, #25
 8001bc2:	60bb      	str	r3, [r7, #8]
					//send( socket, buf, len, 0);


					return pdPASS;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b1      	b.n	8001d2c <handleVariable_set+0x360>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8001bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <handleVariable_set+0x294>)
 8001bcc:	4614      	mov	r4, r2
 8001bce:	461d      	mov	r5, r3
 8001bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd2:	6020      	str	r0, [r4, #0]
 8001bd4:	6061      	str	r1, [r4, #4]
 8001bd6:	60a2      	str	r2, [r4, #8]
 8001bd8:	60e3      	str	r3, [r4, #12]
 8001bda:	6828      	ldr	r0, [r5, #0]
 8001bdc:	6120      	str	r0, [r4, #16]
 8001bde:	88aa      	ldrh	r2, [r5, #4]
 8001be0:	79ab      	ldrb	r3, [r5, #6]
 8001be2:	82a2      	strh	r2, [r4, #20]
 8001be4:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8001be6:	2316      	movs	r3, #22
 8001be8:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8001bea:	2300      	movs	r3, #0
 8001bec:	e09e      	b.n	8001d2c <handleVariable_set+0x360>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 8001bee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001bf0:	491d      	ldr	r1, [pc, #116]	; (8001c68 <handleVariable_set+0x29c>)
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	f005 fe4e 	bl	8007894 <strncmp>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 8090 	bne.w	8001d20 <handleVariable_set+0x354>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	3b02      	subs	r3, #2
 8001c04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c06:	4413      	add	r3, r2
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 8001c0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c0e:	f005 fd09 	bl	8007624 <atoi>
 8001c12:	4603      	mov	r3, r0
 8001c14:	80bb      	strh	r3, [r7, #4]
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8001c16:	88bb      	ldrh	r3, [r7, #4]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d902      	bls.n	8001c22 <handleVariable_set+0x256>
 8001c1c:	88bb      	ldrh	r3, [r7, #4]
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d928      	bls.n	8001c74 <handleVariable_set+0x2a8>
		{
			// send error via TCP
			//
			xWriteBufferLen = strlen ( Value ) + 11 ; 
 8001c22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c24:	f005 fe06 	bl	8007834 <strlen>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	330b      	adds	r3, #11
 8001c2c:	60bb      	str	r3, [r7, #8]
			//uint8_t buf [len]; //= "Error: speed is out of range!\n\n");
			sprintf(pcWriteBuffer, "Errror : %d\n\n", s1);
 8001c2e:	88bb      	ldrh	r3, [r7, #4]
 8001c30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <handleVariable_set+0x2a0>)
 8001c34:	461a      	mov	r2, r3
 8001c36:	f000 fd27 	bl	8002688 <sprintf>
			pcWriteBuffer[11+ 3] = "\0"; 
 8001c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3c:	330e      	adds	r3, #14
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <handleVariable_set+0x2a4>)
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
			//send( socket_0, buf, len, 0);

	       		return pdFALSE; 	
 8001c44:	2300      	movs	r3, #0
 8001c46:	e071      	b.n	8001d2c <handleVariable_set+0x360>
 8001c48:	08007c30 	.word	0x08007c30
 8001c4c:	08007c38 	.word	0x08007c38
 8001c50:	200131fc 	.word	0x200131fc
 8001c54:	20000490 	.word	0x20000490
 8001c58:	08007c68 	.word	0x08007c68
 8001c5c:	08007c84 	.word	0x08007c84
 8001c60:	08007ca0 	.word	0x08007ca0
 8001c64:	08007cb8 	.word	0x08007cb8
 8001c68:	08007cc0 	.word	0x08007cc0
 8001c6c:	08007ccc 	.word	0x08007ccc
 8001c70:	08007cdc 	.word	0x08007cdc
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	461a      	mov	r2, r3
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	0091      	lsls	r1, r2, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	460b      	mov	r3, r1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	80bb      	strh	r3, [r7, #4]
		
		
		// setup telegram 
		
		telegram.data[0] = s1; 
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	853b      	strh	r3, [r7, #40]	; 0x28
		telegram.size = 1; 
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
		telegram.Qcmd = SETDATA;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3020 	strb.w	r3, [r7, #32]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <handleVariable_set+0x370>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <handleVariable_set+0x374>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f107 0120 	add.w	r1, r7, #32
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f001 ff0f 	bl	8003acc <xQueueGenericSend>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d122      	bne.n	8001cfa <handleVariable_set+0x32e>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <handleVariable_set+0x370>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <handleVariable_set+0x374>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f107 0120 	add.w	r1, r7, #32
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f002 f81b 	bl	8003d00 <xQueueGenericReceive>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d027      	beq.n	8001d20 <handleVariable_set+0x354>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	f887 3020 	strb.w	r3, [r7, #32]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 8001cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <handleVariable_set+0x378>)
 8001cda:	4615      	mov	r5, r2
 8001cdc:	461c      	mov	r4, r3
 8001cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce0:	6028      	str	r0, [r5, #0]
 8001ce2:	6069      	str	r1, [r5, #4]
 8001ce4:	60aa      	str	r2, [r5, #8]
 8001ce6:	60eb      	str	r3, [r5, #12]
 8001ce8:	cc03      	ldmia	r4!, {r0, r1}
 8001cea:	6128      	str	r0, [r5, #16]
 8001cec:	6169      	str	r1, [r5, #20]
 8001cee:	8823      	ldrh	r3, [r4, #0]
 8001cf0:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8001cf2:	2319      	movs	r3, #25
 8001cf4:	60bb      	str	r3, [r7, #8]
					//send( socket, buf, len, 0);


					return pdPASS;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e018      	b.n	8001d2c <handleVariable_set+0x360>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8001cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <handleVariable_set+0x37c>)
 8001cfe:	4614      	mov	r4, r2
 8001d00:	461d      	mov	r5, r3
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	6020      	str	r0, [r4, #0]
 8001d06:	6061      	str	r1, [r4, #4]
 8001d08:	60a2      	str	r2, [r4, #8]
 8001d0a:	60e3      	str	r3, [r4, #12]
 8001d0c:	6828      	ldr	r0, [r5, #0]
 8001d0e:	6120      	str	r0, [r4, #16]
 8001d10:	88aa      	ldrh	r2, [r5, #4]
 8001d12:	79ab      	ldrb	r3, [r5, #6]
 8001d14:	82a2      	strh	r2, [r4, #20]
 8001d16:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8001d18:	2316      	movs	r3, #22
 8001d1a:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e005      	b.n	8001d2c <handleVariable_set+0x360>
		}
	}

	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <handleVariable_set+0x380>)
 8001d22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d24:	4619      	mov	r1, r3
 8001d26:	f005 fd27 	bl	8007778 <strcpy>

			return 0; 
 8001d2a:	2300      	movs	r3, #0

}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d36:	b004      	add	sp, #16
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200131fc 	.word	0x200131fc
 8001d40:	20000490 	.word	0x20000490
 8001d44:	08007c68 	.word	0x08007c68
 8001d48:	08007ca0 	.word	0x08007ca0
 8001d4c:	08007bec 	.word	0x08007bec

08001d50 <handleVariable_get>:
				size_t xWriteBufferLen,
				uint8_t * Param, 
				int xParamLength,
				xQueueHandle Qhandle,
				int socket )
{
 8001d50:	b084      	sub	sp, #16
 8001d52:	b5b0      	push	{r4, r5, r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	f107 0c18 	add.w	ip, r7, #24
 8001d5c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 8001d60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d62:	4982      	ldr	r1, [pc, #520]	; (8001f6c <handleVariable_get+0x21c>)
 8001d64:	2205      	movs	r2, #5
 8001d66:	f005 fd95 	bl	8007894 <strncmp>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d15a      	bne.n	8001e26 <handleVariable_get+0xd6>
	{	
	
		telegram.Qcmd = GETDATA; 
 8001d70:	2301      	movs	r3, #1
 8001d72:	763b      	strb	r3, [r7, #24]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8001d74:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <handleVariable_get+0x220>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b7e      	ldr	r3, [pc, #504]	; (8001f74 <handleVariable_get+0x224>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f107 0118 	add.w	r1, r7, #24
 8001d82:	461a      	mov	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	f001 fea1 	bl	8003acc <xQueueGenericSend>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d137      	bne.n	8001e00 <handleVariable_get+0xb0>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
 8001d90:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <handleVariable_get+0x220>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <handleVariable_get+0x224>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f107 0118 	add.w	r1, r7, #24
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	f001 ffad 	bl	8003d00 <xQueueGenericReceive>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d118      	bne.n	8001dde <handleVariable_get+0x8e>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8001dac:	2306      	movs	r3, #6
 8001dae:	763b      	strb	r3, [r7, #24]
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
					telegram.data[3]/100,
 8001db0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
			{
				if ( telegram.Qcmd = SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 8001db2:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <handleVariable_get+0x228>)
 8001db4:	fba3 0302 	umull	r0, r3, r3, r2
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
					telegram.data[3]/100,
					telegram.data[3] % 100);
 8001dbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
			{
				if ( telegram.Qcmd = SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 8001dc0:	496d      	ldr	r1, [pc, #436]	; (8001f78 <handleVariable_get+0x228>)
 8001dc2:	fba1 c103 	umull	ip, r1, r1, r3
 8001dc6:	0949      	lsrs	r1, r1, #5
 8001dc8:	2064      	movs	r0, #100	; 0x64
 8001dca:	fb00 f101 	mul.w	r1, r0, r1
 8001dce:	1a5b      	subs	r3, r3, r1
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dd4:	4969      	ldr	r1, [pc, #420]	; (8001f7c <handleVariable_get+0x22c>)
 8001dd6:	f000 fc57 	bl	8002688 <sprintf>
					telegram.data[3] % 100);
				
					//send( socket, buf, len, 0);


					return pdPASS;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0bf      	b.n	8001f5e <handleVariable_get+0x20e>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 8001dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de0:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <handleVariable_get+0x230>)
 8001de2:	4615      	mov	r5, r2
 8001de4:	461c      	mov	r4, r3
 8001de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de8:	6028      	str	r0, [r5, #0]
 8001dea:	6069      	str	r1, [r5, #4]
 8001dec:	60aa      	str	r2, [r5, #8]
 8001dee:	60eb      	str	r3, [r5, #12]
 8001df0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001df2:	6128      	str	r0, [r5, #16]
 8001df4:	6169      	str	r1, [r5, #20]
 8001df6:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 8001df8:	231b      	movs	r3, #27
 8001dfa:	607b      	str	r3, [r7, #4]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e0ae      	b.n	8001f5e <handleVariable_get+0x20e>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8001e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e02:	4b60      	ldr	r3, [pc, #384]	; (8001f84 <handleVariable_get+0x234>)
 8001e04:	4614      	mov	r4, r2
 8001e06:	461d      	mov	r5, r3
 8001e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0a:	6020      	str	r0, [r4, #0]
 8001e0c:	6061      	str	r1, [r4, #4]
 8001e0e:	60a2      	str	r2, [r4, #8]
 8001e10:	60e3      	str	r3, [r4, #12]
 8001e12:	6828      	ldr	r0, [r5, #0]
 8001e14:	6120      	str	r0, [r4, #16]
 8001e16:	88aa      	ldrh	r2, [r5, #4]
 8001e18:	79ab      	ldrb	r3, [r5, #6]
 8001e1a:	82a2      	strh	r2, [r4, #20]
 8001e1c:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8001e1e:	2316      	movs	r3, #22
 8001e20:	607b      	str	r3, [r7, #4]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8001e22:	2300      	movs	r3, #0
 8001e24:	e09b      	b.n	8001f5e <handleVariable_get+0x20e>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8001e26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e28:	4957      	ldr	r1, [pc, #348]	; (8001f88 <handleVariable_get+0x238>)
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	f005 fd32 	bl	8007894 <strncmp>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d142      	bne.n	8001ebc <handleVariable_get+0x16c>
	
		
			
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <handleVariable_get+0x220>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <handleVariable_get+0x224>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f107 0118 	add.w	r1, r7, #24
 8001e44:	461a      	mov	r2, r3
 8001e46:	2300      	movs	r3, #0
 8001e48:	f001 fe40 	bl	8003acc <xQueueGenericSend>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d121      	bne.n	8001e96 <handleVariable_get+0x146>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <handleVariable_get+0x220>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <handleVariable_get+0x224>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f107 0118 	add.w	r1, r7, #24
 8001e60:	461a      	mov	r2, r3
 8001e62:	2300      	movs	r3, #0
 8001e64:	f001 ff4c 	bl	8003d00 <xQueueGenericReceive>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d026      	beq.n	8001ebc <handleVariable_get+0x16c>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8001e6e:	2306      	movs	r3, #6
 8001e70:	763b      	strb	r3, [r7, #24]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 8001e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e74:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <handleVariable_get+0x23c>)
 8001e76:	4615      	mov	r5, r2
 8001e78:	461c      	mov	r4, r3
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	6028      	str	r0, [r5, #0]
 8001e7e:	6069      	str	r1, [r5, #4]
 8001e80:	60aa      	str	r2, [r5, #8]
 8001e82:	60eb      	str	r3, [r5, #12]
 8001e84:	cc03      	ldmia	r4!, {r0, r1}
 8001e86:	6128      	str	r0, [r5, #16]
 8001e88:	6169      	str	r1, [r5, #20]
 8001e8a:	8823      	ldrh	r3, [r4, #0]
 8001e8c:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8001e8e:	2319      	movs	r3, #25
 8001e90:	607b      	str	r3, [r7, #4]
					//send( socket, buf, len, 0);


					return pdPASS;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e063      	b.n	8001f5e <handleVariable_get+0x20e>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8001e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e98:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <handleVariable_get+0x234>)
 8001e9a:	4614      	mov	r4, r2
 8001e9c:	461d      	mov	r5, r3
 8001e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea0:	6020      	str	r0, [r4, #0]
 8001ea2:	6061      	str	r1, [r4, #4]
 8001ea4:	60a2      	str	r2, [r4, #8]
 8001ea6:	60e3      	str	r3, [r4, #12]
 8001ea8:	6828      	ldr	r0, [r5, #0]
 8001eaa:	6120      	str	r0, [r4, #16]
 8001eac:	88aa      	ldrh	r2, [r5, #4]
 8001eae:	79ab      	ldrb	r3, [r5, #6]
 8001eb0:	82a2      	strh	r2, [r4, #20]
 8001eb2:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8001eb4:	2316      	movs	r3, #22
 8001eb6:	607b      	str	r3, [r7, #4]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e050      	b.n	8001f5e <handleVariable_get+0x20e>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 8001ebc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ebe:	4934      	ldr	r1, [pc, #208]	; (8001f90 <handleVariable_get+0x240>)
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	f005 fce7 	bl	8007894 <strncmp>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d142      	bne.n	8001f52 <handleVariable_get+0x202>
	
	
				
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <handleVariable_get+0x220>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <handleVariable_get+0x224>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f107 0118 	add.w	r1, r7, #24
 8001eda:	461a      	mov	r2, r3
 8001edc:	2300      	movs	r3, #0
 8001ede:	f001 fdf5 	bl	8003acc <xQueueGenericSend>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d121      	bne.n	8001f2c <handleVariable_get+0x1dc>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <handleVariable_get+0x220>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <handleVariable_get+0x224>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f107 0118 	add.w	r1, r7, #24
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f001 ff01 	bl	8003d00 <xQueueGenericReceive>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d026      	beq.n	8001f52 <handleVariable_get+0x202>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8001f04:	2306      	movs	r3, #6
 8001f06:	763b      	strb	r3, [r7, #24]
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 8001f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <handleVariable_get+0x23c>)
 8001f0c:	4615      	mov	r5, r2
 8001f0e:	461c      	mov	r4, r3
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	6028      	str	r0, [r5, #0]
 8001f14:	6069      	str	r1, [r5, #4]
 8001f16:	60aa      	str	r2, [r5, #8]
 8001f18:	60eb      	str	r3, [r5, #12]
 8001f1a:	cc03      	ldmia	r4!, {r0, r1}
 8001f1c:	6128      	str	r0, [r5, #16]
 8001f1e:	6169      	str	r1, [r5, #20]
 8001f20:	8823      	ldrh	r3, [r4, #0]
 8001f22:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8001f24:	2319      	movs	r3, #25
 8001f26:	607b      	str	r3, [r7, #4]
					//send( socket, buf, len, 0);


					return pdPASS;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e018      	b.n	8001f5e <handleVariable_get+0x20e>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8001f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <handleVariable_get+0x234>)
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f36:	6020      	str	r0, [r4, #0]
 8001f38:	6061      	str	r1, [r4, #4]
 8001f3a:	60a2      	str	r2, [r4, #8]
 8001f3c:	60e3      	str	r3, [r4, #12]
 8001f3e:	6828      	ldr	r0, [r5, #0]
 8001f40:	6120      	str	r0, [r4, #16]
 8001f42:	88aa      	ldrh	r2, [r5, #4]
 8001f44:	79ab      	ldrb	r3, [r5, #6]
 8001f46:	82a2      	strh	r2, [r4, #20]
 8001f48:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8001f4a:	2316      	movs	r3, #22
 8001f4c:	607b      	str	r3, [r7, #4]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e005      	b.n	8001f5e <handleVariable_get+0x20e>
		}
	}


	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <handleVariable_get+0x244>)
 8001f54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f56:	4619      	mov	r1, r3
 8001f58:	f005 fc0e 	bl	8007778 <strcpy>


			return 0; 
 8001f5c:	2300      	movs	r3, #0

}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001f68:	b004      	add	sp, #16
 8001f6a:	4770      	bx	lr
 8001f6c:	08007c30 	.word	0x08007c30
 8001f70:	200131fc 	.word	0x200131fc
 8001f74:	20000490 	.word	0x20000490
 8001f78:	51eb851f 	.word	0x51eb851f
 8001f7c:	08007ce0 	.word	0x08007ce0
 8001f80:	08007c84 	.word	0x08007c84
 8001f84:	08007ca0 	.word	0x08007ca0
 8001f88:	08007cb8 	.word	0x08007cb8
 8001f8c:	08007c68 	.word	0x08007c68
 8001f90:	08007cc0 	.word	0x08007cc0
 8001f94:	08007bec 	.word	0x08007bec

08001f98 <prvMotorCommand>:
 * ==============================================================================================*/

portBASE_TYPE prvMotorCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b09e      	sub	sp, #120	; 0x78
 8001f9c:	af0c      	add	r7, sp, #48	; 0x30
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	int xOptionLength, xParamLength, xValueLength; 
	QueueTelegram telegram; 
	
	// get option from command line 

	Option = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8001fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	2101      	movs	r1, #1
 8001fac:	461a      	mov	r2, r3
 8001fae:	f002 fe17 	bl	8004be0 <FreeRTOS_CLIGetParameter>
 8001fb2:	6478      	str	r0, [r7, #68]	; 0x44
					  1,  		   // first parameter
				  	  &xOptionLength // parameter string length
					  
					 );

	if ( Option == NULL)
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10e      	bne.n	8001fd8 <prvMotorCommand+0x40>
	{
		sprintf(pcWriteBuffer, "To few arguments. \n\n\0");
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4ba4      	ldr	r3, [pc, #656]	; (8002250 <prvMotorCommand+0x2b8>)
 8001fbe:	4615      	mov	r5, r2
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	6028      	str	r0, [r5, #0]
 8001fc6:	6069      	str	r1, [r5, #4]
 8001fc8:	60aa      	str	r2, [r5, #8]
 8001fca:	60eb      	str	r3, [r5, #12]
 8001fcc:	6820      	ldr	r0, [r4, #0]
 8001fce:	6128      	str	r0, [r5, #16]
 8001fd0:	7923      	ldrb	r3, [r4, #4]
 8001fd2:	752b      	strb	r3, [r5, #20]
		return pdFALSE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e183      	b.n	80022e0 <prvMotorCommand+0x348>
	}

	if (!strncmp(Option, "help", 4))
 8001fd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001fda:	499e      	ldr	r1, [pc, #632]	; (8002254 <prvMotorCommand+0x2bc>)
 8001fdc:	2204      	movs	r2, #4
 8001fde:	f005 fc59 	bl	8007894 <strncmp>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <prvMotorCommand+0x68>
	{
		strcpy(pcWriteBuffer, 
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4b9b      	ldr	r3, [pc, #620]	; (8002258 <prvMotorCommand+0x2c0>)
 8001fec:	4611      	mov	r1, r2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	23bc      	movs	r3, #188	; 0xbc
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f7fe f8f0 	bl	80001dc <memcpy>
			
			"\0"

		      );

		return pdPASS;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e16f      	b.n	80022e0 <prvMotorCommand+0x348>

	//================================================================================//
	//		CASE COMMAND SET [parameter name] [value]
	//================================================================================//

	if( !strncmp( Option, "set", 3) ) 
 8002000:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002002:	4996      	ldr	r1, [pc, #600]	; (800225c <prvMotorCommand+0x2c4>)
 8002004:	2203      	movs	r2, #3
 8002006:	f005 fc45 	bl	8007894 <strncmp>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d140      	bne.n	8002092 <prvMotorCommand+0xfa>
	{

		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002010:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	2102      	movs	r1, #2
 8002018:	461a      	mov	r2, r3
 800201a:	f002 fde1 	bl	8004be0 <FreeRTOS_CLIGetParameter>
 800201e:	6438      	str	r0, [r7, #64]	; 0x40
					  2,  		   // 2nd parameter
				  	  &xParamLength // parameter string length
					  
					 );
		Value = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002020:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	2103      	movs	r1, #3
 8002028:	461a      	mov	r2, r3
 800202a:	f002 fdd9 	bl	8004be0 <FreeRTOS_CLIGetParameter>
 800202e:	63f8      	str	r0, [r7, #60]	; 0x3c
					  
					 );
		
		// return pdFALSE if there is no 3rd parameter 

		if (Value==NULL||Param==NULL)
 8002030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <prvMotorCommand+0xa4>
 8002036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <prvMotorCommand+0xb2>
		{
			strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 800203c:	4b88      	ldr	r3, [pc, #544]	; (8002260 <prvMotorCommand+0x2c8>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	4619      	mov	r1, r3
 8002042:	f005 fb99 	bl	8007778 <strcpy>

			return pdFALSE; 
 8002046:	2300      	movs	r3, #0
 8002048:	e14a      	b.n	80022e0 <prvMotorCommand+0x348>

		}

		
		if ( handleVariable_set ( telegram, 
 800204a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800204c:	4b85      	ldr	r3, [pc, #532]	; (8002264 <prvMotorCommand+0x2cc>)
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002052:	4b85      	ldr	r3, [pc, #532]	; (8002268 <prvMotorCommand+0x2d0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fc      	ldr	r4, [r7, #12]
 8002058:	9403      	str	r4, [sp, #12]
 800205a:	68bc      	ldr	r4, [r7, #8]
 800205c:	9404      	str	r4, [sp, #16]
 800205e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002060:	9405      	str	r4, [sp, #20]
 8002062:	9006      	str	r0, [sp, #24]
 8002064:	9107      	str	r1, [sp, #28]
 8002066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002068:	9108      	str	r1, [sp, #32]
 800206a:	9209      	str	r2, [sp, #36]	; 0x24
 800206c:	930a      	str	r3, [sp, #40]	; 0x28
 800206e:	466b      	mov	r3, sp
 8002070:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002074:	ca07      	ldmia	r2, {r0, r1, r2}
 8002076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002080:	f7ff fca4 	bl	80019cc <handleVariable_set>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <prvMotorCommand+0xf6>
					   Param, 
					   xParamLength, 
					   QSpd_handle, 
					   Value,
					   xValueLength,  
					   socket_0)) return pdPASS;
 800208a:	2301      	movs	r3, #1
 800208c:	e128      	b.n	80022e0 <prvMotorCommand+0x348>

		
			
		return pdFALSE;
 800208e:	2300      	movs	r3, #0
 8002090:	e126      	b.n	80022e0 <prvMotorCommand+0x348>
	//================================================================================//
	//		CASE COMMAND GET [parameter name] [value]
	//================================================================================//


	if (!strncmp ( Option, "get", 3))
 8002092:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002094:	4975      	ldr	r1, [pc, #468]	; (800226c <prvMotorCommand+0x2d4>)
 8002096:	2203      	movs	r2, #3
 8002098:	f005 fbfc 	bl	8007894 <strncmp>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d134      	bne.n	800210c <prvMotorCommand+0x174>
	{
		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80020a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	2102      	movs	r1, #2
 80020aa:	461a      	mov	r2, r3
 80020ac:	f002 fd98 	bl	8004be0 <FreeRTOS_CLIGetParameter>
 80020b0:	6438      	str	r0, [r7, #64]	; 0x40
					  
					 );
			
		// return pdFALSE if there is no 3rd parameter 

		if(Value==NULL||Param==NULL)
 80020b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <prvMotorCommand+0x126>
 80020b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <prvMotorCommand+0x134>
		{
			strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 80020be:	4b68      	ldr	r3, [pc, #416]	; (8002260 <prvMotorCommand+0x2c8>)
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	4619      	mov	r1, r3
 80020c4:	f005 fb58 	bl	8007778 <strcpy>

			return pdFALSE; 
 80020c8:	2300      	movs	r3, #0
 80020ca:	e109      	b.n	80022e0 <prvMotorCommand+0x348>

		}

		
		if ( handleVariable_get ( telegram,
 80020cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <prvMotorCommand+0x2cc>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <prvMotorCommand+0x2d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	9003      	str	r0, [sp, #12]
 80020da:	68b8      	ldr	r0, [r7, #8]
 80020dc:	9004      	str	r0, [sp, #16]
 80020de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020e0:	9005      	str	r0, [sp, #20]
 80020e2:	9106      	str	r1, [sp, #24]
 80020e4:	9207      	str	r2, [sp, #28]
 80020e6:	9308      	str	r3, [sp, #32]
 80020e8:	466b      	mov	r3, sp
 80020ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80020ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fa:	f7ff fe29 	bl	8001d50 <handleVariable_get>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <prvMotorCommand+0x170>
					   xWriteBufferLen,
	
				           Param, 
					   xParamLength, 
					   QSpd_handle, 
					   socket_0)) return pdPASS;
 8002104:	2301      	movs	r3, #1
 8002106:	e0eb      	b.n	80022e0 <prvMotorCommand+0x348>
		return pdFALSE;
 8002108:	2300      	movs	r3, #0
 800210a:	e0e9      	b.n	80022e0 <prvMotorCommand+0x348>
	}
		
	//================================================================================//
	//		CASE COMMAND STOP 
	//================================================================================//
	if (!strncmp ( Option, "stop", 4))
 800210c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800210e:	4958      	ldr	r1, [pc, #352]	; (8002270 <prvMotorCommand+0x2d8>)
 8002110:	2204      	movs	r2, #4
 8002112:	f005 fbbf 	bl	8007894 <strncmp>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d15a      	bne.n	80021d2 <prvMotorCommand+0x23a>
	{

		telegram.Qcmd = STOP; 
 800211c:	2305      	movs	r3, #5
 800211e:	753b      	strb	r3, [r7, #20]
		telegram.size = 0; 
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) )
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <prvMotorCommand+0x2cc>)
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	4b52      	ldr	r3, [pc, #328]	; (8002274 <prvMotorCommand+0x2dc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f107 0214 	add.w	r2, r7, #20
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	2300      	movs	r3, #0
 8002138:	f001 fcc8 	bl	8003acc <xQueueGenericSend>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d034      	beq.n	80021ac <prvMotorCommand+0x214>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
 8002142:	4b48      	ldr	r3, [pc, #288]	; (8002264 <prvMotorCommand+0x2cc>)
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <prvMotorCommand+0x2dc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f107 0214 	add.w	r2, r7, #20
 800214e:	4608      	mov	r0, r1
 8002150:	4611      	mov	r1, r2
 8002152:	461a      	mov	r2, r3
 8002154:	2300      	movs	r3, #0
 8002156:	f001 fdd3 	bl	8003d00 <xQueueGenericReceive>
 800215a:	4603      	mov	r3, r0
 800215c:	2b01      	cmp	r3, #1
 800215e:	d114      	bne.n	800218a <prvMotorCommand+0x1f2>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8002160:	2306      	movs	r3, #6
 8002162:	753b      	strb	r3, [r7, #20]
				{	
					sprintf(pcWriteBuffer ,"Motor succsesfully stopped.\n\n");
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <prvMotorCommand+0x2e0>)
 8002168:	4615      	mov	r5, r2
 800216a:	461c      	mov	r4, r3
 800216c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216e:	6028      	str	r0, [r5, #0]
 8002170:	6069      	str	r1, [r5, #4]
 8002172:	60aa      	str	r2, [r5, #8]
 8002174:	60eb      	str	r3, [r5, #12]
 8002176:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002178:	6128      	str	r0, [r5, #16]
 800217a:	6169      	str	r1, [r5, #20]
 800217c:	61aa      	str	r2, [r5, #24]
 800217e:	8823      	ldrh	r3, [r4, #0]
 8002180:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29 ; 	
 8002182:	231d      	movs	r3, #29
 8002184:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 8002186:	2301      	movs	r3, #1
 8002188:	e0aa      	b.n	80022e0 <prvMotorCommand+0x348>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <prvMotorCommand+0x2e4>)
 800218e:	4615      	mov	r5, r2
 8002190:	461c      	mov	r4, r3
 8002192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002194:	6028      	str	r0, [r5, #0]
 8002196:	6069      	str	r1, [r5, #4]
 8002198:	60aa      	str	r2, [r5, #8]
 800219a:	60eb      	str	r3, [r5, #12]
 800219c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800219e:	6128      	str	r0, [r5, #16]
 80021a0:	6169      	str	r1, [r5, #20]
 80021a2:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 80021a4:	231b      	movs	r3, #27
 80021a6:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 80021a8:	2300      	movs	r3, #0
 80021aa:	e099      	b.n	80022e0 <prvMotorCommand+0x348>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <prvMotorCommand+0x2e8>)
 80021b0:	4614      	mov	r4, r2
 80021b2:	461d      	mov	r5, r3
 80021b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b6:	6020      	str	r0, [r4, #0]
 80021b8:	6061      	str	r1, [r4, #4]
 80021ba:	60a2      	str	r2, [r4, #8]
 80021bc:	60e3      	str	r3, [r4, #12]
 80021be:	6828      	ldr	r0, [r5, #0]
 80021c0:	6120      	str	r0, [r4, #16]
 80021c2:	88aa      	ldrh	r2, [r5, #4]
 80021c4:	79ab      	ldrb	r3, [r5, #6]
 80021c6:	82a2      	strh	r2, [r4, #20]
 80021c8:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80021ca:	2316      	movs	r3, #22
 80021cc:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80021ce:	2300      	movs	r3, #0
 80021d0:	e086      	b.n	80022e0 <prvMotorCommand+0x348>
	}
	//================================================================================//
	//		CASE COMMAND START
	//================================================================================//

	if (!strncmp ( Option, "start", 5))
 80021d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80021d4:	492b      	ldr	r1, [pc, #172]	; (8002284 <prvMotorCommand+0x2ec>)
 80021d6:	2205      	movs	r2, #5
 80021d8:	f005 fb5c 	bl	8007894 <strncmp>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d178      	bne.n	80022d4 <prvMotorCommand+0x33c>
	{
		telegram.Qcmd = START; 
 80021e2:	2304      	movs	r3, #4
 80021e4:	753b      	strb	r3, [r7, #20]
		telegram.size = 0; 
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <prvMotorCommand+0x2cc>)
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <prvMotorCommand+0x2dc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f107 0214 	add.w	r2, r7, #20
 80021f6:	4608      	mov	r0, r1
 80021f8:	4611      	mov	r1, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	f001 fc65 	bl	8003acc <xQueueGenericSend>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d152      	bne.n	80022ae <prvMotorCommand+0x316>
		{	
		//	vTaskDelay(500/portTICK_RATE_MS);		
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay) == pdPASS)
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <prvMotorCommand+0x2cc>)
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <prvMotorCommand+0x2dc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f107 0214 	add.w	r2, r7, #20
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	2300      	movs	r3, #0
 800221c:	f001 fd70 	bl	8003d00 <xQueueGenericReceive>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	d132      	bne.n	800228c <prvMotorCommand+0x2f4>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8002226:	2306      	movs	r3, #6
 8002228:	753b      	strb	r3, [r7, #20]
				{	
					sprintf(pcWriteBuffer , "Motor succsesfully started.\n\n");
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <prvMotorCommand+0x2f0>)
 800222e:	4615      	mov	r5, r2
 8002230:	461c      	mov	r4, r3
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	6028      	str	r0, [r5, #0]
 8002236:	6069      	str	r1, [r5, #4]
 8002238:	60aa      	str	r2, [r5, #8]
 800223a:	60eb      	str	r3, [r5, #12]
 800223c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800223e:	6128      	str	r0, [r5, #16]
 8002240:	6169      	str	r1, [r5, #20]
 8002242:	61aa      	str	r2, [r5, #24]
 8002244:	8823      	ldrh	r3, [r4, #0]
 8002246:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29; 	
 8002248:	231d      	movs	r3, #29
 800224a:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 800224c:	2301      	movs	r3, #1
 800224e:	e047      	b.n	80022e0 <prvMotorCommand+0x348>
 8002250:	08007cf8 	.word	0x08007cf8
 8002254:	08007d10 	.word	0x08007d10
 8002258:	08007d18 	.word	0x08007d18
 800225c:	08007dd8 	.word	0x08007dd8
 8002260:	08007bec 	.word	0x08007bec
 8002264:	200131fc 	.word	0x200131fc
 8002268:	200131f8 	.word	0x200131f8
 800226c:	08007ddc 	.word	0x08007ddc
 8002270:	08007de0 	.word	0x08007de0
 8002274:	20000490 	.word	0x20000490
 8002278:	08007de8 	.word	0x08007de8
 800227c:	08007c84 	.word	0x08007c84
 8002280:	08007ca0 	.word	0x08007ca0
 8002284:	08007e08 	.word	0x08007e08
 8002288:	08007e10 	.word	0x08007e10
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <prvMotorCommand+0x350>)
 8002290:	4615      	mov	r5, r2
 8002292:	461c      	mov	r4, r3
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	6028      	str	r0, [r5, #0]
 8002298:	6069      	str	r1, [r5, #4]
 800229a:	60aa      	str	r2, [r5, #8]
 800229c:	60eb      	str	r3, [r5, #12]
 800229e:	cc07      	ldmia	r4!, {r0, r1, r2}
 80022a0:	6128      	str	r0, [r5, #16]
 80022a2:	6169      	str	r1, [r5, #20]
 80022a4:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 80022a6:	231b      	movs	r3, #27
 80022a8:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 80022aa:	2300      	movs	r3, #0
 80022ac:	e018      	b.n	80022e0 <prvMotorCommand+0x348>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer,"Error sending Queue!\n\n");
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <prvMotorCommand+0x354>)
 80022b2:	4614      	mov	r4, r2
 80022b4:	461d      	mov	r5, r3
 80022b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b8:	6020      	str	r0, [r4, #0]
 80022ba:	6061      	str	r1, [r4, #4]
 80022bc:	60a2      	str	r2, [r4, #8]
 80022be:	60e3      	str	r3, [r4, #12]
 80022c0:	6828      	ldr	r0, [r5, #0]
 80022c2:	6120      	str	r0, [r4, #16]
 80022c4:	88aa      	ldrh	r2, [r5, #4]
 80022c6:	79ab      	ldrb	r3, [r5, #6]
 80022c8:	82a2      	strh	r2, [r4, #20]
 80022ca:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80022cc:	2316      	movs	r3, #22
 80022ce:	60bb      	str	r3, [r7, #8]
			//send( socket_0, buf, len, 0);

			return pdFALSE; 	
 80022d0:	2300      	movs	r3, #0
 80022d2:	e005      	b.n	80022e0 <prvMotorCommand+0x348>


	}


	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <prvMotorCommand+0x358>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	4619      	mov	r1, r3
 80022da:	f005 fa4d 	bl	8007778 <strcpy>
		
	return pdFALSE;
 80022de:	2300      	movs	r3, #0


}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3748      	adds	r7, #72	; 0x48
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bdb0      	pop	{r4, r5, r7, pc}
 80022e8:	08007c84 	.word	0x08007c84
 80022ec:	08007ca0 	.word	0x08007ca0
 80022f0:	08007bec 	.word	0x08007bec

080022f4 <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <printchar+0x24>
		**str = (char)c;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
		++(*str);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <prints>:
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
static int prints(char **out, const char *string, int width, int pad)
{
 8002324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8002334:	2400      	movs	r4, #0
 8002336:	2620      	movs	r6, #32

	if (width > 0) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	dd19      	ble.n	8002372 <prints+0x4e>
		register int len = 0;
 800233e:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8002340:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8002344:	e002      	b.n	800234c <prints+0x28>
 8002346:	3501      	adds	r5, #1
 8002348:	f108 0801 	add.w	r8, r8, #1
 800234c:	f898 3000 	ldrb.w	r3, [r8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f8      	bne.n	8002346 <prints+0x22>
		if (len >= width) width = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	429d      	cmp	r5, r3
 8002358:	db02      	blt.n	8002360 <prints+0x3c>
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	e002      	b.n	8002366 <prints+0x42>
		else width -= len;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1b5b      	subs	r3, r3, r5
 8002364:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d000      	beq.n	8002372 <prints+0x4e>
 8002370:	2630      	movs	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <prints+0x70>
		for ( ; width > 0; --width) {
 800237c:	e007      	b.n	800238e <prints+0x6a>
			printchar (out, padchar);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	4631      	mov	r1, r6
 8002382:	f7ff ffb7 	bl	80022f4 <printchar>
			++pc;
 8002386:	3401      	adds	r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	dcf4      	bgt.n	800237e <prints+0x5a>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002394:	e009      	b.n	80023aa <prints+0x86>
		printchar (out, *string);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	4619      	mov	r1, r3
 800239e:	f7ff ffa9 	bl	80022f4 <printchar>
		++pc;
 80023a2:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f1      	bne.n	8002396 <prints+0x72>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80023b2:	e007      	b.n	80023c4 <prints+0xa0>
		printchar (out, padchar);
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	4631      	mov	r1, r6
 80023b8:	f7ff ff9c 	bl	80022f4 <printchar>
		++pc;
 80023bc:	3401      	adds	r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	dcf4      	bgt.n	80023b4 <prints+0x90>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 80023ca:	4623      	mov	r3, r4
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d6:	bf00      	nop

080023d8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80023d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023dc:	b089      	sub	sp, #36	; 0x24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80023e8:	f04f 0900 	mov.w	r9, #0
 80023ec:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
 80023f0:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <printi+0x3c>
		print_buf[0] = '0';
 80023f8:	2330      	movs	r3, #48	; 0x30
 80023fa:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 80023fc:	2300      	movs	r3, #0
 80023fe:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	4619      	mov	r1, r3
 8002408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800240a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800240c:	f7ff ff8a 	bl	8002324 <prints>
 8002410:	4603      	mov	r3, r0
 8002412:	e049      	b.n	80024a8 <printi+0xd0>
	}

	if (sg && b == 10 && i < 0) {
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <printi+0x58>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0a      	cmp	r3, #10
 800241e:	d107      	bne.n	8002430 <printi+0x58>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da04      	bge.n	8002430 <printi+0x58>
		neg = 1;
 8002426:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	425b      	negs	r3, r3
 800242e:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8002430:	f107 0414 	add.w	r4, r7, #20
 8002434:	340b      	adds	r4, #11
	*s = '\0';
 8002436:	2300      	movs	r3, #0
 8002438:	7023      	strb	r3, [r4, #0]

	while (u) {
 800243a:	e013      	b.n	8002464 <printi+0x8c>
		t = (unsigned int)u % b;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	fbb5 f2f3 	udiv	r2, r5, r3
 8002442:	fb03 f302 	mul.w	r3, r3, r2
 8002446:	1aeb      	subs	r3, r5, r3
 8002448:	461e      	mov	r6, r3
		if( t >= 10 )
 800244a:	2e09      	cmp	r6, #9
 800244c:	dd02      	ble.n	8002454 <printi+0x7c>
			t += letbase - '0' - 10;
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	3b3a      	subs	r3, #58	; 0x3a
 8002452:	441e      	add	r6, r3
		*--s = (char)(t + '0');
 8002454:	3c01      	subs	r4, #1
 8002456:	b2f3      	uxtb	r3, r6
 8002458:	3330      	adds	r3, #48	; 0x30
 800245a:	b2db      	uxtb	r3, r3
 800245c:	7023      	strb	r3, [r4, #0]
		u /= b;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8002464:	2d00      	cmp	r5, #0
 8002466:	d1e9      	bne.n	800243c <printi+0x64>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
 8002468:	f1b9 0f00 	cmp.w	r9, #0
 800246c:	d014      	beq.n	8002498 <printi+0xc0>
		if( width && (pad & PAD_ZERO) ) {
 800246e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <printi+0xba>
 8002474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <printi+0xba>
			printchar (out, '-');
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	212d      	movs	r1, #45	; 0x2d
 8002482:	f7ff ff37 	bl	80022f4 <printchar>
			++pc;
 8002486:	f108 0801 	add.w	r8, r8, #1
			--width;
 800248a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248c:	3b01      	subs	r3, #1
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
 8002490:	e002      	b.n	8002498 <printi+0xc0>
		}
		else {
			*--s = '-';
 8002492:	3c01      	subs	r4, #1
 8002494:	232d      	movs	r3, #45	; 0x2d
 8002496:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	4621      	mov	r1, r4
 800249c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800249e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a0:	f7ff ff40 	bl	8002324 <prints>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4443      	add	r3, r8
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3724      	adds	r7, #36	; 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024b2:	bf00      	nop

080024b4 <print>:

static int print( char **out, const char *format, va_list args )
{
 80024b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b8:	b08a      	sub	sp, #40	; 0x28
 80024ba:	af04      	add	r7, sp, #16
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80024c2:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80024c4:	e0cc      	b.n	8002660 <print+0x1ac>
		if (*format == '%') {
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b25      	cmp	r3, #37	; 0x25
 80024cc:	f040 80be 	bne.w	800264c <print+0x198>
			++format;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	3301      	adds	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80024d6:	2600      	movs	r6, #0
 80024d8:	4635      	mov	r5, r6
			if (*format == '\0') break;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d100      	bne.n	80024e4 <print+0x30>
 80024e2:	e0c2      	b.n	800266a <print+0x1b6>
			if (*format == '%') goto out;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b25      	cmp	r3, #37	; 0x25
 80024ea:	d100      	bne.n	80024ee <print+0x3a>
 80024ec:	e0ae      	b.n	800264c <print+0x198>
			if (*format == '-') {
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b2d      	cmp	r3, #45	; 0x2d
 80024f4:	d104      	bne.n	8002500 <print+0x4c>
				++format;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80024fc:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80024fe:	e005      	b.n	800250c <print+0x58>
 8002500:	e004      	b.n	800250c <print+0x58>
				++format;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	3301      	adds	r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8002508:	f046 0602 	orr.w	r6, r6, #2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b30      	cmp	r3, #48	; 0x30
 8002512:	d0f6      	beq.n	8002502 <print+0x4e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002514:	e00b      	b.n	800252e <print+0x7a>
				width *= 10;
 8002516:	462b      	mov	r3, r5
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	442b      	add	r3, r5
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	461d      	mov	r5, r3
				width += *format - '0';
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	3b30      	subs	r3, #48	; 0x30
 8002526:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3301      	adds	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b2f      	cmp	r3, #47	; 0x2f
 8002534:	d903      	bls.n	800253e <print+0x8a>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b39      	cmp	r3, #57	; 0x39
 800253c:	d9eb      	bls.n	8002516 <print+0x62>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b73      	cmp	r3, #115	; 0x73
 8002544:	d113      	bne.n	800256e <print+0xba>
				register char *s = (char *)va_arg( args, int );
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1d1a      	adds	r2, r3, #4
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8002550:	f1b8 0f00 	cmp.w	r8, #0
 8002554:	d001      	beq.n	800255a <print+0xa6>
 8002556:	4643      	mov	r3, r8
 8002558:	e000      	b.n	800255c <print+0xa8>
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <print+0x1d0>)
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	4619      	mov	r1, r3
 8002560:	462a      	mov	r2, r5
 8002562:	4633      	mov	r3, r6
 8002564:	f7ff fede 	bl	8002324 <prints>
 8002568:	4603      	mov	r3, r0
 800256a:	441c      	add	r4, r3
				continue;
 800256c:	e075      	b.n	800265a <print+0x1a6>
			}
			if( *format == 'd' || *format == 'i' ) {
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d003      	beq.n	800257e <print+0xca>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b69      	cmp	r3, #105	; 0x69
 800257c:	d110      	bne.n	80025a0 <print+0xec>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	1d1a      	adds	r2, r3, #4
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	9500      	str	r5, [sp, #0]
 8002588:	9601      	str	r6, [sp, #4]
 800258a:	2261      	movs	r2, #97	; 0x61
 800258c:	9202      	str	r2, [sp, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	4619      	mov	r1, r3
 8002592:	220a      	movs	r2, #10
 8002594:	2301      	movs	r3, #1
 8002596:	f7ff ff1f 	bl	80023d8 <printi>
 800259a:	4603      	mov	r3, r0
 800259c:	441c      	add	r4, r3
				continue;
 800259e:	e05c      	b.n	800265a <print+0x1a6>
			}
			if( *format == 'x' ) {
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b78      	cmp	r3, #120	; 0x78
 80025a6:	d110      	bne.n	80025ca <print+0x116>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	1d1a      	adds	r2, r3, #4
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	9500      	str	r5, [sp, #0]
 80025b2:	9601      	str	r6, [sp, #4]
 80025b4:	2261      	movs	r2, #97	; 0x61
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	4619      	mov	r1, r3
 80025bc:	2210      	movs	r2, #16
 80025be:	2300      	movs	r3, #0
 80025c0:	f7ff ff0a 	bl	80023d8 <printi>
 80025c4:	4603      	mov	r3, r0
 80025c6:	441c      	add	r4, r3
				continue;
 80025c8:	e047      	b.n	800265a <print+0x1a6>
			}
			if( *format == 'X' ) {
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b58      	cmp	r3, #88	; 0x58
 80025d0:	d110      	bne.n	80025f4 <print+0x140>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	1d1a      	adds	r2, r3, #4
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	9500      	str	r5, [sp, #0]
 80025dc:	9601      	str	r6, [sp, #4]
 80025de:	2241      	movs	r2, #65	; 0x41
 80025e0:	9202      	str	r2, [sp, #8]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	4619      	mov	r1, r3
 80025e6:	2210      	movs	r2, #16
 80025e8:	2300      	movs	r3, #0
 80025ea:	f7ff fef5 	bl	80023d8 <printi>
 80025ee:	4603      	mov	r3, r0
 80025f0:	441c      	add	r4, r3
				continue;
 80025f2:	e032      	b.n	800265a <print+0x1a6>
			}
			if( *format == 'u' ) {
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b75      	cmp	r3, #117	; 0x75
 80025fa:	d110      	bne.n	800261e <print+0x16a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	1d1a      	adds	r2, r3, #4
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	9500      	str	r5, [sp, #0]
 8002606:	9601      	str	r6, [sp, #4]
 8002608:	2261      	movs	r2, #97	; 0x61
 800260a:	9202      	str	r2, [sp, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	4619      	mov	r1, r3
 8002610:	220a      	movs	r2, #10
 8002612:	2300      	movs	r3, #0
 8002614:	f7ff fee0 	bl	80023d8 <printi>
 8002618:	4603      	mov	r3, r0
 800261a:	441c      	add	r4, r3
				continue;
 800261c:	e01d      	b.n	800265a <print+0x1a6>
			}
			if( *format == 'c' ) {
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b63      	cmp	r3, #99	; 0x63
 8002624:	d119      	bne.n	800265a <print+0x1a6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	1d1a      	adds	r2, r3, #4
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8002632:	2300      	movs	r3, #0
 8002634:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	4619      	mov	r1, r3
 800263e:	462a      	mov	r2, r5
 8002640:	4633      	mov	r3, r6
 8002642:	f7ff fe6f 	bl	8002324 <prints>
 8002646:	4603      	mov	r3, r0
 8002648:	441c      	add	r4, r3
				continue;
 800264a:	e006      	b.n	800265a <print+0x1a6>
			}
		}
		else {
		out:
			printchar (out, *format);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	4619      	mov	r1, r3
 8002654:	f7ff fe4e 	bl	80022f4 <printchar>
			++pc;
 8002658:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f47f af2e 	bne.w	80024c6 <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <print+0x1c4>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8002678:	4623      	mov	r3, r4
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002684:	08007e30 	.word	0x08007e30

08002688 <sprintf>:
	va_start( args, format );
	return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8002688:	b40e      	push	{r1, r2, r3}
 800268a:	b580      	push	{r7, lr}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args, format );
 8002692:	f107 0320 	add.w	r3, r7, #32
 8002696:	60fb      	str	r3, [r7, #12]
	return print( &out, format, args );
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	4618      	mov	r0, r3
 800269c:	69f9      	ldr	r1, [r7, #28]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f7ff ff08 	bl	80024b4 <print>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026b0:	b003      	add	sp, #12
 80026b2:	4770      	bx	lr

080026b4 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <NVIC_SetPendingIRQ+0x30>)
 80026c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026c4:	0952      	lsrs	r2, r2, #5
 80026c6:	79f9      	ldrb	r1, [r7, #7]
 80026c8:	f001 011f 	and.w	r1, r1, #31
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f101 	lsl.w	r1, r0, r1
 80026d2:	3240      	adds	r2, #64	; 0x40
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af04      	add	r7, sp, #16
	/*<! Configure the hardware ready to run the test. */
	prvSetupHardware();;
 80026ee:	f000 f841 	bl	8002774 <prvSetupHardware>
	
	// ============now register CLI commands ===================
	
	FreeRTOS_CLIRegisterCommand( &xMotorCommand );
 80026f2:	4818      	ldr	r0, [pc, #96]	; (8002754 <main+0x6c>)
 80026f4:	f002 f9ba 	bl	8004a6c <FreeRTOS_CLIRegisterCommand>
       		

	// =============== register CLI commands ===================
	int sr = sizeof(QueueTelegram);
 80026f8:	231c      	movs	r3, #28
 80026fa:	607b      	str	r3, [r7, #4]
	sr = sizeof (QueueTelegram *);
 80026fc:	2304      	movs	r3, #4
 80026fe:	607b      	str	r3, [r7, #4]
	// create queues 
	QSpd_handle = xQueueCreate(1, sizeof(QueueTelegram));
 8002700:	2001      	movs	r0, #1
 8002702:	211c      	movs	r1, #28
 8002704:	2200      	movs	r2, #0
 8002706:	f001 f99f 	bl	8003a48 <xQueueGenericCreate>
 800270a:	4602      	mov	r2, r0
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <main+0x70>)
 800270e:	601a      	str	r2, [r3, #0]


/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/

	// echo server task 
	xTaskCreate(set_macTask, "SETMAC", configMINIMAL_STACK_SIZE*14, 
 8002710:	2301      	movs	r3, #1
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <main+0x74>)
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2300      	movs	r3, #0
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	2300      	movs	r3, #0
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	480f      	ldr	r0, [pc, #60]	; (8002760 <main+0x78>)
 8002722:	4910      	ldr	r1, [pc, #64]	; (8002764 <main+0x7c>)
 8002724:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8002728:	2300      	movs	r3, #0
 800272a:	f000 f985 	bl	8002a38 <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY , &set_macTaskHandle);
	
	// run motor task 
	xTaskCreate(motorControl_task, "motorH", configMINIMAL_STACK_SIZE*19,
 800272e:	2301      	movs	r3, #1
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <main+0x80>)
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	2300      	movs	r3, #0
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	2300      	movs	r3, #0
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	480b      	ldr	r0, [pc, #44]	; (800276c <main+0x84>)
 8002740:	490b      	ldr	r1, [pc, #44]	; (8002770 <main+0x88>)
 8002742:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8002746:	2300      	movs	r3, #0
 8002748:	f000 f976 	bl	8002a38 <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 800274c:	f000 fbb6 	bl	8002ebc <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8002750:	e7fe      	b.n	8002750 <main+0x68>
 8002752:	bf00      	nop
 8002754:	08008210 	.word	0x08008210
 8002758:	200131fc 	.word	0x200131fc
 800275c:	200141bc 	.word	0x200141bc
 8002760:	080015a1 	.word	0x080015a1
 8002764:	08007e84 	.word	0x08007e84
 8002768:	200131f4 	.word	0x200131f4
 800276c:	08001831 	.word	0x08001831
 8002770:	08007e8c 	.word	0x08007e8c

08002774 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af04      	add	r7, sp, #16
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 800277a:	f000 f8af 	bl	80028dc <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 800277e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002782:	f002 fc61 	bl	8005048 <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 8002786:	f7fd fdc3 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 800278a:	f7fe ff87 	bl	800169c <init_USARTx>
	 * Function : 		init_W5200 from W5200.c file 
	 * Stack size :		5 times minimial stack size 
	 * Task priority :	main flash task priority + 1 
	 * Parameters 	 :	no parameters (NULL)
	 */  
	xTaskCreate(init_W5200, "init_W5200", configMINIMAL_STACK_SIZE*5, 
 800278e:	2302      	movs	r3, #2
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2300      	movs	r3, #0
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	2300      	movs	r3, #0
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	2300      	movs	r3, #0
 800279c:	9303      	str	r3, [sp, #12]
 800279e:	4804      	ldr	r0, [pc, #16]	; (80027b0 <prvSetupHardware+0x3c>)
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <prvSetupHardware+0x40>)
 80027a2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80027a6:	2300      	movs	r3, #0
 80027a8:	f000 f946 	bl	8002a38 <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY + 1 , NULL);
	
	
}
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	08000ac5 	.word	0x08000ac5
 80027b4:	08007e94 	.word	0x08007e94

080027b8 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <vApplicationTickHook+0x20>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <vApplicationTickHook+0x20>)
 80027c4:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 80027c6:	201c      	movs	r0, #28
 80027c8:	f7ff ff74 	bl	80026b4 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <vApplicationTickHook+0x20>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	4b01      	ldr	r3, [pc, #4]	; (80027d8 <vApplicationTickHook+0x20>)
 80027d4:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000494 	.word	0x20000494

080027dc <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <TIM3_IRQHandler+0x34>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <TIM3_IRQHandler+0x34>)
 80027e8:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <TIM3_IRQHandler+0x34>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <TIM3_IRQHandler+0x38>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d903      	bls.n	80027fe <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <TIM3_IRQHandler+0x34>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <TIM3_IRQHandler+0x38>)
 80027fc:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <TIM3_IRQHandler+0x34>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <TIM3_IRQHandler+0x34>)
 8002806:	601a      	str	r2, [r3, #0]
}
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	20000494 	.word	0x20000494
 8002814:	20000498 	.word	0x20000498

08002818 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <TIM2_IRQHandler+0x20>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <TIM2_IRQHandler+0x20>)
 8002824:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8002826:	201d      	movs	r0, #29
 8002828:	f7ff ff44 	bl	80026b4 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 800282c:	4b02      	ldr	r3, [pc, #8]	; (8002838 <TIM2_IRQHandler+0x20>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	4b01      	ldr	r3, [pc, #4]	; (8002838 <TIM2_IRQHandler+0x20>)
 8002834:	601a      	str	r2, [r3, #0]
}
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000494 	.word	0x20000494

0800283c <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8002840:	f001 fe04 	bl	800444c <ulPortSetInterruptMask>
	for( ;; );
 8002844:	e7fe      	b.n	8002844 <vApplicationMallocFailedHook+0x8>
 8002846:	bf00      	nop

08002848 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800285e:	f001 fdf5 	bl	800444c <ulPortSetInterruptMask>
	for( ;; );
 8002862:	e7fe      	b.n	8002862 <vApplicationStackOverflowHook+0xe>

08002864 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]

}
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <Reset_Handler>:
 8002878:	2100      	movs	r1, #0
 800287a:	f000 b804 	b.w	8002886 <LoopCopyDataInit>

0800287e <CopyDataInit>:
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <LoopFillZerobss+0x22>)
 8002880:	585b      	ldr	r3, [r3, r1]
 8002882:	5043      	str	r3, [r0, r1]
 8002884:	3104      	adds	r1, #4

08002886 <LoopCopyDataInit>:
 8002886:	480f      	ldr	r0, [pc, #60]	; (80028c4 <LoopFillZerobss+0x26>)
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <LoopFillZerobss+0x2a>)
 800288a:	1842      	adds	r2, r0, r1
 800288c:	429a      	cmp	r2, r3
 800288e:	f4ff aff6 	bcc.w	800287e <CopyDataInit>
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <LoopFillZerobss+0x2e>)
 8002894:	f000 b803 	b.w	800289e <LoopFillZerobss>

08002898 <FillZerobss>:
 8002898:	2300      	movs	r3, #0
 800289a:	f842 3b04 	str.w	r3, [r2], #4

0800289e <LoopFillZerobss>:
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <LoopFillZerobss+0x32>)
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f4ff aff9 	bcc.w	8002898 <FillZerobss>
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <LoopFillZerobss+0x36>)
 80028a8:	6801      	ldr	r1, [r0, #0]
 80028aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80028ae:	6001      	str	r1, [r0, #0]
 80028b0:	f000 f814 	bl	80028dc <SystemInit>
 80028b4:	f004 feba 	bl	800762c <__libc_init_array>
 80028b8:	f7ff ff16 	bl	80026e8 <main>
 80028bc:	4770      	bx	lr
 80028be:	0000      	.short	0x0000
 80028c0:	08008374 	.word	0x08008374
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000460 	.word	0x20000460
 80028cc:	20000460 	.word	0x20000460
 80028d0:	200143e0 	.word	0x200143e0
 80028d4:	e000ed88 	.word	0xe000ed88

080028d8 <ADC_IRQHandler>:
 80028d8:	f7ff bffe 	b.w	80028d8 <ADC_IRQHandler>

080028dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <SystemInit+0x5c>)
 80028e2:	4a15      	ldr	r2, [pc, #84]	; (8002938 <SystemInit+0x5c>)
 80028e4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80028e8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80028ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <SystemInit+0x60>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <SystemInit+0x60>)
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <SystemInit+0x60>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <SystemInit+0x60>)
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <SystemInit+0x60>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <SystemInit+0x60>)
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <SystemInit+0x64>)
 8002916:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <SystemInit+0x60>)
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <SystemInit+0x60>)
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002922:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SystemInit+0x60>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800292a:	f000 f80b 	bl	8002944 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800292e:	4b02      	ldr	r3, [pc, #8]	; (8002938 <SystemInit+0x5c>)
 8002930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002934:	609a      	str	r2, [r3, #8]
#endif
}
 8002936:	bd80      	pop	{r7, pc}
 8002938:	e000ed00 	.word	0xe000ed00
 800293c:	40023800 	.word	0x40023800
 8002940:	24003010 	.word	0x24003010

08002944 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	2300      	movs	r3, #0
 8002950:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002952:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <SetSysClock+0xe4>)
 8002954:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <SetSysClock+0xe4>)
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800295c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800295e:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <SetSysClock+0xe4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3301      	adds	r3, #1
 800296c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <SetSysClock+0x38>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800297a:	d1f0      	bne.n	800295e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <SetSysClock+0xe4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002988:	2301      	movs	r3, #1
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	e001      	b.n	8002992 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d142      	bne.n	8002a1e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <SetSysClock+0xe4>)
 800299a:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <SetSysClock+0xe4>)
 800299c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800299e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <SetSysClock+0xe8>)
 80029a6:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <SetSysClock+0xe8>)
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ae:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <SetSysClock+0xe4>)
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <SetSysClock+0xe4>)
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <SetSysClock+0xe4>)
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <SetSysClock+0xe4>)
 80029bc:	6892      	ldr	r2, [r2, #8]
 80029be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <SetSysClock+0xe4>)
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <SetSysClock+0xe4>)
 80029c8:	6892      	ldr	r2, [r2, #8]
 80029ca:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80029ce:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <SetSysClock+0xe4>)
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <SetSysClock+0xec>)
 80029d4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <SetSysClock+0xe4>)
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <SetSysClock+0xe4>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029e0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80029e2:	bf00      	nop
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <SetSysClock+0xe4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f9      	beq.n	80029e4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <SetSysClock+0xf0>)
 80029f2:	f240 6204 	movw	r2, #1540	; 0x604
 80029f6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <SetSysClock+0xe4>)
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <SetSysClock+0xe4>)
 80029fc:	6892      	ldr	r2, [r2, #8]
 80029fe:	f022 0203 	bic.w	r2, r2, #3
 8002a02:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <SetSysClock+0xe4>)
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <SetSysClock+0xe4>)
 8002a08:	6892      	ldr	r2, [r2, #8]
 8002a0a:	f042 0202 	orr.w	r2, r2, #2
 8002a0e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002a10:	bf00      	nop
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <SetSysClock+0xe4>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d1f9      	bne.n	8002a12 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	07404b19 	.word	0x07404b19
 8002a34:	40023c00 	.word	0x40023c00

08002a38 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <xTaskGenericCreate+0x1c>
 8002a4e:	f001 fcfd 	bl	800444c <ulPortSetInterruptMask>
 8002a52:	e7fe      	b.n	8002a52 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d902      	bls.n	8002a60 <xTaskGenericCreate+0x28>
 8002a5a:	f001 fcf7 	bl	800444c <ulPortSetInterruptMask>
 8002a5e:	e7fe      	b.n	8002a5e <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4618      	mov	r0, r3
 8002a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a66:	f000 fe8f 	bl	8003788 <prvAllocateTCBAndStack>
 8002a6a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d072      	beq.n	8002b58 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0307 	bic.w	r3, r3, #7
 8002a8a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <xTaskGenericCreate+0x64>
 8002a96:	f001 fcd9 	bl	800444c <ulPortSetInterruptMask>
 8002a9a:	e7fe      	b.n	8002a9a <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	69b8      	ldr	r0, [r7, #24]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa8:	f000 fd78 	bl	800359c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aac:	6978      	ldr	r0, [r7, #20]
 8002aae:	68f9      	ldr	r1, [r7, #12]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	f001 fbd9 	bl	8004268 <pxPortInitialiseStack>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8002ac8:	f001 fc9e 	bl	8004408 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <xTaskGenericCreate+0x150>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <xTaskGenericCreate+0x150>)
 8002ad4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <xTaskGenericCreate+0x154>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <xTaskGenericCreate+0x154>)
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <xTaskGenericCreate+0x150>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d10f      	bne.n	8002b0c <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002aec:	f000 fd9e 	bl	800362c <prvInitialiseTaskLists>
 8002af0:	e00c      	b.n	8002b0c <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <xTaskGenericCreate+0x158>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <xTaskGenericCreate+0x154>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d802      	bhi.n	8002b0c <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 8002b06:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <xTaskGenericCreate+0x154>)
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <xTaskGenericCreate+0x15c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <xTaskGenericCreate+0x15c>)
 8002b14:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <xTaskGenericCreate+0x15c>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <xTaskGenericCreate+0x160>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d903      	bls.n	8002b32 <xTaskGenericCreate+0xfa>
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <xTaskGenericCreate+0x160>)
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <xTaskGenericCreate+0x164>)
 8002b40:	441a      	add	r2, r3
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	3304      	adds	r3, #4
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f001 fb07 	bl	800415c <vListInsertEnd>

			xReturn = pdPASS;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002b52:	f001 fc69 	bl	8004428 <vPortExitCritical>
 8002b56:	e002      	b.n	8002b5e <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b5c:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10b      	bne.n	8002b7c <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <xTaskGenericCreate+0x158>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <xTaskGenericCreate+0x154>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d201      	bcs.n	8002b7c <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 8002b78:	f001 fc36 	bl	80043e8 <vPortYield>
			}
		}
	}

	return xReturn;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000574 	.word	0x20000574
 8002b8c:	2000049c 	.word	0x2000049c
 8002b90:	20000580 	.word	0x20000580
 8002b94:	20000594 	.word	0x20000594
 8002b98:	2000057c 	.word	0x2000057c
 8002b9c:	200004a0 	.word	0x200004a0

08002ba0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle xTaskToDelete )
	{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8002ba8:	f001 fc2e 	bl	8004408 <vPortEnterCritical>
		{
			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <vTaskDelete+0x18>
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <vTaskDelete+0x78>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e000      	b.n	8002bba <vTaskDelete+0x1a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fb27 	bl	8004214 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3318      	adds	r3, #24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fb1e 	bl	8004214 <uxListRemove>
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	480f      	ldr	r0, [pc, #60]	; (8002c1c <vTaskDelete+0x7c>)
 8002bde:	4619      	mov	r1, r3
 8002be0:	f001 fabc 	bl	800415c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <vTaskDelete+0x80>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <vTaskDelete+0x80>)
 8002bec:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <vTaskDelete+0x84>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <vTaskDelete+0x84>)
 8002bf6:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002bf8:	f001 fc16 	bl	8004428 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <vTaskDelete+0x88>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d006      	beq.n	8002c12 <vTaskDelete+0x72>
		{
			if( pxTCB == pxCurrentTCB )
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <vTaskDelete+0x78>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d101      	bne.n	8002c12 <vTaskDelete+0x72>
			{
				portYIELD_WITHIN_API();
 8002c0e:	f001 fbeb 	bl	80043e8 <vPortYield>
			}
		}
	}
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	2000049c 	.word	0x2000049c
 8002c1c:	20000548 	.word	0x20000548
 8002c20:	2000055c 	.word	0x2000055c
 8002c24:	20000594 	.word	0x20000594
 8002c28:	20000580 	.word	0x20000580

08002c2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <vTaskDelayUntil+0x1a>
 8002c40:	f001 fc04 	bl	800444c <ulPortSetInterruptMask>
 8002c44:	e7fe      	b.n	8002c44 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <vTaskDelayUntil+0x26>
 8002c4c:	f001 fbfe 	bl	800444c <ulPortSetInterruptMask>
 8002c50:	e7fe      	b.n	8002c50 <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 8002c52:	f000 f96b 	bl	8002f2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <vTaskDelayUntil+0xa8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d90b      	bls.n	8002c88 <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d911      	bls.n	8002c9e <vTaskDelayUntil+0x72>
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d90d      	bls.n	8002c9e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e00a      	b.n	8002c9e <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d803      	bhi.n	8002c9a <vTaskDelayUntil+0x6e>
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d901      	bls.n	8002c9e <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <vTaskDelayUntil+0xac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 faaf 	bl	8004214 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fd30 	bl	800371c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002cbc:	f000 f944 	bl	8002f48 <xTaskResumeAll>
 8002cc0:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 8002cc8:	f001 fb8e 	bl	80043e8 <vPortYield>
		}
	}
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000578 	.word	0x20000578
 8002cd8:	2000049c 	.word	0x2000049c

08002cdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 8002cee:	f000 f91d 	bl	8002f2c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <vTaskDelay+0x48>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <vTaskDelay+0x4c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 fa86 	bl	8004214 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002d08:	68b8      	ldr	r0, [r7, #8]
 8002d0a:	f000 fd07 	bl	800371c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d0e:	f000 f91b 	bl	8002f48 <xTaskResumeAll>
 8002d12:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 8002d1a:	f001 fb65 	bl	80043e8 <vPortYield>
		}
	}
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000578 	.word	0x20000578
 8002d28:	2000049c 	.word	0x2000049c

08002d2c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8002d34:	f001 fb68 	bl	8004408 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <vTaskSuspend+0x18>
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <vTaskSuspend+0x80>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e000      	b.n	8002d46 <vTaskSuspend+0x1a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 fa61 	bl	8004214 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3318      	adds	r3, #24
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fa58 	bl	8004214 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4811      	ldr	r0, [pc, #68]	; (8002db0 <vTaskSuspend+0x84>)
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f001 f9f6 	bl	800415c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8002d70:	f001 fb5a 	bl	8004428 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <vTaskSuspend+0x80>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d112      	bne.n	8002da4 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <vTaskSuspend+0x88>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 8002d86:	f001 fb2f 	bl	80043e8 <vPortYield>
 8002d8a:	e00b      	b.n	8002da4 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <vTaskSuspend+0x84>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <vTaskSuspend+0x8c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d103      	bne.n	8002da0 <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <vTaskSuspend+0x80>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e001      	b.n	8002da4 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 8002da0:	f000 fa40 	bl	8003224 <vTaskSwitchContext>
				}
			}
		}
	}
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000049c 	.word	0x2000049c
 8002db0:	20000560 	.word	0x20000560
 8002db4:	20000580 	.word	0x20000580
 8002db8:	20000574 	.word	0x20000574

08002dbc <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <xTaskIsTaskSuspended+0x1c>
 8002dd2:	f001 fb3b 	bl	800444c <ulPortSetInterruptMask>
 8002dd6:	e7fe      	b.n	8002dd6 <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <xTaskIsTaskSuspended+0x5c>)
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d101      	bne.n	8002de6 <xTaskIsTaskSuspended+0x2a>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <xTaskIsTaskSuspended+0x2c>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00f      	beq.n	8002e0c <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <xTaskIsTaskSuspended+0x60>)
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d00a      	beq.n	8002e0c <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <xTaskIsTaskSuspended+0x46>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xTaskIsTaskSuspended+0x48>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000560 	.word	0x20000560
 8002e1c:	20000534 	.word	0x20000534

08002e20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <vTaskResume+0x18>
 8002e32:	f001 fb0b 	bl	800444c <ulPortSetInterruptMask>
 8002e36:	e7fe      	b.n	8002e36 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d034      	beq.n	8002ea8 <vTaskResume+0x88>
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <vTaskResume+0x90>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d02f      	beq.n	8002ea8 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8002e48:	f001 fade 	bl	8004408 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff ffb5 	bl	8002dbc <xTaskIsTaskSuspended>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d125      	bne.n	8002ea4 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 f9d9 	bl	8004214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <vTaskResume+0x94>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d903      	bls.n	8002e76 <vTaskResume+0x56>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <vTaskResume+0x94>)
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <vTaskResume+0x98>)
 8002e84:	441a      	add	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f001 f965 	bl	800415c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <vTaskResume+0x90>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d301      	bcc.n	8002ea4 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8002ea0:	f001 faa2 	bl	80043e8 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8002ea4:	f001 fac0 	bl	8004428 <vPortExitCritical>
		}
	}
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000049c 	.word	0x2000049c
 8002eb4:	2000057c 	.word	0x2000057c
 8002eb8:	200004a0 	.word	0x200004a0

08002ebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9303      	str	r3, [sp, #12]
 8002ed2:	4812      	ldr	r0, [pc, #72]	; (8002f1c <vTaskStartScheduler+0x60>)
 8002ed4:	4912      	ldr	r1, [pc, #72]	; (8002f20 <vTaskStartScheduler+0x64>)
 8002ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eda:	2300      	movs	r3, #0
 8002edc:	f7ff fdac 	bl	8002a38 <xTaskGenericCreate>
 8002ee0:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
 8002ee8:	f001 fb4a 	bl	8004580 <xTimerCreateTimerTask>
 8002eec:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10a      	bne.n	8002f0a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002ef4:	f001 faaa 	bl	800444c <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <vTaskStartScheduler+0x68>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <vTaskStartScheduler+0x6c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f04:	f001 fa0a 	bl	800431c <xPortStartScheduler>
 8002f08:	e005      	b.n	8002f16 <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <vTaskStartScheduler+0x5a>
 8002f10:	f001 fa9c 	bl	800444c <ulPortSetInterruptMask>
 8002f14:	e7fe      	b.n	8002f14 <vTaskStartScheduler+0x58>
	}
}
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	08003579 	.word	0x08003579
 8002f20:	08007ea0 	.word	0x08007ea0
 8002f24:	20000580 	.word	0x20000580
 8002f28:	20000578 	.word	0x20000578

08002f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <vTaskSuspendAll+0x18>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <vTaskSuspendAll+0x18>)
 8002f38:	601a      	str	r2, [r3, #0]
}
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000584 	.word	0x20000584

08002f48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <xTaskResumeAll+0xec>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <xTaskResumeAll+0x18>
 8002f5a:	f001 fa77 	bl	800444c <ulPortSetInterruptMask>
 8002f5e:	e7fe      	b.n	8002f5e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f60:	f001 fa52 	bl	8004408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f64:	4b33      	ldr	r3, [pc, #204]	; (8003034 <xTaskResumeAll+0xec>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1e5a      	subs	r2, r3, #1
 8002f6a:	4b32      	ldr	r3, [pc, #200]	; (8003034 <xTaskResumeAll+0xec>)
 8002f6c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <xTaskResumeAll+0xec>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d156      	bne.n	8003024 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002f76:	4b30      	ldr	r3, [pc, #192]	; (8003038 <xTaskResumeAll+0xf0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d052      	beq.n	8003024 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f7e:	e02f      	b.n	8002fe0 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f80:	4b2e      	ldr	r3, [pc, #184]	; (800303c <xTaskResumeAll+0xf4>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 f941 	bl	8004214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f93c 	bl	8004214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <xTaskResumeAll+0xf8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d903      	bls.n	8002fb0 <xTaskResumeAll+0x68>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <xTaskResumeAll+0xf8>)
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4a21      	ldr	r2, [pc, #132]	; (8003044 <xTaskResumeAll+0xfc>)
 8002fbe:	441a      	add	r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f001 f8c8 	bl	800415c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <xTaskResumeAll+0x100>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <xTaskResumeAll+0x104>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <xTaskResumeAll+0xf4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <xTaskResumeAll+0x108>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d011      	beq.n	8003014 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002ff0:	e00c      	b.n	800300c <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8002ff2:	f000 f841 	bl	8003078 <xTaskIncrementTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <xTaskResumeAll+0x104>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <xTaskResumeAll+0x108>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <xTaskResumeAll+0x108>)
 800300a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <xTaskResumeAll+0x108>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <xTaskResumeAll+0x104>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d103      	bne.n	8003024 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8003020:	f001 f9e2 	bl	80043e8 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8003024:	f001 fa00 	bl	8004428 <vPortExitCritical>

	return xAlreadyYielded;
 8003028:	687b      	ldr	r3, [r7, #4]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000584 	.word	0x20000584
 8003038:	20000574 	.word	0x20000574
 800303c:	20000534 	.word	0x20000534
 8003040:	2000057c 	.word	0x2000057c
 8003044:	200004a0 	.word	0x200004a0
 8003048:	2000049c 	.word	0x2000049c
 800304c:	2000058c 	.word	0x2000058c
 8003050:	20000588 	.word	0x20000588

08003054 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800305a:	f001 f9d5 	bl	8004408 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <xTaskGetTickCount+0x20>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8003064:	f001 f9e0 	bl	8004428 <vPortExitCritical>

	return xTicks;
 8003068:	687b      	ldr	r3, [r7, #4]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000578 	.word	0x20000578

08003078 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003082:	4b5d      	ldr	r3, [pc, #372]	; (80031f8 <xTaskIncrementTick+0x180>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80a4 	bne.w	80031d4 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 800308c:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <xTaskIncrementTick+0x184>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	4b5a      	ldr	r3, [pc, #360]	; (80031fc <xTaskIncrementTick+0x184>)
 8003094:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <xTaskIncrementTick+0x184>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d12e      	bne.n	8003100 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 80030a2:	4b57      	ldr	r3, [pc, #348]	; (8003200 <xTaskIncrementTick+0x188>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <xTaskIncrementTick+0x3a>
 80030ac:	f001 f9ce 	bl	800444c <ulPortSetInterruptMask>
 80030b0:	e7fe      	b.n	80030b0 <xTaskIncrementTick+0x38>
 80030b2:	4b53      	ldr	r3, [pc, #332]	; (8003200 <xTaskIncrementTick+0x188>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	4b52      	ldr	r3, [pc, #328]	; (8003204 <xTaskIncrementTick+0x18c>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <xTaskIncrementTick+0x188>)
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	4b50      	ldr	r3, [pc, #320]	; (8003204 <xTaskIncrementTick+0x18c>)
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	4b50      	ldr	r3, [pc, #320]	; (8003208 <xTaskIncrementTick+0x190>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	4b4e      	ldr	r3, [pc, #312]	; (8003208 <xTaskIncrementTick+0x190>)
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <xTaskIncrementTick+0x188>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <xTaskIncrementTick+0x66>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <xTaskIncrementTick+0x68>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <xTaskIncrementTick+0x76>
 80030e4:	4b49      	ldr	r3, [pc, #292]	; (800320c <xTaskIncrementTick+0x194>)
 80030e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e008      	b.n	8003100 <xTaskIncrementTick+0x88>
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <xTaskIncrementTick+0x188>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <xTaskIncrementTick+0x194>)
 80030fe:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8003100:	4b42      	ldr	r3, [pc, #264]	; (800320c <xTaskIncrementTick+0x194>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	429a      	cmp	r2, r3
 8003108:	d34f      	bcc.n	80031aa <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <xTaskIncrementTick+0x188>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <xTaskIncrementTick+0xa0>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <xTaskIncrementTick+0xa2>
 8003118:	2300      	movs	r3, #0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800311e:	4b3b      	ldr	r3, [pc, #236]	; (800320c <xTaskIncrementTick+0x194>)
 8003120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003124:	601a      	str	r2, [r3, #0]
						break;
 8003126:	e040      	b.n	80031aa <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <xTaskIncrementTick+0x188>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d203      	bcs.n	8003148 <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <xTaskIncrementTick+0x194>)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
							break;
 8003146:	e030      	b.n	80031aa <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f861 	bl	8004214 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3318      	adds	r3, #24
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f858 	bl	8004214 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <xTaskIncrementTick+0x198>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d903      	bls.n	8003178 <xTaskIncrementTick+0x100>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	4b26      	ldr	r3, [pc, #152]	; (8003210 <xTaskIncrementTick+0x198>)
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <xTaskIncrementTick+0x19c>)
 8003186:	441a      	add	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3304      	adds	r3, #4
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f000 ffe4 	bl	800415c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <xTaskIncrementTick+0x1a0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 80031a6:	e7b0      	b.n	800310a <xTaskIncrementTick+0x92>
 80031a8:	e7af      	b.n	800310a <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <xTaskIncrementTick+0x1a0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	4918      	ldr	r1, [pc, #96]	; (8003214 <xTaskIncrementTick+0x19c>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d901      	bls.n	80031c6 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <xTaskIncrementTick+0x1a4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 80031ce:	f7ff faf3 	bl	80027b8 <vApplicationTickHook>
 80031d2:	e006      	b.n	80031e2 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <xTaskIncrementTick+0x1a4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <xTaskIncrementTick+0x1a4>)
 80031dc:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80031de:	f7ff faeb 	bl	80027b8 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <xTaskIncrementTick+0x1a8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80031ee:	697b      	ldr	r3, [r7, #20]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000584 	.word	0x20000584
 80031fc:	20000578 	.word	0x20000578
 8003200:	2000052c 	.word	0x2000052c
 8003204:	20000530 	.word	0x20000530
 8003208:	20000590 	.word	0x20000590
 800320c:	20000004 	.word	0x20000004
 8003210:	2000057c 	.word	0x2000057c
 8003214:	200004a0 	.word	0x200004a0
 8003218:	2000049c 	.word	0x2000049c
 800321c:	20000588 	.word	0x20000588
 8003220:	2000058c 	.word	0x2000058c

08003224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800322a:	4b35      	ldr	r3, [pc, #212]	; (8003300 <vTaskSwitchContext+0xdc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <vTaskSwitchContext+0xe0>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e05e      	b.n	80032f8 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 800323a:	4b32      	ldr	r3, [pc, #200]	; (8003304 <vTaskSwitchContext+0xe0>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8003240:	4b31      	ldr	r3, [pc, #196]	; (8003308 <vTaskSwitchContext+0xe4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b30      	ldr	r3, [pc, #192]	; (8003308 <vTaskSwitchContext+0xe4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	429a      	cmp	r2, r3
 800324e:	d808      	bhi.n	8003262 <vTaskSwitchContext+0x3e>
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <vTaskSwitchContext+0xe4>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <vTaskSwitchContext+0xe4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3334      	adds	r3, #52	; 0x34
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f7ff faf9 	bl	8002854 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <vTaskSwitchContext+0xe4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4618      	mov	r0, r3
 800326a:	4928      	ldr	r1, [pc, #160]	; (800330c <vTaskSwitchContext+0xe8>)
 800326c:	2214      	movs	r2, #20
 800326e:	f004 fa05 	bl	800767c <memcmp>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d009      	beq.n	800328c <vTaskSwitchContext+0x68>
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <vTaskSwitchContext+0xe4>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b22      	ldr	r3, [pc, #136]	; (8003308 <vTaskSwitchContext+0xe4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3334      	adds	r3, #52	; 0x34
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f7ff fae5 	bl	8002854 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800328a:	e00c      	b.n	80032a6 <vTaskSwitchContext+0x82>
 800328c:	e00b      	b.n	80032a6 <vTaskSwitchContext+0x82>
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <vTaskSwitchContext+0xec>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <vTaskSwitchContext+0x78>
 8003296:	f001 f8d9 	bl	800444c <ulPortSetInterruptMask>
 800329a:	e7fe      	b.n	800329a <vTaskSwitchContext+0x76>
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <vTaskSwitchContext+0xec>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <vTaskSwitchContext+0xec>)
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <vTaskSwitchContext+0xec>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	491a      	ldr	r1, [pc, #104]	; (8003314 <vTaskSwitchContext+0xf0>)
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0e8      	beq.n	800328e <vTaskSwitchContext+0x6a>
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <vTaskSwitchContext+0xec>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <vTaskSwitchContext+0xf0>)
 80032ca:	4413      	add	r3, r2
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3308      	adds	r3, #8
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d104      	bne.n	80032ee <vTaskSwitchContext+0xca>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <vTaskSwitchContext+0xe4>)
 80032f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000584 	.word	0x20000584
 8003304:	2000058c 	.word	0x2000058c
 8003308:	2000049c 	.word	0x2000049c
 800330c:	08008220 	.word	0x08008220
 8003310:	2000057c 	.word	0x2000057c
 8003314:	200004a0 	.word	0x200004a0

08003318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <vTaskPlaceOnEventList+0x16>
 8003328:	f001 f890 	bl	800444c <ulPortSetInterruptMask>
 800332c:	e7fe      	b.n	800332c <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <vTaskPlaceOnEventList+0x60>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3318      	adds	r3, #24
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4619      	mov	r1, r3
 8003338:	f000 ff34 	bl	80041a4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <vTaskPlaceOnEventList+0x60>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3304      	adds	r3, #4
 8003342:	4618      	mov	r0, r3
 8003344:	f000 ff66 	bl	8004214 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334e:	d107      	bne.n	8003360 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <vTaskPlaceOnEventList+0x60>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	4809      	ldr	r0, [pc, #36]	; (800337c <vTaskPlaceOnEventList+0x64>)
 8003358:	4619      	mov	r1, r3
 800335a:	f000 feff 	bl	800415c <vListInsertEnd>
 800335e:	e007      	b.n	8003370 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <vTaskPlaceOnEventList+0x68>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f9d6 	bl	800371c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	2000049c 	.word	0x2000049c
 800337c:	20000560 	.word	0x20000560
 8003380:	20000578 	.word	0x20000578

08003384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <vTaskPlaceOnEventListRestricted+0x16>
 8003394:	f001 f85a 	bl	800444c <ulPortSetInterruptMask>
 8003398:	e7fe      	b.n	8003398 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <vTaskPlaceOnEventListRestricted+0x48>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3318      	adds	r3, #24
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4619      	mov	r1, r3
 80033a4:	f000 feda 	bl	800415c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <vTaskPlaceOnEventListRestricted+0x48>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ff30 	bl	8004214 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <vTaskPlaceOnEventListRestricted+0x4c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f9ac 	bl	800371c <prvAddCurrentTaskToDelayedList>
	}
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2000049c 	.word	0x2000049c
 80033d0:	20000578 	.word	0x20000578

080033d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <xTaskRemoveFromEventList+0x1c>
 80033ea:	f001 f82f 	bl	800444c <ulPortSetInterruptMask>
 80033ee:	e7fe      	b.n	80033ee <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3318      	adds	r3, #24
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ff0d 	bl	8004214 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80033fa:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <xTaskRemoveFromEventList+0xa0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11d      	bne.n	800343e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3304      	adds	r3, #4
 8003406:	4618      	mov	r0, r3
 8003408:	f000 ff04 	bl	8004214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <xTaskRemoveFromEventList+0xa4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d903      	bls.n	8003420 <xTaskRemoveFromEventList+0x4c>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <xTaskRemoveFromEventList+0xa4>)
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <xTaskRemoveFromEventList+0xa8>)
 800342e:	441a      	add	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3304      	adds	r3, #4
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	f000 fe90 	bl	800415c <vListInsertEnd>
 800343c:	e005      	b.n	800344a <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3318      	adds	r3, #24
 8003442:	480f      	ldr	r0, [pc, #60]	; (8003480 <xTaskRemoveFromEventList+0xac>)
 8003444:	4619      	mov	r1, r3
 8003446:	f000 fe89 	bl	800415c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <xTaskRemoveFromEventList+0xb0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	429a      	cmp	r2, r3
 8003456:	d305      	bcc.n	8003464 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003458:	2301      	movs	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <xTaskRemoveFromEventList+0xb4>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e001      	b.n	8003468 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000584 	.word	0x20000584
 8003478:	2000057c 	.word	0x2000057c
 800347c:	200004a0 	.word	0x200004a0
 8003480:	20000534 	.word	0x20000534
 8003484:	2000049c 	.word	0x2000049c
 8003488:	2000058c 	.word	0x2000058c

0800348c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <vTaskSetTimeOutState+0x14>
 800349a:	f000 ffd7 	bl	800444c <ulPortSetInterruptMask>
 800349e:	e7fe      	b.n	800349e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <vTaskSetTimeOutState+0x2c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <vTaskSetTimeOutState+0x30>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	605a      	str	r2, [r3, #4]
}
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000590 	.word	0x20000590
 80034bc:	20000578 	.word	0x20000578

080034c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <xTaskCheckForTimeOut+0x16>
 80034d0:	f000 ffbc 	bl	800444c <ulPortSetInterruptMask>
 80034d4:	e7fe      	b.n	80034d4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <xTaskCheckForTimeOut+0x22>
 80034dc:	f000 ffb6 	bl	800444c <ulPortSetInterruptMask>
 80034e0:	e7fe      	b.n	80034e0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80034e2:	f000 ff91 	bl	8004408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <xTaskCheckForTimeOut+0x98>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f4:	d102      	bne.n	80034fc <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e026      	b.n	800354a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <xTaskCheckForTimeOut+0x9c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d007      	beq.n	8003518 <xTaskCheckForTimeOut+0x58>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d802      	bhi.n	8003518 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003512:	2301      	movs	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e018      	b.n	800354a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	1ad2      	subs	r2, r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d20e      	bcs.n	8003546 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	1acb      	subs	r3, r1, r3
 8003534:	441a      	add	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffa6 	bl	800348c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e001      	b.n	800354a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8003546:	2301      	movs	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800354a:	f000 ff6d 	bl	8004428 <vPortExitCritical>

	return xReturn;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000578 	.word	0x20000578
 800355c:	20000590 	.word	0x20000590

08003560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <vTaskMissedYield+0x14>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	2000058c 	.word	0x2000058c

08003578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003580:	f000 f892 	bl	80036a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <prvIdleTask+0x20>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d901      	bls.n	8003590 <prvIdleTask+0x18>
			{
				taskYIELD();
 800358c:	f000 ff2c 	bl	80043e8 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003590:	f7ff f95a 	bl	8002848 <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003594:	e7f4      	b.n	8003580 <prvIdleTask+0x8>
 8003596:	bf00      	nop
 8003598:	200004a0 	.word	0x200004a0

0800359c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e012      	b.n	80035d6 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4413      	add	r3, r2
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	440b      	add	r3, r1
 80035be:	3330      	adds	r3, #48	; 0x30
 80035c0:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d100      	bne.n	80035d0 <prvInitialiseTCBVariables+0x34>
		{
			break;
 80035ce:	e005      	b.n	80035dc <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d9e9      	bls.n	80035b0 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d901      	bls.n	80035ee <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 80035ea:	2304      	movs	r3, #4
 80035ec:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fda0 	bl	8004144 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3318      	adds	r3, #24
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fd9b 	bl	8004144 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f1c3 0205 	rsb	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop

0800362c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	e00c      	b.n	8003652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4a11      	ldr	r2, [pc, #68]	; (8003688 <prvInitialiseTaskLists+0x5c>)
 8003644:	4413      	add	r3, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fd5c 	bl	8004104 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3301      	adds	r3, #1
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d9ef      	bls.n	8003638 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <prvInitialiseTaskLists+0x60>)
 800365a:	f000 fd53 	bl	8004104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800365e:	480c      	ldr	r0, [pc, #48]	; (8003690 <prvInitialiseTaskLists+0x64>)
 8003660:	f000 fd50 	bl	8004104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003664:	480b      	ldr	r0, [pc, #44]	; (8003694 <prvInitialiseTaskLists+0x68>)
 8003666:	f000 fd4d 	bl	8004104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800366a:	480b      	ldr	r0, [pc, #44]	; (8003698 <prvInitialiseTaskLists+0x6c>)
 800366c:	f000 fd4a 	bl	8004104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003670:	480a      	ldr	r0, [pc, #40]	; (800369c <prvInitialiseTaskLists+0x70>)
 8003672:	f000 fd47 	bl	8004104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <prvInitialiseTaskLists+0x74>)
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <prvInitialiseTaskLists+0x60>)
 800367a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <prvInitialiseTaskLists+0x78>)
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <prvInitialiseTaskLists+0x64>)
 8003680:	601a      	str	r2, [r3, #0]
}
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200004a0 	.word	0x200004a0
 800368c:	20000504 	.word	0x20000504
 8003690:	20000518 	.word	0x20000518
 8003694:	20000534 	.word	0x20000534
 8003698:	20000548 	.word	0x20000548
 800369c:	20000560 	.word	0x20000560
 80036a0:	2000052c 	.word	0x2000052c
 80036a4:	20000530 	.word	0x20000530

080036a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80036ae:	e028      	b.n	8003702 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80036b0:	f7ff fc3c 	bl	8002f2c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <prvCheckTasksWaitingTermination+0x68>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf14      	ite	ne
 80036bc:	2300      	movne	r3, #0
 80036be:	2301      	moveq	r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 80036c4:	f7ff fc40 	bl	8002f48 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d119      	bne.n	8003702 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80036ce:	f000 fe9b 	bl	8004408 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <prvCheckTasksWaitingTermination+0x68>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fd98 	bl	8004214 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <prvCheckTasksWaitingTermination+0x6c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <prvCheckTasksWaitingTermination+0x6c>)
 80036ec:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <prvCheckTasksWaitingTermination+0x70>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <prvCheckTasksWaitingTermination+0x70>)
 80036f6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80036f8:	f000 fe96 	bl	8004428 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f000 f875 	bl	80037ec <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <prvCheckTasksWaitingTermination+0x70>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1d2      	bne.n	80036b0 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000548 	.word	0x20000548
 8003714:	20000574 	.word	0x20000574
 8003718:	2000055c 	.word	0x2000055c

0800371c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <prvAddCurrentTaskToDelayedList+0x58>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <prvAddCurrentTaskToDelayedList+0x5c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d209      	bcs.n	800374a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <prvAddCurrentTaskToDelayedList+0x60>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <prvAddCurrentTaskToDelayedList+0x58>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3304      	adds	r3, #4
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f000 fd2e 	bl	80041a4 <vListInsert>
 8003748:	e010      	b.n	800376c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <prvAddCurrentTaskToDelayedList+0x64>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <prvAddCurrentTaskToDelayedList+0x58>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3304      	adds	r3, #4
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f000 fd24 	bl	80041a4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <prvAddCurrentTaskToDelayedList+0x68>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d202      	bcs.n	800376c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <prvAddCurrentTaskToDelayedList+0x68>)
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000049c 	.word	0x2000049c
 8003778:	20000578 	.word	0x20000578
 800377c:	20000530 	.word	0x20000530
 8003780:	2000052c 	.word	0x2000052c
 8003784:	20000004 	.word	0x20000004

08003788 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8003794:	204c      	movs	r0, #76	; 0x4c
 8003796:	f001 fadb 	bl	8004d50 <pvPortMalloc>
 800379a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01f      	beq.n	80037e2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <prvAllocateTCBAndStack+0x2e>
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 facf 	bl	8004d50 <pvPortMalloc>
 80037b2:	4603      	mov	r3, r0
 80037b4:	e000      	b.n	80037b8 <prvAllocateTCBAndStack+0x30>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f001 fb4f 	bl	8004e68 <vPortFree>
			pxNewTCB = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e008      	b.n	80037e2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4610      	mov	r0, r2
 80037da:	21a5      	movs	r1, #165	; 0xa5
 80037dc:	461a      	mov	r2, r3
 80037de:	f003 ff81 	bl	80076e4 <memset>
		}
	}

	return pxNewTCB;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fb35 	bl	8004e68 <vPortFree>
		vPortFree( pxTCB );
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f001 fb32 	bl	8004e68 <vPortFree>
	}
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop

0800380c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <xTaskGetCurrentTaskHandle+0x1c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003818:	687b      	ldr	r3, [r7, #4]
	}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	2000049c 	.word	0x2000049c

0800382c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <xTaskGetSchedulerState+0x34>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	e008      	b.n	8003852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <xTaskGetSchedulerState+0x38>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003848:	2301      	movs	r3, #1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	e001      	b.n	8003852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800384e:	2302      	movs	r3, #2
 8003850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003852:	687b      	ldr	r3, [r7, #4]
	}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	20000580 	.word	0x20000580
 8003864:	20000584 	.word	0x20000584

08003868 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d046      	beq.n	8003908 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <vTaskPriorityInherit+0xa8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	429a      	cmp	r2, r3
 8003886:	d23f      	bcs.n	8003908 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <vTaskPriorityInherit+0xa8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f1c3 0205 	rsb	r2, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6959      	ldr	r1, [r3, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <vTaskPriorityInherit+0xac>)
 80038a8:	4413      	add	r3, r2
 80038aa:	4299      	cmp	r1, r3
 80038ac:	d101      	bne.n	80038b2 <vTaskPriorityInherit+0x4a>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <vTaskPriorityInherit+0x4c>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d022      	beq.n	80038fe <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fca9 	bl	8004214 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <vTaskPriorityInherit+0xa8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <vTaskPriorityInherit+0xb0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d903      	bls.n	80038e0 <vTaskPriorityInherit+0x78>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <vTaskPriorityInherit+0xb0>)
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4a09      	ldr	r2, [pc, #36]	; (8003914 <vTaskPriorityInherit+0xac>)
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	f000 fc30 	bl	800415c <vListInsertEnd>
 80038fc:	e004      	b.n	8003908 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <vTaskPriorityInherit+0xa8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	2000049c 	.word	0x2000049c
 8003914:	200004a0 	.word	0x200004a0
 8003918:	2000057c 	.word	0x2000057c

0800391c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02c      	beq.n	8003988 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003936:	429a      	cmp	r2, r3
 8003938:	d026      	beq.n	8003988 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fc68 	bl	8004214 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	f1c3 0205 	rsb	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <vTaskPriorityDisinherit+0x74>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d903      	bls.n	800396c <vTaskPriorityDisinherit+0x50>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <vTaskPriorityDisinherit+0x74>)
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4a06      	ldr	r2, [pc, #24]	; (8003994 <vTaskPriorityDisinherit+0x78>)
 800397a:	441a      	add	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3304      	adds	r3, #4
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f000 fbea 	bl	800415c <vListInsertEnd>
			}
		}
	}
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2000057c 	.word	0x2000057c
 8003994:	200004a0 	.word	0x200004a0

08003998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <xQueueGenericReset+0x1a>
 80039ac:	f000 fd4e 	bl	800444c <ulPortSetInterruptMask>
 80039b0:	e7fe      	b.n	80039b0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80039b2:	f000 fd29 	bl	8004408 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	441a      	add	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	3b01      	subs	r3, #1
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	441a      	add	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a00:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10e      	bne.n	8003a26 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d014      	beq.n	8003a3a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3310      	adds	r3, #16
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fcdd 	bl	80033d4 <xTaskRemoveFromEventList>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10c      	bne.n	8003a3a <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8003a20:	f000 fce2 	bl	80043e8 <vPortYield>
 8003a24:	e009      	b.n	8003a3a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3310      	adds	r3, #16
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fb6a 	bl	8004104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3324      	adds	r3, #36	; 0x24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fb65 	bl	8004104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a3a:	f000 fcf5 	bl	8004428 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a3e:	2301      	movs	r3, #1
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02a      	beq.n	8003ab6 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8003a60:	2050      	movs	r0, #80	; 0x50
 8003a62:	f001 f975 	bl	8004d50 <pvPortMalloc>
 8003a66:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d023      	beq.n	8003ab6 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f001 f968 	bl	8004d50 <pvPortMalloc>
 8003a80:	4602      	mov	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a9a:	69b8      	ldr	r0, [r7, #24]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	f7ff ff7b 	bl	8003998 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	79fa      	ldrb	r2, [r7, #7]
 8003aa6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e002      	b.n	8003ab6 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8003ab0:	69b8      	ldr	r0, [r7, #24]
 8003ab2:	f001 f9d9 	bl	8004e68 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <xQueueGenericCreate+0x7a>
 8003abc:	f000 fcc6 	bl	800444c <ulPortSetInterruptMask>
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericCreate+0x78>

	return xReturn;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <xQueueGenericSend+0x22>
 8003ae8:	f000 fcb0 	bl	800444c <ulPortSetInterruptMask>
 8003aec:	e7fe      	b.n	8003aec <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <xQueueGenericSend+0x30>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <xQueueGenericSend+0x34>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <xQueueGenericSend+0x36>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <xQueueGenericSend+0x40>
 8003b06:	f000 fca1 	bl	800444c <ulPortSetInterruptMask>
 8003b0a:	e7fe      	b.n	8003b0a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d103      	bne.n	8003b1a <xQueueGenericSend+0x4e>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <xQueueGenericSend+0x52>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <xQueueGenericSend+0x54>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <xQueueGenericSend+0x5e>
 8003b24:	f000 fc92 	bl	800444c <ulPortSetInterruptMask>
 8003b28:	e7fe      	b.n	8003b28 <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b2a:	f000 fc6d 	bl	8004408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <xQueueGenericSend+0x74>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d116      	bne.n	8003b6e <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b40:	69b8      	ldr	r0, [r7, #24]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	f000 f9a9 	bl	8003e9c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fc3c 	bl	80033d4 <xTaskRemoveFromEventList>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8003b62:	f000 fc41 	bl	80043e8 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b66:	f000 fc5f 	bl	8004428 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e059      	b.n	8003c22 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b74:	f000 fc58 	bl	8004428 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e052      	b.n	8003c22 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003b82:	f107 0310 	add.w	r3, r7, #16
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fc80 	bl	800348c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b90:	f000 fc4a 	bl	8004428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b94:	f7ff f9ca 	bl	8002f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b98:	f000 fc36 	bl	8004408 <vPortEnterCritical>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba4:	d102      	bne.n	8003bac <xQueueGenericSend+0xe0>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb4:	d102      	bne.n	8003bbc <xQueueGenericSend+0xf0>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	649a      	str	r2, [r3, #72]	; 0x48
 8003bbc:	f000 fc34 	bl	8004428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bc0:	f107 0210 	add.w	r2, r7, #16
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f7ff fc79 	bl	80034c0 <xTaskCheckForTimeOut>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d11e      	bne.n	8003c12 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bd4:	69b8      	ldr	r0, [r7, #24]
 8003bd6:	f000 fa51 	bl	800407c <prvIsQueueFull>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d012      	beq.n	8003c06 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f103 0210 	add.w	r2, r3, #16
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7ff fb94 	bl	8003318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bf0:	69b8      	ldr	r0, [r7, #24]
 8003bf2:	f000 f9e1 	bl	8003fb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bf6:	f7ff f9a7 	bl	8002f48 <xTaskResumeAll>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10f      	bne.n	8003c20 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 8003c00:	f000 fbf2 	bl	80043e8 <vPortYield>
 8003c04:	e00c      	b.n	8003c20 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c06:	69b8      	ldr	r0, [r7, #24]
 8003c08:	f000 f9d6 	bl	8003fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c0c:	f7ff f99c 	bl	8002f48 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8003c10:	e78b      	b.n	8003b2a <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c12:	69b8      	ldr	r0, [r7, #24]
 8003c14:	f000 f9d0 	bl	8003fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c18:	f7ff f996 	bl	8002f48 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <xQueueGenericSend+0x156>
		}
	}
 8003c20:	e783      	b.n	8003b2a <xQueueGenericSend+0x5e>
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop

08003c2c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <xQueueGenericSendFromISR+0x1e>
 8003c44:	f000 fc02 	bl	800444c <ulPortSetInterruptMask>
 8003c48:	e7fe      	b.n	8003c48 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <xQueueGenericSendFromISR+0x2c>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueGenericSendFromISR+0x30>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueGenericSendFromISR+0x32>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <xQueueGenericSendFromISR+0x3c>
 8003c62:	f000 fbf3 	bl	800444c <ulPortSetInterruptMask>
 8003c66:	e7fe      	b.n	8003c66 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d103      	bne.n	8003c76 <xQueueGenericSendFromISR+0x4a>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericSendFromISR+0x4e>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueGenericSendFromISR+0x50>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <xQueueGenericSendFromISR+0x5a>
 8003c80:	f000 fbe4 	bl	800444c <ulPortSetInterruptMask>
 8003c84:	e7fe      	b.n	8003c84 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c86:	f000 fc4f 	bl	8004528 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c8a:	f000 fbdf 	bl	800444c <ulPortSetInterruptMask>
 8003c8e:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <xQueueGenericSendFromISR+0x76>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d124      	bne.n	8003cec <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ca2:	69b8      	ldr	r0, [r7, #24]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	f000 f8f8 	bl	8003e9c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb4:	d112      	bne.n	8003cdc <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fb86 	bl	80033d4 <xTaskRemoveFromEventList>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e004      	b.n	8003ce6 <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e001      	b.n	8003cf0 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003cf0:	6978      	ldr	r0, [r7, #20]
 8003cf2:	f000 fbb5 	bl	8004460 <vPortClearInterruptMask>

	return xReturn;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	; 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <xQueueGenericReceive+0x22>
 8003d1c:	f000 fb96 	bl	800444c <ulPortSetInterruptMask>
 8003d20:	e7fe      	b.n	8003d20 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <xQueueGenericReceive+0x30>
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <xQueueGenericReceive+0x34>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <xQueueGenericReceive+0x36>
 8003d34:	2300      	movs	r3, #0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <xQueueGenericReceive+0x40>
 8003d3a:	f000 fb87 	bl	800444c <ulPortSetInterruptMask>
 8003d3e:	e7fe      	b.n	8003d3e <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d40:	f000 fb62 	bl	8004408 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d03b      	beq.n	8003dc4 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d52:	6a38      	ldr	r0, [r7, #32]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	f000 f909 	bl	8003f6c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11c      	bne.n	8003d9a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8003d72:	f7ff fd4b 	bl	800380c <xTaskGetCurrentTaskHandle>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	3310      	adds	r3, #16
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fb23 	bl	80033d4 <xTaskRemoveFromEventList>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d113      	bne.n	8003dbc <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8003d94:	f000 fb28 	bl	80043e8 <vPortYield>
 8003d98:	e010      	b.n	8003dbc <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fb11 	bl	80033d4 <xTaskRemoveFromEventList>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8003db8:	f000 fb16 	bl	80043e8 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8003dbc:	f000 fb34 	bl	8004428 <vPortExitCritical>
				return pdPASS;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e066      	b.n	8003e92 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dca:	f000 fb2d 	bl	8004428 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e05f      	b.n	8003e92 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fb55 	bl	800348c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8003de6:	f000 fb1f 	bl	8004428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dea:	f7ff f89f 	bl	8002f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dee:	f000 fb0b 	bl	8004408 <vPortEnterCritical>
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfa:	d102      	bne.n	8003e02 <xQueueGenericReceive+0x102>
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0a:	d102      	bne.n	8003e12 <xQueueGenericReceive+0x112>
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	649a      	str	r2, [r3, #72]	; 0x48
 8003e12:	f000 fb09 	bl	8004428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e16:	f107 0214 	add.w	r2, r7, #20
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f7ff fb4e 	bl	80034c0 <xTaskCheckForTimeOut>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d12b      	bne.n	8003e82 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e2a:	6a38      	ldr	r0, [r7, #32]
 8003e2c:	f000 f910 	bl	8004050 <prvIsQueueEmpty>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01f      	beq.n	8003e76 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 8003e3e:	f000 fae3 	bl	8004408 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fd0e 	bl	8003868 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8003e4c:	f000 faec 	bl	8004428 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f7ff fa5c 	bl	8003318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e60:	6a38      	ldr	r0, [r7, #32]
 8003e62:	f000 f8a9 	bl	8003fb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e66:	f7ff f86f 	bl	8002f48 <xTaskResumeAll>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10f      	bne.n	8003e90 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8003e70:	f000 faba 	bl	80043e8 <vPortYield>
 8003e74:	e00c      	b.n	8003e90 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e76:	6a38      	ldr	r0, [r7, #32]
 8003e78:	f000 f89e 	bl	8003fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e7c:	f7ff f864 	bl	8002f48 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8003e80:	e75e      	b.n	8003d40 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003e82:	6a38      	ldr	r0, [r7, #32]
 8003e84:	f000 f898 	bl	8003fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e88:	f7ff f85e 	bl	8002f48 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <xQueueGenericReceive+0x192>
		}
	}
 8003e90:	e756      	b.n	8003d40 <xQueueGenericReceive+0x40>
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3728      	adds	r7, #40	; 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop

08003e9c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10c      	bne.n	8003eca <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d151      	bne.n	8003f5c <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fd2d 	bl	800391c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	e048      	b.n	8003f5c <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11a      	bne.n	8003f06 <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	4610      	mov	r0, r2
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	461a      	mov	r2, r3
 8003ede:	f7fc f97d 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d32f      	bcc.n	8003f5c <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	e02a      	b.n	8003f5c <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4610      	mov	r0, r2
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f7fc f962 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	425b      	negs	r3, r3
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d207      	bcs.n	8003f44 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	425b      	negs	r3, r3
 8003f3e:	441a      	add	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d108      	bne.n	8003f5c <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	1e5a      	subs	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d019      	beq.n	8003fb2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	441a      	add	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d303      	bcc.n	8003fa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	6838      	ldr	r0, [r7, #0]
 8003faa:	4611      	mov	r1, r2
 8003fac:	461a      	mov	r2, r3
 8003fae:	f7fc f915 	bl	80001dc <memcpy>
	}
}
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fc0:	f000 fa22 	bl	8004408 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003fc4:	e014      	b.n	8003ff0 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff f9fe 	bl	80033d4 <xTaskRemoveFromEventList>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8003fde:	f7ff fabf 	bl	8003560 <vTaskMissedYield>
 8003fe2:	e000      	b.n	8003fe6 <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 8003fe4:	e008      	b.n	8003ff8 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	1e5a      	subs	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dce6      	bgt.n	8003fc6 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ffe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8004000:	f000 fa12 	bl	8004428 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004004:	f000 fa00 	bl	8004408 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004008:	e014      	b.n	8004034 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00f      	beq.n	8004032 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3310      	adds	r3, #16
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff f9dc 	bl	80033d4 <xTaskRemoveFromEventList>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8004022:	f7ff fa9d 	bl	8003560 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	1e5a      	subs	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
 8004030:	e000      	b.n	8004034 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8004032:	e003      	b.n	800403c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	2b00      	cmp	r3, #0
 800403a:	dce6      	bgt.n	800400a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004044:	f000 f9f0 	bl	8004428 <vPortExitCritical>
}
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop

08004050 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004058:	f000 f9d6 	bl	8004408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e001      	b.n	800406e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800406e:	f000 f9db 	bl	8004428 <vPortExitCritical>

	return xReturn;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004084:	f000 f9c0 	bl	8004408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	429a      	cmp	r2, r3
 8004092:	d102      	bne.n	800409a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e001      	b.n	800409e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800409e:	f000 f9c3 	bl	8004428 <vPortExitCritical>

	return xReturn;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040ba:	f000 f9a5 	bl	8004408 <vPortEnterCritical>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c6:	d102      	bne.n	80040ce <vQueueWaitForMessageRestricted+0x22>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d6:	d102      	bne.n	80040de <vQueueWaitForMessageRestricted+0x32>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	649a      	str	r2, [r3, #72]	; 0x48
 80040de:	f000 f9a3 	bl	8004428 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	4618      	mov	r0, r3
 80040f0:	6839      	ldr	r1, [r7, #0]
 80040f2:	f7ff f947 	bl	8003384 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff5e 	bl	8003fb8 <prvUnlockQueue>
	}
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop

08004104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 0208 	add.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800411c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f103 0208 	add.w	r2, r3, #8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 0208 	add.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
}
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
}
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]
}
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop

080041a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ba:	d103      	bne.n	80041c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e00c      	b.n	80041de <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3308      	adds	r3, #8
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e002      	b.n	80041d2 <vListInsert+0x2e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d9f6      	bls.n	80041cc <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
}
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6892      	ldr	r2, [r2, #8]
 8004224:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6852      	ldr	r2, [r2, #4]
 800422e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d103      	bne.n	8004248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1e5a      	subs	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b04      	subs	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b04      	subs	r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3b04      	subs	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <pxPortInitialiseStack+0x60>)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b14      	subs	r3, #20
 800429e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3b04      	subs	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f06f 0202 	mvn.w	r2, #2
 80042b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3b20      	subs	r3, #32
 80042b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	080042cd 	.word	0x080042cd

080042cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <prvTaskExitError+0x1c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d002      	beq.n	80042e0 <prvTaskExitError+0x14>
 80042da:	f000 f8b7 	bl	800444c <ulPortSetInterruptMask>
 80042de:	e7fe      	b.n	80042de <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 80042e0:	f000 f8b4 	bl	800444c <ulPortSetInterruptMask>
	for( ;; );
 80042e4:	e7fe      	b.n	80042e4 <prvTaskExitError+0x18>
 80042e6:	bf00      	nop
 80042e8:	20000008 	.word	0x20000008

080042ec <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <pxCurrentTCBConst2>)
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f6:	f380 8809 	msr	PSP, r0
 80042fa:	f04f 0000 	mov.w	r0, #0
 80042fe:	f380 8811 	msr	BASEPRI, r0
 8004302:	4770      	bx	lr

08004304 <pxCurrentTCBConst2>:
 8004304:	2000049c 	.word	0x2000049c

08004308 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004308:	4803      	ldr	r0, [pc, #12]	; (8004318 <prvPortStartFirstTask+0x10>)
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	6800      	ldr	r0, [r0, #0]
 800430e:	f380 8808 	msr	MSP, r0
 8004312:	b662      	cpsie	i
 8004314:	df00      	svc	0
 8004316:	bf00      	nop
 8004318:	e000ed08 	.word	0xe000ed08

0800431c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <xPortStartScheduler+0xb4>)
 8004324:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	22ff      	movs	r2, #255	; 0xff
 8004332:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <xPortStartScheduler+0xb8>)
 8004348:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <xPortStartScheduler+0xbc>)
 800434c:	2207      	movs	r2, #7
 800434e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004350:	e009      	b.n	8004366 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <xPortStartScheduler+0xbc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	1e5a      	subs	r2, r3, #1
 8004358:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <xPortStartScheduler+0xbc>)
 800435a:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	b25b      	sxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	dbef      	blt.n	8004352 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <xPortStartScheduler+0xbc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	021a      	lsls	r2, r3, #8
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <xPortStartScheduler+0xbc>)
 800437a:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <xPortStartScheduler+0xbc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <xPortStartScheduler+0xbc>)
 8004386:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <xPortStartScheduler+0xc0>)
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <xPortStartScheduler+0xc0>)
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800439a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <xPortStartScheduler+0xc0>)
 800439e:	4a0f      	ldr	r2, [pc, #60]	; (80043dc <xPortStartScheduler+0xc0>)
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80043a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043a8:	f000 f89a 	bl	80044e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <xPortStartScheduler+0xc4>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043b2:	f000 f8af 	bl	8004514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <xPortStartScheduler+0xc8>)
 80043b8:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <xPortStartScheduler+0xc8>)
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80043c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043c2:	f7ff ffa1 	bl	8004308 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	e000e400 	.word	0xe000e400
 80043d4:	20000598 	.word	0x20000598
 80043d8:	2000059c 	.word	0x2000059c
 80043dc:	e000ed20 	.word	0xe000ed20
 80043e0:	20000008 	.word	0x20000008
 80043e4:	e000ef34 	.word	0xe000ef34

080043e8 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <vPortYield+0x1c>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80043f4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80043f8:	f3bf 8f6f 	isb	sy
}
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800440c:	f000 f81e 	bl	800444c <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <vPortEnterCritical+0x1c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	4b03      	ldr	r3, [pc, #12]	; (8004424 <vPortEnterCritical+0x1c>)
 8004418:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800441a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800441e:	f3bf 8f6f 	isb	sy
}
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000008 	.word	0x20000008

08004428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <vPortExitCritical+0x20>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	1e5a      	subs	r2, r3, #1
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <vPortExitCritical+0x20>)
 8004434:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <vPortExitCritical+0x20>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 800443e:	2000      	movs	r0, #0
 8004440:	f000 f80e 	bl	8004460 <vPortClearInterruptMask>
	}
}
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000008 	.word	0x20000008

0800444c <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 800444c:	f3ef 8011 	mrs	r0, BASEPRI
 8004450:	f04f 0150 	mov.w	r1, #80	; 0x50
 8004454:	f381 8811 	msr	BASEPRI, r1
 8004458:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	bf00      	nop

08004460 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8004460:	f380 8811 	msr	BASEPRI, r0
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop

08004468 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004468:	f3ef 8009 	mrs	r0, PSP
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <pxCurrentTCBConst>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	f01e 0f10 	tst.w	lr, #16
 8004474:	bf08      	it	eq
 8004476:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800447a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447e:	6010      	str	r0, [r2, #0]
 8004480:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004484:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004488:	f380 8811 	msr	BASEPRI, r0
 800448c:	f7fe feca 	bl	8003224 <vTaskSwitchContext>
 8004490:	f04f 0000 	mov.w	r0, #0
 8004494:	f380 8811 	msr	BASEPRI, r0
 8004498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	6808      	ldr	r0, [r1, #0]
 80044a0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	f01e 0f10 	tst.w	lr, #16
 80044a8:	bf08      	it	eq
 80044aa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044ae:	f380 8809 	msr	PSP, r0
 80044b2:	4770      	bx	lr

080044b4 <pxCurrentTCBConst>:
 80044b4:	2000049c 	.word	0x2000049c

080044b8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 80044bc:	f7ff ffc6 	bl	800444c <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044c0:	f7fe fdda 	bl	8003078 <xTaskIncrementTick>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <SysTick_Handler+0x24>)
 80044cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d0:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7ff ffc4 	bl	8004460 <vPortClearInterruptMask>
}
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <vPortSetupTimerInterrupt+0x24>)
 80044e6:	4a08      	ldr	r2, [pc, #32]	; (8004508 <vPortSetupTimerInterrupt+0x28>)
 80044e8:	6811      	ldr	r1, [r2, #0]
 80044ea:	4a08      	ldr	r2, [pc, #32]	; (800450c <vPortSetupTimerInterrupt+0x2c>)
 80044ec:	fba2 0201 	umull	r0, r2, r2, r1
 80044f0:	0992      	lsrs	r2, r2, #6
 80044f2:	3a01      	subs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <vPortSetupTimerInterrupt+0x30>)
 80044f8:	2207      	movs	r2, #7
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000e014 	.word	0xe000e014
 8004508:	20000000 	.word	0x20000000
 800450c:	10624dd3 	.word	0x10624dd3
 8004510:	e000e010 	.word	0xe000e010

08004514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004524 <vPortEnableVFP+0x10>
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	4770      	bx	lr
 8004522:	0000      	.short	0x0000
 8004524:	e000ed88 	.word	0xe000ed88

08004528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800452e:	f3ef 8305 	mrs	r3, IPSR
 8004532:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d90c      	bls.n	8004554 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800453a:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <vPortValidateInterruptPriority+0x48>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4413      	add	r3, r2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <vPortValidateInterruptPriority+0x4c>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	429a      	cmp	r2, r3
 800454c:	d202      	bcs.n	8004554 <vPortValidateInterruptPriority+0x2c>
 800454e:	f7ff ff7d 	bl	800444c <ulPortSetInterruptMask>
 8004552:	e7fe      	b.n	8004552 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004554:	4b08      	ldr	r3, [pc, #32]	; (8004578 <vPortValidateInterruptPriority+0x50>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800455c:	4b07      	ldr	r3, [pc, #28]	; (800457c <vPortValidateInterruptPriority+0x54>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d902      	bls.n	800456a <vPortValidateInterruptPriority+0x42>
 8004564:	f7ff ff72 	bl	800444c <ulPortSetInterruptMask>
 8004568:	e7fe      	b.n	8004568 <vPortValidateInterruptPriority+0x40>
	}
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	e000e3f0 	.word	0xe000e3f0
 8004574:	20000598 	.word	0x20000598
 8004578:	e000ed0c 	.word	0xe000ed0c
 800457c:	2000059c 	.word	0x2000059c

08004580 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800458a:	f000 fa45 	bl	8004a18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <xTimerCreateTimerTask+0x4c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00f      	beq.n	80045b6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8004596:	2302      	movs	r3, #2
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2300      	movs	r3, #0
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2300      	movs	r3, #0
 80045a0:	9302      	str	r3, [sp, #8]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9303      	str	r3, [sp, #12]
 80045a6:	480a      	ldr	r0, [pc, #40]	; (80045d0 <xTimerCreateTimerTask+0x50>)
 80045a8:	490a      	ldr	r1, [pc, #40]	; (80045d4 <xTimerCreateTimerTask+0x54>)
 80045aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ae:	2300      	movs	r3, #0
 80045b0:	f7fe fa42 	bl	8002a38 <xTaskGenericCreate>
 80045b4:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xTimerCreateTimerTask+0x42>
 80045bc:	f7ff ff46 	bl	800444c <ulPortSetInterruptMask>
 80045c0:	e7fe      	b.n	80045c0 <xTimerCreateTimerTask+0x40>
	return xReturn;
 80045c2:	687b      	ldr	r3, [r7, #4]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	200005d0 	.word	0x200005d0
 80045d0:	080046d5 	.word	0x080046d5
 80045d4:	08007ea8 	.word	0x08007ea8

080045d8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <xTimerGenericCommand+0x88>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d030      	beq.n	8004654 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d11c      	bne.n	800463e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004604:	f7ff f912 	bl	800382c <xTaskGetSchedulerState>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d10b      	bne.n	8004626 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <xTimerGenericCommand+0x88>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800461c:	2300      	movs	r3, #0
 800461e:	f7ff fa55 	bl	8003acc <xQueueGenericSend>
 8004622:	61f8      	str	r0, [r7, #28]
 8004624:	e016      	b.n	8004654 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <xTimerGenericCommand+0x88>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f107 0310 	add.w	r3, r7, #16
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	2200      	movs	r2, #0
 8004634:	2300      	movs	r3, #0
 8004636:	f7ff fa49 	bl	8003acc <xQueueGenericSend>
 800463a:	61f8      	str	r0, [r7, #28]
 800463c:	e00a      	b.n	8004654 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <xTimerGenericCommand+0x88>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	f107 0310 	add.w	r3, r7, #16
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	2300      	movs	r3, #0
 800464e:	f7ff faed 	bl	8003c2c <xQueueGenericSendFromISR>
 8004652:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8004654:	69fb      	ldr	r3, [r7, #28]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200005d0 	.word	0x200005d0

08004664 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af02      	add	r7, sp, #8
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <prvProcessExpiredTimer+0x6c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fdc9 	bl	8004214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d11b      	bne.n	80046c2 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	4619      	mov	r1, r3
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f000 f8a9 	bl	80047f0 <prvInsertTimerInActiveList>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10e      	bne.n	80046c2 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80046a4:	2300      	movs	r3, #0
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	2100      	movs	r1, #0
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	2300      	movs	r3, #0
 80046b0:	f7ff ff92 	bl	80045d8 <xTimerGenericCommand>
 80046b4:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <prvProcessExpiredTimer+0x5e>
 80046bc:	f7ff fec6 	bl	800444c <ulPortSetInterruptMask>
 80046c0:	e7fe      	b.n	80046c0 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	4798      	blx	r3
}
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	200005c8 	.word	0x200005c8

080046d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f83f 	bl	8004764 <prvGetNextExpireTime>
 80046e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f000 f803 	bl	80046f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046f2:	f000 f8bf 	bl	8004874 <prvProcessReceivedCommands>
	}
 80046f6:	e7f1      	b.n	80046dc <prvTimerTask+0x8>

080046f8 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004702:	f7fe fc13 	bl	8002f2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f84e 	bl	80047ac <prvSampleTimeNow>
 8004710:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11e      	bne.n	8004756 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <prvProcessTimerOrBlockTask+0x3c>
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	429a      	cmp	r2, r3
 8004724:	d806      	bhi.n	8004734 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004726:	f7fe fc0f 	bl	8002f48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	f7ff ff99 	bl	8004664 <prvProcessExpiredTimer>
 8004732:	e012      	b.n	800475a <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8004734:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <prvProcessTimerOrBlockTask+0x68>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1acb      	subs	r3, r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	f7ff fcb3 	bl	80040ac <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004746:	f7fe fbff 	bl	8002f48 <xTaskResumeAll>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8004750:	f7ff fe4a 	bl	80043e8 <vPortYield>
 8004754:	e001      	b.n	800475a <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004756:	f7fe fbf7 	bl	8002f48 <xTaskResumeAll>
		}
	}
}
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	200005d0 	.word	0x200005d0

08004764 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <prvGetNextExpireTime+0x44>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2300      	movne	r3, #0
 8004778:	2301      	moveq	r3, #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <prvGetNextExpireTime+0x44>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e001      	b.n	800479a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	200005c8 	.word	0x200005c8

080047ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047b4:	f7fe fc4e 	bl	8003054 <xTaskGetTickCount>
 80047b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <prvSampleTimeNow+0x40>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d208      	bcs.n	80047d6 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <prvSampleTimeNow+0x40>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f8cb 	bl	8004964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e002      	b.n	80047dc <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <prvSampleTimeNow+0x40>)
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80047e2:	68fb      	ldr	r3, [r7, #12]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200005d4 	.word	0x200005d4

080047f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d812      	bhi.n	800483c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	429a      	cmp	r2, r3
 8004822:	d302      	bcc.n	800482a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e01b      	b.n	8004862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <prvInsertTimerInActiveList+0x7c>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3304      	adds	r3, #4
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	f7ff fcb5 	bl	80041a4 <vListInsert>
 800483a:	e012      	b.n	8004862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d206      	bcs.n	8004852 <prvInsertTimerInActiveList+0x62>
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e007      	b.n	8004862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <prvInsertTimerInActiveList+0x80>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3304      	adds	r3, #4
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	f7ff fca1 	bl	80041a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200005cc 	.word	0x200005cc
 8004870:	200005c8 	.word	0x200005c8

08004874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	; 0x28
 8004878:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800487a:	e060      	b.n	800493e <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fcc1 	bl	8004214 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004892:	1d3b      	adds	r3, r7, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff ff89 	bl	80047ac <prvSampleTimeNow>
 800489a:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d84c      	bhi.n	800493c <prvProcessReceivedCommands+0xc8>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <prvProcessReceivedCommands+0x34>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	0800493d 	.word	0x0800493d
 80048b0:	0800490b 	.word	0x0800490b
 80048b4:	08004935 	.word	0x08004935
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	69f8      	ldr	r0, [r7, #28]
 80048c4:	4611      	mov	r1, r2
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	f7ff ff92 	bl	80047f0 <prvInsertTimerInActiveList>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d11a      	bne.n	8004908 <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	69f8      	ldr	r0, [r7, #28]
 80048d8:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d112      	bne.n	8004908 <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	4413      	add	r3, r2
 80048ea:	2200      	movs	r2, #0
 80048ec:	9200      	str	r2, [sp, #0]
 80048ee:	69f8      	ldr	r0, [r7, #28]
 80048f0:	2100      	movs	r1, #0
 80048f2:	461a      	mov	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	f7ff fe6f 	bl	80045d8 <xTimerGenericCommand>
 80048fa:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <prvProcessReceivedCommands+0x94>
 8004902:	f7ff fda3 	bl	800444c <ulPortSetInterruptMask>
 8004906:	e7fe      	b.n	8004906 <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 8004908:	e019      	b.n	800493e <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <prvProcessReceivedCommands+0xaa>
 8004918:	f7ff fd98 	bl	800444c <ulPortSetInterruptMask>
 800491c:	e7fe      	b.n	800491c <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	4413      	add	r3, r2
 8004926:	69f8      	ldr	r0, [r7, #28]
 8004928:	4619      	mov	r1, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f7ff ff5f 	bl	80047f0 <prvInsertTimerInActiveList>
				break;
 8004932:	e004      	b.n	800493e <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8004934:	69f8      	ldr	r0, [r7, #28]
 8004936:	f000 fa97 	bl	8004e68 <vPortFree>
				break;
 800493a:	e000      	b.n	800493e <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 800493c:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <prvProcessReceivedCommands+0xec>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	f107 0308 	add.w	r3, r7, #8
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	2200      	movs	r2, #0
 800494c:	2300      	movs	r3, #0
 800494e:	f7ff f9d7 	bl	8003d00 <xQueueGenericReceive>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d191      	bne.n	800487c <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200005d0 	.word	0x200005d0

08004964 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496c:	e03d      	b.n	80049ea <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800496e:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <prvSwitchTimerLists+0xac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <prvSwitchTimerLists+0xac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3304      	adds	r3, #4
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fc44 	bl	8004214 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	69b8      	ldr	r0, [r7, #24]
 8004992:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d126      	bne.n	80049ea <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90e      	bls.n	80049cc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <prvSwitchTimerLists+0xac>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7ff fbed 	bl	80041a4 <vListInsert>
 80049ca:	e00e      	b.n	80049ea <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80049cc:	2300      	movs	r3, #0
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	69b8      	ldr	r0, [r7, #24]
 80049d2:	2100      	movs	r1, #0
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	2300      	movs	r3, #0
 80049d8:	f7ff fdfe 	bl	80045d8 <xTimerGenericCommand>
 80049dc:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <prvSwitchTimerLists+0x86>
 80049e4:	f7ff fd32 	bl	800444c <ulPortSetInterruptMask>
 80049e8:	e7fe      	b.n	80049e8 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <prvSwitchTimerLists+0xac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1bc      	bne.n	800496e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <prvSwitchTimerLists+0xac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <prvSwitchTimerLists+0xb0>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <prvSwitchTimerLists+0xac>)
 8004a00:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <prvSwitchTimerLists+0xb0>)
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]
}
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200005c8 	.word	0x200005c8
 8004a14:	200005cc 	.word	0x200005cc

08004a18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a1c:	f7ff fcf4 	bl	8004408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <prvCheckForValidListAndQueue+0x40>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d113      	bne.n	8004a50 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a28:	480c      	ldr	r0, [pc, #48]	; (8004a5c <prvCheckForValidListAndQueue+0x44>)
 8004a2a:	f7ff fb6b 	bl	8004104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a2e:	480c      	ldr	r0, [pc, #48]	; (8004a60 <prvCheckForValidListAndQueue+0x48>)
 8004a30:	f7ff fb68 	bl	8004104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <prvCheckForValidListAndQueue+0x4c>)
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <prvCheckForValidListAndQueue+0x44>)
 8004a38:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <prvCheckForValidListAndQueue+0x50>)
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <prvCheckForValidListAndQueue+0x48>)
 8004a3e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8004a40:	200a      	movs	r0, #10
 8004a42:	210c      	movs	r1, #12
 8004a44:	2200      	movs	r2, #0
 8004a46:	f7fe ffff 	bl	8003a48 <xQueueGenericCreate>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	4b02      	ldr	r3, [pc, #8]	; (8004a58 <prvCheckForValidListAndQueue+0x40>)
 8004a4e:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8004a50:	f7ff fcea 	bl	8004428 <vPortExitCritical>
}
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200005d0 	.word	0x200005d0
 8004a5c:	200005a0 	.word	0x200005a0
 8004a60:	200005b4 	.word	0x200005b4
 8004a64:	200005c8 	.word	0x200005c8
 8004a68:	200005cc 	.word	0x200005cc

08004a6c <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <FreeRTOS_CLIRegisterCommand+0x18>
 8004a7e:	f7ff fce5 	bl	800444c <ulPortSetInterruptMask>
 8004a82:	e7fe      	b.n	8004a82 <FreeRTOS_CLIRegisterCommand+0x16>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8004a84:	2008      	movs	r0, #8
 8004a86:	f000 f963 	bl	8004d50 <pvPortMalloc>
 8004a8a:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <FreeRTOS_CLIRegisterCommand+0x2c>
 8004a92:	f7ff fcdb 	bl	800444c <ulPortSetInterruptMask>
 8004a96:	e7fe      	b.n	8004a96 <FreeRTOS_CLIRegisterCommand+0x2a>

	if( pxNewListItem != NULL )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d012      	beq.n	8004ac4 <FreeRTOS_CLIRegisterCommand+0x58>
	{
		taskENTER_CRITICAL();
 8004a9e:	f7ff fcb3 	bl	8004408 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <FreeRTOS_CLIRegisterCommand+0x64>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <FreeRTOS_CLIRegisterCommand+0x64>)
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 8004abc:	f7ff fcb4 	bl	8004428 <vPortExitCritical>

		xReturn = pdPASS;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000014 	.word	0x20000014

08004ad4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
portBASE_TYPE xReturn = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8004ae4:	4b3a      	ldr	r3, [pc, #232]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d141      	bne.n	8004b70 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004aec:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004aee:	4a39      	ldr	r2, [pc, #228]	; (8004bd4 <FreeRTOS_CLIProcessCommand+0x100>)
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e039      	b.n	8004b68 <FreeRTOS_CLIProcessCommand+0x94>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004afe:	69b8      	ldr	r0, [r7, #24]
 8004b00:	f002 fe98 	bl	8007834 <strlen>
 8004b04:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b25b      	sxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d005      	beq.n	8004b20 <FreeRTOS_CLIProcessCommand+0x4c>
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	4413      	add	r3, r2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11e      	bne.n	8004b5e <FreeRTOS_CLIProcessCommand+0x8a>
			{
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	69b9      	ldr	r1, [r7, #24]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	f002 feb5 	bl	8007894 <strncmp>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d116      	bne.n	8004b5e <FreeRTOS_CLIProcessCommand+0x8a>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	7b1b      	ldrb	r3, [r3, #12]
 8004b38:	b25b      	sxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	db0e      	blt.n	8004b5c <FreeRTOS_CLIProcessCommand+0x88>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f8d8 	bl	8004cf4 <prvGetNumberOfParameters>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	7b1b      	ldrb	r3, [r3, #12]
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d002      	beq.n	8004b5c <FreeRTOS_CLIProcessCommand+0x88>
						{
							xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8004b5a:	e009      	b.n	8004b70 <FreeRTOS_CLIProcessCommand+0x9c>
 8004b5c:	e008      	b.n	8004b70 <FreeRTOS_CLIProcessCommand+0x9c>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1c1      	bne.n	8004af4 <FreeRTOS_CLIProcessCommand+0x20>
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8004b70:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <FreeRTOS_CLIProcessCommand+0xbc>
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8004b7e:	68b8      	ldr	r0, [r7, #8]
 8004b80:	4915      	ldr	r1, [pc, #84]	; (8004bd8 <FreeRTOS_CLIProcessCommand+0x104>)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	f002 fee0 	bl	8007948 <strncpy>
		pxCommand = NULL;
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e01a      	b.n	8004bc6 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00f      	beq.n	8004bb8 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	68b8      	ldr	r0, [r7, #8]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4798      	blx	r3
 8004ba8:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e006      	b.n	8004bc6 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( ( char * ) pcWriteBuffer, ( const char * const ) "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	4908      	ldr	r1, [pc, #32]	; (8004bdc <FreeRTOS_CLIProcessCommand+0x108>)
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	f002 fec3 	bl	8007948 <strncpy>
		xReturn = pdFALSE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	200005d8 	.word	0x200005d8
 8004bd4:	2000000c 	.word	0x2000000c
 8004bd8:	08007ee8 	.word	0x08007ee8
 8004bdc:	08007f40 	.word	0x08007f40

08004be0 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const int8_t *FreeRTOS_CLIGetParameter( const int8_t *pcCommandString, unsigned portBASE_TYPE uxWantedParameter, portBASE_TYPE *pxParameterStringLength )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
unsigned portBASE_TYPE uxParametersFound = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
const int8_t *pcReturn = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 8004bfa:	e041      	b.n	8004c80 <FreeRTOS_CLIGetParameter+0xa0>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004bfc:	e002      	b.n	8004c04 <FreeRTOS_CLIGetParameter+0x24>
		{
			pcCommandString++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <FreeRTOS_CLIGetParameter+0x36>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d1f3      	bne.n	8004bfe <FreeRTOS_CLIGetParameter+0x1e>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8004c16:	e002      	b.n	8004c1e <FreeRTOS_CLIGetParameter+0x3e>
		{
			pcCommandString++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <FreeRTOS_CLIGetParameter+0x50>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d0f3      	beq.n	8004c18 <FreeRTOS_CLIGetParameter+0x38>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d022      	beq.n	8004c7e <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d11c      	bne.n	8004c80 <FreeRTOS_CLIGetParameter+0xa0>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004c4a:	e007      	b.n	8004c5c <FreeRTOS_CLIGetParameter+0x7c>
				{
					( *pxParameterStringLength )++;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <FreeRTOS_CLIGetParameter+0x8e>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	b25b      	sxtb	r3, r3
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d1ee      	bne.n	8004c4c <FreeRTOS_CLIGetParameter+0x6c>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <FreeRTOS_CLIGetParameter+0x9c>
				{
					pcReturn = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
				}

				break;
 8004c7a:	e005      	b.n	8004c88 <FreeRTOS_CLIGetParameter+0xa8>
 8004c7c:	e004      	b.n	8004c88 <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 8004c7e:	e003      	b.n	8004c88 <FreeRTOS_CLIGetParameter+0xa8>
unsigned portBASE_TYPE uxParametersFound = 0;
const int8_t *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3b9      	bcc.n	8004bfc <FreeRTOS_CLIGetParameter+0x1c>
		{
			break;
		}
	}

	return pcReturn;
 8004c88:	693b      	ldr	r3, [r7, #16]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop

08004c98 <prvHelpCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
signed portBASE_TYPE xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8004ca4:	4b11      	ldr	r3, [pc, #68]	; (8004cec <prvHelpCommand+0x54>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <prvHelpCommand+0x54>)
 8004cae:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <prvHelpCommand+0x58>)
 8004cb0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8004cb2:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <prvHelpCommand+0x54>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	f002 fe42 	bl	8007948 <strncpy>
	pxCommand = pxCommand->pxNext;
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <prvHelpCommand+0x54>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <prvHelpCommand+0x54>)
 8004ccc:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <prvHelpCommand+0x54>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e001      	b.n	8004ce0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ce0:	697b      	ldr	r3, [r7, #20]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200005dc 	.word	0x200005dc
 8004cf0:	2000000c 	.word	0x2000000c

08004cf4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8004d04:	e012      	b.n	8004d2c <prvGetNumberOfParameters+0x38>
	{
		if( ( *pcCommandString ) == ' ' )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d108      	bne.n	8004d22 <prvGetNumberOfParameters+0x2e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d007      	beq.n	8004d26 <prvGetNumberOfParameters+0x32>
			{
				cParameters++;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	e001      	b.n	8004d26 <prvGetNumberOfParameters+0x32>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e8      	bne.n	8004d06 <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d102      	bne.n	8004d40 <prvGetNumberOfParameters+0x4c>
	{
		cParameters--;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	b25b      	sxtb	r3, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004d5c:	f7fe f8e6 	bl	8002f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d60:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <pvPortMalloc+0x108>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d68:	f000 f8c8 	bl	8004efc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d6c:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <pvPortMalloc+0x10c>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d163      	bne.n	8004e40 <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 8004d7e:	2308      	movs	r3, #8
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f023 0307 	bic.w	r3, r3, #7
 8004d96:	3308      	adds	r3, #8
 8004d98:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d04f      	beq.n	8004e40 <pvPortMalloc+0xf0>
 8004da0:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <pvPortMalloc+0x110>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d84a      	bhi.n	8004e40 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <pvPortMalloc+0x114>)
 8004dac:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004dae:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <pvPortMalloc+0x114>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004db4:	e004      	b.n	8004dc0 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d203      	bcs.n	8004dd2 <pvPortMalloc+0x82>
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f1      	bne.n	8004db6 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <pvPortMalloc+0x108>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d031      	beq.n	8004e40 <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	2308      	movs	r3, #8
 8004de2:	4413      	add	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	2308      	movs	r3, #8
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d90f      	bls.n	8004e1e <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	1ad2      	subs	r2, r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8004e18:	68b8      	ldr	r0, [r7, #8]
 8004e1a:	f000 f8bd 	bl	8004f98 <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <pvPortMalloc+0x110>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <pvPortMalloc+0x110>)
 8004e2a:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <pvPortMalloc+0x10c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 8004e40:	f7fe f882 	bl	8002f48 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004e4a:	f7fd fcf7 	bl	800283c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200131e8 	.word	0x200131e8
 8004e5c:	200131ec 	.word	0x200131ec
 8004e60:	20000018 	.word	0x20000018
 8004e64:	200131e0 	.word	0x200131e0

08004e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d038      	beq.n	8004eec <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <vPortFree+0x8c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <vPortFree+0x34>
 8004e96:	f7ff fad9 	bl	800444c <ulPortSetInterruptMask>
 8004e9a:	e7fe      	b.n	8004e9a <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <vPortFree+0x42>
 8004ea4:	f7ff fad2 	bl	800444c <ulPortSetInterruptMask>
 8004ea8:	e7fe      	b.n	8004ea8 <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <vPortFree+0x8c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d019      	beq.n	8004eec <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d115      	bne.n	8004eec <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <vPortFree+0x8c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ed0:	f7fe f82c 	bl	8002f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <vPortFree+0x90>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	441a      	add	r2, r3
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <vPortFree+0x90>)
 8004ee0:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 8004ee2:	68b8      	ldr	r0, [r7, #8]
 8004ee4:	f000 f858 	bl	8004f98 <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 8004ee8:	f7fe f82e 	bl	8002f48 <xTaskResumeAll>
			}
		}
	}
}
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200131ec 	.word	0x200131ec
 8004ef8:	20000018 	.word	0x20000018

08004efc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8004f02:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <prvHeapInit+0x84>)
 8004f04:	f023 0307 	bic.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <prvHeapInit+0x88>)
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f10:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <prvHeapInit+0x88>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <prvHeapInit+0x8c>)
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 8004f1e:	2308      	movs	r3, #8
 8004f20:	425b      	negs	r3, r3
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 8004f28:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <prvHeapInit+0x90>)
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 8004f2e:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <prvHeapInit+0x90>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <prvHeapInit+0x44>
 8004f3a:	f7ff fa87 	bl	800444c <ulPortSetInterruptMask>
 8004f3e:	e7fe      	b.n	8004f3e <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 8004f40:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <prvHeapInit+0x90>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f48:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <prvHeapInit+0x90>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 8004f54:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <prvHeapInit+0x8c>)
 8004f56:	2308      	movs	r3, #8
 8004f58:	1ad2      	subs	r2, r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <prvHeapInit+0x90>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <prvHeapInit+0x94>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	1ad2      	subs	r2, r2, r3
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <prvHeapInit+0x94>)
 8004f70:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <prvHeapInit+0x98>)
 8004f74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200005e8 	.word	0x200005e8
 8004f84:	200131e0 	.word	0x200131e0
 8004f88:	00012bf8 	.word	0x00012bf8
 8004f8c:	200131e8 	.word	0x200131e8
 8004f90:	20000018 	.word	0x20000018
 8004f94:	200131ec 	.word	0x200131ec

08004f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <prvInsertBlockIntoFreeList+0xa8>)
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e002      	b.n	8004fac <prvInsertBlockIntoFreeList+0x14>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d3f7      	bcc.n	8004fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d108      	bne.n	8004fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d118      	bne.n	8005020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <prvInsertBlockIntoFreeList+0xac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d00d      	beq.n	8005016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	441a      	add	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e008      	b.n	8005028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <prvInsertBlockIntoFreeList+0xac>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e003      	b.n	8005028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	d002      	beq.n	8005036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
	}
}
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	200131e0 	.word	0x200131e0
 8005044:	200131e8 	.word	0x200131e8

08005048 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005056:	d013      	beq.n	8005080 <NVIC_PriorityGroupConfig+0x38>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800505e:	d00f      	beq.n	8005080 <NVIC_PriorityGroupConfig+0x38>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005066:	d00b      	beq.n	8005080 <NVIC_PriorityGroupConfig+0x38>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d007      	beq.n	8005080 <NVIC_PriorityGroupConfig+0x38>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005076:	d003      	beq.n	8005080 <NVIC_PriorityGroupConfig+0x38>
 8005078:	4806      	ldr	r0, [pc, #24]	; (8005094 <NVIC_PriorityGroupConfig+0x4c>)
 800507a:	2173      	movs	r1, #115	; 0x73
 800507c:	f7fd fbf2 	bl	8002864 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005080:	4a05      	ldr	r2, [pc, #20]	; (8005098 <NVIC_PriorityGroupConfig+0x50>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800508c:	60d3      	str	r3, [r2, #12]
}
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	08007f90 	.word	0x08007f90
 8005098:	e000ed00 	.word	0xe000ed00

0800509c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
 80050a8:	2300      	movs	r3, #0
 80050aa:	73bb      	strb	r3, [r7, #14]
 80050ac:	230f      	movs	r3, #15
 80050ae:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	78db      	ldrb	r3, [r3, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <NVIC_Init+0x2c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	78db      	ldrb	r3, [r3, #3]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d003      	beq.n	80050c8 <NVIC_Init+0x2c>
 80050c0:	4830      	ldr	r0, [pc, #192]	; (8005184 <NVIC_Init+0xe8>)
 80050c2:	2187      	movs	r1, #135	; 0x87
 80050c4:	f7fd fbce 	bl	8002864 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b0f      	cmp	r3, #15
 80050ce:	d903      	bls.n	80050d8 <NVIC_Init+0x3c>
 80050d0:	482c      	ldr	r0, [pc, #176]	; (8005184 <NVIC_Init+0xe8>)
 80050d2:	2188      	movs	r1, #136	; 0x88
 80050d4:	f7fd fbc6 	bl	8002864 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	789b      	ldrb	r3, [r3, #2]
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d903      	bls.n	80050e8 <NVIC_Init+0x4c>
 80050e0:	4828      	ldr	r0, [pc, #160]	; (8005184 <NVIC_Init+0xe8>)
 80050e2:	2189      	movs	r1, #137	; 0x89
 80050e4:	f7fd fbbe 	bl	8002864 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	78db      	ldrb	r3, [r3, #3]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d037      	beq.n	8005160 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <NVIC_Init+0xec>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	f1c3 0304 	rsb	r3, r3, #4
 8005104:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8005106:	7b7a      	ldrb	r2, [r7, #13]
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	fa42 f303 	asr.w	r3, r2, r3
 800510e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	461a      	mov	r2, r3
 8005116:	7bbb      	ldrb	r3, [r7, #14]
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	789a      	ldrb	r2, [r3, #2]
 8005122:	7b7b      	ldrb	r3, [r7, #13]
 8005124:	4013      	ands	r3, r2
 8005126:	b2da      	uxtb	r2, r3
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	4313      	orrs	r3, r2
 800512c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005134:	4a15      	ldr	r2, [pc, #84]	; (800518c <NVIC_Init+0xf0>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	4413      	add	r3, r2
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <NVIC_Init+0xf0>)
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	7812      	ldrb	r2, [r2, #0]
 8005148:	0952      	lsrs	r2, r2, #5
 800514a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	7809      	ldrb	r1, [r1, #0]
 8005150:	f001 011f 	and.w	r1, r1, #31
 8005154:	2001      	movs	r0, #1
 8005156:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800515a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800515e:	e00e      	b.n	800517e <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <NVIC_Init+0xf0>)
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	0952      	lsrs	r2, r2, #5
 8005168:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	7809      	ldrb	r1, [r1, #0]
 800516e:	f001 011f 	and.w	r1, r1, #31
 8005172:	2001      	movs	r0, #1
 8005174:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005178:	3220      	adds	r2, #32
 800517a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	08007f90 	.word	0x08007f90
 8005188:	e000ed00 	.word	0xe000ed00
 800518c:	e000e100 	.word	0xe000e100

08005190 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4b72      	ldr	r3, [pc, #456]	; (8005364 <DMA_DeInit+0x1d4>)
 800519c:	429a      	cmp	r2, r3
 800519e:	d03f      	beq.n	8005220 <DMA_DeInit+0x90>
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4b71      	ldr	r3, [pc, #452]	; (8005368 <DMA_DeInit+0x1d8>)
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d03b      	beq.n	8005220 <DMA_DeInit+0x90>
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4b70      	ldr	r3, [pc, #448]	; (800536c <DMA_DeInit+0x1dc>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d037      	beq.n	8005220 <DMA_DeInit+0x90>
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4b6f      	ldr	r3, [pc, #444]	; (8005370 <DMA_DeInit+0x1e0>)
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d033      	beq.n	8005220 <DMA_DeInit+0x90>
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <DMA_DeInit+0x1e4>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d02f      	beq.n	8005220 <DMA_DeInit+0x90>
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4b6d      	ldr	r3, [pc, #436]	; (8005378 <DMA_DeInit+0x1e8>)
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d02b      	beq.n	8005220 <DMA_DeInit+0x90>
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4b6c      	ldr	r3, [pc, #432]	; (800537c <DMA_DeInit+0x1ec>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d027      	beq.n	8005220 <DMA_DeInit+0x90>
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4b6b      	ldr	r3, [pc, #428]	; (8005380 <DMA_DeInit+0x1f0>)
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d023      	beq.n	8005220 <DMA_DeInit+0x90>
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <DMA_DeInit+0x1f4>)
 80051dc:	429a      	cmp	r2, r3
 80051de:	d01f      	beq.n	8005220 <DMA_DeInit+0x90>
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4b69      	ldr	r3, [pc, #420]	; (8005388 <DMA_DeInit+0x1f8>)
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d01b      	beq.n	8005220 <DMA_DeInit+0x90>
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4b68      	ldr	r3, [pc, #416]	; (800538c <DMA_DeInit+0x1fc>)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d017      	beq.n	8005220 <DMA_DeInit+0x90>
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4b67      	ldr	r3, [pc, #412]	; (8005390 <DMA_DeInit+0x200>)
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d013      	beq.n	8005220 <DMA_DeInit+0x90>
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	4b66      	ldr	r3, [pc, #408]	; (8005394 <DMA_DeInit+0x204>)
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d00f      	beq.n	8005220 <DMA_DeInit+0x90>
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4b65      	ldr	r3, [pc, #404]	; (8005398 <DMA_DeInit+0x208>)
 8005204:	429a      	cmp	r2, r3
 8005206:	d00b      	beq.n	8005220 <DMA_DeInit+0x90>
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	4b64      	ldr	r3, [pc, #400]	; (800539c <DMA_DeInit+0x20c>)
 800520c:	429a      	cmp	r2, r3
 800520e:	d007      	beq.n	8005220 <DMA_DeInit+0x90>
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4b63      	ldr	r3, [pc, #396]	; (80053a0 <DMA_DeInit+0x210>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d003      	beq.n	8005220 <DMA_DeInit+0x90>
 8005218:	4862      	ldr	r0, [pc, #392]	; (80053a4 <DMA_DeInit+0x214>)
 800521a:	21bf      	movs	r1, #191	; 0xbf
 800521c:	f7fd fb22 	bl	8002864 <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f023 0201 	bic.w	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2221      	movs	r2, #33	; 0x21
 800524e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4b44      	ldr	r3, [pc, #272]	; (8005364 <DMA_DeInit+0x1d4>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d103      	bne.n	8005260 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005258:	4b53      	ldr	r3, [pc, #332]	; (80053a8 <DMA_DeInit+0x218>)
 800525a:	223d      	movs	r2, #61	; 0x3d
 800525c:	609a      	str	r2, [r3, #8]
 800525e:	e07e      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4b41      	ldr	r3, [pc, #260]	; (8005368 <DMA_DeInit+0x1d8>)
 8005264:	429a      	cmp	r2, r3
 8005266:	d104      	bne.n	8005272 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8005268:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <DMA_DeInit+0x218>)
 800526a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	e075      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4b3d      	ldr	r3, [pc, #244]	; (800536c <DMA_DeInit+0x1dc>)
 8005276:	429a      	cmp	r2, r3
 8005278:	d104      	bne.n	8005284 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800527a:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <DMA_DeInit+0x218>)
 800527c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005280:	609a      	str	r2, [r3, #8]
 8005282:	e06c      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4b3a      	ldr	r3, [pc, #232]	; (8005370 <DMA_DeInit+0x1e0>)
 8005288:	429a      	cmp	r2, r3
 800528a:	d104      	bne.n	8005296 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800528c:	4b46      	ldr	r3, [pc, #280]	; (80053a8 <DMA_DeInit+0x218>)
 800528e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	e063      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <DMA_DeInit+0x1e4>)
 800529a:	429a      	cmp	r2, r3
 800529c:	d103      	bne.n	80052a6 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800529e:	4b42      	ldr	r3, [pc, #264]	; (80053a8 <DMA_DeInit+0x218>)
 80052a0:	4a42      	ldr	r2, [pc, #264]	; (80053ac <DMA_DeInit+0x21c>)
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	e05b      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4b33      	ldr	r3, [pc, #204]	; (8005378 <DMA_DeInit+0x1e8>)
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d103      	bne.n	80052b6 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80052ae:	4b3e      	ldr	r3, [pc, #248]	; (80053a8 <DMA_DeInit+0x218>)
 80052b0:	4a3f      	ldr	r2, [pc, #252]	; (80053b0 <DMA_DeInit+0x220>)
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e053      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4b30      	ldr	r3, [pc, #192]	; (800537c <DMA_DeInit+0x1ec>)
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d103      	bne.n	80052c6 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80052be:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <DMA_DeInit+0x218>)
 80052c0:	4a3c      	ldr	r2, [pc, #240]	; (80053b4 <DMA_DeInit+0x224>)
 80052c2:	60da      	str	r2, [r3, #12]
 80052c4:	e04b      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <DMA_DeInit+0x1f0>)
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d104      	bne.n	80052d8 <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <DMA_DeInit+0x218>)
 80052d0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	e042      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <DMA_DeInit+0x1f4>)
 80052dc:	429a      	cmp	r2, r3
 80052de:	d103      	bne.n	80052e8 <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80052e0:	4b35      	ldr	r3, [pc, #212]	; (80053b8 <DMA_DeInit+0x228>)
 80052e2:	223d      	movs	r2, #61	; 0x3d
 80052e4:	609a      	str	r2, [r3, #8]
 80052e6:	e03a      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4b27      	ldr	r3, [pc, #156]	; (8005388 <DMA_DeInit+0x1f8>)
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d104      	bne.n	80052fa <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80052f0:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <DMA_DeInit+0x228>)
 80052f2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	e031      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <DMA_DeInit+0x1fc>)
 80052fe:	429a      	cmp	r2, r3
 8005300:	d104      	bne.n	800530c <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8005302:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <DMA_DeInit+0x228>)
 8005304:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005308:	609a      	str	r2, [r3, #8]
 800530a:	e028      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4b20      	ldr	r3, [pc, #128]	; (8005390 <DMA_DeInit+0x200>)
 8005310:	429a      	cmp	r2, r3
 8005312:	d104      	bne.n	800531e <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8005314:	4b28      	ldr	r3, [pc, #160]	; (80053b8 <DMA_DeInit+0x228>)
 8005316:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e01f      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <DMA_DeInit+0x204>)
 8005322:	429a      	cmp	r2, r3
 8005324:	d103      	bne.n	800532e <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005326:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <DMA_DeInit+0x228>)
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <DMA_DeInit+0x21c>)
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e017      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <DMA_DeInit+0x208>)
 8005332:	429a      	cmp	r2, r3
 8005334:	d103      	bne.n	800533e <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <DMA_DeInit+0x228>)
 8005338:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <DMA_DeInit+0x220>)
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	e00f      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4b16      	ldr	r3, [pc, #88]	; (800539c <DMA_DeInit+0x20c>)
 8005342:	429a      	cmp	r2, r3
 8005344:	d103      	bne.n	800534e <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005346:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <DMA_DeInit+0x228>)
 8005348:	4a1a      	ldr	r2, [pc, #104]	; (80053b4 <DMA_DeInit+0x224>)
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e007      	b.n	800535e <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <DMA_DeInit+0x210>)
 8005352:	429a      	cmp	r2, r3
 8005354:	d103      	bne.n	800535e <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005356:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <DMA_DeInit+0x228>)
 8005358:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800535c:	60da      	str	r2, [r3, #12]
    }
  }
}
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40026010 	.word	0x40026010
 8005368:	40026028 	.word	0x40026028
 800536c:	40026040 	.word	0x40026040
 8005370:	40026058 	.word	0x40026058
 8005374:	40026070 	.word	0x40026070
 8005378:	40026088 	.word	0x40026088
 800537c:	400260a0 	.word	0x400260a0
 8005380:	400260b8 	.word	0x400260b8
 8005384:	40026410 	.word	0x40026410
 8005388:	40026428 	.word	0x40026428
 800538c:	40026440 	.word	0x40026440
 8005390:	40026458 	.word	0x40026458
 8005394:	40026470 	.word	0x40026470
 8005398:	40026488 	.word	0x40026488
 800539c:	400264a0 	.word	0x400264a0
 80053a0:	400264b8 	.word	0x400264b8
 80053a4:	08007fd8 	.word	0x08007fd8
 80053a8:	40026000 	.word	0x40026000
 80053ac:	2000003d 	.word	0x2000003d
 80053b0:	20000f40 	.word	0x20000f40
 80053b4:	203d0000 	.word	0x203d0000
 80053b8:	40026400 	.word	0x40026400

080053bc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4b98      	ldr	r3, [pc, #608]	; (8005630 <DMA_Init+0x274>)
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d040      	beq.n	8005454 <DMA_Init+0x98>
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4b97      	ldr	r3, [pc, #604]	; (8005634 <DMA_Init+0x278>)
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d03c      	beq.n	8005454 <DMA_Init+0x98>
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4b96      	ldr	r3, [pc, #600]	; (8005638 <DMA_Init+0x27c>)
 80053de:	429a      	cmp	r2, r3
 80053e0:	d038      	beq.n	8005454 <DMA_Init+0x98>
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4b95      	ldr	r3, [pc, #596]	; (800563c <DMA_Init+0x280>)
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d034      	beq.n	8005454 <DMA_Init+0x98>
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4b94      	ldr	r3, [pc, #592]	; (8005640 <DMA_Init+0x284>)
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d030      	beq.n	8005454 <DMA_Init+0x98>
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	4b93      	ldr	r3, [pc, #588]	; (8005644 <DMA_Init+0x288>)
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d02c      	beq.n	8005454 <DMA_Init+0x98>
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4b92      	ldr	r3, [pc, #584]	; (8005648 <DMA_Init+0x28c>)
 80053fe:	429a      	cmp	r2, r3
 8005400:	d028      	beq.n	8005454 <DMA_Init+0x98>
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	4b91      	ldr	r3, [pc, #580]	; (800564c <DMA_Init+0x290>)
 8005406:	429a      	cmp	r2, r3
 8005408:	d024      	beq.n	8005454 <DMA_Init+0x98>
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4b90      	ldr	r3, [pc, #576]	; (8005650 <DMA_Init+0x294>)
 800540e:	429a      	cmp	r2, r3
 8005410:	d020      	beq.n	8005454 <DMA_Init+0x98>
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4b8f      	ldr	r3, [pc, #572]	; (8005654 <DMA_Init+0x298>)
 8005416:	429a      	cmp	r2, r3
 8005418:	d01c      	beq.n	8005454 <DMA_Init+0x98>
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4b8e      	ldr	r3, [pc, #568]	; (8005658 <DMA_Init+0x29c>)
 800541e:	429a      	cmp	r2, r3
 8005420:	d018      	beq.n	8005454 <DMA_Init+0x98>
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4b8d      	ldr	r3, [pc, #564]	; (800565c <DMA_Init+0x2a0>)
 8005426:	429a      	cmp	r2, r3
 8005428:	d014      	beq.n	8005454 <DMA_Init+0x98>
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4b8c      	ldr	r3, [pc, #560]	; (8005660 <DMA_Init+0x2a4>)
 800542e:	429a      	cmp	r2, r3
 8005430:	d010      	beq.n	8005454 <DMA_Init+0x98>
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4b8b      	ldr	r3, [pc, #556]	; (8005664 <DMA_Init+0x2a8>)
 8005436:	429a      	cmp	r2, r3
 8005438:	d00c      	beq.n	8005454 <DMA_Init+0x98>
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4b8a      	ldr	r3, [pc, #552]	; (8005668 <DMA_Init+0x2ac>)
 800543e:	429a      	cmp	r2, r3
 8005440:	d008      	beq.n	8005454 <DMA_Init+0x98>
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4b89      	ldr	r3, [pc, #548]	; (800566c <DMA_Init+0x2b0>)
 8005446:	429a      	cmp	r2, r3
 8005448:	d004      	beq.n	8005454 <DMA_Init+0x98>
 800544a:	4889      	ldr	r0, [pc, #548]	; (8005670 <DMA_Init+0x2b4>)
 800544c:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8005450:	f7fd fa08 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d027      	beq.n	80054ac <DMA_Init+0xf0>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005464:	d022      	beq.n	80054ac <DMA_Init+0xf0>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546e:	d01d      	beq.n	80054ac <DMA_Init+0xf0>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005478:	d018      	beq.n	80054ac <DMA_Init+0xf0>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005482:	d013      	beq.n	80054ac <DMA_Init+0xf0>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800548c:	d00e      	beq.n	80054ac <DMA_Init+0xf0>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005496:	d009      	beq.n	80054ac <DMA_Init+0xf0>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80054a0:	d004      	beq.n	80054ac <DMA_Init+0xf0>
 80054a2:	4873      	ldr	r0, [pc, #460]	; (8005670 <DMA_Init+0x2b4>)
 80054a4:	f240 113d 	movw	r1, #317	; 0x13d
 80054a8:	f7fd f9dc 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00c      	beq.n	80054ce <DMA_Init+0x112>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d008      	beq.n	80054ce <DMA_Init+0x112>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b80      	cmp	r3, #128	; 0x80
 80054c2:	d004      	beq.n	80054ce <DMA_Init+0x112>
 80054c4:	486a      	ldr	r0, [pc, #424]	; (8005670 <DMA_Init+0x2b4>)
 80054c6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80054ca:	f7fd f9cb 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <DMA_Init+0x124>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d304      	bcc.n	80054ea <DMA_Init+0x12e>
 80054e0:	4863      	ldr	r0, [pc, #396]	; (8005670 <DMA_Init+0x2b4>)
 80054e2:	f240 113f 	movw	r1, #319	; 0x13f
 80054e6:	f7fd f9bd 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f2:	d008      	beq.n	8005506 <DMA_Init+0x14a>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <DMA_Init+0x14a>
 80054fc:	485c      	ldr	r0, [pc, #368]	; (8005670 <DMA_Init+0x2b4>)
 80054fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005502:	f7fd f9af 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550e:	d008      	beq.n	8005522 <DMA_Init+0x166>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <DMA_Init+0x166>
 8005518:	4855      	ldr	r0, [pc, #340]	; (8005670 <DMA_Init+0x2b4>)
 800551a:	f240 1141 	movw	r1, #321	; 0x141
 800551e:	f7fd f9a1 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00e      	beq.n	8005548 <DMA_Init+0x18c>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005532:	d009      	beq.n	8005548 <DMA_Init+0x18c>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553c:	d004      	beq.n	8005548 <DMA_Init+0x18c>
 800553e:	484c      	ldr	r0, [pc, #304]	; (8005670 <DMA_Init+0x2b4>)
 8005540:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005544:	f7fd f98e 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <DMA_Init+0x1b2>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005558:	d009      	beq.n	800556e <DMA_Init+0x1b2>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005562:	d004      	beq.n	800556e <DMA_Init+0x1b2>
 8005564:	4842      	ldr	r0, [pc, #264]	; (8005670 <DMA_Init+0x2b4>)
 8005566:	f240 1143 	movw	r1, #323	; 0x143
 800556a:	f7fd f97b 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <DMA_Init+0x1ce>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557e:	d004      	beq.n	800558a <DMA_Init+0x1ce>
 8005580:	483b      	ldr	r0, [pc, #236]	; (8005670 <DMA_Init+0x2b4>)
 8005582:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005586:	f7fd f96d 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	d013      	beq.n	80055ba <DMA_Init+0x1fe>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559a:	d00e      	beq.n	80055ba <DMA_Init+0x1fe>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a4:	d009      	beq.n	80055ba <DMA_Init+0x1fe>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ae:	d004      	beq.n	80055ba <DMA_Init+0x1fe>
 80055b0:	482f      	ldr	r0, [pc, #188]	; (8005670 <DMA_Init+0x2b4>)
 80055b2:	f240 1145 	movw	r1, #325	; 0x145
 80055b6:	f7fd f955 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <DMA_Init+0x218>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d004      	beq.n	80055d4 <DMA_Init+0x218>
 80055ca:	4829      	ldr	r0, [pc, #164]	; (8005670 <DMA_Init+0x2b4>)
 80055cc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80055d0:	f7fd f948 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <DMA_Init+0x242>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d00c      	beq.n	80055fe <DMA_Init+0x242>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d008      	beq.n	80055fe <DMA_Init+0x242>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d004      	beq.n	80055fe <DMA_Init+0x242>
 80055f4:	481e      	ldr	r0, [pc, #120]	; (8005670 <DMA_Init+0x2b4>)
 80055f6:	f240 1147 	movw	r1, #327	; 0x147
 80055fa:	f7fd f933 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	d036      	beq.n	8005674 <DMA_Init+0x2b8>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800560e:	d031      	beq.n	8005674 <DMA_Init+0x2b8>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005618:	d02c      	beq.n	8005674 <DMA_Init+0x2b8>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005622:	d027      	beq.n	8005674 <DMA_Init+0x2b8>
 8005624:	4812      	ldr	r0, [pc, #72]	; (8005670 <DMA_Init+0x2b4>)
 8005626:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800562a:	f7fd f91b 	bl	8002864 <assert_failed>
 800562e:	e021      	b.n	8005674 <DMA_Init+0x2b8>
 8005630:	40026010 	.word	0x40026010
 8005634:	40026028 	.word	0x40026028
 8005638:	40026040 	.word	0x40026040
 800563c:	40026058 	.word	0x40026058
 8005640:	40026070 	.word	0x40026070
 8005644:	40026088 	.word	0x40026088
 8005648:	400260a0 	.word	0x400260a0
 800564c:	400260b8 	.word	0x400260b8
 8005650:	40026410 	.word	0x40026410
 8005654:	40026428 	.word	0x40026428
 8005658:	40026440 	.word	0x40026440
 800565c:	40026458 	.word	0x40026458
 8005660:	40026470 	.word	0x40026470
 8005664:	40026488 	.word	0x40026488
 8005668:	400264a0 	.word	0x400264a0
 800566c:	400264b8 	.word	0x400264b8
 8005670:	08007fd8 	.word	0x08007fd8
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d013      	beq.n	80056a4 <DMA_Init+0x2e8>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005684:	d00e      	beq.n	80056a4 <DMA_Init+0x2e8>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568e:	d009      	beq.n	80056a4 <DMA_Init+0x2e8>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005698:	d004      	beq.n	80056a4 <DMA_Init+0x2e8>
 800569a:	4828      	ldr	r0, [pc, #160]	; (800573c <DMA_Init+0x380>)
 800569c:	f240 1149 	movw	r1, #329	; 0x149
 80056a0:	f7fd f8e0 	bl	8002864 <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <DMA_Init+0x384>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80056c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80056cc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80056d8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80056e4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 0307 	bic.w	r3, r3, #7
 8005704:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	4313      	orrs	r3, r2
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]
}
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	08007fd8 	.word	0x08007fd8
 8005740:	f01c803f 	.word	0xf01c803f

08005744 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <DMA_Cmd+0xd4>)
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d040      	beq.n	8005846 <DMA_Cmd+0x96>
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4b30      	ldr	r3, [pc, #192]	; (8005888 <DMA_Cmd+0xd8>)
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d03c      	beq.n	8005846 <DMA_Cmd+0x96>
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <DMA_Cmd+0xdc>)
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d038      	beq.n	8005846 <DMA_Cmd+0x96>
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4b2e      	ldr	r3, [pc, #184]	; (8005890 <DMA_Cmd+0xe0>)
 80057d8:	429a      	cmp	r2, r3
 80057da:	d034      	beq.n	8005846 <DMA_Cmd+0x96>
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <DMA_Cmd+0xe4>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d030      	beq.n	8005846 <DMA_Cmd+0x96>
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <DMA_Cmd+0xe8>)
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d02c      	beq.n	8005846 <DMA_Cmd+0x96>
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	4b2b      	ldr	r3, [pc, #172]	; (800589c <DMA_Cmd+0xec>)
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d028      	beq.n	8005846 <DMA_Cmd+0x96>
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <DMA_Cmd+0xf0>)
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d024      	beq.n	8005846 <DMA_Cmd+0x96>
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <DMA_Cmd+0xf4>)
 8005800:	429a      	cmp	r2, r3
 8005802:	d020      	beq.n	8005846 <DMA_Cmd+0x96>
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4b28      	ldr	r3, [pc, #160]	; (80058a8 <DMA_Cmd+0xf8>)
 8005808:	429a      	cmp	r2, r3
 800580a:	d01c      	beq.n	8005846 <DMA_Cmd+0x96>
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	4b27      	ldr	r3, [pc, #156]	; (80058ac <DMA_Cmd+0xfc>)
 8005810:	429a      	cmp	r2, r3
 8005812:	d018      	beq.n	8005846 <DMA_Cmd+0x96>
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <DMA_Cmd+0x100>)
 8005818:	429a      	cmp	r2, r3
 800581a:	d014      	beq.n	8005846 <DMA_Cmd+0x96>
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <DMA_Cmd+0x104>)
 8005820:	429a      	cmp	r2, r3
 8005822:	d010      	beq.n	8005846 <DMA_Cmd+0x96>
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <DMA_Cmd+0x108>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d00c      	beq.n	8005846 <DMA_Cmd+0x96>
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4b23      	ldr	r3, [pc, #140]	; (80058bc <DMA_Cmd+0x10c>)
 8005830:	429a      	cmp	r2, r3
 8005832:	d008      	beq.n	8005846 <DMA_Cmd+0x96>
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <DMA_Cmd+0x110>)
 8005838:	429a      	cmp	r2, r3
 800583a:	d004      	beq.n	8005846 <DMA_Cmd+0x96>
 800583c:	4821      	ldr	r0, [pc, #132]	; (80058c4 <DMA_Cmd+0x114>)
 800583e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005842:	f7fd f80f 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <DMA_Cmd+0xac>
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d004      	beq.n	800585c <DMA_Cmd+0xac>
 8005852:	481c      	ldr	r0, [pc, #112]	; (80058c4 <DMA_Cmd+0x114>)
 8005854:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005858:	f7fd f804 	bl	8002864 <assert_failed>

  if (NewState != DISABLE)
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d006      	beq.n	8005870 <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f043 0201 	orr.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e005      	b.n	800587c <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f023 0201 	bic.w	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	601a      	str	r2, [r3, #0]
  }
}
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40026010 	.word	0x40026010
 8005888:	40026028 	.word	0x40026028
 800588c:	40026040 	.word	0x40026040
 8005890:	40026058 	.word	0x40026058
 8005894:	40026070 	.word	0x40026070
 8005898:	40026088 	.word	0x40026088
 800589c:	400260a0 	.word	0x400260a0
 80058a0:	400260b8 	.word	0x400260b8
 80058a4:	40026410 	.word	0x40026410
 80058a8:	40026428 	.word	0x40026428
 80058ac:	40026440 	.word	0x40026440
 80058b0:	40026458 	.word	0x40026458
 80058b4:	40026470 	.word	0x40026470
 80058b8:	40026488 	.word	0x40026488
 80058bc:	400264a0 	.word	0x400264a0
 80058c0:	400264b8 	.word	0x400264b8
 80058c4:	08007fd8 	.word	0x08007fd8

080058c8 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4b25      	ldr	r3, [pc, #148]	; (800596c <DMA_SetCurrDataCounter+0xa4>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	d040      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <DMA_SetCurrDataCounter+0xa8>)
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d03c      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4b23      	ldr	r3, [pc, #140]	; (8005974 <DMA_SetCurrDataCounter+0xac>)
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d038      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4b22      	ldr	r3, [pc, #136]	; (8005978 <DMA_SetCurrDataCounter+0xb0>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d034      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4b21      	ldr	r3, [pc, #132]	; (800597c <DMA_SetCurrDataCounter+0xb4>)
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d030      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4b20      	ldr	r3, [pc, #128]	; (8005980 <DMA_SetCurrDataCounter+0xb8>)
 8005900:	429a      	cmp	r2, r3
 8005902:	d02c      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <DMA_SetCurrDataCounter+0xbc>)
 8005908:	429a      	cmp	r2, r3
 800590a:	d028      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4b1e      	ldr	r3, [pc, #120]	; (8005988 <DMA_SetCurrDataCounter+0xc0>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d024      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4b1d      	ldr	r3, [pc, #116]	; (800598c <DMA_SetCurrDataCounter+0xc4>)
 8005918:	429a      	cmp	r2, r3
 800591a:	d020      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <DMA_SetCurrDataCounter+0xc8>)
 8005920:	429a      	cmp	r2, r3
 8005922:	d01c      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <DMA_SetCurrDataCounter+0xcc>)
 8005928:	429a      	cmp	r2, r3
 800592a:	d018      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <DMA_SetCurrDataCounter+0xd0>)
 8005930:	429a      	cmp	r2, r3
 8005932:	d014      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4b19      	ldr	r3, [pc, #100]	; (800599c <DMA_SetCurrDataCounter+0xd4>)
 8005938:	429a      	cmp	r2, r3
 800593a:	d010      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	4b18      	ldr	r3, [pc, #96]	; (80059a0 <DMA_SetCurrDataCounter+0xd8>)
 8005940:	429a      	cmp	r2, r3
 8005942:	d00c      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <DMA_SetCurrDataCounter+0xdc>)
 8005948:	429a      	cmp	r2, r3
 800594a:	d008      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <DMA_SetCurrDataCounter+0xe0>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d004      	beq.n	800595e <DMA_SetCurrDataCounter+0x96>
 8005954:	4815      	ldr	r0, [pc, #84]	; (80059ac <DMA_SetCurrDataCounter+0xe4>)
 8005956:	f240 2175 	movw	r1, #629	; 0x275
 800595a:	f7fc ff83 	bl	8002864 <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800595e:	887a      	ldrh	r2, [r7, #2]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	605a      	str	r2, [r3, #4]
}
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40026010 	.word	0x40026010
 8005970:	40026028 	.word	0x40026028
 8005974:	40026040 	.word	0x40026040
 8005978:	40026058 	.word	0x40026058
 800597c:	40026070 	.word	0x40026070
 8005980:	40026088 	.word	0x40026088
 8005984:	400260a0 	.word	0x400260a0
 8005988:	400260b8 	.word	0x400260b8
 800598c:	40026410 	.word	0x40026410
 8005990:	40026428 	.word	0x40026428
 8005994:	40026440 	.word	0x40026440
 8005998:	40026458 	.word	0x40026458
 800599c:	40026470 	.word	0x40026470
 80059a0:	40026488 	.word	0x40026488
 80059a4:	400264a0 	.word	0x400264a0
 80059a8:	400264b8 	.word	0x400264b8
 80059ac:	08007fd8 	.word	0x08007fd8

080059b0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <DMA_GetCmdStatus+0xb8>)
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d040      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <DMA_GetCmdStatus+0xbc>)
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d03c      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4b28      	ldr	r3, [pc, #160]	; (8005a70 <DMA_GetCmdStatus+0xc0>)
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d038      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	4b27      	ldr	r3, [pc, #156]	; (8005a74 <DMA_GetCmdStatus+0xc4>)
 80059d8:	429a      	cmp	r2, r3
 80059da:	d034      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4b26      	ldr	r3, [pc, #152]	; (8005a78 <DMA_GetCmdStatus+0xc8>)
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d030      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <DMA_GetCmdStatus+0xcc>)
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d02c      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <DMA_GetCmdStatus+0xd0>)
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d028      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <DMA_GetCmdStatus+0xd4>)
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d024      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <DMA_GetCmdStatus+0xd8>)
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d020      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <DMA_GetCmdStatus+0xdc>)
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d01c      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <DMA_GetCmdStatus+0xe0>)
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d018      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <DMA_GetCmdStatus+0xe4>)
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d014      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <DMA_GetCmdStatus+0xe8>)
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d010      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <DMA_GetCmdStatus+0xec>)
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d00c      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <DMA_GetCmdStatus+0xf0>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d008      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <DMA_GetCmdStatus+0xf4>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d004      	beq.n	8005a46 <DMA_GetCmdStatus+0x96>
 8005a3c:	481a      	ldr	r0, [pc, #104]	; (8005aa8 <DMA_GetCmdStatus+0xf8>)
 8005a3e:	f240 31a2 	movw	r1, #930	; 0x3a2
 8005a42:	f7fc ff0f 	bl	8002864 <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
 8005a56:	e001      	b.n	8005a5c <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40026010 	.word	0x40026010
 8005a6c:	40026028 	.word	0x40026028
 8005a70:	40026040 	.word	0x40026040
 8005a74:	40026058 	.word	0x40026058
 8005a78:	40026070 	.word	0x40026070
 8005a7c:	40026088 	.word	0x40026088
 8005a80:	400260a0 	.word	0x400260a0
 8005a84:	400260b8 	.word	0x400260b8
 8005a88:	40026410 	.word	0x40026410
 8005a8c:	40026428 	.word	0x40026428
 8005a90:	40026440 	.word	0x40026440
 8005a94:	40026458 	.word	0x40026458
 8005a98:	40026470 	.word	0x40026470
 8005a9c:	40026488 	.word	0x40026488
 8005aa0:	400264a0 	.word	0x400264a0
 8005aa4:	400264b8 	.word	0x400264b8
 8005aa8:	08007fd8 	.word	0x08007fd8

08005aac <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4b45      	ldr	r3, [pc, #276]	; (8005bd4 <DMA_ITConfig+0x128>)
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d040      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4b44      	ldr	r3, [pc, #272]	; (8005bd8 <DMA_ITConfig+0x12c>)
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d03c      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4b43      	ldr	r3, [pc, #268]	; (8005bdc <DMA_ITConfig+0x130>)
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d038      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4b42      	ldr	r3, [pc, #264]	; (8005be0 <DMA_ITConfig+0x134>)
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d034      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <DMA_ITConfig+0x138>)
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d030      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <DMA_ITConfig+0x13c>)
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d02c      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4b3f      	ldr	r3, [pc, #252]	; (8005bec <DMA_ITConfig+0x140>)
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d028      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4b3e      	ldr	r3, [pc, #248]	; (8005bf0 <DMA_ITConfig+0x144>)
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d024      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4b3d      	ldr	r3, [pc, #244]	; (8005bf4 <DMA_ITConfig+0x148>)
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d020      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4b3c      	ldr	r3, [pc, #240]	; (8005bf8 <DMA_ITConfig+0x14c>)
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d01c      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4b3b      	ldr	r3, [pc, #236]	; (8005bfc <DMA_ITConfig+0x150>)
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d018      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4b3a      	ldr	r3, [pc, #232]	; (8005c00 <DMA_ITConfig+0x154>)
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d014      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <DMA_ITConfig+0x158>)
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d010      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <DMA_ITConfig+0x15c>)
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d00c      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <DMA_ITConfig+0x160>)
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d008      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <DMA_ITConfig+0x164>)
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d004      	beq.n	8005b44 <DMA_ITConfig+0x98>
 8005b3a:	4836      	ldr	r0, [pc, #216]	; (8005c14 <DMA_ITConfig+0x168>)
 8005b3c:	f240 414f 	movw	r1, #1103	; 0x44f
 8005b40:	f7fc fe90 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <DMA_ITConfig+0xa8>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d104      	bne.n	8005b5e <DMA_ITConfig+0xb2>
 8005b54:	482f      	ldr	r0, [pc, #188]	; (8005c14 <DMA_ITConfig+0x168>)
 8005b56:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005b5a:	f7fc fe83 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <DMA_ITConfig+0xc8>
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d004      	beq.n	8005b74 <DMA_ITConfig+0xc8>
 8005b6a:	482a      	ldr	r0, [pc, #168]	; (8005c14 <DMA_ITConfig+0x168>)
 8005b6c:	f240 4151 	movw	r1, #1105	; 0x451
 8005b70:	f7fc fe78 	bl	8002864 <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00f      	beq.n	8005b9e <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d006      	beq.n	8005b92 <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	615a      	str	r2, [r3, #20]
 8005b90:	e005      	b.n	8005b9e <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b80      	cmp	r3, #128	; 0x80
 8005ba2:	d014      	beq.n	8005bce <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f003 031e 	and.w	r3, r3, #30
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e008      	b.n	8005bce <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 031e 	and.w	r3, r3, #30
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	401a      	ands	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40026010 	.word	0x40026010
 8005bd8:	40026028 	.word	0x40026028
 8005bdc:	40026040 	.word	0x40026040
 8005be0:	40026058 	.word	0x40026058
 8005be4:	40026070 	.word	0x40026070
 8005be8:	40026088 	.word	0x40026088
 8005bec:	400260a0 	.word	0x400260a0
 8005bf0:	400260b8 	.word	0x400260b8
 8005bf4:	40026410 	.word	0x40026410
 8005bf8:	40026428 	.word	0x40026428
 8005bfc:	40026440 	.word	0x40026440
 8005c00:	40026458 	.word	0x40026458
 8005c04:	40026470 	.word	0x40026470
 8005c08:	40026488 	.word	0x40026488
 8005c0c:	400264a0 	.word	0x400264a0
 8005c10:	400264b8 	.word	0x400264b8
 8005c14:	08007fd8 	.word	0x08007fd8

08005c18 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8005c22:	2300      	movs	r3, #0
 8005c24:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4b97      	ldr	r3, [pc, #604]	; (8005e90 <DMA_GetITStatus+0x278>)
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d040      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4b96      	ldr	r3, [pc, #600]	; (8005e94 <DMA_GetITStatus+0x27c>)
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d03c      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4b95      	ldr	r3, [pc, #596]	; (8005e98 <DMA_GetITStatus+0x280>)
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d038      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4b94      	ldr	r3, [pc, #592]	; (8005e9c <DMA_GetITStatus+0x284>)
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d034      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	4b93      	ldr	r3, [pc, #588]	; (8005ea0 <DMA_GetITStatus+0x288>)
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d030      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4b92      	ldr	r3, [pc, #584]	; (8005ea4 <DMA_GetITStatus+0x28c>)
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d02c      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4b91      	ldr	r3, [pc, #580]	; (8005ea8 <DMA_GetITStatus+0x290>)
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d028      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4b90      	ldr	r3, [pc, #576]	; (8005eac <DMA_GetITStatus+0x294>)
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d024      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4b8f      	ldr	r3, [pc, #572]	; (8005eb0 <DMA_GetITStatus+0x298>)
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d020      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4b8e      	ldr	r3, [pc, #568]	; (8005eb4 <DMA_GetITStatus+0x29c>)
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d01c      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	4b8d      	ldr	r3, [pc, #564]	; (8005eb8 <DMA_GetITStatus+0x2a0>)
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d018      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4b8c      	ldr	r3, [pc, #560]	; (8005ebc <DMA_GetITStatus+0x2a4>)
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d014      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4b8b      	ldr	r3, [pc, #556]	; (8005ec0 <DMA_GetITStatus+0x2a8>)
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d010      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4b8a      	ldr	r3, [pc, #552]	; (8005ec4 <DMA_GetITStatus+0x2ac>)
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d00c      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4b89      	ldr	r3, [pc, #548]	; (8005ec8 <DMA_GetITStatus+0x2b0>)
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d008      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <DMA_GetITStatus+0x2b4>)
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d004      	beq.n	8005cb8 <DMA_GetITStatus+0xa0>
 8005cae:	4888      	ldr	r0, [pc, #544]	; (8005ed0 <DMA_GetITStatus+0x2b8>)
 8005cb0:	f240 4187 	movw	r1, #1159	; 0x487
 8005cb4:	f7fc fdd6 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	4b86      	ldr	r3, [pc, #536]	; (8005ed4 <DMA_GetITStatus+0x2bc>)
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	f000 80a9 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	4b84      	ldr	r3, [pc, #528]	; (8005ed8 <DMA_GetITStatus+0x2c0>)
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	f000 80a4 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	4b83      	ldr	r3, [pc, #524]	; (8005edc <DMA_GetITStatus+0x2c4>)
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	f000 809f 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	4b81      	ldr	r3, [pc, #516]	; (8005ee0 <DMA_GetITStatus+0x2c8>)
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	f000 809a 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	4b80      	ldr	r3, [pc, #512]	; (8005ee4 <DMA_GetITStatus+0x2cc>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	f000 8095 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	4b7e      	ldr	r3, [pc, #504]	; (8005ee8 <DMA_GetITStatus+0x2d0>)
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	f000 8090 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	4b7d      	ldr	r3, [pc, #500]	; (8005eec <DMA_GetITStatus+0x2d4>)
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	f000 808b 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	4b7b      	ldr	r3, [pc, #492]	; (8005ef0 <DMA_GetITStatus+0x2d8>)
 8005d02:	429a      	cmp	r2, r3
 8005d04:	f000 8086 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	4b7a      	ldr	r3, [pc, #488]	; (8005ef4 <DMA_GetITStatus+0x2dc>)
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	f000 8081 	beq.w	8005e14 <DMA_GetITStatus+0x1fc>
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	4b78      	ldr	r3, [pc, #480]	; (8005ef8 <DMA_GetITStatus+0x2e0>)
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d07c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	4b77      	ldr	r3, [pc, #476]	; (8005efc <DMA_GetITStatus+0x2e4>)
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d078      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4b76      	ldr	r3, [pc, #472]	; (8005f00 <DMA_GetITStatus+0x2e8>)
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d074      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	4b75      	ldr	r3, [pc, #468]	; (8005f04 <DMA_GetITStatus+0x2ec>)
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d070      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	4b74      	ldr	r3, [pc, #464]	; (8005f08 <DMA_GetITStatus+0x2f0>)
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d06c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	4b73      	ldr	r3, [pc, #460]	; (8005f0c <DMA_GetITStatus+0x2f4>)
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d068      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	4b72      	ldr	r3, [pc, #456]	; (8005f10 <DMA_GetITStatus+0x2f8>)
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d064      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	4b71      	ldr	r3, [pc, #452]	; (8005f14 <DMA_GetITStatus+0x2fc>)
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d060      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4b70      	ldr	r3, [pc, #448]	; (8005f18 <DMA_GetITStatus+0x300>)
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d05c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	4b6f      	ldr	r3, [pc, #444]	; (8005f1c <DMA_GetITStatus+0x304>)
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d058      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	4b6e      	ldr	r3, [pc, #440]	; (8005f20 <DMA_GetITStatus+0x308>)
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d054      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4b6d      	ldr	r3, [pc, #436]	; (8005f24 <DMA_GetITStatus+0x30c>)
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d050      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	4b6c      	ldr	r3, [pc, #432]	; (8005f28 <DMA_GetITStatus+0x310>)
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d04c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	4b6b      	ldr	r3, [pc, #428]	; (8005f2c <DMA_GetITStatus+0x314>)
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d048      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	4b6a      	ldr	r3, [pc, #424]	; (8005f30 <DMA_GetITStatus+0x318>)
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d044      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	4b69      	ldr	r3, [pc, #420]	; (8005f34 <DMA_GetITStatus+0x31c>)
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d040      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	4b68      	ldr	r3, [pc, #416]	; (8005f38 <DMA_GetITStatus+0x320>)
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d03c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4b67      	ldr	r3, [pc, #412]	; (8005f3c <DMA_GetITStatus+0x324>)
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d038      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4b66      	ldr	r3, [pc, #408]	; (8005f40 <DMA_GetITStatus+0x328>)
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d034      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	4b65      	ldr	r3, [pc, #404]	; (8005f44 <DMA_GetITStatus+0x32c>)
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d030      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4b64      	ldr	r3, [pc, #400]	; (8005f48 <DMA_GetITStatus+0x330>)
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d02c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	4b63      	ldr	r3, [pc, #396]	; (8005f4c <DMA_GetITStatus+0x334>)
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d028      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <DMA_GetITStatus+0x338>)
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d024      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	4b61      	ldr	r3, [pc, #388]	; (8005f54 <DMA_GetITStatus+0x33c>)
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d020      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4b60      	ldr	r3, [pc, #384]	; (8005f58 <DMA_GetITStatus+0x340>)
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d01c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4b5f      	ldr	r3, [pc, #380]	; (8005f5c <DMA_GetITStatus+0x344>)
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d018      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	4b5e      	ldr	r3, [pc, #376]	; (8005f60 <DMA_GetITStatus+0x348>)
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d014      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	4b5d      	ldr	r3, [pc, #372]	; (8005f64 <DMA_GetITStatus+0x34c>)
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d010      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4b5c      	ldr	r3, [pc, #368]	; (8005f68 <DMA_GetITStatus+0x350>)
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d00c      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	4b5b      	ldr	r3, [pc, #364]	; (8005f6c <DMA_GetITStatus+0x354>)
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d008      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	4b5a      	ldr	r3, [pc, #360]	; (8005f70 <DMA_GetITStatus+0x358>)
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d004      	beq.n	8005e14 <DMA_GetITStatus+0x1fc>
 8005e0a:	4831      	ldr	r0, [pc, #196]	; (8005ed0 <DMA_GetITStatus+0x2b8>)
 8005e0c:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8005e10:	f7fc fd28 	bl	8002864 <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4b57      	ldr	r3, [pc, #348]	; (8005f74 <DMA_GetITStatus+0x35c>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d802      	bhi.n	8005e22 <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005e1c:	4b56      	ldr	r3, [pc, #344]	; (8005f78 <DMA_GetITStatus+0x360>)
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	e001      	b.n	8005e26 <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005e22:	4b56      	ldr	r3, [pc, #344]	; (8005f7c <DMA_GetITStatus+0x364>)
 8005e24:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005e2c:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	0adb      	lsrs	r3, r3, #11
 8005e38:	f003 031e 	and.w	r3, r3, #30
 8005e3c:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	e004      	b.n	8005e54 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e002      	b.n	8005e6c <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005e72:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d07e      	beq.n	8005f80 <DMA_GetITStatus+0x368>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d07b      	beq.n	8005f80 <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
 8005e8c:	e07a      	b.n	8005f84 <DMA_GetITStatus+0x36c>
 8005e8e:	bf00      	nop
 8005e90:	40026010 	.word	0x40026010
 8005e94:	40026028 	.word	0x40026028
 8005e98:	40026040 	.word	0x40026040
 8005e9c:	40026058 	.word	0x40026058
 8005ea0:	40026070 	.word	0x40026070
 8005ea4:	40026088 	.word	0x40026088
 8005ea8:	400260a0 	.word	0x400260a0
 8005eac:	400260b8 	.word	0x400260b8
 8005eb0:	40026410 	.word	0x40026410
 8005eb4:	40026428 	.word	0x40026428
 8005eb8:	40026440 	.word	0x40026440
 8005ebc:	40026458 	.word	0x40026458
 8005ec0:	40026470 	.word	0x40026470
 8005ec4:	40026488 	.word	0x40026488
 8005ec8:	400264a0 	.word	0x400264a0
 8005ecc:	400264b8 	.word	0x400264b8
 8005ed0:	08007fd8 	.word	0x08007fd8
 8005ed4:	10008020 	.word	0x10008020
 8005ed8:	10004010 	.word	0x10004010
 8005edc:	10002008 	.word	0x10002008
 8005ee0:	10001004 	.word	0x10001004
 8005ee4:	90000001 	.word	0x90000001
 8005ee8:	10008800 	.word	0x10008800
 8005eec:	10004400 	.word	0x10004400
 8005ef0:	10002200 	.word	0x10002200
 8005ef4:	10001100 	.word	0x10001100
 8005ef8:	90000040 	.word	0x90000040
 8005efc:	10208000 	.word	0x10208000
 8005f00:	10104000 	.word	0x10104000
 8005f04:	10082000 	.word	0x10082000
 8005f08:	10041000 	.word	0x10041000
 8005f0c:	90010000 	.word	0x90010000
 8005f10:	18008000 	.word	0x18008000
 8005f14:	14004000 	.word	0x14004000
 8005f18:	12002000 	.word	0x12002000
 8005f1c:	11001000 	.word	0x11001000
 8005f20:	90400000 	.word	0x90400000
 8005f24:	20008020 	.word	0x20008020
 8005f28:	20004010 	.word	0x20004010
 8005f2c:	20002008 	.word	0x20002008
 8005f30:	20001004 	.word	0x20001004
 8005f34:	a0000001 	.word	0xa0000001
 8005f38:	20008800 	.word	0x20008800
 8005f3c:	20004400 	.word	0x20004400
 8005f40:	20002200 	.word	0x20002200
 8005f44:	20001100 	.word	0x20001100
 8005f48:	a0000040 	.word	0xa0000040
 8005f4c:	20208000 	.word	0x20208000
 8005f50:	20104000 	.word	0x20104000
 8005f54:	20082000 	.word	0x20082000
 8005f58:	20041000 	.word	0x20041000
 8005f5c:	a0010000 	.word	0xa0010000
 8005f60:	28008000 	.word	0x28008000
 8005f64:	24004000 	.word	0x24004000
 8005f68:	22002000 	.word	0x22002000
 8005f6c:	21001000 	.word	0x21001000
 8005f70:	a0400000 	.word	0xa0400000
 8005f74:	4002640f 	.word	0x4002640f
 8005f78:	40026000 	.word	0x40026000
 8005f7c:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8005f80:	2300      	movs	r3, #0
 8005f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop

08005f90 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <DMA_ClearITPendingBit+0x104>)
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d040      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4b3c      	ldr	r3, [pc, #240]	; (8006098 <DMA_ClearITPendingBit+0x108>)
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d03c      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	4b3b      	ldr	r3, [pc, #236]	; (800609c <DMA_ClearITPendingBit+0x10c>)
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d038      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4b3a      	ldr	r3, [pc, #232]	; (80060a0 <DMA_ClearITPendingBit+0x110>)
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d034      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4b39      	ldr	r3, [pc, #228]	; (80060a4 <DMA_ClearITPendingBit+0x114>)
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d030      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <DMA_ClearITPendingBit+0x118>)
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d02c      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	4b37      	ldr	r3, [pc, #220]	; (80060ac <DMA_ClearITPendingBit+0x11c>)
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d028      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <DMA_ClearITPendingBit+0x120>)
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d024      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <DMA_ClearITPendingBit+0x124>)
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d020      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <DMA_ClearITPendingBit+0x128>)
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d01c      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4b33      	ldr	r3, [pc, #204]	; (80060bc <DMA_ClearITPendingBit+0x12c>)
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d018      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	4b32      	ldr	r3, [pc, #200]	; (80060c0 <DMA_ClearITPendingBit+0x130>)
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d014      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4b31      	ldr	r3, [pc, #196]	; (80060c4 <DMA_ClearITPendingBit+0x134>)
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d010      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4b30      	ldr	r3, [pc, #192]	; (80060c8 <DMA_ClearITPendingBit+0x138>)
 8006006:	429a      	cmp	r2, r3
 8006008:	d00c      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <DMA_ClearITPendingBit+0x13c>)
 800600e:	429a      	cmp	r2, r3
 8006010:	d008      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <DMA_ClearITPendingBit+0x140>)
 8006016:	429a      	cmp	r2, r3
 8006018:	d004      	beq.n	8006024 <DMA_ClearITPendingBit+0x94>
 800601a:	482e      	ldr	r0, [pc, #184]	; (80060d4 <DMA_ClearITPendingBit+0x144>)
 800601c:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8006020:	f7fc fc20 	bl	8002864 <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800602a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800602e:	d00c      	beq.n	800604a <DMA_ClearITPendingBit+0xba>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <DMA_ClearITPendingBit+0xba>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <DMA_ClearITPendingBit+0xba>
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <DMA_ClearITPendingBit+0x148>)
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <DMA_ClearITPendingBit+0xc4>
 800604a:	4822      	ldr	r0, [pc, #136]	; (80060d4 <DMA_ClearITPendingBit+0x144>)
 800604c:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8006050:	f7fc fc08 	bl	8002864 <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <DMA_ClearITPendingBit+0x14c>)
 8006058:	429a      	cmp	r2, r3
 800605a:	d802      	bhi.n	8006062 <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800605c:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <DMA_ClearITPendingBit+0x150>)
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e001      	b.n	8006066 <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006062:	4b20      	ldr	r3, [pc, #128]	; (80060e4 <DMA_ClearITPendingBit+0x154>)
 8006064:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006076:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	60d3      	str	r3, [r2, #12]
 800607e:	e006      	b.n	800608e <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006086:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	6093      	str	r3, [r2, #8]
  }   
}
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40026010 	.word	0x40026010
 8006098:	40026028 	.word	0x40026028
 800609c:	40026040 	.word	0x40026040
 80060a0:	40026058 	.word	0x40026058
 80060a4:	40026070 	.word	0x40026070
 80060a8:	40026088 	.word	0x40026088
 80060ac:	400260a0 	.word	0x400260a0
 80060b0:	400260b8 	.word	0x400260b8
 80060b4:	40026410 	.word	0x40026410
 80060b8:	40026428 	.word	0x40026428
 80060bc:	40026440 	.word	0x40026440
 80060c0:	40026458 	.word	0x40026458
 80060c4:	40026470 	.word	0x40026470
 80060c8:	40026488 	.word	0x40026488
 80060cc:	400264a0 	.word	0x400264a0
 80060d0:	400264b8 	.word	0x400264b8
 80060d4:	08007fd8 	.word	0x08007fd8
 80060d8:	40820082 	.word	0x40820082
 80060dc:	4002640f 	.word	0x4002640f
 80060e0:	40026000 	.word	0x40026000
 80060e4:	40026400 	.word	0x40026400

080060e8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	791b      	ldrb	r3, [r3, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <EXTI_Init+0x24>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	791b      	ldrb	r3, [r3, #4]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d003      	beq.n	800610c <EXTI_Init+0x24>
 8006104:	4848      	ldr	r0, [pc, #288]	; (8006228 <EXTI_Init+0x140>)
 8006106:	217c      	movs	r1, #124	; 0x7c
 8006108:	f7fc fbac 	bl	8002864 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	795b      	ldrb	r3, [r3, #5]
 8006110:	2b08      	cmp	r3, #8
 8006112:	d00b      	beq.n	800612c <EXTI_Init+0x44>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	795b      	ldrb	r3, [r3, #5]
 8006118:	2b0c      	cmp	r3, #12
 800611a:	d007      	beq.n	800612c <EXTI_Init+0x44>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	795b      	ldrb	r3, [r3, #5]
 8006120:	2b10      	cmp	r3, #16
 8006122:	d003      	beq.n	800612c <EXTI_Init+0x44>
 8006124:	4840      	ldr	r0, [pc, #256]	; (8006228 <EXTI_Init+0x140>)
 8006126:	217d      	movs	r1, #125	; 0x7d
 8006128:	f7fc fb9c 	bl	8002864 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	0ddb      	lsrs	r3, r3, #23
 8006132:	05db      	lsls	r3, r3, #23
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <EXTI_Init+0x58>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <EXTI_Init+0x60>
 8006140:	4839      	ldr	r0, [pc, #228]	; (8006228 <EXTI_Init+0x140>)
 8006142:	217e      	movs	r1, #126	; 0x7e
 8006144:	f7fc fb8e 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	799b      	ldrb	r3, [r3, #6]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <EXTI_Init+0x78>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	799b      	ldrb	r3, [r3, #6]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d003      	beq.n	8006160 <EXTI_Init+0x78>
 8006158:	4833      	ldr	r0, [pc, #204]	; (8006228 <EXTI_Init+0x140>)
 800615a:	217f      	movs	r1, #127	; 0x7f
 800615c:	f7fc fb82 	bl	8002864 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 8006160:	4b32      	ldr	r3, [pc, #200]	; (800622c <EXTI_Init+0x144>)
 8006162:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	799b      	ldrb	r3, [r3, #6]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d04d      	beq.n	8006208 <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800616c:	4b2f      	ldr	r3, [pc, #188]	; (800622c <EXTI_Init+0x144>)
 800616e:	4a2f      	ldr	r2, [pc, #188]	; (800622c <EXTI_Init+0x144>)
 8006170:	6811      	ldr	r1, [r2, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	43d2      	mvns	r2, r2
 8006178:	400a      	ands	r2, r1
 800617a:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800617c:	4b2b      	ldr	r3, [pc, #172]	; (800622c <EXTI_Init+0x144>)
 800617e:	4a2b      	ldr	r2, [pc, #172]	; (800622c <EXTI_Init+0x144>)
 8006180:	6851      	ldr	r1, [r2, #4]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6812      	ldr	r2, [r2, #0]
 8006186:	43d2      	mvns	r2, r2
 8006188:	400a      	ands	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	791b      	ldrb	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	6811      	ldr	r1, [r2, #0]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80061a4:	4b21      	ldr	r3, [pc, #132]	; (800622c <EXTI_Init+0x144>)
 80061a6:	4a21      	ldr	r2, [pc, #132]	; (800622c <EXTI_Init+0x144>)
 80061a8:	6891      	ldr	r1, [r2, #8]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	43d2      	mvns	r2, r2
 80061b0:	400a      	ands	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80061b4:	4b1d      	ldr	r3, [pc, #116]	; (800622c <EXTI_Init+0x144>)
 80061b6:	4a1d      	ldr	r2, [pc, #116]	; (800622c <EXTI_Init+0x144>)
 80061b8:	68d1      	ldr	r1, [r2, #12]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	43d2      	mvns	r2, r2
 80061c0:	400a      	ands	r2, r1
 80061c2:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	795b      	ldrb	r3, [r3, #5]
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d10e      	bne.n	80061ea <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80061cc:	4b17      	ldr	r3, [pc, #92]	; (800622c <EXTI_Init+0x144>)
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <EXTI_Init+0x144>)
 80061d0:	6891      	ldr	r1, [r2, #8]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80061da:	4b14      	ldr	r3, [pc, #80]	; (800622c <EXTI_Init+0x144>)
 80061dc:	4a13      	ldr	r2, [pc, #76]	; (800622c <EXTI_Init+0x144>)
 80061de:	68d1      	ldr	r1, [r2, #12]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	60da      	str	r2, [r3, #12]
 80061e8:	e01b      	b.n	8006222 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <EXTI_Init+0x144>)
 80061ec:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	795b      	ldrb	r3, [r3, #5]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	6811      	ldr	r1, [r2, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e00c      	b.n	8006222 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	791b      	ldrb	r3, [r3, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	6811      	ldr	r1, [r2, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	43d2      	mvns	r2, r2
 800621e:	400a      	ands	r2, r1
 8006220:	601a      	str	r2, [r3, #0]
  }
}
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	08008028 	.word	0x08008028
 800622c:	40013c00 	.word	0x40013c00

08006230 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	0ddb      	lsrs	r3, r3, #23
 800623c:	05db      	lsls	r3, r3, #23
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <EXTI_ClearFlag+0x18>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d103      	bne.n	8006250 <EXTI_ClearFlag+0x20>
 8006248:	4804      	ldr	r0, [pc, #16]	; (800625c <EXTI_ClearFlag+0x2c>)
 800624a:	21f6      	movs	r1, #246	; 0xf6
 800624c:	f7fc fb0a 	bl	8002864 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <EXTI_ClearFlag+0x30>)
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	08008028 	.word	0x08008028
 8006260:	40013c00 	.word	0x40013c00

08006264 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d055      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d052      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b04      	cmp	r3, #4
 8006284:	d04f      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d04c      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b10      	cmp	r3, #16
 8006290:	d049      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b20      	cmp	r3, #32
 8006296:	d046      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d043      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d040      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062aa:	d03c      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b2:	d038      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ba:	d034      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c2:	d030      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ca:	d02c      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d2:	d028      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062da:	d024      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e2:	d020      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ea:	d01c      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f2:	d018      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062fa:	d014      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006302:	d010      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630a:	d00c      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006312:	d008      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800631a:	d004      	beq.n	8006326 <EXTI_GetITStatus+0xc2>
 800631c:	480e      	ldr	r0, [pc, #56]	; (8006358 <EXTI_GetITStatus+0xf4>)
 800631e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006322:	f7fc fa9f 	bl	8002864 <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8006326:	4b0d      	ldr	r3, [pc, #52]	; (800635c <EXTI_GetITStatus+0xf8>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4013      	ands	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006330:	4b0a      	ldr	r3, [pc, #40]	; (800635c <EXTI_GetITStatus+0xf8>)
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <EXTI_GetITStatus+0xe4>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 8006342:	2301      	movs	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]
 8006346:	e001      	b.n	800634c <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	08008028 	.word	0x08008028
 800635c:	40013c00 	.word	0x40013c00

08006360 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	4b7a      	ldr	r3, [pc, #488]	; (8006564 <GPIO_Init+0x204>)
 800637a:	429a      	cmp	r2, r3
 800637c:	d023      	beq.n	80063c6 <GPIO_Init+0x66>
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4b79      	ldr	r3, [pc, #484]	; (8006568 <GPIO_Init+0x208>)
 8006382:	429a      	cmp	r2, r3
 8006384:	d01f      	beq.n	80063c6 <GPIO_Init+0x66>
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4b78      	ldr	r3, [pc, #480]	; (800656c <GPIO_Init+0x20c>)
 800638a:	429a      	cmp	r2, r3
 800638c:	d01b      	beq.n	80063c6 <GPIO_Init+0x66>
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4b77      	ldr	r3, [pc, #476]	; (8006570 <GPIO_Init+0x210>)
 8006392:	429a      	cmp	r2, r3
 8006394:	d017      	beq.n	80063c6 <GPIO_Init+0x66>
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4b76      	ldr	r3, [pc, #472]	; (8006574 <GPIO_Init+0x214>)
 800639a:	429a      	cmp	r2, r3
 800639c:	d013      	beq.n	80063c6 <GPIO_Init+0x66>
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4b75      	ldr	r3, [pc, #468]	; (8006578 <GPIO_Init+0x218>)
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d00f      	beq.n	80063c6 <GPIO_Init+0x66>
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4b74      	ldr	r3, [pc, #464]	; (800657c <GPIO_Init+0x21c>)
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d00b      	beq.n	80063c6 <GPIO_Init+0x66>
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4b73      	ldr	r3, [pc, #460]	; (8006580 <GPIO_Init+0x220>)
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d007      	beq.n	80063c6 <GPIO_Init+0x66>
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	4b72      	ldr	r3, [pc, #456]	; (8006584 <GPIO_Init+0x224>)
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d003      	beq.n	80063c6 <GPIO_Init+0x66>
 80063be:	4872      	ldr	r0, [pc, #456]	; (8006588 <GPIO_Init+0x228>)
 80063c0:	21bb      	movs	r1, #187	; 0xbb
 80063c2:	f7fc fa4f 	bl	8002864 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <GPIO_Init+0x76>
 80063ce:	486e      	ldr	r0, [pc, #440]	; (8006588 <GPIO_Init+0x228>)
 80063d0:	21bc      	movs	r1, #188	; 0xbc
 80063d2:	f7fc fa47 	bl	8002864 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	791b      	ldrb	r3, [r3, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00f      	beq.n	80063fe <GPIO_Init+0x9e>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	791b      	ldrb	r3, [r3, #4]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d00b      	beq.n	80063fe <GPIO_Init+0x9e>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	791b      	ldrb	r3, [r3, #4]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d007      	beq.n	80063fe <GPIO_Init+0x9e>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	791b      	ldrb	r3, [r3, #4]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d003      	beq.n	80063fe <GPIO_Init+0x9e>
 80063f6:	4864      	ldr	r0, [pc, #400]	; (8006588 <GPIO_Init+0x228>)
 80063f8:	21bd      	movs	r1, #189	; 0xbd
 80063fa:	f7fc fa33 	bl	8002864 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	79db      	ldrb	r3, [r3, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <GPIO_Init+0xbe>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	79db      	ldrb	r3, [r3, #7]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d007      	beq.n	800641e <GPIO_Init+0xbe>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	79db      	ldrb	r3, [r3, #7]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d003      	beq.n	800641e <GPIO_Init+0xbe>
 8006416:	485c      	ldr	r0, [pc, #368]	; (8006588 <GPIO_Init+0x228>)
 8006418:	21be      	movs	r1, #190	; 0xbe
 800641a:	f7fc fa23 	bl	8002864 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e097      	b.n	8006554 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2201      	movs	r2, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	429a      	cmp	r2, r3
 800643e:	f040 8086 	bne.w	800654e <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	2103      	movs	r1, #3
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	43db      	mvns	r3, r3
 8006452:	401a      	ands	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	791b      	ldrb	r3, [r3, #4]
 8006460:	4619      	mov	r1, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	791b      	ldrb	r3, [r3, #4]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d003      	beq.n	8006480 <GPIO_Init+0x120>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	791b      	ldrb	r3, [r3, #4]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d14e      	bne.n	800651e <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	795b      	ldrb	r3, [r3, #5]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00f      	beq.n	80064a8 <GPIO_Init+0x148>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	795b      	ldrb	r3, [r3, #5]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d00b      	beq.n	80064a8 <GPIO_Init+0x148>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	795b      	ldrb	r3, [r3, #5]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d007      	beq.n	80064a8 <GPIO_Init+0x148>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	795b      	ldrb	r3, [r3, #5]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d003      	beq.n	80064a8 <GPIO_Init+0x148>
 80064a0:	4839      	ldr	r0, [pc, #228]	; (8006588 <GPIO_Init+0x228>)
 80064a2:	21d0      	movs	r1, #208	; 0xd0
 80064a4:	f7fc f9de 	bl	8002864 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	2103      	movs	r1, #3
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	43db      	mvns	r3, r3
 80064b8:	401a      	ands	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	795b      	ldrb	r3, [r3, #5]
 80064c6:	4619      	mov	r1, r3
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	799b      	ldrb	r3, [r3, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <GPIO_Init+0x18e>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	799b      	ldrb	r3, [r3, #6]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d003      	beq.n	80064ee <GPIO_Init+0x18e>
 80064e6:	4828      	ldr	r0, [pc, #160]	; (8006588 <GPIO_Init+0x228>)
 80064e8:	21d7      	movs	r1, #215	; 0xd7
 80064ea:	f7fc f9bb 	bl	8002864 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2101      	movs	r1, #1
 80064f8:	fa01 f303 	lsl.w	r3, r1, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	401a      	ands	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	799b      	ldrb	r3, [r3, #6]
 800650c:	4619      	mov	r1, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	b29b      	uxth	r3, r3
 8006512:	fa01 f303 	lsl.w	r3, r1, r3
 8006516:	b29b      	uxth	r3, r3
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	b29b      	uxth	r3, r3
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	2103      	movs	r1, #3
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	401a      	ands	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	79db      	ldrb	r3, [r3, #7]
 800653e:	4619      	mov	r1, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	3301      	adds	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b0f      	cmp	r3, #15
 8006558:	f67f af64 	bls.w	8006424 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40020000 	.word	0x40020000
 8006568:	40020400 	.word	0x40020400
 800656c:	40020800 	.word	0x40020800
 8006570:	40020c00 	.word	0x40020c00
 8006574:	40021000 	.word	0x40021000
 8006578:	40021400 	.word	0x40021400
 800657c:	40021800 	.word	0x40021800
 8006580:	40021c00 	.word	0x40021c00
 8006584:	40022000 	.word	0x40022000
 8006588:	08008078 	.word	0x08008078

0800658c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	460a      	mov	r2, r1
 8006598:	807a      	strh	r2, [r7, #2]
 800659a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	4b83      	ldr	r3, [pc, #524]	; (80067b4 <GPIO_PinAFConfig+0x228>)
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d024      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4b82      	ldr	r3, [pc, #520]	; (80067b8 <GPIO_PinAFConfig+0x22c>)
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d020      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4b81      	ldr	r3, [pc, #516]	; (80067bc <GPIO_PinAFConfig+0x230>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d01c      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4b80      	ldr	r3, [pc, #512]	; (80067c0 <GPIO_PinAFConfig+0x234>)
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d018      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4b7f      	ldr	r3, [pc, #508]	; (80067c4 <GPIO_PinAFConfig+0x238>)
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d014      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4b7e      	ldr	r3, [pc, #504]	; (80067c8 <GPIO_PinAFConfig+0x23c>)
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d010      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4b7d      	ldr	r3, [pc, #500]	; (80067cc <GPIO_PinAFConfig+0x240>)
 80065d8:	429a      	cmp	r2, r3
 80065da:	d00c      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4b7c      	ldr	r3, [pc, #496]	; (80067d0 <GPIO_PinAFConfig+0x244>)
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d008      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4b7b      	ldr	r3, [pc, #492]	; (80067d4 <GPIO_PinAFConfig+0x248>)
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d004      	beq.n	80065f6 <GPIO_PinAFConfig+0x6a>
 80065ec:	487a      	ldr	r0, [pc, #488]	; (80067d8 <GPIO_PinAFConfig+0x24c>)
 80065ee:	f240 2117 	movw	r1, #535	; 0x217
 80065f2:	f7fc f937 	bl	8002864 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 80065f6:	887b      	ldrh	r3, [r7, #2]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d031      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 80065fc:	887b      	ldrh	r3, [r7, #2]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d02e      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006602:	887b      	ldrh	r3, [r7, #2]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d02b      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006608:	887b      	ldrh	r3, [r7, #2]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d028      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 800660e:	887b      	ldrh	r3, [r7, #2]
 8006610:	2b04      	cmp	r3, #4
 8006612:	d025      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	2b05      	cmp	r3, #5
 8006618:	d022      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	2b06      	cmp	r3, #6
 800661e:	d01f      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006620:	887b      	ldrh	r3, [r7, #2]
 8006622:	2b07      	cmp	r3, #7
 8006624:	d01c      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006626:	887b      	ldrh	r3, [r7, #2]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d019      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	2b09      	cmp	r3, #9
 8006630:	d016      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006632:	887b      	ldrh	r3, [r7, #2]
 8006634:	2b0a      	cmp	r3, #10
 8006636:	d013      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	2b0b      	cmp	r3, #11
 800663c:	d010      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 800663e:	887b      	ldrh	r3, [r7, #2]
 8006640:	2b0c      	cmp	r3, #12
 8006642:	d00d      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	2b0d      	cmp	r3, #13
 8006648:	d00a      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 800664a:	887b      	ldrh	r3, [r7, #2]
 800664c:	2b0e      	cmp	r3, #14
 800664e:	d007      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006650:	887b      	ldrh	r3, [r7, #2]
 8006652:	2b0f      	cmp	r3, #15
 8006654:	d004      	beq.n	8006660 <GPIO_PinAFConfig+0xd4>
 8006656:	4860      	ldr	r0, [pc, #384]	; (80067d8 <GPIO_PinAFConfig+0x24c>)
 8006658:	f44f 7106 	mov.w	r1, #536	; 0x218
 800665c:	f7fc f902 	bl	8002864 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8006660:	787b      	ldrb	r3, [r7, #1]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d06d      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006666:	787b      	ldrb	r3, [r7, #1]
 8006668:	2b09      	cmp	r3, #9
 800666a:	d06a      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 800666c:	787b      	ldrb	r3, [r7, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d067      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006672:	787b      	ldrb	r3, [r7, #1]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d064      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006678:	787b      	ldrb	r3, [r7, #1]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d061      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 800667e:	787b      	ldrb	r3, [r7, #1]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d05e      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006684:	787b      	ldrb	r3, [r7, #1]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d05b      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 800668a:	787b      	ldrb	r3, [r7, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d058      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006690:	787b      	ldrb	r3, [r7, #1]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d055      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006696:	787b      	ldrb	r3, [r7, #1]
 8006698:	2b02      	cmp	r3, #2
 800669a:	d052      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 800669c:	787b      	ldrb	r3, [r7, #1]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d04f      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066a2:	787b      	ldrb	r3, [r7, #1]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d04c      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066a8:	787b      	ldrb	r3, [r7, #1]
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d049      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066ae:	787b      	ldrb	r3, [r7, #1]
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d046      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066b4:	787b      	ldrb	r3, [r7, #1]
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d043      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066ba:	787b      	ldrb	r3, [r7, #1]
 80066bc:	2b05      	cmp	r3, #5
 80066be:	d040      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066c0:	787b      	ldrb	r3, [r7, #1]
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	d03d      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066c6:	787b      	ldrb	r3, [r7, #1]
 80066c8:	2b09      	cmp	r3, #9
 80066ca:	d03a      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066cc:	787b      	ldrb	r3, [r7, #1]
 80066ce:	2b06      	cmp	r3, #6
 80066d0:	d037      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066d2:	787b      	ldrb	r3, [r7, #1]
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d034      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066d8:	787b      	ldrb	r3, [r7, #1]
 80066da:	2b07      	cmp	r3, #7
 80066dc:	d031      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066de:	787b      	ldrb	r3, [r7, #1]
 80066e0:	2b07      	cmp	r3, #7
 80066e2:	d02e      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066e4:	787b      	ldrb	r3, [r7, #1]
 80066e6:	2b07      	cmp	r3, #7
 80066e8:	d02b      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066ea:	787b      	ldrb	r3, [r7, #1]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d028      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066f0:	787b      	ldrb	r3, [r7, #1]
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d025      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066f6:	787b      	ldrb	r3, [r7, #1]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d022      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 80066fc:	787b      	ldrb	r3, [r7, #1]
 80066fe:	2b09      	cmp	r3, #9
 8006700:	d01f      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006702:	787b      	ldrb	r3, [r7, #1]
 8006704:	2b09      	cmp	r3, #9
 8006706:	d01c      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006708:	787b      	ldrb	r3, [r7, #1]
 800670a:	2b0a      	cmp	r3, #10
 800670c:	d019      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 800670e:	787b      	ldrb	r3, [r7, #1]
 8006710:	2b0a      	cmp	r3, #10
 8006712:	d016      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006714:	787b      	ldrb	r3, [r7, #1]
 8006716:	2b0b      	cmp	r3, #11
 8006718:	d013      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 800671a:	787b      	ldrb	r3, [r7, #1]
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d010      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006720:	787b      	ldrb	r3, [r7, #1]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d00d      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006726:	787b      	ldrb	r3, [r7, #1]
 8006728:	2b0c      	cmp	r3, #12
 800672a:	d00a      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 800672c:	787b      	ldrb	r3, [r7, #1]
 800672e:	2b0d      	cmp	r3, #13
 8006730:	d007      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006732:	787b      	ldrb	r3, [r7, #1]
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d004      	beq.n	8006742 <GPIO_PinAFConfig+0x1b6>
 8006738:	4827      	ldr	r0, [pc, #156]	; (80067d8 <GPIO_PinAFConfig+0x24c>)
 800673a:	f240 2119 	movw	r1, #537	; 0x219
 800673e:	f7fc f891 	bl	8002864 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006742:	787a      	ldrb	r2, [r7, #1]
 8006744:	887b      	ldrh	r3, [r7, #2]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006752:	887b      	ldrh	r3, [r7, #2]
 8006754:	08db      	lsrs	r3, r3, #3
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	887b      	ldrh	r3, [r7, #2]
 800675c:	08db      	lsrs	r3, r3, #3
 800675e:	b29b      	uxth	r3, r3
 8006760:	4619      	mov	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3108      	adds	r1, #8
 8006766:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800676a:	887b      	ldrh	r3, [r7, #2]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	200f      	movs	r0, #15
 8006774:	fa00 f303 	lsl.w	r3, r0, r3
 8006778:	43db      	mvns	r3, r3
 800677a:	4019      	ands	r1, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3208      	adds	r2, #8
 8006780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8006784:	887b      	ldrh	r3, [r7, #2]
 8006786:	08db      	lsrs	r3, r3, #3
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3208      	adds	r2, #8
 8006790:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	08db      	lsrs	r3, r3, #3
 800679e:	b29b      	uxth	r3, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3208      	adds	r2, #8
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40020000 	.word	0x40020000
 80067b8:	40020400 	.word	0x40020400
 80067bc:	40020800 	.word	0x40020800
 80067c0:	40020c00 	.word	0x40020c00
 80067c4:	40021000 	.word	0x40021000
 80067c8:	40021400 	.word	0x40021400
 80067cc:	40021800 	.word	0x40021800
 80067d0:	40021c00 	.word	0x40021c00
 80067d4:	40022000 	.word	0x40022000
 80067d8:	08008078 	.word	0x08008078

080067dc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80067dc:	b480      	push	{r7}
 80067de:	b089      	sub	sp, #36	; 0x24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	2302      	movs	r3, #2
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	2302      	movs	r3, #2
 80067fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80067fc:	4b48      	ldr	r3, [pc, #288]	; (8006920 <RCC_GetClocksFreq+0x144>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 030c 	and.w	r3, r3, #12
 8006804:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d007      	beq.n	800681c <RCC_GetClocksFreq+0x40>
 800680c:	2b08      	cmp	r3, #8
 800680e:	d009      	beq.n	8006824 <RCC_GetClocksFreq+0x48>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d13f      	bne.n	8006894 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a43      	ldr	r2, [pc, #268]	; (8006924 <RCC_GetClocksFreq+0x148>)
 8006818:	601a      	str	r2, [r3, #0]
      break;
 800681a:	e03f      	b.n	800689c <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a42      	ldr	r2, [pc, #264]	; (8006928 <RCC_GetClocksFreq+0x14c>)
 8006820:	601a      	str	r2, [r3, #0]
      break;
 8006822:	e03b      	b.n	800689c <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006824:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <RCC_GetClocksFreq+0x144>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682c:	0d9b      	lsrs	r3, r3, #22
 800682e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006830:	4b3b      	ldr	r3, [pc, #236]	; (8006920 <RCC_GetClocksFreq+0x144>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006838:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00d      	beq.n	800685c <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006840:	4a39      	ldr	r2, [pc, #228]	; (8006928 <RCC_GetClocksFreq+0x14c>)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	fbb2 f2f3 	udiv	r2, r2, r3
 8006848:	4b35      	ldr	r3, [pc, #212]	; (8006920 <RCC_GetClocksFreq+0x144>)
 800684a:	6859      	ldr	r1, [r3, #4]
 800684c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006850:	400b      	ands	r3, r1
 8006852:	099b      	lsrs	r3, r3, #6
 8006854:	fb03 f302 	mul.w	r3, r3, r2
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	e00c      	b.n	8006876 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800685c:	4a31      	ldr	r2, [pc, #196]	; (8006924 <RCC_GetClocksFreq+0x148>)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	fbb2 f2f3 	udiv	r2, r2, r3
 8006864:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <RCC_GetClocksFreq+0x144>)
 8006866:	6859      	ldr	r1, [r3, #4]
 8006868:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800686c:	400b      	ands	r3, r1
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	fb03 f302 	mul.w	r3, r3, r2
 8006874:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006876:	4b2a      	ldr	r3, [pc, #168]	; (8006920 <RCC_GetClocksFreq+0x144>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	3301      	adds	r3, #1
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	fbb2 f2f3 	udiv	r2, r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	601a      	str	r2, [r3, #0]
      break;
 8006892:	e003      	b.n	800689c <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a23      	ldr	r2, [pc, #140]	; (8006924 <RCC_GetClocksFreq+0x148>)
 8006898:	601a      	str	r2, [r3, #0]
      break;
 800689a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <RCC_GetClocksFreq+0x144>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80068ac:	4a1f      	ldr	r2, [pc, #124]	; (800692c <RCC_GetClocksFreq+0x150>)
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	4413      	add	r3, r2
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	40da      	lsrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <RCC_GetClocksFreq+0x144>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80068cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	0a9b      	lsrs	r3, r3, #10
 80068d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80068d4:	4a15      	ldr	r2, [pc, #84]	; (800692c <RCC_GetClocksFreq+0x150>)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	4413      	add	r3, r2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	40da      	lsrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <RCC_GetClocksFreq+0x144>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80068f4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	0b5b      	lsrs	r3, r3, #13
 80068fa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80068fc:	4a0b      	ldr	r2, [pc, #44]	; (800692c <RCC_GetClocksFreq+0x150>)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	4413      	add	r3, r2
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	40da      	lsrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60da      	str	r2, [r3, #12]
}
 8006914:	3724      	adds	r7, #36	; 0x24
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40023800 	.word	0x40023800
 8006924:	00f42400 	.word	0x00f42400
 8006928:	017d7840 	.word	0x017d7840
 800692c:	2000001c 	.word	0x2000001c

08006930 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	4b15      	ldr	r3, [pc, #84]	; (8006994 <RCC_AHB1PeriphClockCmd+0x64>)
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <RCC_AHB1PeriphClockCmd+0x1c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <RCC_AHB1PeriphClockCmd+0x26>
 800694c:	4812      	ldr	r0, [pc, #72]	; (8006998 <RCC_AHB1PeriphClockCmd+0x68>)
 800694e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006952:	f7fb ff87 	bl	8002864 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <RCC_AHB1PeriphClockCmd+0x3c>
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d004      	beq.n	800696c <RCC_AHB1PeriphClockCmd+0x3c>
 8006962:	480d      	ldr	r0, [pc, #52]	; (8006998 <RCC_AHB1PeriphClockCmd+0x68>)
 8006964:	f240 4142 	movw	r1, #1090	; 0x442
 8006968:	f7fb ff7c 	bl	8002864 <assert_failed>
  if (NewState != DISABLE)
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <RCC_AHB1PeriphClockCmd+0x6c>)
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <RCC_AHB1PeriphClockCmd+0x6c>)
 8006976:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	430a      	orrs	r2, r1
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
 800697e:	e006      	b.n	800698e <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <RCC_AHB1PeriphClockCmd+0x6c>)
 8006982:	4a06      	ldr	r2, [pc, #24]	; (800699c <RCC_AHB1PeriphClockCmd+0x6c>)
 8006984:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	43d2      	mvns	r2, r2
 800698a:	400a      	ands	r2, r1
 800698c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	818bee00 	.word	0x818bee00
 8006998:	080080c8 	.word	0x080080c8
 800699c:	40023800 	.word	0x40023800

080069a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4b15      	ldr	r3, [pc, #84]	; (8006a04 <RCC_APB2PeriphClockCmd+0x64>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <RCC_APB2PeriphClockCmd+0x1c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <RCC_APB2PeriphClockCmd+0x26>
 80069bc:	4812      	ldr	r0, [pc, #72]	; (8006a08 <RCC_APB2PeriphClockCmd+0x68>)
 80069be:	f240 41d5 	movw	r1, #1237	; 0x4d5
 80069c2:	f7fb ff4f 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <RCC_APB2PeriphClockCmd+0x3c>
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d004      	beq.n	80069dc <RCC_APB2PeriphClockCmd+0x3c>
 80069d2:	480d      	ldr	r0, [pc, #52]	; (8006a08 <RCC_APB2PeriphClockCmd+0x68>)
 80069d4:	f240 41d6 	movw	r1, #1238	; 0x4d6
 80069d8:	f7fb ff44 	bl	8002864 <assert_failed>

  if (NewState != DISABLE)
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <RCC_APB2PeriphClockCmd+0x6c>)
 80069e4:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <RCC_APB2PeriphClockCmd+0x6c>)
 80069e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
 80069ee:	e006      	b.n	80069fe <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <RCC_APB2PeriphClockCmd+0x6c>)
 80069f2:	4a06      	ldr	r2, [pc, #24]	; (8006a0c <RCC_APB2PeriphClockCmd+0x6c>)
 80069f4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	43d2      	mvns	r2, r2
 80069fa:	400a      	ands	r2, r1
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	fff8a0cc 	.word	0xfff8a0cc
 8006a08:	080080c8 	.word	0x080080c8
 8006a0c:	40023800 	.word	0x40023800

08006a10 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4b70      	ldr	r3, [pc, #448]	; (8006be4 <SPI_Init+0x1d4>)
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d00c      	beq.n	8006a40 <SPI_Init+0x30>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4b6f      	ldr	r3, [pc, #444]	; (8006be8 <SPI_Init+0x1d8>)
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d008      	beq.n	8006a40 <SPI_Init+0x30>
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4b6e      	ldr	r3, [pc, #440]	; (8006bec <SPI_Init+0x1dc>)
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d004      	beq.n	8006a40 <SPI_Init+0x30>
 8006a36:	486e      	ldr	r0, [pc, #440]	; (8006bf0 <SPI_Init+0x1e0>)
 8006a38:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006a3c:	f7fb ff12 	bl	8002864 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d013      	beq.n	8006a70 <SPI_Init+0x60>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a50:	d00e      	beq.n	8006a70 <SPI_Init+0x60>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5a:	d009      	beq.n	8006a70 <SPI_Init+0x60>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a64:	d004      	beq.n	8006a70 <SPI_Init+0x60>
 8006a66:	4862      	ldr	r0, [pc, #392]	; (8006bf0 <SPI_Init+0x1e0>)
 8006a68:	f240 1109 	movw	r1, #265	; 0x109
 8006a6c:	f7fb fefa 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	885b      	ldrh	r3, [r3, #2]
 8006a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a78:	d008      	beq.n	8006a8c <SPI_Init+0x7c>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	885b      	ldrh	r3, [r3, #2]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <SPI_Init+0x7c>
 8006a82:	485b      	ldr	r0, [pc, #364]	; (8006bf0 <SPI_Init+0x1e0>)
 8006a84:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006a88:	f7fb feec 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	889b      	ldrh	r3, [r3, #4]
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a94:	d008      	beq.n	8006aa8 <SPI_Init+0x98>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	889b      	ldrh	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <SPI_Init+0x98>
 8006a9e:	4854      	ldr	r0, [pc, #336]	; (8006bf0 <SPI_Init+0x1e0>)
 8006aa0:	f240 110b 	movw	r1, #267	; 0x10b
 8006aa4:	f7fb fede 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	88db      	ldrh	r3, [r3, #6]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <SPI_Init+0xb2>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	88db      	ldrh	r3, [r3, #6]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d004      	beq.n	8006ac2 <SPI_Init+0xb2>
 8006ab8:	484d      	ldr	r0, [pc, #308]	; (8006bf0 <SPI_Init+0x1e0>)
 8006aba:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8006abe:	f7fb fed1 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	891b      	ldrh	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <SPI_Init+0xcc>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	891b      	ldrh	r3, [r3, #8]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d004      	beq.n	8006adc <SPI_Init+0xcc>
 8006ad2:	4847      	ldr	r0, [pc, #284]	; (8006bf0 <SPI_Init+0x1e0>)
 8006ad4:	f240 110d 	movw	r1, #269	; 0x10d
 8006ad8:	f7fb fec4 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	895b      	ldrh	r3, [r3, #10]
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae4:	d008      	beq.n	8006af8 <SPI_Init+0xe8>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	895b      	ldrh	r3, [r3, #10]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d004      	beq.n	8006af8 <SPI_Init+0xe8>
 8006aee:	4840      	ldr	r0, [pc, #256]	; (8006bf0 <SPI_Init+0x1e0>)
 8006af0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006af4:	f7fb feb6 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	899b      	ldrh	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d020      	beq.n	8006b42 <SPI_Init+0x132>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	899b      	ldrh	r3, [r3, #12]
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d01c      	beq.n	8006b42 <SPI_Init+0x132>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	899b      	ldrh	r3, [r3, #12]
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d018      	beq.n	8006b42 <SPI_Init+0x132>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	899b      	ldrh	r3, [r3, #12]
 8006b14:	2b18      	cmp	r3, #24
 8006b16:	d014      	beq.n	8006b42 <SPI_Init+0x132>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	899b      	ldrh	r3, [r3, #12]
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d010      	beq.n	8006b42 <SPI_Init+0x132>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	899b      	ldrh	r3, [r3, #12]
 8006b24:	2b28      	cmp	r3, #40	; 0x28
 8006b26:	d00c      	beq.n	8006b42 <SPI_Init+0x132>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	899b      	ldrh	r3, [r3, #12]
 8006b2c:	2b30      	cmp	r3, #48	; 0x30
 8006b2e:	d008      	beq.n	8006b42 <SPI_Init+0x132>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	899b      	ldrh	r3, [r3, #12]
 8006b34:	2b38      	cmp	r3, #56	; 0x38
 8006b36:	d004      	beq.n	8006b42 <SPI_Init+0x132>
 8006b38:	482d      	ldr	r0, [pc, #180]	; (8006bf0 <SPI_Init+0x1e0>)
 8006b3a:	f240 110f 	movw	r1, #271	; 0x10f
 8006b3e:	f7fb fe91 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	89db      	ldrh	r3, [r3, #14]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <SPI_Init+0x14c>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	89db      	ldrh	r3, [r3, #14]
 8006b4e:	2b80      	cmp	r3, #128	; 0x80
 8006b50:	d004      	beq.n	8006b5c <SPI_Init+0x14c>
 8006b52:	4827      	ldr	r0, [pc, #156]	; (8006bf0 <SPI_Init+0x1e0>)
 8006b54:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006b58:	f7fb fe84 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	8a1b      	ldrh	r3, [r3, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <SPI_Init+0x15e>
 8006b64:	4822      	ldr	r0, [pc, #136]	; (8006bf0 <SPI_Init+0x1e0>)
 8006b66:	f240 1111 	movw	r1, #273	; 0x111
 8006b6a:	f7fb fe7b 	bl	8002864 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8006b74:	89fb      	ldrh	r3, [r7, #14]
 8006b76:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8006b7a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	881a      	ldrh	r2, [r3, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	885b      	ldrh	r3, [r3, #2]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006b94:	4313      	orrs	r3, r2
 8006b96:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006bac:	4313      	orrs	r3, r2
 8006bae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	89fb      	ldrh	r3, [r7, #14]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	89fa      	ldrh	r2, [r7, #14]
 8006bc2:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8b9b      	ldrh	r3, [r3, #28]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	8a1a      	ldrh	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	821a      	strh	r2, [r3, #16]
}
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40013000 	.word	0x40013000
 8006be8:	40003800 	.word	0x40003800
 8006bec:	40003c00 	.word	0x40003c00
 8006bf0:	08008118 	.word	0x08008118

08006bf4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <SPI_Cmd+0x74>)
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d00c      	beq.n	8006c22 <SPI_Cmd+0x2e>
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <SPI_Cmd+0x78>)
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d008      	beq.n	8006c22 <SPI_Cmd+0x2e>
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <SPI_Cmd+0x7c>)
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d004      	beq.n	8006c22 <SPI_Cmd+0x2e>
 8006c18:	4816      	ldr	r0, [pc, #88]	; (8006c74 <SPI_Cmd+0x80>)
 8006c1a:	f240 2101 	movw	r1, #513	; 0x201
 8006c1e:	f7fb fe21 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <SPI_Cmd+0x44>
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d004      	beq.n	8006c38 <SPI_Cmd+0x44>
 8006c2e:	4811      	ldr	r0, [pc, #68]	; (8006c74 <SPI_Cmd+0x80>)
 8006c30:	f240 2102 	movw	r1, #514	; 0x202
 8006c34:	f7fb fe16 	bl	8002864 <assert_failed>
  if (NewState != DISABLE)
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	801a      	strh	r2, [r3, #0]
 8006c4e:	e007      	b.n	8006c60 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	801a      	strh	r2, [r3, #0]
  }
}
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	40013000 	.word	0x40013000
 8006c6c:	40003800 	.word	0x40003800
 8006c70:	40003c00 	.word	0x40003c00
 8006c74:	08008118 	.word	0x08008118

08006c78 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	460a      	mov	r2, r1
 8006c84:	807a      	strh	r2, [r7, #2]
 8006c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <SPI_I2S_DMACmd+0xa8>)
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d014      	beq.n	8006cba <SPI_I2S_DMACmd+0x42>
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <SPI_I2S_DMACmd+0xac>)
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d010      	beq.n	8006cba <SPI_I2S_DMACmd+0x42>
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	4b23      	ldr	r3, [pc, #140]	; (8006d28 <SPI_I2S_DMACmd+0xb0>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d00c      	beq.n	8006cba <SPI_I2S_DMACmd+0x42>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4b22      	ldr	r3, [pc, #136]	; (8006d2c <SPI_I2S_DMACmd+0xb4>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d008      	beq.n	8006cba <SPI_I2S_DMACmd+0x42>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8006cae:	d004      	beq.n	8006cba <SPI_I2S_DMACmd+0x42>
 8006cb0:	481f      	ldr	r0, [pc, #124]	; (8006d30 <SPI_I2S_DMACmd+0xb8>)
 8006cb2:	f240 31d9 	movw	r1, #985	; 0x3d9
 8006cb6:	f7fb fdd5 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006cba:	787b      	ldrb	r3, [r7, #1]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <SPI_I2S_DMACmd+0x58>
 8006cc0:	787b      	ldrb	r3, [r7, #1]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d004      	beq.n	8006cd0 <SPI_I2S_DMACmd+0x58>
 8006cc6:	481a      	ldr	r0, [pc, #104]	; (8006d30 <SPI_I2S_DMACmd+0xb8>)
 8006cc8:	f240 31da 	movw	r1, #986	; 0x3da
 8006ccc:	f7fb fdca 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 8006cd0:	887a      	ldrh	r2, [r7, #2]
 8006cd2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <SPI_I2S_DMACmd+0x6a>
 8006cdc:	887b      	ldrh	r3, [r7, #2]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d104      	bne.n	8006cec <SPI_I2S_DMACmd+0x74>
 8006ce2:	4813      	ldr	r0, [pc, #76]	; (8006d30 <SPI_I2S_DMACmd+0xb8>)
 8006ce4:	f240 31db 	movw	r1, #987	; 0x3db
 8006ce8:	f7fb fdbc 	bl	8002864 <assert_failed>

  if (NewState != DISABLE)
 8006cec:	787b      	ldrb	r3, [r7, #1]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	889b      	ldrh	r3, [r3, #4]
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	887b      	ldrh	r3, [r7, #2]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	809a      	strh	r2, [r3, #4]
 8006d02:	e009      	b.n	8006d18 <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	889b      	ldrh	r3, [r3, #4]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	887b      	ldrh	r3, [r7, #2]
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	4013      	ands	r3, r2
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	809a      	strh	r2, [r3, #4]
  }
}
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40013000 	.word	0x40013000
 8006d24:	40003800 	.word	0x40003800
 8006d28:	40003c00 	.word	0x40003c00
 8006d2c:	40003400 	.word	0x40003400
 8006d30:	08008118 	.word	0x08008118

08006d34 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <SPI_I2S_GetFlagStatus+0xa8>)
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d014      	beq.n	8006d76 <SPI_I2S_GetFlagStatus+0x42>
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <SPI_I2S_GetFlagStatus+0xac>)
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d010      	beq.n	8006d76 <SPI_I2S_GetFlagStatus+0x42>
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	4b23      	ldr	r3, [pc, #140]	; (8006de4 <SPI_I2S_GetFlagStatus+0xb0>)
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d00c      	beq.n	8006d76 <SPI_I2S_GetFlagStatus+0x42>
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <SPI_I2S_GetFlagStatus+0xb4>)
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d008      	beq.n	8006d76 <SPI_I2S_GetFlagStatus+0x42>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8006d6a:	d004      	beq.n	8006d76 <SPI_I2S_GetFlagStatus+0x42>
 8006d6c:	481f      	ldr	r0, [pc, #124]	; (8006dec <SPI_I2S_GetFlagStatus+0xb8>)
 8006d6e:	f240 4173 	movw	r1, #1139	; 0x473
 8006d72:	f7fb fd77 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 8006d76:	887b      	ldrh	r3, [r7, #2]
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	d01d      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006d7c:	887b      	ldrh	r3, [r7, #2]
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d01a      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006d82:	887b      	ldrh	r3, [r7, #2]
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d017      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006d88:	887b      	ldrh	r3, [r7, #2]
 8006d8a:	2b10      	cmp	r3, #16
 8006d8c:	d014      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006d8e:	887b      	ldrh	r3, [r7, #2]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d011      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006d94:	887b      	ldrh	r3, [r7, #2]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d00e      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006d9a:	887b      	ldrh	r3, [r7, #2]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d00b      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006da0:	887b      	ldrh	r3, [r7, #2]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d008      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006da6:	887b      	ldrh	r3, [r7, #2]
 8006da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dac:	d004      	beq.n	8006db8 <SPI_I2S_GetFlagStatus+0x84>
 8006dae:	480f      	ldr	r0, [pc, #60]	; (8006dec <SPI_I2S_GetFlagStatus+0xb8>)
 8006db0:	f240 4174 	movw	r1, #1140	; 0x474
 8006db4:	f7fb fd56 	bl	8002864 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	891b      	ldrh	r3, [r3, #8]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
 8006dcc:	e001      	b.n	8006dd2 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40013000 	.word	0x40013000
 8006de0:	40003800 	.word	0x40003800
 8006de4:	40003c00 	.word	0x40003c00
 8006de8:	40003400 	.word	0x40003400
 8006dec:	08008118 	.word	0x08008118

08006df0 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <SPI_I2S_ClearFlag+0x60>)
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d014      	beq.n	8006e2e <SPI_I2S_ClearFlag+0x3e>
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <SPI_I2S_ClearFlag+0x64>)
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d010      	beq.n	8006e2e <SPI_I2S_ClearFlag+0x3e>
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <SPI_I2S_ClearFlag+0x68>)
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d00c      	beq.n	8006e2e <SPI_I2S_ClearFlag+0x3e>
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <SPI_I2S_ClearFlag+0x6c>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d008      	beq.n	8006e2e <SPI_I2S_ClearFlag+0x3e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8006e22:	d004      	beq.n	8006e2e <SPI_I2S_ClearFlag+0x3e>
 8006e24:	480e      	ldr	r0, [pc, #56]	; (8006e60 <SPI_I2S_ClearFlag+0x70>)
 8006e26:	f240 419b 	movw	r1, #1179	; 0x49b
 8006e2a:	f7fb fd1b 	bl	8002864 <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 8006e2e:	887b      	ldrh	r3, [r7, #2]
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d004      	beq.n	8006e3e <SPI_I2S_ClearFlag+0x4e>
 8006e34:	480a      	ldr	r0, [pc, #40]	; (8006e60 <SPI_I2S_ClearFlag+0x70>)
 8006e36:	f240 419c 	movw	r1, #1180	; 0x49c
 8006e3a:	f7fb fd13 	bl	8002864 <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8006e3e:	887b      	ldrh	r3, [r7, #2]
 8006e40:	43db      	mvns	r3, r3
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	811a      	strh	r2, [r3, #8]
}
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40013000 	.word	0x40013000
 8006e54:	40003800 	.word	0x40003800
 8006e58:	40003c00 	.word	0x40003c00
 8006e5c:	40003400 	.word	0x40003400
 8006e60:	08008118 	.word	0x08008118

08006e64 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8006e64:	b590      	push	{r4, r7, lr}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	71fa      	strb	r2, [r7, #7]
 8006e70:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01b      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d018      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d015      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d012      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006e8e:	79fb      	ldrb	r3, [r7, #7]
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d00f      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d00c      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	d009      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	2b07      	cmp	r3, #7
 8006ea4:	d006      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d003      	beq.n	8006eb4 <SYSCFG_EXTILineConfig+0x50>
 8006eac:	4834      	ldr	r0, [pc, #208]	; (8006f80 <SYSCFG_EXTILineConfig+0x11c>)
 8006eae:	217c      	movs	r1, #124	; 0x7c
 8006eb0:	f7fb fcd8 	bl	8002864 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8006eb4:	79bb      	ldrb	r3, [r7, #6]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d030      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006eba:	79bb      	ldrb	r3, [r7, #6]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d02d      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ec0:	79bb      	ldrb	r3, [r7, #6]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d02a      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ec6:	79bb      	ldrb	r3, [r7, #6]
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d027      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ecc:	79bb      	ldrb	r3, [r7, #6]
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d024      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ed2:	79bb      	ldrb	r3, [r7, #6]
 8006ed4:	2b05      	cmp	r3, #5
 8006ed6:	d021      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ed8:	79bb      	ldrb	r3, [r7, #6]
 8006eda:	2b06      	cmp	r3, #6
 8006edc:	d01e      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ede:	79bb      	ldrb	r3, [r7, #6]
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	d01b      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ee4:	79bb      	ldrb	r3, [r7, #6]
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d018      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006eea:	79bb      	ldrb	r3, [r7, #6]
 8006eec:	2b09      	cmp	r3, #9
 8006eee:	d015      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ef0:	79bb      	ldrb	r3, [r7, #6]
 8006ef2:	2b0a      	cmp	r3, #10
 8006ef4:	d012      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006ef6:	79bb      	ldrb	r3, [r7, #6]
 8006ef8:	2b0b      	cmp	r3, #11
 8006efa:	d00f      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006efc:	79bb      	ldrb	r3, [r7, #6]
 8006efe:	2b0c      	cmp	r3, #12
 8006f00:	d00c      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006f02:	79bb      	ldrb	r3, [r7, #6]
 8006f04:	2b0d      	cmp	r3, #13
 8006f06:	d009      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006f08:	79bb      	ldrb	r3, [r7, #6]
 8006f0a:	2b0e      	cmp	r3, #14
 8006f0c:	d006      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006f0e:	79bb      	ldrb	r3, [r7, #6]
 8006f10:	2b0f      	cmp	r3, #15
 8006f12:	d003      	beq.n	8006f1c <SYSCFG_EXTILineConfig+0xb8>
 8006f14:	481a      	ldr	r0, [pc, #104]	; (8006f80 <SYSCFG_EXTILineConfig+0x11c>)
 8006f16:	217d      	movs	r1, #125	; 0x7d
 8006f18:	f7fb fca4 	bl	8002864 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8006f1c:	79bb      	ldrb	r3, [r7, #6]
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	220f      	movs	r2, #15
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8006f2c:	4b15      	ldr	r3, [pc, #84]	; (8006f84 <SYSCFG_EXTILineConfig+0x120>)
 8006f2e:	79ba      	ldrb	r2, [r7, #6]
 8006f30:	0892      	lsrs	r2, r2, #2
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	4913      	ldr	r1, [pc, #76]	; (8006f84 <SYSCFG_EXTILineConfig+0x120>)
 8006f36:	79b8      	ldrb	r0, [r7, #6]
 8006f38:	0880      	lsrs	r0, r0, #2
 8006f3a:	b2c0      	uxtb	r0, r0
 8006f3c:	3002      	adds	r0, #2
 8006f3e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	43c9      	mvns	r1, r1
 8006f46:	4001      	ands	r1, r0
 8006f48:	3202      	adds	r2, #2
 8006f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <SYSCFG_EXTILineConfig+0x120>)
 8006f50:	79ba      	ldrb	r2, [r7, #6]
 8006f52:	0892      	lsrs	r2, r2, #2
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	490b      	ldr	r1, [pc, #44]	; (8006f84 <SYSCFG_EXTILineConfig+0x120>)
 8006f58:	79b8      	ldrb	r0, [r7, #6]
 8006f5a:	0880      	lsrs	r0, r0, #2
 8006f5c:	b2c0      	uxtb	r0, r0
 8006f5e:	3002      	adds	r0, #2
 8006f60:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8006f64:	79fc      	ldrb	r4, [r7, #7]
 8006f66:	79b9      	ldrb	r1, [r7, #6]
 8006f68:	f001 0103 	and.w	r1, r1, #3
 8006f6c:	0089      	lsls	r1, r1, #2
 8006f6e:	fa04 f101 	lsl.w	r1, r4, r1
 8006f72:	4301      	orrs	r1, r0
 8006f74:	3202      	adds	r2, #2
 8006f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd90      	pop	{r4, r7, pc}
 8006f80:	08008168 	.word	0x08008168
 8006f84:	40013800 	.word	0x40013800

08006f88 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8006f92:	2300      	movs	r3, #0
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
 8006f96:	2300      	movs	r3, #0
 8006f98:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4b97      	ldr	r3, [pc, #604]	; (8007204 <USART_Init+0x27c>)
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d017      	beq.n	8006fda <USART_Init+0x52>
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4b96      	ldr	r3, [pc, #600]	; (8007208 <USART_Init+0x280>)
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d013      	beq.n	8006fda <USART_Init+0x52>
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	4b95      	ldr	r3, [pc, #596]	; (800720c <USART_Init+0x284>)
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d00f      	beq.n	8006fda <USART_Init+0x52>
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4b94      	ldr	r3, [pc, #592]	; (8007210 <USART_Init+0x288>)
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d00b      	beq.n	8006fda <USART_Init+0x52>
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4b93      	ldr	r3, [pc, #588]	; (8007214 <USART_Init+0x28c>)
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d007      	beq.n	8006fda <USART_Init+0x52>
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4b92      	ldr	r3, [pc, #584]	; (8007218 <USART_Init+0x290>)
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d003      	beq.n	8006fda <USART_Init+0x52>
 8006fd2:	4892      	ldr	r0, [pc, #584]	; (800721c <USART_Init+0x294>)
 8006fd4:	21eb      	movs	r1, #235	; 0xeb
 8006fd6:	f7fb fc45 	bl	8002864 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <USART_Init+0x64>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b8e      	ldr	r3, [pc, #568]	; (8007220 <USART_Init+0x298>)
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d903      	bls.n	8006ff4 <USART_Init+0x6c>
 8006fec:	488b      	ldr	r0, [pc, #556]	; (800721c <USART_Init+0x294>)
 8006fee:	21ec      	movs	r1, #236	; 0xec
 8006ff0:	f7fb fc38 	bl	8002864 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	889b      	ldrh	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <USART_Init+0x86>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	889b      	ldrh	r3, [r3, #4]
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007004:	d003      	beq.n	800700e <USART_Init+0x86>
 8007006:	4885      	ldr	r0, [pc, #532]	; (800721c <USART_Init+0x294>)
 8007008:	21ed      	movs	r1, #237	; 0xed
 800700a:	f7fb fc2b 	bl	8002864 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	88db      	ldrh	r3, [r3, #6]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d012      	beq.n	800703c <USART_Init+0xb4>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	88db      	ldrh	r3, [r3, #6]
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701e:	d00d      	beq.n	800703c <USART_Init+0xb4>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	88db      	ldrh	r3, [r3, #6]
 8007024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007028:	d008      	beq.n	800703c <USART_Init+0xb4>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	88db      	ldrh	r3, [r3, #6]
 800702e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007032:	d003      	beq.n	800703c <USART_Init+0xb4>
 8007034:	4879      	ldr	r0, [pc, #484]	; (800721c <USART_Init+0x294>)
 8007036:	21ee      	movs	r1, #238	; 0xee
 8007038:	f7fb fc14 	bl	8002864 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	891b      	ldrh	r3, [r3, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <USART_Init+0xd8>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	891b      	ldrh	r3, [r3, #8]
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704c:	d008      	beq.n	8007060 <USART_Init+0xd8>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	891b      	ldrh	r3, [r3, #8]
 8007052:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007056:	d003      	beq.n	8007060 <USART_Init+0xd8>
 8007058:	4870      	ldr	r0, [pc, #448]	; (800721c <USART_Init+0x294>)
 800705a:	21ef      	movs	r1, #239	; 0xef
 800705c:	f7fb fc02 	bl	8002864 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	895b      	ldrh	r3, [r3, #10]
 8007064:	461a      	mov	r2, r3
 8007066:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d103      	bne.n	8007078 <USART_Init+0xf0>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	895b      	ldrh	r3, [r3, #10]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <USART_Init+0xf8>
 8007078:	4868      	ldr	r0, [pc, #416]	; (800721c <USART_Init+0x294>)
 800707a:	21f0      	movs	r1, #240	; 0xf0
 800707c:	f7fb fbf2 	bl	8002864 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	899b      	ldrh	r3, [r3, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d012      	beq.n	80070ae <USART_Init+0x126>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	899b      	ldrh	r3, [r3, #12]
 800708c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007090:	d00d      	beq.n	80070ae <USART_Init+0x126>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	899b      	ldrh	r3, [r3, #12]
 8007096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800709a:	d008      	beq.n	80070ae <USART_Init+0x126>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	899b      	ldrh	r3, [r3, #12]
 80070a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a4:	d003      	beq.n	80070ae <USART_Init+0x126>
 80070a6:	485d      	ldr	r0, [pc, #372]	; (800721c <USART_Init+0x294>)
 80070a8:	21f1      	movs	r1, #241	; 0xf1
 80070aa:	f7fb fbdb 	bl	8002864 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	899b      	ldrh	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d013      	beq.n	80070de <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4b52      	ldr	r3, [pc, #328]	; (8007204 <USART_Init+0x27c>)
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d00f      	beq.n	80070de <USART_Init+0x156>
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4b51      	ldr	r3, [pc, #324]	; (8007208 <USART_Init+0x280>)
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d00b      	beq.n	80070de <USART_Init+0x156>
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4b50      	ldr	r3, [pc, #320]	; (800720c <USART_Init+0x284>)
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d007      	beq.n	80070de <USART_Init+0x156>
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4b51      	ldr	r3, [pc, #324]	; (8007218 <USART_Init+0x290>)
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d003      	beq.n	80070de <USART_Init+0x156>
 80070d6:	4851      	ldr	r0, [pc, #324]	; (800721c <USART_Init+0x294>)
 80070d8:	21f6      	movs	r1, #246	; 0xf6
 80070da:	f7fb fbc3 	bl	8002864 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8a1b      	ldrh	r3, [r3, #16]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	88db      	ldrh	r3, [r3, #6]
 80070f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f4:	4313      	orrs	r3, r2
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	899b      	ldrh	r3, [r3, #12]
 8007104:	b29b      	uxth	r3, r3
 8007106:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800710e:	f023 030c 	bic.w	r3, r3, #12
 8007112:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	889a      	ldrh	r2, [r3, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	891b      	ldrh	r3, [r3, #8]
 800711c:	4313      	orrs	r3, r2
 800711e:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007124:	4313      	orrs	r3, r2
 8007126:	b29b      	uxth	r3, r3
 8007128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712a:	4313      	orrs	r3, r2
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	8a9b      	ldrh	r3, [r3, #20]
 800713a:	b29b      	uxth	r3, r3
 800713c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007144:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	899b      	ldrh	r3, [r3, #12]
 800714a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714c:	4313      	orrs	r3, r2
 800714e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8007158:	f107 0308 	add.w	r3, r7, #8
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fb3d 	bl	80067dc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	4b27      	ldr	r3, [pc, #156]	; (8007204 <USART_Init+0x27c>)
 8007166:	429a      	cmp	r2, r3
 8007168:	d003      	beq.n	8007172 <USART_Init+0x1ea>
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <USART_Init+0x290>)
 800716e:	429a      	cmp	r2, r3
 8007170:	d102      	bne.n	8007178 <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	623b      	str	r3, [r7, #32]
 8007176:	e001      	b.n	800717c <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	899b      	ldrh	r3, [r3, #12]
 8007180:	b29b      	uxth	r3, r3
 8007182:	b29b      	uxth	r3, r3
 8007184:	b21b      	sxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	da0c      	bge.n	80071a4 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800718a:	6a3a      	ldr	r2, [r7, #32]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009a      	lsls	r2, r3, #2
 8007194:	441a      	add	r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	e00b      	b.n	80071bc <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80071a4:	6a3a      	ldr	r2, [r7, #32]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009a      	lsls	r2, r3, #2
 80071ae:	441a      	add	r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <USART_Init+0x29c>)
 80071c0:	fba3 1302 	umull	r1, r3, r3, r2
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	091b      	lsrs	r3, r3, #4
 80071ce:	2264      	movs	r2, #100	; 0x64
 80071d0:	fb02 f303 	mul.w	r3, r2, r3
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	899b      	ldrh	r3, [r3, #12]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	b21b      	sxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da1f      	bge.n	8007228 <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <USART_Init+0x29c>)
 80071f2:	fba3 1302 	umull	r1, r3, r3, r2
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fe:	4313      	orrs	r3, r2
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
 8007202:	e01e      	b.n	8007242 <USART_Init+0x2ba>
 8007204:	40011000 	.word	0x40011000
 8007208:	40004400 	.word	0x40004400
 800720c:	40004800 	.word	0x40004800
 8007210:	40004c00 	.word	0x40004c00
 8007214:	40005000 	.word	0x40005000
 8007218:	40011400 	.word	0x40011400
 800721c:	080081bc 	.word	0x080081bc
 8007220:	007270e0 	.word	0x007270e0
 8007224:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <USART_Init+0x2c8>)
 8007232:	fba3 1302 	umull	r1, r3, r3, r2
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723e:	4313      	orrs	r3, r2
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	811a      	strh	r2, [r3, #8]
}
 800724a:	3728      	adds	r7, #40	; 0x28
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	51eb851f 	.word	0x51eb851f

08007254 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <USART_Cmd+0x8c>)
 8007264:	429a      	cmp	r2, r3
 8007266:	d018      	beq.n	800729a <USART_Cmd+0x46>
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <USART_Cmd+0x90>)
 800726c:	429a      	cmp	r2, r3
 800726e:	d014      	beq.n	800729a <USART_Cmd+0x46>
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	4b1d      	ldr	r3, [pc, #116]	; (80072e8 <USART_Cmd+0x94>)
 8007274:	429a      	cmp	r2, r3
 8007276:	d010      	beq.n	800729a <USART_Cmd+0x46>
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <USART_Cmd+0x98>)
 800727c:	429a      	cmp	r2, r3
 800727e:	d00c      	beq.n	800729a <USART_Cmd+0x46>
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <USART_Cmd+0x9c>)
 8007284:	429a      	cmp	r2, r3
 8007286:	d008      	beq.n	800729a <USART_Cmd+0x46>
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <USART_Cmd+0xa0>)
 800728c:	429a      	cmp	r2, r3
 800728e:	d004      	beq.n	800729a <USART_Cmd+0x46>
 8007290:	4819      	ldr	r0, [pc, #100]	; (80072f8 <USART_Cmd+0xa4>)
 8007292:	f240 119b 	movw	r1, #411	; 0x19b
 8007296:	f7fb fae5 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d007      	beq.n	80072b0 <USART_Cmd+0x5c>
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d004      	beq.n	80072b0 <USART_Cmd+0x5c>
 80072a6:	4814      	ldr	r0, [pc, #80]	; (80072f8 <USART_Cmd+0xa4>)
 80072a8:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80072ac:	f7fb fada 	bl	8002864 <assert_failed>
  
  if (NewState != DISABLE)
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d008      	beq.n	80072c8 <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	899b      	ldrh	r3, [r3, #12]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	819a      	strh	r2, [r3, #12]
 80072c6:	e007      	b.n	80072d8 <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	899b      	ldrh	r3, [r3, #12]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	819a      	strh	r2, [r3, #12]
  }
}
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	40011000 	.word	0x40011000
 80072e4:	40004400 	.word	0x40004400
 80072e8:	40004800 	.word	0x40004800
 80072ec:	40004c00 	.word	0x40004c00
 80072f0:	40005000 	.word	0x40005000
 80072f4:	40011400 	.word	0x40011400
 80072f8:	080081bc 	.word	0x080081bc

080072fc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	460a      	mov	r2, r1
 8007308:	807a      	strh	r2, [r7, #2]
 800730a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	2300      	movs	r3, #0
 8007316:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4b4f      	ldr	r3, [pc, #316]	; (800745c <USART_ITConfig+0x160>)
 8007320:	429a      	cmp	r2, r3
 8007322:	d018      	beq.n	8007356 <USART_ITConfig+0x5a>
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4b4e      	ldr	r3, [pc, #312]	; (8007460 <USART_ITConfig+0x164>)
 8007328:	429a      	cmp	r2, r3
 800732a:	d014      	beq.n	8007356 <USART_ITConfig+0x5a>
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4b4d      	ldr	r3, [pc, #308]	; (8007464 <USART_ITConfig+0x168>)
 8007330:	429a      	cmp	r2, r3
 8007332:	d010      	beq.n	8007356 <USART_ITConfig+0x5a>
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	4b4c      	ldr	r3, [pc, #304]	; (8007468 <USART_ITConfig+0x16c>)
 8007338:	429a      	cmp	r2, r3
 800733a:	d00c      	beq.n	8007356 <USART_ITConfig+0x5a>
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4b4b      	ldr	r3, [pc, #300]	; (800746c <USART_ITConfig+0x170>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d008      	beq.n	8007356 <USART_ITConfig+0x5a>
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	4b4a      	ldr	r3, [pc, #296]	; (8007470 <USART_ITConfig+0x174>)
 8007348:	429a      	cmp	r2, r3
 800734a:	d004      	beq.n	8007356 <USART_ITConfig+0x5a>
 800734c:	4849      	ldr	r0, [pc, #292]	; (8007474 <USART_ITConfig+0x178>)
 800734e:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8007352:	f7fb fa87 	bl	8002864 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 8007356:	887b      	ldrh	r3, [r7, #2]
 8007358:	2b28      	cmp	r3, #40	; 0x28
 800735a:	d025      	beq.n	80073a8 <USART_ITConfig+0xac>
 800735c:	887a      	ldrh	r2, [r7, #2]
 800735e:	f240 7327 	movw	r3, #1831	; 0x727
 8007362:	429a      	cmp	r2, r3
 8007364:	d020      	beq.n	80073a8 <USART_ITConfig+0xac>
 8007366:	887a      	ldrh	r2, [r7, #2]
 8007368:	f240 6326 	movw	r3, #1574	; 0x626
 800736c:	429a      	cmp	r2, r3
 800736e:	d01b      	beq.n	80073a8 <USART_ITConfig+0xac>
 8007370:	887a      	ldrh	r2, [r7, #2]
 8007372:	f240 5325 	movw	r3, #1317	; 0x525
 8007376:	429a      	cmp	r2, r3
 8007378:	d016      	beq.n	80073a8 <USART_ITConfig+0xac>
 800737a:	887a      	ldrh	r2, [r7, #2]
 800737c:	f240 4324 	movw	r3, #1060	; 0x424
 8007380:	429a      	cmp	r2, r3
 8007382:	d011      	beq.n	80073a8 <USART_ITConfig+0xac>
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	f640 0346 	movw	r3, #2118	; 0x846
 800738a:	429a      	cmp	r2, r3
 800738c:	d00c      	beq.n	80073a8 <USART_ITConfig+0xac>
 800738e:	887a      	ldrh	r2, [r7, #2]
 8007390:	f640 136a 	movw	r3, #2410	; 0x96a
 8007394:	429a      	cmp	r2, r3
 8007396:	d007      	beq.n	80073a8 <USART_ITConfig+0xac>
 8007398:	887b      	ldrh	r3, [r7, #2]
 800739a:	2b60      	cmp	r3, #96	; 0x60
 800739c:	d004      	beq.n	80073a8 <USART_ITConfig+0xac>
 800739e:	4835      	ldr	r0, [pc, #212]	; (8007474 <USART_ITConfig+0x178>)
 80073a0:	f240 41be 	movw	r1, #1214	; 0x4be
 80073a4:	f7fb fa5e 	bl	8002864 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80073a8:	787b      	ldrb	r3, [r7, #1]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <USART_ITConfig+0xc2>
 80073ae:	787b      	ldrb	r3, [r7, #1]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d004      	beq.n	80073be <USART_ITConfig+0xc2>
 80073b4:	482f      	ldr	r0, [pc, #188]	; (8007474 <USART_ITConfig+0x178>)
 80073b6:	f240 41bf 	movw	r1, #1215	; 0x4bf
 80073ba:	f7fb fa53 	bl	8002864 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 80073be:	887a      	ldrh	r2, [r7, #2]
 80073c0:	f640 136a 	movw	r3, #2410	; 0x96a
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d114      	bne.n	80073f2 <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4b24      	ldr	r3, [pc, #144]	; (800745c <USART_ITConfig+0x160>)
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d010      	beq.n	80073f2 <USART_ITConfig+0xf6>
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	4b23      	ldr	r3, [pc, #140]	; (8007460 <USART_ITConfig+0x164>)
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d00c      	beq.n	80073f2 <USART_ITConfig+0xf6>
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	4b22      	ldr	r3, [pc, #136]	; (8007464 <USART_ITConfig+0x168>)
 80073dc:	429a      	cmp	r2, r3
 80073de:	d008      	beq.n	80073f2 <USART_ITConfig+0xf6>
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	4b23      	ldr	r3, [pc, #140]	; (8007470 <USART_ITConfig+0x174>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d004      	beq.n	80073f2 <USART_ITConfig+0xf6>
 80073e8:	4822      	ldr	r0, [pc, #136]	; (8007474 <USART_ITConfig+0x178>)
 80073ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80073ee:	f7fb fa39 	bl	8002864 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80073f6:	887b      	ldrh	r3, [r7, #2]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8007400:	887b      	ldrh	r3, [r7, #2]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d103      	bne.n	8007420 <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	330c      	adds	r3, #12
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	e009      	b.n	8007434 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d103      	bne.n	800742e <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	3310      	adds	r3, #16
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	e002      	b.n	8007434 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	3314      	adds	r3, #20
 8007432:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8007434:	787b      	ldrb	r3, [r7, #1]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d006      	beq.n	8007448 <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	6811      	ldr	r1, [r2, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	430a      	orrs	r2, r1
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e006      	b.n	8007456 <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	6811      	ldr	r1, [r2, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	43d2      	mvns	r2, r2
 8007452:	400a      	ands	r2, r1
 8007454:	601a      	str	r2, [r3, #0]
  }
}
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40011000 	.word	0x40011000
 8007460:	40004400 	.word	0x40004400
 8007464:	40004800 	.word	0x40004800
 8007468:	40004c00 	.word	0x40004c00
 800746c:	40005000 	.word	0x40005000
 8007470:	40011400 	.word	0x40011400
 8007474:	080081bc 	.word	0x080081bc

08007478 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8007490:	2300      	movs	r3, #0
 8007492:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	4b5c      	ldr	r3, [pc, #368]	; (8007608 <USART_GetITStatus+0x190>)
 8007498:	429a      	cmp	r2, r3
 800749a:	d018      	beq.n	80074ce <USART_GetITStatus+0x56>
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4b5b      	ldr	r3, [pc, #364]	; (800760c <USART_GetITStatus+0x194>)
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d014      	beq.n	80074ce <USART_GetITStatus+0x56>
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4b5a      	ldr	r3, [pc, #360]	; (8007610 <USART_GetITStatus+0x198>)
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d010      	beq.n	80074ce <USART_GetITStatus+0x56>
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4b59      	ldr	r3, [pc, #356]	; (8007614 <USART_GetITStatus+0x19c>)
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d00c      	beq.n	80074ce <USART_GetITStatus+0x56>
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	4b58      	ldr	r3, [pc, #352]	; (8007618 <USART_GetITStatus+0x1a0>)
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d008      	beq.n	80074ce <USART_GetITStatus+0x56>
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	4b57      	ldr	r3, [pc, #348]	; (800761c <USART_GetITStatus+0x1a4>)
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d004      	beq.n	80074ce <USART_GetITStatus+0x56>
 80074c4:	4856      	ldr	r0, [pc, #344]	; (8007620 <USART_GetITStatus+0x1a8>)
 80074c6:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 80074ca:	f7fb f9cb 	bl	8002864 <assert_failed>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 80074ce:	887b      	ldrh	r3, [r7, #2]
 80074d0:	2b28      	cmp	r3, #40	; 0x28
 80074d2:	d037      	beq.n	8007544 <USART_GetITStatus+0xcc>
 80074d4:	887a      	ldrh	r2, [r7, #2]
 80074d6:	f240 7327 	movw	r3, #1831	; 0x727
 80074da:	429a      	cmp	r2, r3
 80074dc:	d032      	beq.n	8007544 <USART_GetITStatus+0xcc>
 80074de:	887a      	ldrh	r2, [r7, #2]
 80074e0:	f240 6326 	movw	r3, #1574	; 0x626
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d02d      	beq.n	8007544 <USART_GetITStatus+0xcc>
 80074e8:	887a      	ldrh	r2, [r7, #2]
 80074ea:	f240 5325 	movw	r3, #1317	; 0x525
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d028      	beq.n	8007544 <USART_GetITStatus+0xcc>
 80074f2:	887a      	ldrh	r2, [r7, #2]
 80074f4:	f240 4324 	movw	r3, #1060	; 0x424
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d023      	beq.n	8007544 <USART_GetITStatus+0xcc>
 80074fc:	887a      	ldrh	r2, [r7, #2]
 80074fe:	f640 0346 	movw	r3, #2118	; 0x846
 8007502:	429a      	cmp	r2, r3
 8007504:	d01e      	beq.n	8007544 <USART_GetITStatus+0xcc>
 8007506:	887a      	ldrh	r2, [r7, #2]
 8007508:	f640 136a 	movw	r3, #2410	; 0x96a
 800750c:	429a      	cmp	r2, r3
 800750e:	d019      	beq.n	8007544 <USART_GetITStatus+0xcc>
 8007510:	887b      	ldrh	r3, [r7, #2]
 8007512:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007516:	d015      	beq.n	8007544 <USART_GetITStatus+0xcc>
 8007518:	887a      	ldrh	r2, [r7, #2]
 800751a:	f240 3325 	movw	r3, #805	; 0x325
 800751e:	429a      	cmp	r2, r3
 8007520:	d010      	beq.n	8007544 <USART_GetITStatus+0xcc>
 8007522:	887b      	ldrh	r3, [r7, #2]
 8007524:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007528:	d00c      	beq.n	8007544 <USART_GetITStatus+0xcc>
 800752a:	887b      	ldrh	r3, [r7, #2]
 800752c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8007530:	d008      	beq.n	8007544 <USART_GetITStatus+0xcc>
 8007532:	887b      	ldrh	r3, [r7, #2]
 8007534:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8007538:	d004      	beq.n	8007544 <USART_GetITStatus+0xcc>
 800753a:	4839      	ldr	r0, [pc, #228]	; (8007620 <USART_GetITStatus+0x1a8>)
 800753c:	f240 5151 	movw	r1, #1361	; 0x551
 8007540:	f7fb f990 	bl	8002864 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 8007544:	887a      	ldrh	r2, [r7, #2]
 8007546:	f640 136a 	movw	r3, #2410	; 0x96a
 800754a:	429a      	cmp	r2, r3
 800754c:	d114      	bne.n	8007578 <USART_GetITStatus+0x100>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4b2d      	ldr	r3, [pc, #180]	; (8007608 <USART_GetITStatus+0x190>)
 8007552:	429a      	cmp	r2, r3
 8007554:	d010      	beq.n	8007578 <USART_GetITStatus+0x100>
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4b2c      	ldr	r3, [pc, #176]	; (800760c <USART_GetITStatus+0x194>)
 800755a:	429a      	cmp	r2, r3
 800755c:	d00c      	beq.n	8007578 <USART_GetITStatus+0x100>
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	4b2b      	ldr	r3, [pc, #172]	; (8007610 <USART_GetITStatus+0x198>)
 8007562:	429a      	cmp	r2, r3
 8007564:	d008      	beq.n	8007578 <USART_GetITStatus+0x100>
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4b2c      	ldr	r3, [pc, #176]	; (800761c <USART_GetITStatus+0x1a4>)
 800756a:	429a      	cmp	r2, r3
 800756c:	d004      	beq.n	8007578 <USART_GetITStatus+0x100>
 800756e:	482c      	ldr	r0, [pc, #176]	; (8007620 <USART_GetITStatus+0x1a8>)
 8007570:	f240 5156 	movw	r1, #1366	; 0x556
 8007574:	f7fb f976 	bl	8002864 <assert_failed>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	b2db      	uxtb	r3, r3
 8007580:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2201      	movs	r2, #1
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d106      	bne.n	80075a8 <USART_GetITStatus+0x130>
  {
    itmask &= USARTx->CR1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	899b      	ldrh	r3, [r3, #12]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4013      	ands	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e00f      	b.n	80075c8 <USART_GetITStatus+0x150>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d106      	bne.n	80075bc <USART_GetITStatus+0x144>
  {
    itmask &= USARTx->CR2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8a1b      	ldrh	r3, [r3, #16]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4013      	ands	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e005      	b.n	80075c8 <USART_GetITStatus+0x150>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8a9b      	ldrh	r3, [r3, #20]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4013      	ands	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	fa02 f303 	lsl.w	r3, r2, r3
 80075d8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4013      	ands	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <USART_GetITStatus+0x180>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <USART_GetITStatus+0x180>
  {
    bitstatus = SET;
 80075f2:	2301      	movs	r3, #1
 80075f4:	74fb      	strb	r3, [r7, #19]
 80075f6:	e001      	b.n	80075fc <USART_GetITStatus+0x184>
  }
  else
  {
    bitstatus = RESET;
 80075f8:	2300      	movs	r3, #0
 80075fa:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80075fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40011000 	.word	0x40011000
 800760c:	40004400 	.word	0x40004400
 8007610:	40004800 	.word	0x40004800
 8007614:	40004c00 	.word	0x40004c00
 8007618:	40005000 	.word	0x40005000
 800761c:	40011400 	.word	0x40011400
 8007620:	080081bc 	.word	0x080081bc

08007624 <atoi>:
 8007624:	2100      	movs	r1, #0
 8007626:	220a      	movs	r2, #10
 8007628:	f000 ba4a 	b.w	8007ac0 <strtol>

0800762c <__libc_init_array>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	4e0f      	ldr	r6, [pc, #60]	; (800766c <__libc_init_array+0x40>)
 8007630:	4d0f      	ldr	r5, [pc, #60]	; (8007670 <__libc_init_array+0x44>)
 8007632:	1b76      	subs	r6, r6, r5
 8007634:	10b6      	asrs	r6, r6, #2
 8007636:	d007      	beq.n	8007648 <__libc_init_array+0x1c>
 8007638:	3d04      	subs	r5, #4
 800763a:	2400      	movs	r4, #0
 800763c:	3401      	adds	r4, #1
 800763e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007642:	4798      	blx	r3
 8007644:	42a6      	cmp	r6, r4
 8007646:	d1f9      	bne.n	800763c <__libc_init_array+0x10>
 8007648:	4e0a      	ldr	r6, [pc, #40]	; (8007674 <__libc_init_array+0x48>)
 800764a:	4d0b      	ldr	r5, [pc, #44]	; (8007678 <__libc_init_array+0x4c>)
 800764c:	1b76      	subs	r6, r6, r5
 800764e:	f000 fe7f 	bl	8008350 <_init>
 8007652:	10b6      	asrs	r6, r6, #2
 8007654:	d008      	beq.n	8007668 <__libc_init_array+0x3c>
 8007656:	3d04      	subs	r5, #4
 8007658:	2400      	movs	r4, #0
 800765a:	3401      	adds	r4, #1
 800765c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007660:	4798      	blx	r3
 8007662:	42a6      	cmp	r6, r4
 8007664:	d1f9      	bne.n	800765a <__libc_init_array+0x2e>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	bd70      	pop	{r4, r5, r6, pc}
 800766a:	bf00      	nop
 800766c:	08008368 	.word	0x08008368
 8007670:	08008368 	.word	0x08008368
 8007674:	08008370 	.word	0x08008370
 8007678:	08008368 	.word	0x08008368

0800767c <memcmp>:
 800767c:	2a03      	cmp	r2, #3
 800767e:	b470      	push	{r4, r5, r6}
 8007680:	d928      	bls.n	80076d4 <memcmp+0x58>
 8007682:	ea40 0301 	orr.w	r3, r0, r1
 8007686:	079b      	lsls	r3, r3, #30
 8007688:	d013      	beq.n	80076b2 <memcmp+0x36>
 800768a:	7805      	ldrb	r5, [r0, #0]
 800768c:	780c      	ldrb	r4, [r1, #0]
 800768e:	42a5      	cmp	r5, r4
 8007690:	d124      	bne.n	80076dc <memcmp+0x60>
 8007692:	3a01      	subs	r2, #1
 8007694:	2300      	movs	r3, #0
 8007696:	e005      	b.n	80076a4 <memcmp+0x28>
 8007698:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800769c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076a0:	42a5      	cmp	r5, r4
 80076a2:	d11b      	bne.n	80076dc <memcmp+0x60>
 80076a4:	4293      	cmp	r3, r2
 80076a6:	f103 0301 	add.w	r3, r3, #1
 80076aa:	d1f5      	bne.n	8007698 <memcmp+0x1c>
 80076ac:	2000      	movs	r0, #0
 80076ae:	bc70      	pop	{r4, r5, r6}
 80076b0:	4770      	bx	lr
 80076b2:	460c      	mov	r4, r1
 80076b4:	4603      	mov	r3, r0
 80076b6:	6825      	ldr	r5, [r4, #0]
 80076b8:	681e      	ldr	r6, [r3, #0]
 80076ba:	42ae      	cmp	r6, r5
 80076bc:	4621      	mov	r1, r4
 80076be:	4618      	mov	r0, r3
 80076c0:	f104 0404 	add.w	r4, r4, #4
 80076c4:	f103 0304 	add.w	r3, r3, #4
 80076c8:	d104      	bne.n	80076d4 <memcmp+0x58>
 80076ca:	3a04      	subs	r2, #4
 80076cc:	2a03      	cmp	r2, #3
 80076ce:	4618      	mov	r0, r3
 80076d0:	4621      	mov	r1, r4
 80076d2:	d8f0      	bhi.n	80076b6 <memcmp+0x3a>
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	d1d8      	bne.n	800768a <memcmp+0xe>
 80076d8:	4610      	mov	r0, r2
 80076da:	e7e8      	b.n	80076ae <memcmp+0x32>
 80076dc:	1b28      	subs	r0, r5, r4
 80076de:	bc70      	pop	{r4, r5, r6}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop

080076e4 <memset>:
 80076e4:	b4f0      	push	{r4, r5, r6, r7}
 80076e6:	0784      	lsls	r4, r0, #30
 80076e8:	d043      	beq.n	8007772 <memset+0x8e>
 80076ea:	1e54      	subs	r4, r2, #1
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	d03e      	beq.n	800776e <memset+0x8a>
 80076f0:	b2cd      	uxtb	r5, r1
 80076f2:	4603      	mov	r3, r0
 80076f4:	e003      	b.n	80076fe <memset+0x1a>
 80076f6:	1e62      	subs	r2, r4, #1
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	d038      	beq.n	800776e <memset+0x8a>
 80076fc:	4614      	mov	r4, r2
 80076fe:	f803 5b01 	strb.w	r5, [r3], #1
 8007702:	079a      	lsls	r2, r3, #30
 8007704:	d1f7      	bne.n	80076f6 <memset+0x12>
 8007706:	2c03      	cmp	r4, #3
 8007708:	d92a      	bls.n	8007760 <memset+0x7c>
 800770a:	b2cd      	uxtb	r5, r1
 800770c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007710:	2c0f      	cmp	r4, #15
 8007712:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007716:	d915      	bls.n	8007744 <memset+0x60>
 8007718:	f1a4 0710 	sub.w	r7, r4, #16
 800771c:	093f      	lsrs	r7, r7, #4
 800771e:	f103 0610 	add.w	r6, r3, #16
 8007722:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8007726:	461a      	mov	r2, r3
 8007728:	6015      	str	r5, [r2, #0]
 800772a:	6055      	str	r5, [r2, #4]
 800772c:	6095      	str	r5, [r2, #8]
 800772e:	60d5      	str	r5, [r2, #12]
 8007730:	3210      	adds	r2, #16
 8007732:	42b2      	cmp	r2, r6
 8007734:	d1f8      	bne.n	8007728 <memset+0x44>
 8007736:	f004 040f 	and.w	r4, r4, #15
 800773a:	3701      	adds	r7, #1
 800773c:	2c03      	cmp	r4, #3
 800773e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8007742:	d90d      	bls.n	8007760 <memset+0x7c>
 8007744:	461e      	mov	r6, r3
 8007746:	4622      	mov	r2, r4
 8007748:	3a04      	subs	r2, #4
 800774a:	2a03      	cmp	r2, #3
 800774c:	f846 5b04 	str.w	r5, [r6], #4
 8007750:	d8fa      	bhi.n	8007748 <memset+0x64>
 8007752:	1f22      	subs	r2, r4, #4
 8007754:	f022 0203 	bic.w	r2, r2, #3
 8007758:	3204      	adds	r2, #4
 800775a:	4413      	add	r3, r2
 800775c:	f004 0403 	and.w	r4, r4, #3
 8007760:	b12c      	cbz	r4, 800776e <memset+0x8a>
 8007762:	b2c9      	uxtb	r1, r1
 8007764:	441c      	add	r4, r3
 8007766:	f803 1b01 	strb.w	r1, [r3], #1
 800776a:	42a3      	cmp	r3, r4
 800776c:	d1fb      	bne.n	8007766 <memset+0x82>
 800776e:	bcf0      	pop	{r4, r5, r6, r7}
 8007770:	4770      	bx	lr
 8007772:	4614      	mov	r4, r2
 8007774:	4603      	mov	r3, r0
 8007776:	e7c6      	b.n	8007706 <memset+0x22>

08007778 <strcpy>:
 8007778:	ea80 0201 	eor.w	r2, r0, r1
 800777c:	4684      	mov	ip, r0
 800777e:	f012 0f03 	tst.w	r2, #3
 8007782:	d14f      	bne.n	8007824 <strcpy+0xac>
 8007784:	f011 0f03 	tst.w	r1, #3
 8007788:	d132      	bne.n	80077f0 <strcpy+0x78>
 800778a:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800778e:	f011 0f04 	tst.w	r1, #4
 8007792:	f851 3b04 	ldr.w	r3, [r1], #4
 8007796:	d00b      	beq.n	80077b0 <strcpy+0x38>
 8007798:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800779c:	439a      	bics	r2, r3
 800779e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80077a2:	bf04      	itt	eq
 80077a4:	f84c 3b04 	streq.w	r3, [ip], #4
 80077a8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80077ac:	d116      	bne.n	80077dc <strcpy+0x64>
 80077ae:	bf00      	nop
 80077b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80077b4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80077b8:	439a      	bics	r2, r3
 80077ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80077be:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80077c2:	d10b      	bne.n	80077dc <strcpy+0x64>
 80077c4:	f84c 3b04 	str.w	r3, [ip], #4
 80077c8:	43a2      	bics	r2, r4
 80077ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80077ce:	bf04      	itt	eq
 80077d0:	f851 3b04 	ldreq.w	r3, [r1], #4
 80077d4:	f84c 4b04 	streq.w	r4, [ip], #4
 80077d8:	d0ea      	beq.n	80077b0 <strcpy+0x38>
 80077da:	4623      	mov	r3, r4
 80077dc:	f80c 3b01 	strb.w	r3, [ip], #1
 80077e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80077e8:	d1f8      	bne.n	80077dc <strcpy+0x64>
 80077ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	f011 0f01 	tst.w	r1, #1
 80077f4:	d006      	beq.n	8007804 <strcpy+0x8c>
 80077f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077fa:	f80c 2b01 	strb.w	r2, [ip], #1
 80077fe:	2a00      	cmp	r2, #0
 8007800:	bf08      	it	eq
 8007802:	4770      	bxeq	lr
 8007804:	f011 0f02 	tst.w	r1, #2
 8007808:	d0bf      	beq.n	800778a <strcpy+0x12>
 800780a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800780e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8007812:	bf16      	itet	ne
 8007814:	f82c 2b02 	strhne.w	r2, [ip], #2
 8007818:	f88c 2000 	strbeq.w	r2, [ip]
 800781c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8007820:	d1b3      	bne.n	800778a <strcpy+0x12>
 8007822:	4770      	bx	lr
 8007824:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007828:	f80c 2b01 	strb.w	r2, [ip], #1
 800782c:	2a00      	cmp	r2, #0
 800782e:	d1f9      	bne.n	8007824 <strcpy+0xac>
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop

08007834 <strlen>:
 8007834:	f020 0103 	bic.w	r1, r0, #3
 8007838:	f010 0003 	ands.w	r0, r0, #3
 800783c:	f1c0 0000 	rsb	r0, r0, #0
 8007840:	f851 3b04 	ldr.w	r3, [r1], #4
 8007844:	f100 0c04 	add.w	ip, r0, #4
 8007848:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800784c:	f06f 0200 	mvn.w	r2, #0
 8007850:	bf1c      	itt	ne
 8007852:	fa22 f20c 	lsrne.w	r2, r2, ip
 8007856:	4313      	orrne	r3, r2
 8007858:	f04f 0c01 	mov.w	ip, #1
 800785c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007860:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007864:	eba3 020c 	sub.w	r2, r3, ip
 8007868:	ea22 0203 	bic.w	r2, r2, r3
 800786c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007870:	bf04      	itt	eq
 8007872:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007876:	3004      	addeq	r0, #4
 8007878:	d0f4      	beq.n	8007864 <strlen+0x30>
 800787a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800787e:	bf1f      	itttt	ne
 8007880:	3001      	addne	r0, #1
 8007882:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007886:	3001      	addne	r0, #1
 8007888:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800788c:	bf18      	it	ne
 800788e:	3001      	addne	r0, #1
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop

08007894 <strncmp>:
 8007894:	b430      	push	{r4, r5}
 8007896:	2a00      	cmp	r2, #0
 8007898:	d04a      	beq.n	8007930 <strncmp+0x9c>
 800789a:	ea40 0301 	orr.w	r3, r0, r1
 800789e:	f013 0303 	ands.w	r3, r3, #3
 80078a2:	d12d      	bne.n	8007900 <strncmp+0x6c>
 80078a4:	2a03      	cmp	r2, #3
 80078a6:	d92b      	bls.n	8007900 <strncmp+0x6c>
 80078a8:	6804      	ldr	r4, [r0, #0]
 80078aa:	680d      	ldr	r5, [r1, #0]
 80078ac:	42ac      	cmp	r4, r5
 80078ae:	d127      	bne.n	8007900 <strncmp+0x6c>
 80078b0:	3a04      	subs	r2, #4
 80078b2:	d03d      	beq.n	8007930 <strncmp+0x9c>
 80078b4:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80078b8:	ea25 0404 	bic.w	r4, r5, r4
 80078bc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80078c0:	d13c      	bne.n	800793c <strncmp+0xa8>
 80078c2:	460c      	mov	r4, r1
 80078c4:	4603      	mov	r3, r0
 80078c6:	e00e      	b.n	80078e6 <strncmp+0x52>
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	6864      	ldr	r4, [r4, #4]
 80078cc:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	ea25 0503 	bic.w	r5, r5, r3
 80078d6:	d113      	bne.n	8007900 <strncmp+0x6c>
 80078d8:	3a04      	subs	r2, #4
 80078da:	d029      	beq.n	8007930 <strncmp+0x9c>
 80078dc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 80078e0:	d129      	bne.n	8007936 <strncmp+0xa2>
 80078e2:	4603      	mov	r3, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	2a03      	cmp	r2, #3
 80078e8:	f100 0004 	add.w	r0, r0, #4
 80078ec:	f101 0104 	add.w	r1, r1, #4
 80078f0:	d8ea      	bhi.n	80078c8 <strncmp+0x34>
 80078f2:	1e55      	subs	r5, r2, #1
 80078f4:	b92a      	cbnz	r2, 8007902 <strncmp+0x6e>
 80078f6:	7918      	ldrb	r0, [r3, #4]
 80078f8:	7922      	ldrb	r2, [r4, #4]
 80078fa:	1a80      	subs	r0, r0, r2
 80078fc:	bc30      	pop	{r4, r5}
 80078fe:	4770      	bx	lr
 8007900:	1e55      	subs	r5, r2, #1
 8007902:	7803      	ldrb	r3, [r0, #0]
 8007904:	780a      	ldrb	r2, [r1, #0]
 8007906:	4293      	cmp	r3, r2
 8007908:	d11a      	bne.n	8007940 <strncmp+0xac>
 800790a:	b1dd      	cbz	r5, 8007944 <strncmp+0xb0>
 800790c:	b1b3      	cbz	r3, 800793c <strncmp+0xa8>
 800790e:	1c6c      	adds	r4, r5, #1
 8007910:	440c      	add	r4, r1
 8007912:	1c8b      	adds	r3, r1, #2
 8007914:	4601      	mov	r1, r0
 8007916:	e004      	b.n	8007922 <strncmp+0x8e>
 8007918:	42a3      	cmp	r3, r4
 800791a:	d00c      	beq.n	8007936 <strncmp+0xa2>
 800791c:	3301      	adds	r3, #1
 800791e:	2800      	cmp	r0, #0
 8007920:	d0ec      	beq.n	80078fc <strncmp+0x68>
 8007922:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007926:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800792a:	4290      	cmp	r0, r2
 800792c:	d0f4      	beq.n	8007918 <strncmp+0x84>
 800792e:	e7e4      	b.n	80078fa <strncmp+0x66>
 8007930:	4610      	mov	r0, r2
 8007932:	bc30      	pop	{r4, r5}
 8007934:	4770      	bx	lr
 8007936:	2000      	movs	r0, #0
 8007938:	bc30      	pop	{r4, r5}
 800793a:	4770      	bx	lr
 800793c:	4618      	mov	r0, r3
 800793e:	e7dd      	b.n	80078fc <strncmp+0x68>
 8007940:	4618      	mov	r0, r3
 8007942:	e7da      	b.n	80078fa <strncmp+0x66>
 8007944:	4628      	mov	r0, r5
 8007946:	e7d9      	b.n	80078fc <strncmp+0x68>

08007948 <strncpy>:
 8007948:	ea40 0301 	orr.w	r3, r0, r1
 800794c:	079b      	lsls	r3, r3, #30
 800794e:	b470      	push	{r4, r5, r6}
 8007950:	d12a      	bne.n	80079a8 <strncpy+0x60>
 8007952:	2a03      	cmp	r2, #3
 8007954:	d928      	bls.n	80079a8 <strncpy+0x60>
 8007956:	460c      	mov	r4, r1
 8007958:	4603      	mov	r3, r0
 800795a:	4621      	mov	r1, r4
 800795c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007960:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8007964:	ea26 0605 	bic.w	r6, r6, r5
 8007968:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800796c:	d105      	bne.n	800797a <strncpy+0x32>
 800796e:	3a04      	subs	r2, #4
 8007970:	2a03      	cmp	r2, #3
 8007972:	f843 5b04 	str.w	r5, [r3], #4
 8007976:	4621      	mov	r1, r4
 8007978:	d8ef      	bhi.n	800795a <strncpy+0x12>
 800797a:	b19a      	cbz	r2, 80079a4 <strncpy+0x5c>
 800797c:	780c      	ldrb	r4, [r1, #0]
 800797e:	701c      	strb	r4, [r3, #0]
 8007980:	3a01      	subs	r2, #1
 8007982:	3301      	adds	r3, #1
 8007984:	b13c      	cbz	r4, 8007996 <strncpy+0x4e>
 8007986:	b16a      	cbz	r2, 80079a4 <strncpy+0x5c>
 8007988:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800798c:	f803 4b01 	strb.w	r4, [r3], #1
 8007990:	3a01      	subs	r2, #1
 8007992:	2c00      	cmp	r4, #0
 8007994:	d1f7      	bne.n	8007986 <strncpy+0x3e>
 8007996:	b12a      	cbz	r2, 80079a4 <strncpy+0x5c>
 8007998:	441a      	add	r2, r3
 800799a:	2100      	movs	r1, #0
 800799c:	f803 1b01 	strb.w	r1, [r3], #1
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d1fb      	bne.n	800799c <strncpy+0x54>
 80079a4:	bc70      	pop	{r4, r5, r6}
 80079a6:	4770      	bx	lr
 80079a8:	4603      	mov	r3, r0
 80079aa:	e7e6      	b.n	800797a <strncpy+0x32>

080079ac <_strtol_r>:
 80079ac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079b0:	4c42      	ldr	r4, [pc, #264]	; (8007abc <_strtol_r+0x110>)
 80079b2:	b082      	sub	sp, #8
 80079b4:	f8d4 c000 	ldr.w	ip, [r4]
 80079b8:	9001      	str	r0, [sp, #4]
 80079ba:	460e      	mov	r6, r1
 80079bc:	e000      	b.n	80079c0 <_strtol_r+0x14>
 80079be:	4626      	mov	r6, r4
 80079c0:	4634      	mov	r4, r6
 80079c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079c6:	eb0c 0005 	add.w	r0, ip, r5
 80079ca:	7840      	ldrb	r0, [r0, #1]
 80079cc:	f000 0008 	and.w	r0, r0, #8
 80079d0:	f000 0aff 	and.w	sl, r0, #255	; 0xff
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d1f2      	bne.n	80079be <_strtol_r+0x12>
 80079d8:	2d2d      	cmp	r5, #45	; 0x2d
 80079da:	d05b      	beq.n	8007a94 <_strtol_r+0xe8>
 80079dc:	2d2b      	cmp	r5, #43	; 0x2b
 80079de:	bf04      	itt	eq
 80079e0:	7875      	ldrbeq	r5, [r6, #1]
 80079e2:	1cb4      	addeq	r4, r6, #2
 80079e4:	f033 0010 	bics.w	r0, r3, #16
 80079e8:	d03c      	beq.n	8007a64 <_strtol_r+0xb8>
 80079ea:	4699      	mov	r9, r3
 80079ec:	f1ba 0f00 	cmp.w	sl, #0
 80079f0:	bf0c      	ite	eq
 80079f2:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
 80079f6:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
 80079fa:	fbbb f8f9 	udiv	r8, fp, r9
 80079fe:	2700      	movs	r7, #0
 8007a00:	fb09 bb18 	mls	fp, r9, r8, fp
 8007a04:	4638      	mov	r0, r7
 8007a06:	e00c      	b.n	8007a22 <_strtol_r+0x76>
 8007a08:	3d30      	subs	r5, #48	; 0x30
 8007a0a:	42ab      	cmp	r3, r5
 8007a0c:	dd19      	ble.n	8007a42 <_strtol_r+0x96>
 8007a0e:	1c7e      	adds	r6, r7, #1
 8007a10:	d005      	beq.n	8007a1e <_strtol_r+0x72>
 8007a12:	4540      	cmp	r0, r8
 8007a14:	d823      	bhi.n	8007a5e <_strtol_r+0xb2>
 8007a16:	d020      	beq.n	8007a5a <_strtol_r+0xae>
 8007a18:	fb09 5000 	mla	r0, r9, r0, r5
 8007a1c:	2701      	movs	r7, #1
 8007a1e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007a22:	eb0c 0605 	add.w	r6, ip, r5
 8007a26:	7876      	ldrb	r6, [r6, #1]
 8007a28:	f016 0f04 	tst.w	r6, #4
 8007a2c:	d1ec      	bne.n	8007a08 <_strtol_r+0x5c>
 8007a2e:	f016 0603 	ands.w	r6, r6, #3
 8007a32:	d006      	beq.n	8007a42 <_strtol_r+0x96>
 8007a34:	2e01      	cmp	r6, #1
 8007a36:	bf14      	ite	ne
 8007a38:	2657      	movne	r6, #87	; 0x57
 8007a3a:	2637      	moveq	r6, #55	; 0x37
 8007a3c:	1bad      	subs	r5, r5, r6
 8007a3e:	42ab      	cmp	r3, r5
 8007a40:	dce5      	bgt.n	8007a0e <_strtol_r+0x62>
 8007a42:	1c7b      	adds	r3, r7, #1
 8007a44:	d015      	beq.n	8007a72 <_strtol_r+0xc6>
 8007a46:	f1ba 0f00 	cmp.w	sl, #0
 8007a4a:	d121      	bne.n	8007a90 <_strtol_r+0xe4>
 8007a4c:	b10a      	cbz	r2, 8007a52 <_strtol_r+0xa6>
 8007a4e:	b9ef      	cbnz	r7, 8007a8c <_strtol_r+0xe0>
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	b002      	add	sp, #8
 8007a54:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a58:	4770      	bx	lr
 8007a5a:	455d      	cmp	r5, fp
 8007a5c:	dddc      	ble.n	8007a18 <_strtol_r+0x6c>
 8007a5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a62:	e7dc      	b.n	8007a1e <_strtol_r+0x72>
 8007a64:	2d30      	cmp	r5, #48	; 0x30
 8007a66:	d01a      	beq.n	8007a9e <_strtol_r+0xf2>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1be      	bne.n	80079ea <_strtol_r+0x3e>
 8007a6c:	230a      	movs	r3, #10
 8007a6e:	4699      	mov	r9, r3
 8007a70:	e7bc      	b.n	80079ec <_strtol_r+0x40>
 8007a72:	9901      	ldr	r1, [sp, #4]
 8007a74:	f1ba 0f00 	cmp.w	sl, #0
 8007a78:	f04f 0322 	mov.w	r3, #34	; 0x22
 8007a7c:	bf0c      	ite	eq
 8007a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007a82:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8007a86:	600b      	str	r3, [r1, #0]
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	d0e2      	beq.n	8007a52 <_strtol_r+0xa6>
 8007a8c:	1e61      	subs	r1, r4, #1
 8007a8e:	e7df      	b.n	8007a50 <_strtol_r+0xa4>
 8007a90:	4240      	negs	r0, r0
 8007a92:	e7db      	b.n	8007a4c <_strtol_r+0xa0>
 8007a94:	1cb4      	adds	r4, r6, #2
 8007a96:	7875      	ldrb	r5, [r6, #1]
 8007a98:	f04f 0a01 	mov.w	sl, #1
 8007a9c:	e7a2      	b.n	80079e4 <_strtol_r+0x38>
 8007a9e:	7820      	ldrb	r0, [r4, #0]
 8007aa0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007aa4:	2858      	cmp	r0, #88	; 0x58
 8007aa6:	d003      	beq.n	8007ab0 <_strtol_r+0x104>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d19e      	bne.n	80079ea <_strtol_r+0x3e>
 8007aac:	2308      	movs	r3, #8
 8007aae:	e79c      	b.n	80079ea <_strtol_r+0x3e>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	7865      	ldrb	r5, [r4, #1]
 8007ab4:	4699      	mov	r9, r3
 8007ab6:	3402      	adds	r4, #2
 8007ab8:	e798      	b.n	80079ec <_strtol_r+0x40>
 8007aba:	bf00      	nop
 8007abc:	2000045c 	.word	0x2000045c

08007ac0 <strtol>:
 8007ac0:	b430      	push	{r4, r5}
 8007ac2:	4c04      	ldr	r4, [pc, #16]	; (8007ad4 <strtol+0x14>)
 8007ac4:	460d      	mov	r5, r1
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	4601      	mov	r1, r0
 8007aca:	462a      	mov	r2, r5
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	bc30      	pop	{r4, r5}
 8007ad0:	f7ff bf6c 	b.w	80079ac <_strtol_r>
 8007ad4:	20000458 	.word	0x20000458

08007ad8 <register_fini>:
 8007ad8:	4b02      	ldr	r3, [pc, #8]	; (8007ae4 <register_fini+0xc>)
 8007ada:	b113      	cbz	r3, 8007ae2 <register_fini+0xa>
 8007adc:	4802      	ldr	r0, [pc, #8]	; (8007ae8 <register_fini+0x10>)
 8007ade:	f000 b805 	b.w	8007aec <atexit>
 8007ae2:	4770      	bx	lr
 8007ae4:	00000000 	.word	0x00000000
 8007ae8:	08007af9 	.word	0x08007af9

08007aec <atexit>:
 8007aec:	4601      	mov	r1, r0
 8007aee:	2000      	movs	r0, #0
 8007af0:	4602      	mov	r2, r0
 8007af2:	4603      	mov	r3, r0
 8007af4:	f000 b818 	b.w	8007b28 <__register_exitproc>

08007af8 <__libc_fini_array>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d09      	ldr	r5, [pc, #36]	; (8007b20 <__libc_fini_array+0x28>)
 8007afc:	4c09      	ldr	r4, [pc, #36]	; (8007b24 <__libc_fini_array+0x2c>)
 8007afe:	1b64      	subs	r4, r4, r5
 8007b00:	10a4      	asrs	r4, r4, #2
 8007b02:	bf18      	it	ne
 8007b04:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8007b08:	d005      	beq.n	8007b16 <__libc_fini_array+0x1e>
 8007b0a:	3c01      	subs	r4, #1
 8007b0c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b10:	4798      	blx	r3
 8007b12:	2c00      	cmp	r4, #0
 8007b14:	d1f9      	bne.n	8007b0a <__libc_fini_array+0x12>
 8007b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b1a:	f000 bc1f 	b.w	800835c <_fini>
 8007b1e:	bf00      	nop
 8007b20:	08008370 	.word	0x08008370
 8007b24:	08008374 	.word	0x08008374

08007b28 <__register_exitproc>:
 8007b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b2a:	4c27      	ldr	r4, [pc, #156]	; (8007bc8 <__register_exitproc+0xa0>)
 8007b2c:	6826      	ldr	r6, [r4, #0]
 8007b2e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8007b32:	b085      	sub	sp, #20
 8007b34:	4607      	mov	r7, r0
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	d041      	beq.n	8007bbe <__register_exitproc+0x96>
 8007b3a:	6865      	ldr	r5, [r4, #4]
 8007b3c:	2d1f      	cmp	r5, #31
 8007b3e:	dd1e      	ble.n	8007b7e <__register_exitproc+0x56>
 8007b40:	4822      	ldr	r0, [pc, #136]	; (8007bcc <__register_exitproc+0xa4>)
 8007b42:	b918      	cbnz	r0, 8007b4c <__register_exitproc+0x24>
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b48:	b005      	add	sp, #20
 8007b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007b50:	9103      	str	r1, [sp, #12]
 8007b52:	9202      	str	r2, [sp, #8]
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	f3af 8000 	nop.w
 8007b5a:	9903      	ldr	r1, [sp, #12]
 8007b5c:	9a02      	ldr	r2, [sp, #8]
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	4604      	mov	r4, r0
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0ee      	beq.n	8007b44 <__register_exitproc+0x1c>
 8007b66:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8007b6a:	6025      	str	r5, [r4, #0]
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	6060      	str	r0, [r4, #4]
 8007b70:	4605      	mov	r5, r0
 8007b72:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8007b76:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8007b7a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8007b7e:	b93f      	cbnz	r7, 8007b90 <__register_exitproc+0x68>
 8007b80:	1cab      	adds	r3, r5, #2
 8007b82:	2000      	movs	r0, #0
 8007b84:	3501      	adds	r5, #1
 8007b86:	6065      	str	r5, [r4, #4]
 8007b88:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8007b8c:	b005      	add	sp, #20
 8007b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b90:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8007b94:	f04f 0c01 	mov.w	ip, #1
 8007b98:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8007b9c:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8007ba0:	fa0c f205 	lsl.w	r2, ip, r5
 8007ba4:	4316      	orrs	r6, r2
 8007ba6:	2f02      	cmp	r7, #2
 8007ba8:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8007bac:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8007bb0:	d1e6      	bne.n	8007b80 <__register_exitproc+0x58>
 8007bb2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8007bbc:	e7e0      	b.n	8007b80 <__register_exitproc+0x58>
 8007bbe:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8007bc2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8007bc6:	e7b8      	b.n	8007b3a <__register_exitproc+0x12>
 8007bc8:	08008248 	.word	0x08008248
 8007bcc:	00000000 	.word	0x00000000
 8007bd0:	ccbbaadd 	.word	0xccbbaadd
 8007bd4:	00002211 	.word	0x00002211
 8007bd8:	0800a8c0 	.word	0x0800a8c0
 8007bdc:	00ffffff 	.word	0x00ffffff
 8007be0:	0100a8c0 	.word	0x0100a8c0
 8007be4:	6f746f6d 	.word	0x6f746f6d
 8007be8:	00000072 	.word	0x00000072
 8007bec:	6f746f6d 	.word	0x6f746f6d
 8007bf0:	5b202072 	.word	0x5b202072
 8007bf4:	6974706f 	.word	0x6974706f
 8007bf8:	5d736e6f 	.word	0x5d736e6f
 8007bfc:	705ba0c2 	.word	0x705ba0c2
 8007c00:	6d617261 	.word	0x6d617261
 8007c04:	72657465 	.word	0x72657465
 8007c08:	a0c25d73 	.word	0xa0c25d73
 8007c0c:	7954202d 	.word	0x7954202d
 8007c10:	6d206570 	.word	0x6d206570
 8007c14:	726f746f 	.word	0x726f746f
 8007c18:	6c656820 	.word	0x6c656820
 8007c1c:	6f662070 	.word	0x6f662070
 8007c20:	6f6d2072 	.word	0x6f6d2072
 8007c24:	68206572 	.word	0x68206572
 8007c28:	0d706c65 	.word	0x0d706c65
 8007c2c:	00000a0a 	.word	0x00000a0a
 8007c30:	65657073 	.word	0x65657073
 8007c34:	00000064 	.word	0x00000064
 8007c38:	6f727245 	.word	0x6f727245
 8007c3c:	73203a72 	.word	0x73203a72
 8007c40:	64656570 	.word	0x64656570
 8007c44:	20736920 	.word	0x20736920
 8007c48:	2074756f 	.word	0x2074756f
 8007c4c:	7220666f 	.word	0x7220666f
 8007c50:	65676e61 	.word	0x65676e61
 8007c54:	2c315b20 	.word	0x2c315b20
 8007c58:	5d303031 	.word	0x5d303031
 8007c5c:	203a2070 	.word	0x203a2070
 8007c60:	0a0a6425 	.word	0x0a0a6425
 8007c64:	00000000 	.word	0x00000000
 8007c68:	65657053 	.word	0x65657053
 8007c6c:	75732064 	.word	0x75732064
 8007c70:	65736363 	.word	0x65736363
 8007c74:	6c756673 	.word	0x6c756673
 8007c78:	7320796c 	.word	0x7320796c
 8007c7c:	0a2e7465 	.word	0x0a2e7465
 8007c80:	0000000a 	.word	0x0000000a
 8007c84:	6f727245 	.word	0x6f727245
 8007c88:	65722072 	.word	0x65722072
 8007c8c:	76656963 	.word	0x76656963
 8007c90:	20676e69 	.word	0x20676e69
 8007c94:	70736572 	.word	0x70736572
 8007c98:	65736e6f 	.word	0x65736e6f
 8007c9c:	000a0a21 	.word	0x000a0a21
 8007ca0:	6f727245 	.word	0x6f727245
 8007ca4:	65732072 	.word	0x65732072
 8007ca8:	6e69646e 	.word	0x6e69646e
 8007cac:	75512067 	.word	0x75512067
 8007cb0:	21657565 	.word	0x21657565
 8007cb4:	00000a0a 	.word	0x00000a0a
 8007cb8:	61727075 	.word	0x61727075
 8007cbc:	0000706d 	.word	0x0000706d
 8007cc0:	6e776f64 	.word	0x6e776f64
 8007cc4:	706d6172 	.word	0x706d6172
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	72727245 	.word	0x72727245
 8007cd0:	3a20726f 	.word	0x3a20726f
 8007cd4:	0a642520 	.word	0x0a642520
 8007cd8:	0000000a 	.word	0x0000000a
 8007cdc:	00000000 	.word	0x00000000
 8007ce0:	65657053 	.word	0x65657053
 8007ce4:	73692064 	.word	0x73692064
 8007ce8:	32252020 	.word	0x32252020
 8007cec:	32252e64 	.word	0x32252e64
 8007cf0:	0a207064 	.word	0x0a207064
 8007cf4:	0000000a 	.word	0x0000000a
 8007cf8:	66206f54 	.word	0x66206f54
 8007cfc:	61207765 	.word	0x61207765
 8007d00:	6d756772 	.word	0x6d756772
 8007d04:	73746e65 	.word	0x73746e65
 8007d08:	0a0a202e 	.word	0x0a0a202e
 8007d0c:	00000000 	.word	0x00000000
 8007d10:	706c6568 	.word	0x706c6568
 8007d14:	00000000 	.word	0x00000000
 8007d18:	67617355 	.word	0x67617355
 8007d1c:	6e612065 	.word	0x6e612065
 8007d20:	61702064 	.word	0x61702064
 8007d24:	656d6172 	.word	0x656d6172
 8007d28:	73726574 	.word	0x73726574
 8007d2c:	74706f0a 	.word	0x74706f0a
 8007d30:	736e6f69 	.word	0x736e6f69
 8007d34:	67090a3a 	.word	0x67090a3a
 8007d38:	2d207465 	.word	0x2d207465
 8007d3c:	74656720 	.word	0x74656720
 8007d40:	746f6d20 	.word	0x746f6d20
 8007d44:	7020726f 	.word	0x7020726f
 8007d48:	6d617261 	.word	0x6d617261
 8007d4c:	72657465 	.word	0x72657465
 8007d50:	6c617620 	.word	0x6c617620
 8007d54:	090a6575 	.word	0x090a6575
 8007d58:	20746573 	.word	0x20746573
 8007d5c:	6573202d 	.word	0x6573202d
 8007d60:	6f6d2074 	.word	0x6f6d2074
 8007d64:	20726f74 	.word	0x20726f74
 8007d68:	61726170 	.word	0x61726170
 8007d6c:	6574656d 	.word	0x6574656d
 8007d70:	61762072 	.word	0x61762072
 8007d74:	0a65756c 	.word	0x0a65756c
 8007d78:	61747309 	.word	0x61747309
 8007d7c:	2d207472 	.word	0x2d207472
 8007d80:	61747320 	.word	0x61747320
 8007d84:	20737472 	.word	0x20737472
 8007d88:	6f746f6d 	.word	0x6f746f6d
 8007d8c:	73090a72 	.word	0x73090a72
 8007d90:	20706f74 	.word	0x20706f74
 8007d94:	7473202d 	.word	0x7473202d
 8007d98:	2073706f 	.word	0x2073706f
 8007d9c:	6f746f6d 	.word	0x6f746f6d
 8007da0:	61700a72 	.word	0x61700a72
 8007da4:	656d6172 	.word	0x656d6172
 8007da8:	3a737274 	.word	0x3a737274
 8007dac:	7073090a 	.word	0x7073090a
 8007db0:	20646565 	.word	0x20646565
 8007db4:	6573202d 	.word	0x6573202d
 8007db8:	73207374 	.word	0x73207374
 8007dbc:	64656570 	.word	0x64656570
 8007dc0:	7075090a 	.word	0x7075090a
 8007dc4:	706d6172 	.word	0x706d6172
 8007dc8:	6f64090a 	.word	0x6f64090a
 8007dcc:	61726e77 	.word	0x61726e77
 8007dd0:	000a706d 	.word	0x000a706d
 8007dd4:	00000000 	.word	0x00000000
 8007dd8:	00746573 	.word	0x00746573
 8007ddc:	00746567 	.word	0x00746567
 8007de0:	706f7473 	.word	0x706f7473
 8007de4:	00000000 	.word	0x00000000
 8007de8:	6f746f4d 	.word	0x6f746f4d
 8007dec:	75732072 	.word	0x75732072
 8007df0:	65736363 	.word	0x65736363
 8007df4:	6c756673 	.word	0x6c756673
 8007df8:	7320796c 	.word	0x7320796c
 8007dfc:	70706f74 	.word	0x70706f74
 8007e00:	0a2e6465 	.word	0x0a2e6465
 8007e04:	0000000a 	.word	0x0000000a
 8007e08:	72617473 	.word	0x72617473
 8007e0c:	00000074 	.word	0x00000074
 8007e10:	6f746f4d 	.word	0x6f746f4d
 8007e14:	75732072 	.word	0x75732072
 8007e18:	65736363 	.word	0x65736363
 8007e1c:	6c756673 	.word	0x6c756673
 8007e20:	7320796c 	.word	0x7320796c
 8007e24:	74726174 	.word	0x74726174
 8007e28:	0a2e6465 	.word	0x0a2e6465
 8007e2c:	0000000a 	.word	0x0000000a
 8007e30:	6c756e28 	.word	0x6c756e28
 8007e34:	0000296c 	.word	0x0000296c
 8007e38:	6f746f6d 	.word	0x6f746f6d
 8007e3c:	00000072 	.word	0x00000072
 8007e40:	6f746f6d 	.word	0x6f746f6d
 8007e44:	5b202072 	.word	0x5b202072
 8007e48:	6974706f 	.word	0x6974706f
 8007e4c:	5d736e6f 	.word	0x5d736e6f
 8007e50:	705ba0c2 	.word	0x705ba0c2
 8007e54:	6d617261 	.word	0x6d617261
 8007e58:	72657465 	.word	0x72657465
 8007e5c:	a0c25d73 	.word	0xa0c25d73
 8007e60:	7954202d 	.word	0x7954202d
 8007e64:	6d206570 	.word	0x6d206570
 8007e68:	726f746f 	.word	0x726f746f
 8007e6c:	6c656820 	.word	0x6c656820
 8007e70:	6f662070 	.word	0x6f662070
 8007e74:	6f6d2072 	.word	0x6f6d2072
 8007e78:	68206572 	.word	0x68206572
 8007e7c:	0d706c65 	.word	0x0d706c65
 8007e80:	00000a0a 	.word	0x00000a0a
 8007e84:	4d544553 	.word	0x4d544553
 8007e88:	00004341 	.word	0x00004341
 8007e8c:	6f746f6d 	.word	0x6f746f6d
 8007e90:	00004872 	.word	0x00004872
 8007e94:	74696e69 	.word	0x74696e69
 8007e98:	3235575f 	.word	0x3235575f
 8007e9c:	00003030 	.word	0x00003030
 8007ea0:	454c4449 	.word	0x454c4449
 8007ea4:	00000000 	.word	0x00000000
 8007ea8:	20726d54 	.word	0x20726d54
 8007eac:	00637653 	.word	0x00637653
 8007eb0:	706c6568 	.word	0x706c6568
 8007eb4:	00000000 	.word	0x00000000
 8007eb8:	65680a0d 	.word	0x65680a0d
 8007ebc:	0d3a706c 	.word	0x0d3a706c
 8007ec0:	694c200a 	.word	0x694c200a
 8007ec4:	20737473 	.word	0x20737473
 8007ec8:	206c6c61 	.word	0x206c6c61
 8007ecc:	20656874 	.word	0x20656874
 8007ed0:	69676572 	.word	0x69676572
 8007ed4:	72657473 	.word	0x72657473
 8007ed8:	63206465 	.word	0x63206465
 8007edc:	616d6d6f 	.word	0x616d6d6f
 8007ee0:	0d73646e 	.word	0x0d73646e
 8007ee4:	000a0d0a 	.word	0x000a0d0a
 8007ee8:	6f636e49 	.word	0x6f636e49
 8007eec:	63657272 	.word	0x63657272
 8007ef0:	6f632074 	.word	0x6f632074
 8007ef4:	6e616d6d 	.word	0x6e616d6d
 8007ef8:	61702064 	.word	0x61702064
 8007efc:	656d6172 	.word	0x656d6172
 8007f00:	28726574 	.word	0x28726574
 8007f04:	202e2973 	.word	0x202e2973
 8007f08:	746e4520 	.word	0x746e4520
 8007f0c:	22207265 	.word	0x22207265
 8007f10:	706c6568 	.word	0x706c6568
 8007f14:	6f742022 	.word	0x6f742022
 8007f18:	65697620 	.word	0x65697620
 8007f1c:	20612077 	.word	0x20612077
 8007f20:	7473696c 	.word	0x7473696c
 8007f24:	20666f20 	.word	0x20666f20
 8007f28:	69617661 	.word	0x69617661
 8007f2c:	6c62616c 	.word	0x6c62616c
 8007f30:	6f632065 	.word	0x6f632065
 8007f34:	6e616d6d 	.word	0x6e616d6d
 8007f38:	0d2e7364 	.word	0x0d2e7364
 8007f3c:	000a0d0a 	.word	0x000a0d0a
 8007f40:	6d6d6f43 	.word	0x6d6d6f43
 8007f44:	20646e61 	.word	0x20646e61
 8007f48:	20746f6e 	.word	0x20746f6e
 8007f4c:	6f636572 	.word	0x6f636572
 8007f50:	73696e67 	.word	0x73696e67
 8007f54:	202e6465 	.word	0x202e6465
 8007f58:	746e4520 	.word	0x746e4520
 8007f5c:	27207265 	.word	0x27207265
 8007f60:	706c6568 	.word	0x706c6568
 8007f64:	6f742027 	.word	0x6f742027
 8007f68:	65697620 	.word	0x65697620
 8007f6c:	20612077 	.word	0x20612077
 8007f70:	7473696c 	.word	0x7473696c
 8007f74:	20666f20 	.word	0x20666f20
 8007f78:	69617661 	.word	0x69617661
 8007f7c:	6c62616c 	.word	0x6c62616c
 8007f80:	6f632065 	.word	0x6f632065
 8007f84:	6e616d6d 	.word	0x6e616d6d
 8007f88:	0d2e7364 	.word	0x0d2e7364
 8007f8c:	000a0d0a 	.word	0x000a0d0a
 8007f90:	2f707041 	.word	0x2f707041
 8007f94:	334d5453 	.word	0x334d5453
 8007f98:	2d344632 	.word	0x2d344632
 8007f9c:	63736944 	.word	0x63736944
 8007fa0:	7265766f 	.word	0x7265766f
 8007fa4:	694c2f79 	.word	0x694c2f79
 8007fa8:	72617262 	.word	0x72617262
 8007fac:	2f736569 	.word	0x2f736569
 8007fb0:	334d5453 	.word	0x334d5453
 8007fb4:	78344632 	.word	0x78344632
 8007fb8:	74535f78 	.word	0x74535f78
 8007fbc:	72655064 	.word	0x72655064
 8007fc0:	5f687069 	.word	0x5f687069
 8007fc4:	76697244 	.word	0x76697244
 8007fc8:	732f7265 	.word	0x732f7265
 8007fcc:	6d2f6372 	.word	0x6d2f6372
 8007fd0:	2e637369 	.word	0x2e637369
 8007fd4:	00000063 	.word	0x00000063
 8007fd8:	2f707041 	.word	0x2f707041
 8007fdc:	334d5453 	.word	0x334d5453
 8007fe0:	2d344632 	.word	0x2d344632
 8007fe4:	63736944 	.word	0x63736944
 8007fe8:	7265766f 	.word	0x7265766f
 8007fec:	694c2f79 	.word	0x694c2f79
 8007ff0:	72617262 	.word	0x72617262
 8007ff4:	2f736569 	.word	0x2f736569
 8007ff8:	334d5453 	.word	0x334d5453
 8007ffc:	78344632 	.word	0x78344632
 8008000:	74535f78 	.word	0x74535f78
 8008004:	72655064 	.word	0x72655064
 8008008:	5f687069 	.word	0x5f687069
 800800c:	76697244 	.word	0x76697244
 8008010:	732f7265 	.word	0x732f7265
 8008014:	732f6372 	.word	0x732f6372
 8008018:	32336d74 	.word	0x32336d74
 800801c:	78783466 	.word	0x78783466
 8008020:	616d645f 	.word	0x616d645f
 8008024:	0000632e 	.word	0x0000632e
 8008028:	2f707041 	.word	0x2f707041
 800802c:	334d5453 	.word	0x334d5453
 8008030:	2d344632 	.word	0x2d344632
 8008034:	63736944 	.word	0x63736944
 8008038:	7265766f 	.word	0x7265766f
 800803c:	694c2f79 	.word	0x694c2f79
 8008040:	72617262 	.word	0x72617262
 8008044:	2f736569 	.word	0x2f736569
 8008048:	334d5453 	.word	0x334d5453
 800804c:	78344632 	.word	0x78344632
 8008050:	74535f78 	.word	0x74535f78
 8008054:	72655064 	.word	0x72655064
 8008058:	5f687069 	.word	0x5f687069
 800805c:	76697244 	.word	0x76697244
 8008060:	732f7265 	.word	0x732f7265
 8008064:	732f6372 	.word	0x732f6372
 8008068:	32336d74 	.word	0x32336d74
 800806c:	78783466 	.word	0x78783466
 8008070:	7478655f 	.word	0x7478655f
 8008074:	00632e69 	.word	0x00632e69
 8008078:	2f707041 	.word	0x2f707041
 800807c:	334d5453 	.word	0x334d5453
 8008080:	2d344632 	.word	0x2d344632
 8008084:	63736944 	.word	0x63736944
 8008088:	7265766f 	.word	0x7265766f
 800808c:	694c2f79 	.word	0x694c2f79
 8008090:	72617262 	.word	0x72617262
 8008094:	2f736569 	.word	0x2f736569
 8008098:	334d5453 	.word	0x334d5453
 800809c:	78344632 	.word	0x78344632
 80080a0:	74535f78 	.word	0x74535f78
 80080a4:	72655064 	.word	0x72655064
 80080a8:	5f687069 	.word	0x5f687069
 80080ac:	76697244 	.word	0x76697244
 80080b0:	732f7265 	.word	0x732f7265
 80080b4:	732f6372 	.word	0x732f6372
 80080b8:	32336d74 	.word	0x32336d74
 80080bc:	78783466 	.word	0x78783466
 80080c0:	6970675f 	.word	0x6970675f
 80080c4:	00632e6f 	.word	0x00632e6f
 80080c8:	2f707041 	.word	0x2f707041
 80080cc:	334d5453 	.word	0x334d5453
 80080d0:	2d344632 	.word	0x2d344632
 80080d4:	63736944 	.word	0x63736944
 80080d8:	7265766f 	.word	0x7265766f
 80080dc:	694c2f79 	.word	0x694c2f79
 80080e0:	72617262 	.word	0x72617262
 80080e4:	2f736569 	.word	0x2f736569
 80080e8:	334d5453 	.word	0x334d5453
 80080ec:	78344632 	.word	0x78344632
 80080f0:	74535f78 	.word	0x74535f78
 80080f4:	72655064 	.word	0x72655064
 80080f8:	5f687069 	.word	0x5f687069
 80080fc:	76697244 	.word	0x76697244
 8008100:	732f7265 	.word	0x732f7265
 8008104:	732f6372 	.word	0x732f6372
 8008108:	32336d74 	.word	0x32336d74
 800810c:	78783466 	.word	0x78783466
 8008110:	6363725f 	.word	0x6363725f
 8008114:	0000632e 	.word	0x0000632e
 8008118:	2f707041 	.word	0x2f707041
 800811c:	334d5453 	.word	0x334d5453
 8008120:	2d344632 	.word	0x2d344632
 8008124:	63736944 	.word	0x63736944
 8008128:	7265766f 	.word	0x7265766f
 800812c:	694c2f79 	.word	0x694c2f79
 8008130:	72617262 	.word	0x72617262
 8008134:	2f736569 	.word	0x2f736569
 8008138:	334d5453 	.word	0x334d5453
 800813c:	78344632 	.word	0x78344632
 8008140:	74535f78 	.word	0x74535f78
 8008144:	72655064 	.word	0x72655064
 8008148:	5f687069 	.word	0x5f687069
 800814c:	76697244 	.word	0x76697244
 8008150:	732f7265 	.word	0x732f7265
 8008154:	732f6372 	.word	0x732f6372
 8008158:	32336d74 	.word	0x32336d74
 800815c:	78783466 	.word	0x78783466
 8008160:	6970735f 	.word	0x6970735f
 8008164:	0000632e 	.word	0x0000632e
 8008168:	2f707041 	.word	0x2f707041
 800816c:	334d5453 	.word	0x334d5453
 8008170:	2d344632 	.word	0x2d344632
 8008174:	63736944 	.word	0x63736944
 8008178:	7265766f 	.word	0x7265766f
 800817c:	694c2f79 	.word	0x694c2f79
 8008180:	72617262 	.word	0x72617262
 8008184:	2f736569 	.word	0x2f736569
 8008188:	334d5453 	.word	0x334d5453
 800818c:	78344632 	.word	0x78344632
 8008190:	74535f78 	.word	0x74535f78
 8008194:	72655064 	.word	0x72655064
 8008198:	5f687069 	.word	0x5f687069
 800819c:	76697244 	.word	0x76697244
 80081a0:	732f7265 	.word	0x732f7265
 80081a4:	732f6372 	.word	0x732f6372
 80081a8:	32336d74 	.word	0x32336d74
 80081ac:	78783466 	.word	0x78783466
 80081b0:	7379735f 	.word	0x7379735f
 80081b4:	2e676663 	.word	0x2e676663
 80081b8:	00000063 	.word	0x00000063
 80081bc:	2f707041 	.word	0x2f707041
 80081c0:	334d5453 	.word	0x334d5453
 80081c4:	2d344632 	.word	0x2d344632
 80081c8:	63736944 	.word	0x63736944
 80081cc:	7265766f 	.word	0x7265766f
 80081d0:	694c2f79 	.word	0x694c2f79
 80081d4:	72617262 	.word	0x72617262
 80081d8:	2f736569 	.word	0x2f736569
 80081dc:	334d5453 	.word	0x334d5453
 80081e0:	78344632 	.word	0x78344632
 80081e4:	74535f78 	.word	0x74535f78
 80081e8:	72655064 	.word	0x72655064
 80081ec:	5f687069 	.word	0x5f687069
 80081f0:	76697244 	.word	0x76697244
 80081f4:	732f7265 	.word	0x732f7265
 80081f8:	732f6372 	.word	0x732f6372
 80081fc:	32336d74 	.word	0x32336d74
 8008200:	78783466 	.word	0x78783466
 8008204:	6173755f 	.word	0x6173755f
 8008208:	632e7472 	.word	0x632e7472
 800820c:	00000000 	.word	0x00000000

08008210 <xMotorCommand>:
 8008210:	08007e38 08007e40 08001f99 000000ff     8~..@~..........

08008220 <ucExpectedStackBytes.8478>:
 8008220:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8008230:	a5a5a5a5                                ....

08008234 <xHelpCommand>:
 8008234:	08007eb0 08007eb8 08004c99 00000000     .~...~...L......
 8008244:	00000043                                C...

08008248 <_global_impure_ptr>:
 8008248:	20000030                                0.. 

0800824c <_ctype_>:
 800824c:	20202000 20202020 28282020 20282828     .         ((((( 
 800825c:	20202020 20202020 20202020 20202020                     
 800826c:	10108820 10101010 10101010 10101010      ...............
 800827c:	04040410 04040404 10040404 10101010     ................
 800828c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800829c:	01010101 01010101 01010101 10101010     ................
 80082ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80082bc:	02020202 02020202 02020202 10101010     ................
 80082cc:	00000020 00000000 00000000 00000000      ...............
 80082dc:	00000000 00000000 00000000 00000000     ................
 80082ec:	00000000 00000000 00000000 00000000     ................
 80082fc:	00000000 00000000 00000000 00000000     ................
 800830c:	00000000 00000000 00000000 00000000     ................
 800831c:	00000000 00000000 00000000 00000000     ................
 800832c:	00000000 00000000 00000000 00000000     ................
 800833c:	00000000 00000000 00000000 00000000     ................
 800834c:	00000000                                ....

08008350 <_init>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr

0800835c <_fini>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	bf00      	nop
 8008360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008362:	bc08      	pop	{r3}
 8008364:	469e      	mov	lr, r3
 8008366:	4770      	bx	lr
