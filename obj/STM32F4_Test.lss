
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e78  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08009000  08009000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08009008  08009008  00011008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000460  20000000  0800900c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013fb4  20000460  0800946c  00018460  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20014414  0801d420  00018460  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00018460  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b56d  00000000  00000000  0001848e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000248d  00000000  00000000  000239fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000047b6  00000000  00000000  00025e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ca8  00000000  00000000  0002a63e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b48  00000000  00000000  0002b2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005fd9  00000000  00000000  0002be2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004354  00000000  00000000  00031e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0003615b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002d58  00000000  00000000  000361cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000460 	.word	0x20000460
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fe8 	.word	0x08008fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008fe8 	.word	0x08008fe8
 80001d0:	20000464 	.word	0x20000464
 80001d4:	20000460 	.word	0x20000460
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
#define pdTrue 	1

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f006 ffe7 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f006 ffe3 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f006 ffdf 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	48b1      	ldr	r0, [pc, #708]	; (8000614 <init_SPIx+0x304>)
 8000350:	4619      	mov	r1, r3
 8000352:	f006 fce3 	bl	8006d1c <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000376:	48a7      	ldr	r0, [pc, #668]	; (8000614 <init_SPIx+0x304>)
 8000378:	4619      	mov	r1, r3
 800037a:	f006 fccf 	bl	8006d1c <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039e:	489d      	ldr	r0, [pc, #628]	; (8000614 <init_SPIx+0x304>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f006 fcbb 	bl	8006d1c <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	489b      	ldr	r0, [pc, #620]	; (8000614 <init_SPIx+0x304>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f006 fdcc 	bl	8006f48 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	4898      	ldr	r0, [pc, #608]	; (8000614 <init_SPIx+0x304>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f006 fdc7 	bl	8006f48 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	4896      	ldr	r0, [pc, #600]	; (8000614 <init_SPIx+0x304>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f006 fdc2 	bl	8006f48 <GPIO_PinAFConfig>


	RCC_AHB1PeriphClockCmd(WIZ_HR_GPIO_CLK, ENABLE);
 80003c4:	2004      	movs	r0, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	f006 ff90 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(WIZ_IT_GPIO_CLK, ENABLE);
 80003cc:	2004      	movs	r0, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	f006 ff8c 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	
		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003d4:	2310      	movs	r3, #16
 80003d6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003d8:	2301      	movs	r3, #1
 80003da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <init_SPIx+0x304>)
 80003f6:	4619      	mov	r1, r3
 80003f8:	f006 fc90 	bl	8006d1c <GPIO_Init>
	
	CSOFF(); // set PA4 high
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 80003fe:	4a85      	ldr	r2, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 8000400:	8b12      	ldrh	r2, [r2, #24]
 8000402:	b292      	uxth	r2, r2
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	b292      	uxth	r2, r2
 800040a:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = WIZ_HR_PIN;
 800040c:	2320      	movs	r3, #32
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000422:	2301      	movs	r3, #1
 8000424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(WIZ_HR_GPIO_PORT, &GPIO_InitStruct);
 8000428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800042c:	487a      	ldr	r0, [pc, #488]	; (8000618 <init_SPIx+0x308>)
 800042e:	4619      	mov	r1, r3
 8000430:	f006 fc74 	bl	8006d1c <GPIO_Init>
	
	RESET_LOW(); // set PA3 high
 8000434:	4b78      	ldr	r3, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000436:	4a78      	ldr	r2, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000438:	8b12      	ldrh	r2, [r2, #24]
 800043a:	b292      	uxth	r2, r2
 800043c:	f042 0220 	orr.w	r2, r2, #32
 8000440:	b292      	uxth	r2, r2
 8000442:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 8000444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000448:	2101      	movs	r1, #1
 800044a:	f006 ff87 	bl	800735c <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800044e:	2300      	movs	r3, #0
 8000450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000462:	2300      	movs	r3, #0
 8000464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800046e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000476:	2308      	movs	r3, #8
 8000478:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPIx, &SPI_InitStruct); 
 8000482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000486:	4865      	ldr	r0, [pc, #404]	; (800061c <init_SPIx+0x30c>)
 8000488:	4619      	mov	r1, r3
 800048a:	f006 ff9f 	bl	80073cc <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 800048e:	4863      	ldr	r0, [pc, #396]	; (800061c <init_SPIx+0x30c>)
 8000490:	2101      	movs	r1, #1
 8000492:	f007 f88d 	bl	80075b0 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000496:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800049a:	2101      	movs	r1, #1
 800049c:	f006 ff26 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 80004a0:	485f      	ldr	r0, [pc, #380]	; (8000620 <init_SPIx+0x310>)
 80004a2:	f005 fb53 	bl	8005b4c <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 80004a6:	485f      	ldr	r0, [pc, #380]	; (8000624 <init_SPIx+0x314>)
 80004a8:	f005 fb50 	bl	8005b4c <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 80004ac:	bf00      	nop
 80004ae:	485c      	ldr	r0, [pc, #368]	; (8000620 <init_SPIx+0x310>)
 80004b0:	f005 ff5c 	bl	800636c <DMA_GetCmdStatus>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <init_SPIx+0x19e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 80004ba:	bf00      	nop
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <init_SPIx+0x314>)
 80004be:	f005 ff55 	bl	800636c <DMA_GetCmdStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <init_SPIx+0x1ac>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f005 fe17 	bl	8006100 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <init_SPIx+0x318>)
 80004e2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <init_SPIx+0x31c>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <init_SPIx+0x310>)
 8000510:	4619      	mov	r1, r3
 8000512:	f005 fc31 	bl	8005d78 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 8000516:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800051a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <init_SPIx+0x320>)
 8000522:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000528:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <init_SPIx+0x314>)
 8000530:	4619      	mov	r1, r3
 8000532:	f005 fc21 	bl	8005d78 <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <init_SPIx+0x310>)
 8000538:	2110      	movs	r1, #16
 800053a:	2201      	movs	r2, #1
 800053c:	f005 ff94 	bl	8006468 <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000540:	4838      	ldr	r0, [pc, #224]	; (8000624 <init_SPIx+0x314>)
 8000542:	2110      	movs	r1, #16
 8000544:	2201      	movs	r2, #1
 8000546:	f005 ff8f 	bl	8006468 <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <init_SPIx+0x30c>)
 800054c:	2102      	movs	r1, #2
 800054e:	f007 f92d 	bl	80077ac <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <init_SPIx+0x30c>)
 8000554:	2101      	movs	r1, #1
 8000556:	f007 f929 	bl	80077ac <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 800055a:	233b      	movs	r3, #59	; 0x3b
 800055c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;
 800055e:	2306      	movs	r3, #6
 8000560:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000562:	2301      	movs	r3, #1
 8000564:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fa72 	bl	8005a58 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 8000574:	233a      	movs	r3, #58	; 0x3a
 8000576:	733b      	strb	r3, [r7, #12]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;
 8000578:	2306      	movs	r3, #6
 800057a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 800057c:	2301      	movs	r3, #1
 800057e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f005 fa65 	bl	8005a58 <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800058e:	4823      	ldr	r0, [pc, #140]	; (800061c <init_SPIx+0x30c>)
 8000590:	2102      	movs	r1, #2
 8000592:	2201      	movs	r2, #1
 8000594:	f007 f84e 	bl	8007634 <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <init_SPIx+0x30c>)
 800059a:	2101      	movs	r1, #1
 800059c:	2201      	movs	r2, #1
 800059e:	f007 f849 	bl	8007634 <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin */
	GPIO_InitStruct.GPIO_Pin = WIZ_IT_PIN;
 80005a2:	2310      	movs	r3, #16
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(WIZ_IT_GPIO_PORT, &GPIO_InitStruct);	
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <init_SPIx+0x308>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	f006 fba9 	bl	8006d1c <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2101      	movs	r1, #1
 80005d0:	f006 fec4 	bl	800735c <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(WIZ_IT_EXTI_PORT_SOURCE, WIZ_IT_EXTI_PIN_SOURCE);
 80005d4:	2002      	movs	r0, #2
 80005d6:	2104      	movs	r1, #4
 80005d8:	f007 f922 	bl	8007820 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = WIZ_IT_EXTI_LINE;
 80005dc:	2310      	movs	r3, #16
 80005de:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005e0:	2300      	movs	r3, #0
 80005e2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005e4:	230c      	movs	r3, #12
 80005e6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 fa58 	bl	8006aa4 <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = WIZ_IT_EXTI_IRQn;
 80005f4:	230a      	movs	r3, #10
 80005f6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 5;
 80005f8:	230a      	movs	r3, #10
 80005fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fa26 	bl	8005a58 <NVIC_Init>


	
}
 800060c:	3768      	adds	r7, #104	; 0x68
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020800 	.word	0x40020800
 800061c:	40013000 	.word	0x40013000
 8000620:	40026458 	.word	0x40026458
 8000624:	40026440 	.word	0x40026440
 8000628:	4001300c 	.word	0x4001300c
 800062c:	200139d8 	.word	0x200139d8
 8000630:	20013200 	.word	0x20013200

08000634 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 800063a:	491e      	ldr	r1, [pc, #120]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800063c:	f005 ffca 	bl	80065d4 <DMA_GetITStatus>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02a      	beq.n	800069c <DMA2_Stream2_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000648:	491a      	ldr	r1, [pc, #104]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800064a:	f006 f97f 	bl	800694c <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800064e:	bf00      	nop
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	f007 f84c 	bl	80076f0 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <DMA2_Stream2_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000662:	8b12      	ldrh	r2, [r2, #24]
 8000664:	b292      	uxth	r2, r2
 8000666:	f042 0210 	orr.w	r2, r2, #16
 800066a:	b292      	uxth	r2, r2
 800066c:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000670:	2100      	movs	r1, #0
 8000672:	f005 fd7b 	bl	800616c <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000678:	2100      	movs	r1, #0
 800067a:	f005 fd77 	bl	800616c <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 800067e:	f004 fba1 	bl	8004dc4 <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xHigherPriorityTaskWoken = pdFalse;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA2_Stream2_IRQHandler+0x94>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	2100      	movs	r1, #0
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000692:	2300      	movs	r3, #0
 8000694:	f003 ffa8 	bl	80045e8 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 8000698:	f004 fba4 	bl	8004de4 <vPortExitCritical>
  }	
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <DMA2_Stream2_IRQHandler+0x78>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <DMA2_Stream2_IRQHandler+0x98>)
 80006a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40026440 	.word	0x40026440
 80006b4:	10208000 	.word	0x10208000
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40026458 	.word	0x40026458
 80006c4:	2000047c 	.word	0x2000047c
 80006c8:	200131ec 	.word	0x200131ec
 80006cc:	e000ed04 	.word	0xe000ed04

080006d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006d6:	491e      	ldr	r1, [pc, #120]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006d8:	f005 ff7c 	bl	80065d4 <DMA_GetITStatus>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d02a      	beq.n	8000738 <DMA2_Stream3_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006e6:	f006 f931 	bl	800694c <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006ea:	bf00      	nop
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	f006 fffe 	bl	80076f0 <SPI_I2S_GetFlagStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0f8      	beq.n	80006ec <DMA2_Stream3_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fe:	8b12      	ldrh	r2, [r2, #24]
 8000700:	b292      	uxth	r2, r2
 8000702:	f042 0210 	orr.w	r2, r2, #16
 8000706:	b292      	uxth	r2, r2
 8000708:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 800070c:	2100      	movs	r1, #0
 800070e:	f005 fd2d 	bl	800616c <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000714:	2100      	movs	r1, #0
 8000716:	f005 fd29 	bl	800616c <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 800071a:	f004 fb53 	bl	8004dc4 <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xHigherPriorityTaskWoken = pdFalse;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <DMA2_Stream3_IRQHandler+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800072e:	2300      	movs	r3, #0
 8000730:	f003 ff5a 	bl	80045e8 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000734:	f004 fb56 	bl	8004de4 <vPortExitCritical>
 }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <DMA2_Stream3_IRQHandler+0x78>
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DMA2_Stream3_IRQHandler+0x98>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40026458 	.word	0x40026458
 8000750:	18008000 	.word	0x18008000
 8000754:	40013000 	.word	0x40013000
 8000758:	40020000 	.word	0x40020000
 800075c:	40026440 	.word	0x40026440
 8000760:	2000047c 	.word	0x2000047c
 8000764:	200131ec 	.word	0x200131ec
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <spi_dma_send>:


/*---------------------------- Matic Knap 25 Jun 2014 ---------------------*/

void spi_dma_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
{
 800076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	460b      	mov	r3, r1
 8000776:	603a      	str	r2, [r7, #0]
 8000778:	4602      	mov	r2, r0
 800077a:	80fa      	strh	r2, [r7, #6]
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	466b      	mov	r3, sp
 8000780:	461e      	mov	r6, r3
		uint8_t buffer[data_len+4];
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	1d19      	adds	r1, r3, #4
 8000786:	1e4b      	subs	r3, r1, #1
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	460b      	mov	r3, r1
 800078c:	461a      	mov	r2, r3
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000796:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800079a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800079e:	460b      	mov	r3, r1
 80007a0:	461a      	mov	r2, r3
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	00dd      	lsls	r5, r3, #3
 80007a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80007ac:	00d4      	lsls	r4, r2, #3
 80007ae:	460b      	mov	r3, r1
 80007b0:	3307      	adds	r3, #7
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	ebad 0d03 	sub.w	sp, sp, r3
 80007ba:	466b      	mov	r3, sp
 80007bc:	3300      	adds	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80007da:	121b      	asrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007f2:	2304      	movs	r3, #4
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <spi_dma_send+0xa4>
			buffer[i] = (data_buf[i-4]);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	440b      	add	r3, r1
 8000808:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
		buffer[3] = (data_len & 0x00ff);

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	1d1a      	adds	r2, r3, #4
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	429a      	cmp	r2, r3
 8000818:	dcee      	bgt.n	80007f8 <spi_dma_send+0x8c>
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	3304      	adds	r3, #4
 800081e:	b29b      	uxth	r3, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <spi_dma_send+0x100>)
 8000822:	4619      	mov	r1, r3
 8000824:	f005 fd2e 	bl	8006284 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <spi_dma_send+0x100>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <spi_dma_send+0x104>)
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <spi_dma_send+0x104>)
 8000832:	8b52      	ldrh	r2, [r2, #26]
 8000834:	b292      	uxth	r2, r2
 8000836:	f042 0210 	orr.w	r2, r2, #16
 800083a:	b292      	uxth	r2, r2
 800083c:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <spi_dma_send+0x100>)
 8000840:	2101      	movs	r1, #1
 8000842:	f005 fc93 	bl	800616c <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <spi_dma_send+0x108>)
 8000848:	2101      	movs	r1, #1
 800084a:	f005 fc8f 	bl	800616c <DMA_Cmd>
		/* Block until the semaphore is given */
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <spi_dma_send+0x10c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800085a:	2300      	movs	r3, #0
 800085c:	f003 ff2e 	bl	80046bc <xQueueGenericReceive>
 8000860:	46b5      	mov	sp, r6

	//	CSOFF(); // chip deselect 
			
	
}
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800086a:	bf00      	nop
 800086c:	40026458 	.word	0x40026458
 8000870:	40020000 	.word	0x40020000
 8000874:	40026440 	.word	0x40026440
 8000878:	200131ec 	.word	0x200131ec

0800087c <spi_dma_send2B>:

void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4602      	mov	r2, r0
 8000884:	460b      	mov	r3, r1
 8000886:	80fa      	strh	r2, [r7, #6]
 8000888:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[6];
	uint16_t data_len = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	81fb      	strh	r3, [r7, #14]
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	723b      	strb	r3, [r7, #8]
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	727b      	strb	r3, [r7, #9]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	 buffer[3] = (data_len & 0x00ff);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	72fb      	strb	r3, [r7, #11]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	733b      	strb	r3, [r7, #12]
	 buffer[5] = (data_buf & 0x00ff);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	737b      	strb	r3, [r7, #13]
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <spi_dma_send2B+0x94>)
 80008ca:	2106      	movs	r1, #6
 80008cc:	f005 fcda 	bl	8006284 <DMA_SetCurrDataCounter>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <spi_dma_send2B+0x94>)
 80008d2:	f107 0208 	add.w	r2, r7, #8
 80008d6:	60da      	str	r2, [r3, #12]
	CSON(); // chip select 
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008dc:	8b52      	ldrh	r2, [r2, #26]
 80008de:	b292      	uxth	r2, r2
 80008e0:	f042 0210 	orr.w	r2, r2, #16
 80008e4:	b292      	uxth	r2, r2
 80008e6:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <spi_dma_send2B+0x94>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	f005 fc3e 	bl	800616c <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <spi_dma_send2B+0x9c>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	f005 fc3a 	bl	800616c <DMA_Cmd>
	/* Block until the semaphore is given */
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <spi_dma_send2B+0xa0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000904:	2300      	movs	r3, #0
 8000906:	f003 fed9 	bl	80046bc <xQueueGenericReceive>
	
//	CSOFF(); // chip deselect 
			
}
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40026458 	.word	0x40026458
 8000914:	40020000 	.word	0x40020000
 8000918:	40026440 	.word	0x40026440
 800091c:	200131ec 	.word	0x200131ec

08000920 <spi_dma_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	80fa      	strh	r2, [r7, #6]
 800092c:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[5];
		uint16_t data_len=0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	723b      	strb	r3, [r7, #8]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	727b      	strb	r3, [r7, #9]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000948:	121b      	asrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	72bb      	strb	r3, [r7, #10]
		buffer[3] = (data_len & 0x00ff);
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	72fb      	strb	r3, [r7, #11]
		buffer[4] = data_buf ; 
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	733b      	strb	r3, [r7, #12]
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000962:	2105      	movs	r1, #5
 8000964:	f005 fc8e 	bl	8006284 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <spi_dma_sendByte+0x88>)
 800096a:	f107 0208 	add.w	r2, r7, #8
 800096e:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000974:	8b52      	ldrh	r2, [r2, #26]
 8000976:	b292      	uxth	r2, r2
 8000978:	f042 0210 	orr.w	r2, r2, #16
 800097c:	b292      	uxth	r2, r2
 800097e:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000982:	2101      	movs	r1, #1
 8000984:	f005 fbf2 	bl	800616c <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <spi_dma_sendByte+0x90>)
 800098a:	2101      	movs	r1, #1
 800098c:	f005 fbee 	bl	800616c <DMA_Cmd>
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <spi_dma_sendByte+0x94>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	2300      	movs	r3, #0
 800099e:	f003 fe8d 	bl	80046bc <xQueueGenericReceive>
				
//		CSOFF(); // chip deselect 
			
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40026458 	.word	0x40026458
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40026440 	.word	0x40026440
 80009b4:	200131ec 	.word	0x200131ec

080009b8 <spi_dma_read>:

		return (data_buf[0] << 8) | data_buf[1];

}
void spi_dma_read(uint16_t address, uint16_t data_len)
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	80f8      	strh	r0, [r7, #6]
 80009c2:	80b9      	strh	r1, [r7, #4]
 80009c4:	4669      	mov	r1, sp
 80009c6:	4688      	mov	r8, r1
		
		/*! spi_dma_read it has to be used with \n
		 * memcpy from bufferRX right after it has recieve \n
		 * data on SPI. */
		
		uint8_t buffer[data_len+4];
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	1d0e      	adds	r6, r1, #4
 80009cc:	1e71      	subs	r1, r6, #1
 80009ce:	6139      	str	r1, [r7, #16]
 80009d0:	4631      	mov	r1, r6
 80009d2:	4608      	mov	r0, r1
 80009d4:	f04f 0100 	mov.w	r1, #0
 80009d8:	00cd      	lsls	r5, r1, #3
 80009da:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80009de:	00c4      	lsls	r4, r0, #3
 80009e0:	4631      	mov	r1, r6
 80009e2:	4608      	mov	r0, r1
 80009e4:	f04f 0100 	mov.w	r1, #0
 80009e8:	00cb      	lsls	r3, r1, #3
 80009ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009ee:	00c2      	lsls	r2, r0, #3
 80009f0:	4633      	mov	r3, r6
 80009f2:	3307      	adds	r3, #7
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	ebad 0d03 	sub.w	sp, sp, r3
 80009fc:	466b      	mov	r3, sp
 80009fe:	3300      	adds	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x00 | (data_len & 0x7f00) >> 8 ));
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a1c:	121b      	asrs	r3, r3, #8
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) buffer[i] = 0x0;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e007      	b.n	8000a42 <spi_dma_read+0x8a>
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dcf2      	bgt.n	8000a32 <spi_dma_read+0x7a>

		DMA_SetCurrDataCounter(SPIx_RX_DMA_STREAM, data_len+4);
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a54:	4619      	mov	r1, r3
 8000a56:	f005 fc15 	bl	8006284 <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 4+data_len);
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a62:	4619      	mov	r1, r3
 8000a64:	f005 fc0e 	bl	8006284 <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
		SPIx_RX_DMA_STREAM->M0AR =(uint32_t)&bufferRX;	
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <spi_dma_read+0x100>)
 8000a72:	60da      	str	r2, [r3, #12]

		CSON(); // chip select 
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a78:	8b52      	ldrh	r2, [r2, #26]
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	f042 0210 	orr.w	r2, r2, #16
 8000a80:	b292      	uxth	r2, r2
 8000a82:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	f005 fb70 	bl	800616c <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f005 fb6c 	bl	800616c <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <spi_dma_read+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f003 fe0b 	bl	80046bc <xQueueGenericReceive>
 8000aa6:	46c5      	mov	sp, r8
		//CSOFF(); // chip deselect		

}	
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	40026440 	.word	0x40026440
 8000ab4:	40026458 	.word	0x40026458
 8000ab8:	20013200 	.word	0x20013200
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	200131ec 	.word	0x200131ec

08000ac4 <init_W5200>:
//==================================================================================//
//===	func 	init_W5200							 ===//
//==================================================================================//

void init_W5200(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
	 *
	 * */


	// mac address
	uint8_t address[6] =	{0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 8000aca:	4a5c      	ldr	r2, [pc, #368]	; (8000c3c <init_W5200+0x178>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	8892      	ldrh	r2, [r2, #4]
 8000ad6:	809a      	strh	r2, [r3, #4]
	
	// ip 
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 8000ad8:	4a59      	ldr	r2, [pc, #356]	; (8000c40 <init_W5200+0x17c>)
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	6810      	ldr	r0, [r2, #0]
 8000ae0:	6018      	str	r0, [r3, #0]
	// subnet 
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8000ae2:	4a58      	ldr	r2, [pc, #352]	; (8000c44 <init_W5200+0x180>)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
	// gateway
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 8000aec:	4a56      	ldr	r2, [pc, #344]	; (8000c48 <init_W5200+0x184>)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	6810      	ldr	r0, [r2, #0]
 8000af4:	6018      	str	r0, [r3, #0]
	
	portTickType xLastWakeTime;	
	
	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 8000af6:	2001      	movs	r0, #1
 8000af8:	2100      	movs	r1, #0
 8000afa:	2203      	movs	r2, #3
 8000afc:	f003 fc82 	bl	8004404 <xQueueGenericCreate>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b52      	ldr	r3, [pc, #328]	; (8000c4c <init_W5200+0x188>)
 8000b04:	601a      	str	r2, [r3, #0]

//	vTaskSuspend(set_macTaskHandle);
	
	xLastWakeTime = xTaskGetTickCount();
 8000b06:	f002 fdf7 	bl	80036f8 <xTaskGetTickCount>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60bb      	str	r3, [r7, #8]

	RESET_HIGH();
 8000b0e:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <init_W5200+0x18c>)
 8000b10:	4a4f      	ldr	r2, [pc, #316]	; (8000c50 <init_W5200+0x18c>)
 8000b12:	8b52      	ldrh	r2, [r2, #26]
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f042 0220 	orr.w	r2, r2, #32
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	835a      	strh	r2, [r3, #26]
	RESET_LOW();	
 8000b1e:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <init_W5200+0x18c>)
 8000b20:	4a4b      	ldr	r2, [pc, #300]	; (8000c50 <init_W5200+0x18c>)
 8000b22:	8b12      	ldrh	r2, [r2, #24]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	831a      	strh	r2, [r3, #24]

	vTaskDelay( 500/portTICK_RATE_MS );		
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f002 fc25 	bl	8003380 <vTaskDelay>
	const portTickType xFrequency = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
	
	// ===================================================//
	//SW reset 
	spi_dma_sendByte(W5200_MR, W5200_MR_RST);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	f7ff feef 	bl	8000920 <spi_dma_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	71fb      	strb	r3, [r7, #7]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 8000b46:	bf00      	nop
		spi_dma_read(W5200_MR, 1);
		memcpy(&data, bufferRX+4, 1);
	}
		
	// PING enable, PPPoE disable 
	spi_dma_sendByte(W5200_MR, 0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f7ff fee8 	bl	8000920 <spi_dma_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_dma_sendByte(W5200_IMR, 0xff);
 8000b50:	2016      	movs	r0, #22
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	f7ff fee4 	bl	8000920 <spi_dma_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_dma_sendByte(W5200_IMR2, 0);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f7ff fee0 	bl	8000920 <spi_dma_sendByte>
	// set timeoput to 200msec
	spi_dma_sendByte(W5200_RTR, 200);
 8000b60:	2017      	movs	r0, #23
 8000b62:	21c8      	movs	r1, #200	; 0xc8
 8000b64:	f7ff fedc 	bl	8000920 <spi_dma_sendByte>
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	f7ff fed8 	bl	8000920 <spi_dma_sendByte>

	int n = 0; 
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

	for (n = 0; n < 8; n++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e02b      	b.n	8000bd2 <init_W5200+0x10e>
	{
		spi_dma_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b86:	331e      	adds	r3, #30
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	f7ff fec7 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b9e:	331f      	adds	r3, #31
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	f7ff febb 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_IMR(n), 0xff);	
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000bb6:	332c      	adds	r3, #44	; 0x2c
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	21ff      	movs	r1, #255	; 0xff
 8000bbe:	f7ff feaf 	bl	8000920 <spi_dma_sendByte>
		socket_flg[n] = 0;
 8000bc2:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <init_W5200+0x190>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	ddd0      	ble.n	8000b7a <init_W5200+0xb6>
		socket_flg[n] = 0;
			
	}	
	// =========================================================//
		
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be2:	f002 fb75 	bl	80032d0 <vTaskDelayUntil>

	W5200_configure_network(ip, subnet, gw);
 8000be6:	f107 0114 	add.w	r1, r7, #20
 8000bea:	f107 0210 	add.w	r2, r7, #16
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f000 f83c 	bl	8000c74 <W5200_configure_network>
	W5200_set_hardware_address(address);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f82b 	bl	8000c5c <W5200_set_hardware_address>
	
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c10:	f002 fb5e 	bl	80032d0 <vTaskDelayUntil>
	// end of initialization W5200 
	// delete task

	// unblock set_macTask
	
	socket_0 = socket(W5200_Sn_MR_TCP, 80, 0);
 8000c14:	2001      	movs	r0, #1
 8000c16:	2150      	movs	r1, #80	; 0x50
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f000 fa17 	bl	800104c <socket>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <init_W5200+0x194>)
 8000c24:	601a      	str	r2, [r3, #0]
	listen(socket_0);
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <init_W5200+0x194>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fbfe 	bl	800142c <listen>


//	vTaskResume( set_macTaskHandle); 

	vTaskDelete ( NULL );
 8000c30:	2000      	movs	r0, #0
 8000c32:	f002 fb07 	bl	8003244 <vTaskDelete>
	
	
	
	
}
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0800858c 	.word	0x0800858c
 8000c40:	08008594 	.word	0x08008594
 8000c44:	08008598 	.word	0x08008598
 8000c48:	0800859c 	.word	0x0800859c
 8000c4c:	200131ec 	.word	0x200131ec
 8000c50:	40020800 	.word	0x40020800
 8000c54:	20000480 	.word	0x20000480
 8000c58:	200131f4 	.word	0x200131f4

08000c5c <W5200_set_hardware_address>:

//==================================================================================//
//===	func W5200_set_hardware_address
//==================================================================================//
void  W5200_set_hardware_address(const macaddress_t address)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

	/*! Function set wiznet register to address via SPI DMA
	 */

	spi_dma_send(W5200_SHAR, 6, address);
 8000c64:	2009      	movs	r0, #9
 8000c66:	2106      	movs	r1, #6
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	f7ff fd7f 	bl	800076c <spi_dma_send>
}
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <W5200_configure_network>:


void  W5200_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	/*! It configures ip, subnet and gateway */
	spi_dma_send(W5200_SIPR, 4, address);
 8000c80:	200f      	movs	r0, #15
 8000c82:	2104      	movs	r1, #4
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	f7ff fd71 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_SUBR, 4, subnet);
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f7ff fd6c 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_GAR, 4 , gateway);
 8000c94:	2001      	movs	r0, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	f7ff fd67 	bl	800076c <spi_dma_send>
}
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <get_CRStatus>:
//==================================================================================//



static uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_CR(sck_fd),1);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	f7ff fe79 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <get_CRStatus+0x34>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]
	return var;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20013204 	.word	0x20013204

08000cdc <get_SRStatus>:


static uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_SR(sck_fd), 1);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f7ff fe5d 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <get_SRStatus+0x34>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	73fb      	strb	r3, [r7, #15]
	return var;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20013204 	.word	0x20013204

08000d14 <get_TXFSRStatus>:

static uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_FSR(sck_fd), 2);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d2a:	3320      	adds	r3, #32
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	2102      	movs	r1, #2
 8000d32:	f7ff fe41 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <get_TXFSRStatus+0x44>)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	8812      	ldrh	r2, [r2, #0]
 8000d3e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
	
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20013204 	.word	0x20013204

08000d5c <get_TXWRStatus>:

static uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_WR(sck_fd), 2 );
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d72:	3324      	adds	r3, #36	; 0x24
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	2102      	movs	r1, #2
 8000d7a:	f7ff fe1d 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <get_TXWRStatus+0x44>)
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d88:	7b3b      	ldrb	r3, [r7, #12]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b29b      	uxth	r3, r3

	
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20013204 	.word	0x20013204

08000da4 <get_TXRD>:
static uint16_t get_TXRD(uint8_t sck_fd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_RD(sck_fd), 2);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000dba:	3322      	adds	r3, #34	; 0x22
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	f7ff fdf9 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <get_TXRD+0x44>)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	8812      	ldrh	r2, [r2, #0]
 8000dce:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000dd0:	7b3b      	ldrb	r3, [r7, #12]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b29b      	uxth	r3, r3
	
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20013204 	.word	0x20013204

08000dec <set_TXWR>:

static void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	71fa      	strb	r2, [r7, #7]
 8000df8:	80bb      	strh	r3, [r7, #4]
 	spi_dma_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e06:	3324      	adds	r3, #36	; 0x24
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff fd34 	bl	800087c <spi_dma_send2B>
}
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop

08000e1c <get_RXRSR>:

static uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RSR(sck_fd), 2);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e32:	3326      	adds	r3, #38	; 0x26
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	2102      	movs	r1, #2
 8000e3a:	f7ff fdbd 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <get_RXRSR+0x44>)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	8812      	ldrh	r2, [r2, #0]
 8000e46:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b29b      	uxth	r3, r3

}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20013204 	.word	0x20013204

08000e64 <get_RXRD>:

static uint16_t get_RXRD(uint8_t sck_fd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RD(sck_fd), 2 );
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e7a:	3328      	adds	r3, #40	; 0x28
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	2102      	movs	r1, #2
 8000e82:	f7ff fd99 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <get_RXRD+0x44>)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	8812      	ldrh	r2, [r2, #0]
 8000e8e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e90:	7b3b      	ldrb	r3, [r7, #12]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b29b      	uxth	r3, r3
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20013204 	.word	0x20013204

08000eac <set_RXRD>:

static void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	71fa      	strb	r2, [r7, #7]
 8000eb8:	80bb      	strh	r3, [r7, #4]
	spi_dma_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ec6:	3328      	adds	r3, #40	; 0x28
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fcd4 	bl	800087c <spi_dma_send2B>
}
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop

08000edc <write_memory>:
//		func write_memory 
//===============================================================================================//


void write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60ba      	str	r2, [r7, #8]
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	73fa      	strb	r2, [r7, #15]
 8000ee8:	460a      	mov	r2, r1
 8000eea:	81ba      	strh	r2, [r7, #12]
 8000eec:	80fb      	strh	r3, [r7, #6]
	*/
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000eee:	89bb      	ldrh	r3, [r7, #12]
 8000ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ef4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	8afb      	ldrh	r3, [r7, #22]
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f0c:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000f0e:	8afa      	ldrh	r2, [r7, #22]
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	441a      	add	r2, r3
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f1c:	3320      	adds	r3, #32
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dd2a      	ble.n	8000f78 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f38:	827b      	strh	r3, [r7, #18]
		spi_dma_send( memory_addr,upper_size, buf);
 8000f3a:	8aba      	ldrh	r2, [r7, #20]
 8000f3c:	8a7b      	ldrh	r3, [r7, #18]
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f7ff fc12 	bl	800076c <spi_dma_send>
		buf += upper_size;
 8000f48:	8a7b      	ldrh	r3, [r7, #18]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	8a7b      	ldrh	r3, [r7, #18]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	823b      	strh	r3, [r7, #16]
		spi_dma_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	8a3b      	ldrh	r3, [r7, #16]
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	f7ff fbfb 	bl	800076c <spi_dma_send>
 8000f76:	e006      	b.n	8000f86 <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_dma_send( memory_addr,len,  buf);
 8000f78:	8aba      	ldrh	r2, [r7, #20]
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	f7ff fbf3 	bl	800076c <spi_dma_send>
	}
}
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <read_memory>:
// 			func read_memory
//==================================================================================//


void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60ba      	str	r2, [r7, #8]
 8000f94:	4602      	mov	r2, r0
 8000f96:	73fa      	strb	r2, [r7, #15]
 8000f98:	460a      	mov	r2, r1
 8000f9a:	81ba      	strh	r2, [r7, #12]
 8000f9c:	80fb      	strh	r3, [r7, #6]

	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000f9e:	89bb      	ldrh	r3, [r7, #12]
 8000fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	8afb      	ldrh	r3, [r7, #22]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fbc:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000fbe:	8afa      	ldrh	r2, [r7, #22]
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fc8:	dd2f      	ble.n	800102a <read_memory+0x9e>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000fca:	8afb      	ldrh	r3, [r7, #22]
 8000fcc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000fd0:	827b      	strh	r3, [r7, #18]
		spi_dma_read( memory_addr,upper_size);
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8a7b      	ldrh	r3, [r7, #18]
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fced 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, upper_size);
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	68b8      	ldr	r0, [r7, #8]
 8000fe2:	4919      	ldr	r1, [pc, #100]	; (8001048 <read_memory+0xbc>)
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f7ff f8f9 	bl	80001dc <memcpy>

		buf += upper_size;
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000ff2:	88fa      	ldrh	r2, [r7, #6]
 8000ff4:	8a7b      	ldrh	r3, [r7, #18]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	823b      	strh	r3, [r7, #16]
		spi_dma_read(W5200_SOCKET_RX_BASE(sck_fd), left_size);
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	b29b      	uxth	r3, r3
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800100a:	b29a      	uxth	r2, r3
 800100c:	8a3b      	ldrh	r3, [r7, #16]
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fcd1 	bl	80009b8 <spi_dma_read>
		memcpy(buf+upper_size, bufferRX+4, left_size);
 8001016:	8a7b      	ldrh	r3, [r7, #18]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	441a      	add	r2, r3
 800101c:	8a3b      	ldrh	r3, [r7, #16]
 800101e:	4610      	mov	r0, r2
 8001020:	4909      	ldr	r1, [pc, #36]	; (8001048 <read_memory+0xbc>)
 8001022:	461a      	mov	r2, r3
 8001024:	f7ff f8da 	bl	80001dc <memcpy>
 8001028:	e00b      	b.n	8001042 <read_memory+0xb6>
	}else{

		// copy len size bytes
		spi_dma_read( memory_addr,len);
 800102a:	8aba      	ldrh	r2, [r7, #20]
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fcc1 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, len);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	4903      	ldr	r1, [pc, #12]	; (8001048 <read_memory+0xbc>)
 800103c:	461a      	mov	r2, r3
 800103e:	f7ff f8cd 	bl	80001dc <memcpy>
	}
}
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20013204 	.word	0x20013204

0800104c <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4613      	mov	r3, r2
 8001054:	4602      	mov	r2, r0
 8001056:	71fa      	strb	r2, [r7, #7]
 8001058:	460a      	mov	r2, r1
 800105a:	80ba      	strh	r2, [r7, #4]
 800105c:	71bb      	strb	r3, [r7, #6]
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e00c      	b.n	800107e <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <socket+0x14c>)
 8001068:	5cd3      	ldrb	r3, [r2, r3]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d104      	bne.n	8001078 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <socket+0x14c>)
 8001072:	2101      	movs	r1, #1
 8001074:	54d1      	strb	r1, [r2, r3]
			break;
 8001076:	e005      	b.n	8001084 <socket+0x38>
	uint8_t	stat;

	

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d9ef      	bls.n	8001064 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b07      	cmp	r3, #7
 8001088:	d901      	bls.n	800108e <socket+0x42>
 800108a:	23ff      	movs	r3, #255	; 0xff
 800108c:	e07f      	b.n	800118e <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	2b08      	cmp	r3, #8
 8001096:	dd01      	ble.n	800109c <socket+0x50>
 8001098:	23ff      	movs	r3, #255	; 0xff
 800109a:	e078      	b.n	800118e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d005      	beq.n	80010b2 <socket+0x66>
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <socket+0x66>
 80010ae:	23ff      	movs	r3, #255	; 0xff
 80010b0:	e06d      	b.n	800118e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d006      	beq.n	80010ca <socket+0x7e>
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <socket+0x7e>
 80010c6:	23ff      	movs	r3, #255	; 0xff
 80010c8:	e061      	b.n	800118e <socket+0x142>

	// set MODE register
	spi_dma_sendByte(W5200_Sn_MR(sck_fd) , mode);
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fc1f 	bl	8000920 <spi_dma_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	db29      	blt.n	8001144 <socket+0xf8>
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	dd02      	ble.n	80010fa <socket+0xae>
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d018      	beq.n	800112a <socket+0xde>
 80010f8:	e024      	b.n	8001144 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	737b      	strb	r3, [r7, #13]
		spi_dma_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	b29b      	uxth	r3, r3
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001116:	3304      	adds	r3, #4
 8001118:	b29a      	uxth	r2, r3
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4610      	mov	r0, r2
 8001120:	2102      	movs	r1, #2
 8001122:	461a      	mov	r2, r3
 8001124:	f7ff fb22 	bl	800076c <spi_dma_send>
		
		break;
 8001128:	e00c      	b.n	8001144 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_dma_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b29b      	uxth	r3, r3
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b29b      	uxth	r3, r3
 8001132:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001136:	3314      	adds	r3, #20
 8001138:	b29a      	uxth	r2, r3
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fbee 	bl	8000920 <spi_dma_sendByte>
	}

	// execute socket open
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	b29b      	uxth	r3, r3
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b29b      	uxth	r3, r3
 800114c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001150:	3301      	adds	r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	2101      	movs	r1, #1
 8001158:	f7ff fbe2 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 800115c:	bf00      	nop
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd9f 	bl	8000ca4 <get_CRStatus>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f8      	bne.n	800115e <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fdb4 	bl	8000cdc <get_SRStatus>
 8001174:	4603      	mov	r3, r0
 8001176:	2b13      	cmp	r3, #19
 8001178:	bf0c      	ite	eq
 800117a:	2300      	moveq	r3, #0
 800117c:	2301      	movne	r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73bb      	strb	r3, [r7, #14]
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <socket+0x140>
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	e000      	b.n	800118e <socket+0x142>

	// success return
	return sck_fd;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000480 	.word	0x20000480

0800119c <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 800119c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a0:	b08b      	sub	sp, #44	; 0x2c
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4601      	mov	r1, r0
 80011a8:	73f9      	strb	r1, [r7, #15]
 80011aa:	81ba      	strh	r2, [r7, #12]
 80011ac:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	
	/// get real len 
	int i = 0; 
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]

	while ( buf[i] != '\0' && i < len) i++; 
 80011b2:	e002      	b.n	80011ba <send+0x1e>
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	3301      	adds	r3, #1
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <send+0x32>
 80011c6:	89ba      	ldrh	r2, [r7, #12]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dcf2      	bgt.n	80011b4 <send+0x18>

	len = i;
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	81bb      	strh	r3, [r7, #12]
	
	uint16_t status = get_SRStatus(sck_fd);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd81 	bl	8000cdc <get_SRStatus>
 80011da:	4603      	mov	r3, r0
 80011dc:	83fb      	strh	r3, [r7, #30]

	
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	d804      	bhi.n	80011ee <send+0x52>
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4a56      	ldr	r2, [pc, #344]	; (8001340 <send+0x1a4>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <send+0x58>
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f2:	e0a0      	b.n	8001336 <send+0x19a>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <send+0x64>
 80011fa:	89bb      	ldrh	r3, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <send+0x6a>
 8001200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001204:	e097      	b.n	8001336 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fd67 	bl	8000cdc <get_SRStatus>
 800120e:	4603      	mov	r3, r0
 8001210:	2b17      	cmp	r3, #23
 8001212:	d001      	beq.n	8001218 <send+0x7c>
 8001214:	2300      	movs	r3, #0
 8001216:	e08e      	b.n	8001336 <send+0x19a>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001218:	e004      	b.n	8001224 <send+0x88>
		if(flag == 1) return 0;	// NONE BLOCKING
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <send+0x88>
 8001220:	2300      	movs	r3, #0
 8001222:	e088      	b.n	8001336 <send+0x19a>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fd74 	bl	8000d14 <get_TXFSRStatus>
 800122c:	4603      	mov	r3, r0
 800122e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f1      	beq.n	800121a <send+0x7e>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd8f 	bl	8000d5c <get_TXWRStatus>
 800123e:	4603      	mov	r3, r0
 8001240:	83bb      	strh	r3, [r7, #28]

	// check write length
	if(send_size > len) send_size = len;
 8001242:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001244:	89bb      	ldrh	r3, [r7, #12]
 8001246:	429a      	cmp	r2, r3
 8001248:	d901      	bls.n	800124e <send+0xb2>
 800124a:	89bb      	ldrh	r3, [r7, #12]
 800124c:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 800124e:	7bf9      	ldrb	r1, [r7, #15]
 8001250:	8bba      	ldrh	r2, [r7, #28]
 8001252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	f7ff fe3f 	bl	8000edc <write_memory>

	// pointer update
	write_ptr += send_size;
 800125e:	8bba      	ldrh	r2, [r7, #28]
 8001260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001262:	4413      	add	r3, r2
 8001264:	83bb      	strh	r3, [r7, #28]
	set_TXWR(sck_fd, write_ptr);
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	8bbb      	ldrh	r3, [r7, #28]
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fdbd 	bl	8000dec <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fd95 	bl	8000da4 <get_TXRD>
 800127a:	4603      	mov	r3, r0
 800127c:	837b      	strh	r3, [r7, #26]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd6b 	bl	8000d5c <get_TXWRStatus>
 8001286:	4603      	mov	r3, r0
 8001288:	833b      	strh	r3, [r7, #24]
	uint8_t data [write_ptr-start]; 	
 800128a:	8bba      	ldrh	r2, [r7, #28]
 800128c:	8b7b      	ldrh	r3, [r7, #26]
 800128e:	1ad1      	subs	r1, r2, r3
 8001290:	466b      	mov	r3, sp
 8001292:	461e      	mov	r6, r3
 8001294:	1e4b      	subs	r3, r1, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	460b      	mov	r3, r1
 800129a:	461a      	mov	r2, r3
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80012a4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80012a8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80012ac:	460b      	mov	r3, r1
 80012ae:	461a      	mov	r2, r3
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	00dd      	lsls	r5, r3, #3
 80012b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80012ba:	00d4      	lsls	r4, r2, #3
 80012bc:	460b      	mov	r3, r1
 80012be:	3307      	adds	r3, #7
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	ebad 0d03 	sub.w	sp, sp, r3
 80012c8:	466b      	mov	r3, sp
 80012ca:	3300      	adds	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
	spi_dma_read(start+0x8000, write_ptr-start );
 80012ce:	8b7b      	ldrh	r3, [r7, #26]
 80012d0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	8bb9      	ldrh	r1, [r7, #28]
 80012d8:	8b7b      	ldrh	r3, [r7, #26]
 80012da:	1acb      	subs	r3, r1, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fb69 	bl	80009b8 <spi_dma_read>
	memcpy(data, bufferRX +4, write_ptr-start);
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	8bb9      	ldrh	r1, [r7, #28]
 80012ea:	8b7b      	ldrh	r3, [r7, #26]
 80012ec:	1acb      	subs	r3, r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	4914      	ldr	r1, [pc, #80]	; (8001344 <send+0x1a8>)
 80012f2:	461a      	mov	r2, r3
 80012f4:	f7fe ff72 	bl	80001dc <memcpy>

	
	// test function 
	
	// send command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	2120      	movs	r1, #32
 800130c:	f7ff fb08 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001310:	bf00      	nop
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fcc5 	bl	8000ca4 <get_CRStatus>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f8      	bne.n	8001312 <send+0x176>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 8001320:	bf00      	nop
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd3d 	bl	8000da4 <get_TXRD>
 800132a:	4603      	mov	r3, r0
 800132c:	8bba      	ldrh	r2, [r7, #28]
 800132e:	429a      	cmp	r2, r3
 8001330:	d1f7      	bne.n	8001322 <send+0x186>

	return send_size;
 8001332:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001334:	46b5      	mov	sp, r6
}
 8001336:	4618      	mov	r0, r3
 8001338:	372c      	adds	r7, #44	; 0x2c
 800133a:	46bd      	mov	sp, r7
 800133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001340:	20000480 	.word	0x20000480
 8001344:	20013204 	.word	0x20013204

08001348 <recv>:
	return code is received data size.
	if received disconnect from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	4601      	mov	r1, r0
 8001352:	73f9      	strb	r1, [r7, #15]
 8001354:	81ba      	strh	r2, [r7, #12]
 8001356:	80fb      	strh	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b07      	cmp	r3, #7
 800135c:	d804      	bhi.n	8001368 <recv+0x20>
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <recv+0xe0>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d002      	beq.n	800136e <recv+0x26>
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136c:	e057      	b.n	800141e <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <recv+0x32>
 8001374:	89bb      	ldrh	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <recv+0x38>
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137e:	e04e      	b.n	800141e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fcaa 	bl	8000cdc <get_SRStatus>
 8001388:	4603      	mov	r3, r0
 800138a:	2b17      	cmp	r3, #23
 800138c:	d001      	beq.n	8001392 <recv+0x4a>
 800138e:	2300      	movs	r3, #0
 8001390:	e045      	b.n	800141e <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 8001392:	e004      	b.n	800139e <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <recv+0x56>
 800139a:	2300      	movs	r3, #0
 800139c:	e03f      	b.n	800141e <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fd3b 	bl	8000e1c <get_RXRSR>
 80013a6:	4603      	mov	r3, r0
 80013a8:	82fb      	strh	r3, [r7, #22]
 80013aa:	8afb      	ldrh	r3, [r7, #22]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f1      	beq.n	8001394 <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fd56 	bl	8000e64 <get_RXRD>
 80013b8:	4603      	mov	r3, r0
 80013ba:	82bb      	strh	r3, [r7, #20]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 80013bc:	89ba      	ldrh	r2, [r7, #12]
 80013be:	8afb      	ldrh	r3, [r7, #22]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	bf38      	it	cc
 80013c4:	4613      	movcc	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	7bf9      	ldrb	r1, [r7, #15]
 80013ca:	8aba      	ldrh	r2, [r7, #20]
 80013cc:	4608      	mov	r0, r1
 80013ce:	4611      	mov	r1, r2
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	f7ff fddb 	bl	8000f8c <read_memory>

	// update pointer
	read_ptr += read_len;
 80013d6:	8aba      	ldrh	r2, [r7, #20]
 80013d8:	8afb      	ldrh	r3, [r7, #22]
 80013da:	4413      	add	r3, r2
 80013dc:	82bb      	strh	r3, [r7, #20]
	set_RXRD(sck_fd, read_ptr);
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	8abb      	ldrh	r3, [r7, #20]
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fd61 	bl	8000eac <set_RXRD>

	// recive command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	f7ff fa8f 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 8001402:	bf00      	nop
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc4c 	bl	8000ca4 <get_CRStatus>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f8      	bne.n	8001404 <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 8001412:	89ba      	ldrh	r2, [r7, #12]
 8001414:	8afb      	ldrh	r3, [r7, #22]
 8001416:	429a      	cmp	r2, r3
 8001418:	bf38      	it	cc
 800141a:	4613      	movcc	r3, r2
 800141c:	b29b      	uxth	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000480 	.word	0x20000480

0800142c <listen>:
//	func listen 
//==================================================================================//


int	listen(int sck_fd)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db08      	blt.n	800144c <listen+0x20>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b07      	cmp	r3, #7
 800143e:	dc05      	bgt.n	800144c <listen+0x20>
 8001440:	4a22      	ldr	r2, [pc, #136]	; (80014cc <listen+0xa0>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d002      	beq.n	8001452 <listen+0x26>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001450:	e038      	b.n	80014c4 <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fc40 	bl	8000cdc <get_SRStatus>
 800145c:	4603      	mov	r3, r0
 800145e:	2b13      	cmp	r3, #19
 8001460:	d002      	beq.n	8001468 <listen+0x3c>
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001466:	e02d      	b.n	80014c4 <listen+0x98>


	uint8_t b;
	spi_dma_read(W5200_Sn_IR(sck_fd), 1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	b29b      	uxth	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b29b      	uxth	r3, r3
 8001470:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001474:	3302      	adds	r3, #2
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	2101      	movs	r1, #1
 800147c:	f7ff fa9c 	bl	80009b8 <spi_dma_read>
	memcpy(&b, bufferRX + 4, 1);
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <listen+0xa4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	73fb      	strb	r3, [r7, #15]

	// CONNECT command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	b29b      	uxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001492:	3301      	adds	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	2102      	movs	r1, #2
 800149a:	f7ff fa41 	bl	8000920 <spi_dma_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 800149e:	bf00      	nop
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fbfd 	bl	8000ca4 <get_CRStatus>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f7      	bne.n	80014a0 <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 80014b0:	bf00      	nop
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fc10 	bl	8000cdc <get_SRStatus>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b14      	cmp	r3, #20
 80014c0:	d1f7      	bne.n	80014b2 <listen+0x86>
	 
	return 0;	// listen success complete
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000480 	.word	0x20000480
 80014d0:	20013204 	.word	0x20013204

080014d4 <locate_interrupt>:

//==================================================================================
////	func locate_interrupt
//==================================================================================
void locate_interrupt()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	* interupt plus on which socket interrupt occured. \n
	* It depends on interrupt what follows
	* ****************************************************** */
	uint8_t sckt,		code; 
	// read on which socket interrupt occured 
	spi_dma_read(W5200_IMR2, 1);
 80014da:	2036      	movs	r0, #54	; 0x36
 80014dc:	2101      	movs	r1, #1
 80014de:	f7ff fa6b 	bl	80009b8 <spi_dma_read>
	memcpy(&sckt, bufferRX + 4, 1);
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <locate_interrupt+0xa8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]

	// read interrupt code 
	spi_dma_read(W5200_Sn_IR(sckt), 1);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014f2:	3302      	adds	r3, #2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	2101      	movs	r1, #1
 80014fa:	f7ff fa5d 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX +4 , 1);
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <locate_interrupt+0xa8>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	71bb      	strb	r3, [r7, #6]
       
	// clear interrupt on W5200
	spi_dma_sendByte(W5200_Sn_IR(sckt), 0xff);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800150e:	3302      	adds	r3, #2
 8001510:	b29b      	uxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	21ff      	movs	r1, #255	; 0xff
 8001516:	f7ff fa03 	bl	8000920 <spi_dma_sendByte>



	switch (code )
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	3b01      	subs	r3, #1
 800151e:	2b0f      	cmp	r3, #15
 8001520:	d828      	bhi.n	8001574 <locate_interrupt+0xa0>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <locate_interrupt+0x54>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	08001575 	.word	0x08001575
 800152c:	08001575 	.word	0x08001575
 8001530:	08001575 	.word	0x08001575
 8001534:	08001569 	.word	0x08001569
 8001538:	08001575 	.word	0x08001575
 800153c:	08001575 	.word	0x08001575
 8001540:	08001575 	.word	0x08001575
 8001544:	08001575 	.word	0x08001575
 8001548:	08001575 	.word	0x08001575
 800154c:	08001575 	.word	0x08001575
 8001550:	08001575 	.word	0x08001575
 8001554:	08001575 	.word	0x08001575
 8001558:	08001575 	.word	0x08001575
 800155c:	08001575 	.word	0x08001575
 8001560:	08001575 	.word	0x08001575
 8001564:	08001575 	.word	0x08001575

			// do nothing 
			break;
		case 0x4:// Receive interuppts whenever data packet is received from a peer 
			//vTaskResume(motorHBHandle);
			vTaskResume(set_macTaskHandle); 
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <locate_interrupt+0xac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f001 ffa9 	bl	80034c4 <vTaskResume>
			//vTaskResume(motorHeartBeatHandle);
			break;
 8001572:	e000      	b.n	8001576 <locate_interrupt+0xa2>
		case 0x10:
			break;
		default:
			break;		
 8001574:	bf00      	nop
	}
}
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20013204 	.word	0x20013204
 8001580:	200141b8 	.word	0x200141b8

08001584 <EXTI4_IRQHandler>:

//==================================================================================
//// EXTI4_IRQHandler
//==================================================================================
void EXTI4_IRQHandler(void) //EXTI0 ISR
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	 * Interuppt service routine for wiznet it locates interrupt and resets 
	 * interrupt line. 
	 * *******************************************************************/
	
	
	if(EXTI_GetITStatus(WIZ_IT_EXTI_LINE) != RESET) //check if EXTI line is asserted
 8001588:	2010      	movs	r0, #16
 800158a:	f005 fb49 	bl	8006c20 <EXTI_GetITStatus>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <EXTI4_IRQHandler+0x1a>
	{
		
	//	taskENTER_CRITICAL();
		locate_interrupt();	
 8001594:	f7ff ff9e 	bl	80014d4 <locate_interrupt>
		
		EXTI_ClearFlag(WIZ_IT_EXTI_LINE); //clear interrupt
 8001598:	2010      	movs	r0, #16
 800159a:	f005 fb27 	bl	8006bec <EXTI_ClearFlag>

	//	taskEXIT_CRITICAL();
 	
	}
}
 800159e:	bd80      	pop	{r7, pc}

080015a0 <set_macTask>:
//============================================================================/
// func set_macTask 
//==================================================================================

void set_macTask(void *pvParameters)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0e0      	sub	sp, #384	; 0x180
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	6018      	str	r0, [r3, #0]
        {

	
		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(NULL);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f001 ff10 	bl	80033d0 <vTaskSuspend>
		
		// interrupt on W5200 occured 
		// receive data 
		len = recv(socket_0, buf, 100, 0);
 80015b0:	4b30      	ldr	r3, [pc, #192]	; (8001674 <set_macTask+0xd4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	2264      	movs	r2, #100	; 0x64
 80015c0:	2300      	movs	r3, #0
 80015c2:	f7ff fec1 	bl	8001348 <recv>
 80015c6:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c

		if ( len < 3 )
 80015ca:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	dc1f      	bgt.n	8001612 <set_macTask+0x72>
		{
				
			FreeRTOS_CLIProcessCommand ( oldbuf, buf1, 256);
 80015d2:	f107 0208 	add.w	r2, r7, #8
 80015d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e2:	f003 ff55 	bl	8005490 <FreeRTOS_CLIProcessCommand>
			
			int slen = strlen(buf1);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f006 fe00 	bl	80081f0 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			
			send(socket_0, buf1,  slen, gl);
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <set_macTask+0xd4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001600:	b29a      	uxth	r2, r3
 8001602:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001606:	b29b      	uxth	r3, r3
 8001608:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800160c:	f7ff fdc6 	bl	800119c <send>
		
	
		

		
	}	
 8001610:	e7cb      	b.n	80015aa <set_macTask+0xa>

		}	
	
		else 
		{		
			buf[len-2]='\0';
 8001612:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001616:	3b02      	subs	r3, #2
 8001618:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800161c:	4413      	add	r3, r2
 800161e:	2200      	movs	r2, #0
 8001620:	f803 2c44 	strb.w	r2, [r3, #-68]
			// proces data with CLI 
		
			FreeRTOS_CLIProcessCommand ( buf, buf1, 256);
 8001624:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001628:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001634:	f003 ff2c 	bl	8005490 <FreeRTOS_CLIProcessCommand>
			
			int slen = strlen(buf1);
 8001638:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800163c:	4618      	mov	r0, r3
 800163e:	f006 fdd7 	bl	80081f0 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			
			send(socket_0, buf1,  slen, gl);
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <set_macTask+0xd4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001652:	b29a      	uxth	r2, r3
 8001654:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001658:	b29b      	uxth	r3, r3
 800165a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800165e:	f7ff fd9d 	bl	800119c <send>

			strcpy(oldbuf, buf);
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f006 fd61 	bl	8008134 <strcpy>
		
	
		

		
	}	
 8001672:	e79a      	b.n	80015aa <set_macTask+0xa>
 8001674:	200131f4 	.word	0x200131f4

08001678 <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1


void init_USARTx(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 800167e:	2020      	movs	r0, #32
 8001680:	2101      	movs	r1, #1
 8001682:	f005 fe6b 	bl	800735c <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 8001686:	2004      	movs	r0, #4
 8001688:	2101      	movs	r1, #1
 800168a:	f005 fe2f 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 800168e:	2004      	movs	r0, #4
 8001690:	2101      	movs	r1, #1
 8001692:	f005 fe2b 	bl	80072ec <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 8001696:	2040      	movs	r0, #64	; 0x40
 8001698:	2101      	movs	r1, #1
 800169a:	f005 fe27 	bl	80072ec <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 800169e:	23c0      	movs	r3, #192	; 0xc0
 80016a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 80016a2:	2302      	movs	r3, #2
 80016a4:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 80016a6:	2303      	movs	r3, #3
 80016a8:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 80016aa:	2300      	movs	r3, #0
 80016ac:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	4829      	ldr	r0, [pc, #164]	; (800175c <init_USARTx+0xe4>)
 80016b8:	4619      	mov	r1, r3
 80016ba:	f005 fb2f 	bl	8006d1c <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 80016be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80016c4:	2301      	movs	r3, #1
 80016c6:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80016c8:	2300      	movs	r3, #0
 80016ca:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80016cc:	2303      	movs	r3, #3
 80016ce:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4821      	ldr	r0, [pc, #132]	; (8001760 <init_USARTx+0xe8>)
 80016da:	4619      	mov	r1, r3
 80016dc:	f005 fb1e 	bl	8006d1c <GPIO_Init>

	DD() // set PG8 high
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <init_USARTx+0xe8>)
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <init_USARTx+0xe8>)
 80016e4:	8b12      	ldrh	r2, [r2, #24]
 80016e6:	b292      	uxth	r2, r2
 80016e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ec:	b292      	uxth	r2, r2
 80016ee:	831a      	strh	r2, [r3, #24]
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 80016f0:	481a      	ldr	r0, [pc, #104]	; (800175c <init_USARTx+0xe4>)
 80016f2:	2106      	movs	r1, #6
 80016f4:	2208      	movs	r2, #8
 80016f6:	f005 fc27 	bl	8006f48 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 80016fa:	4818      	ldr	r0, [pc, #96]	; (800175c <init_USARTx+0xe4>)
 80016fc:	2107      	movs	r1, #7
 80016fe:	2208      	movs	r2, #8
 8001700:	f005 fc22 	bl	8006f48 <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 8001704:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001708:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800170a:	2300      	movs	r3, #0
 800170c:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 800170e:	2300      	movs	r3, #0
 8001710:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8001712:	2300      	movs	r3, #0
 8001714:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001716:	2300      	movs	r3, #0
 8001718:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 800171a:	230c      	movs	r3, #12
 800171c:	827b      	strh	r3, [r7, #18]
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <init_USARTx+0xec>)
 8001724:	4619      	mov	r1, r3
 8001726:	f006 f90d 	bl	8007944 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 800172a:	480e      	ldr	r0, [pc, #56]	; (8001764 <init_USARTx+0xec>)
 800172c:	f240 5125 	movw	r1, #1317	; 0x525
 8001730:	2201      	movs	r2, #1
 8001732:	f006 fac1 	bl	8007cb8 <USART_ITConfig>
	
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 8001736:	2347      	movs	r3, #71	; 0x47
 8001738:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;;// this sets the priority group of the USART1 interrupts
 800173a:	2307      	movs	r3, #7
 800173c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x6;		 // this sets the subpriority inside the group
 800173e:	2306      	movs	r3, #6
 8001740:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8001742:	2301      	movs	r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f004 f985 	bl	8005a58 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <init_USARTx+0xec>)
 8001750:	2101      	movs	r1, #1
 8001752:	f006 fa5d 	bl	8007c10 <USART_Cmd>
}
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40020800 	.word	0x40020800
 8001760:	40021800 	.word	0x40021800
 8001764:	40011400 	.word	0x40011400

08001768 <USART_puts>:


void USART_puts(uint8_t *s, int nb)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	 * 
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
	while(i < nb && *s){
 8001776:	e010      	b.n	800179a <USART_puts+0x32>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) ); 
 8001778:	bf00      	nop
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <USART_puts+0x4c>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f8      	beq.n	800177a <USART_puts+0x12>
		//USART_SendData(USART6, s[i]);
		USARTx->DR = s[i];
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <USART_puts+0x4c>)
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	440a      	add	r2, r1
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	809a      	strh	r2, [r3, #4]
		i++;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
	while(i < nb && *s){
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	da03      	bge.n	80017aa <USART_puts+0x42>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1e6      	bne.n	8001778 <USART_puts+0x10>
		i++;
	
	}
	
	
}
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40011400 	.word	0x40011400

080017b8 <USART6_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART6 interrupts
void USART6_IRQHandler(void){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	
	

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USARTx, USART_IT_RXNE) ){
 80017be:	4822      	ldr	r0, [pc, #136]	; (8001848 <USART6_IRQHandler+0x90>)
 80017c0:	f240 5125 	movw	r1, #1317	; 0x525
 80017c4:	f006 fb36 	bl	8007e34 <USART_GetITStatus>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d030      	beq.n	8001830 <USART6_IRQHandler+0x78>
		
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		volatile char t = USARTx->DR; // the character from the USART1 data register is saved in t
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <USART6_IRQHandler+0x90>)
 80017d0:	889b      	ldrh	r3, [r3, #4]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	71fb      	strb	r3, [r7, #7]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		xHigherPriorityTaskWoken_usart = pdFalse;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <USART6_IRQHandler+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

		
		if( (cnt < rx_length  ) && (cnt < MAX_STRLEN) ){ 
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <USART6_IRQHandler+0x98>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <USART6_IRQHandler+0x9c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	da0c      	bge.n	8001806 <USART6_IRQHandler+0x4e>
			received_string[cnt] = t;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <USART6_IRQHandler+0x98>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	b2d1      	uxtb	r1, r2
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <USART6_IRQHandler+0xa0>)
 80017f6:	54d1      	strb	r1, [r2, r3]
			cnt++;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <USART6_IRQHandler+0x98>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <USART6_IRQHandler+0x98>)
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e014      	b.n	8001830 <USART6_IRQHandler+0x78>
		}
		else{ // otherwise reset the character counter and print the received string
			received_string[cnt] = t; 
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <USART6_IRQHandler+0x98>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	b2d1      	uxtb	r1, r2
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <USART6_IRQHandler+0xa0>)
 8001810:	54d1      	strb	r1, [r2, r3]
			cnt = 0;
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <USART6_IRQHandler+0x98>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
		//	USART_ITConfig(USART6, USART_IT_RXNE, DISABLE); 
		taskENTER_CRITICAL();
 8001818:	f003 fad4 	bl	8004dc4 <vPortEnterCritical>
			xSemaphoreGiveFromISR(xSmphrUSART,&xHigherPriorityTaskWoken_usart );
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <USART6_IRQHandler+0xa4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	2100      	movs	r1, #0
 8001824:	4a09      	ldr	r2, [pc, #36]	; (800184c <USART6_IRQHandler+0x94>)
 8001826:	2300      	movs	r3, #0
 8001828:	f002 fede 	bl	80045e8 <xQueueGenericSendFromISR>
		taskEXIT_CRITICAL();
 800182c:	f003 fada 	bl	8004de4 <vPortExitCritical>
			//USART_puts(USART1, received_string);
		}


	}
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken_usart );	
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <USART6_IRQHandler+0x94>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <USART6_IRQHandler+0x88>
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <USART6_IRQHandler+0xa8>)
 800183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40011400 	.word	0x40011400
 800184c:	20000488 	.word	0x20000488
 8001850:	2000048c 	.word	0x2000048c
 8001854:	200141d4 	.word	0x200141d4
 8001858:	200141d8 	.word	0x200141d8
 800185c:	200141a8 	.word	0x200141a8
 8001860:	e000ed04 	.word	0xe000ed04

08001864 <crc16>:



/* function for  */
uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001870:	23ff      	movs	r3, #255	; 0xff
 8001872:	73fb      	strb	r3, [r7, #15]
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001874:	23ff      	movs	r3, #255	; 0xff
 8001876:	73bb      	strb	r3, [r7, #14]
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 8001878:	e013      	b.n	80018a2 <crc16+0x3e>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	4053      	eors	r3, r2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	60bb      	str	r3, [r7, #8]
         crc_hi = crc_lo ^ table_crc_hi[i];
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <crc16+0x64>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4413      	add	r3, r2
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	4053      	eors	r3, r2
 8001896:	73fb      	strb	r3, [r7, #15]
         crc_lo = table_crc_lo[i];
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <crc16+0x68>)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	73bb      	strb	r3, [r7, #14]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	807a      	strh	r2, [r7, #2]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e6      	bne.n	800187a <crc16+0x16>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
         crc_hi = crc_lo ^ table_crc_hi[i];
         crc_lo = table_crc_lo[i];
     }
 
     return (crc_hi << 8 | crc_lo);
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	7bbb      	ldrb	r3, [r7, #14]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	b29b      	uxth	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	08008c98 	.word	0x08008c98
 80018cc:	08008d98 	.word	0x08008d98

080018d0 <modbus_confirmation>:

/* modbus_confirmation */ 

int modbus_confirmation ( uint8_t * req, uint8_t * rsp, uint16_t write_len, uint16_t read_len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	80fa      	strh	r2, [r7, #6]
 80018dc:	80bb      	strh	r3, [r7, #4]
	uint16_t crc = crc16(rsp, read_len - 2 );
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	3b02      	subs	r3, #2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff ffbc 	bl	8001864 <crc16>
 80018ec:	4603      	mov	r3, r0
 80018ee:	82fb      	strh	r3, [r7, #22]

	if (	rsp[read_len -1 ] == ( crc & 0x00ff ) && 
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	8afb      	ldrh	r3, [r7, #22]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	429a      	cmp	r2, r3
 8001902:	d10c      	bne.n	800191e <modbus_confirmation+0x4e>
		rsp[read_len - 2 ] == ( crc >> 8 ) ) return 1; 
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	3b02      	subs	r3, #2
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	8afb      	ldrh	r3, [r7, #22]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3

int modbus_confirmation ( uint8_t * req, uint8_t * rsp, uint16_t write_len, uint16_t read_len)
{
	uint16_t crc = crc16(rsp, read_len - 2 );

	if (	rsp[read_len -1 ] == ( crc & 0x00ff ) && 
 8001916:	429a      	cmp	r2, r3
 8001918:	d101      	bne.n	800191e <modbus_confirmation+0x4e>
		rsp[read_len - 2 ] == ( crc >> 8 ) ) return 1; 
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <modbus_confirmation+0x50>
	return 0; 
 800191e:	2300      	movs	r3, #0
	
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <write_read_modbus>:

/* write to modbus */
void write_read_modbus( uint8_t * req, uint8_t * rsp, int write_len, int read_len )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
	int i; 

	// tell ISR we expect only specific amount of data
	rx_length = read_len + write_len - 1 ; 
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	1e5a      	subs	r2, r3, #1
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <write_read_modbus+0xac>)
 8001940:	601a      	str	r2, [r3, #0]

	// driver disable 
	DD();
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <write_read_modbus+0xb0>)
 8001944:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <write_read_modbus+0xb0>)
 8001946:	8b12      	ldrh	r2, [r2, #24]
 8001948:	b292      	uxth	r2, r2
 800194a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194e:	b292      	uxth	r2, r2
 8001950:	831a      	strh	r2, [r3, #24]
	for (i=0; i < 4000; i++) ;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e002      	b.n	800195e <write_read_modbus+0x36>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001964:	dbf8      	blt.n	8001958 <write_read_modbus+0x30>
	USART_puts(req,write_len);
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	f7ff fefd 	bl	8001768 <USART_puts>
	for (i = 0; i < 4100; i++);
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e002      	b.n	800197a <write_read_modbus+0x52>
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001980:	429a      	cmp	r2, r3
 8001982:	ddf7      	ble.n	8001974 <write_read_modbus+0x4c>
	// driver enable 
	DE();
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <write_read_modbus+0xb0>)
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <write_read_modbus+0xb0>)
 8001988:	8b52      	ldrh	r2, [r2, #26]
 800198a:	b292      	uxth	r2, r2
 800198c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001990:	b292      	uxth	r2, r2
 8001992:	835a      	strh	r2, [r3, #26]

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <write_read_modbus+0xb4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	2100      	movs	r1, #0
 800199c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a0:	2300      	movs	r3, #0
 80019a2:	f002 fe8b 	bl	80046bc <xQueueGenericReceive>
	
	for (i = 0; i < read_len; i++) 
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e00c      	b.n	80019c6 <write_read_modbus+0x9e>
		rsp[i] = received_string[i+write_len]; 
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	440a      	add	r2, r1
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <write_read_modbus+0xb8>)
 80019ba:	5c8a      	ldrb	r2, [r1, r2]
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
	// driver enable 
	DE();

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
	
	for (i = 0; i < read_len; i++) 
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbee      	blt.n	80019ac <write_read_modbus+0x84>
		rsp[i] = received_string[i+write_len]; 

}
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200141d4 	.word	0x200141d4
 80019d8:	40021800 	.word	0x40021800
 80019dc:	200141a8 	.word	0x200141a8
 80019e0:	200141d8 	.word	0x200141d8

080019e4 <modbus_WIB>:
}


/* modbus write input bits */
uint8_t modbus_WIB( uint16_t address, int nb, uint8_t *src )
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	6019      	str	r1, [r3, #0]
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 030e 	add.w	r3, r7, #14
 80019fa:	4602      	mov	r2, r0
 80019fc:	801a      	strh	r2, [r3, #0]

	uint8_t req[REQ_MAX_LEN];
	uint8_t rsp[REQ_MAX_LEN];
	int byte_count; 
	int req_length; 
	int bit_check = 0; 
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	int pos = 0; 
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	
	req[0] = 0x36; 
 8001a0a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a0e:	2236      	movs	r2, #54	; 0x36
 8001a10:	701a      	strb	r2, [r3, #0]
	req[1] = 0xF;
 8001a12:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a16:	220f      	movs	r2, #15
 8001a18:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001a1a:	f107 030e 	add.w	r3, r7, #14
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a2a:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001a2c:	f107 030e 	add.w	r3, r7, #14
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a38:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	121b      	asrs	r3, r3, #8
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a48:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001a56:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001a58:	2306      	movs	r3, #6
 8001a5a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <modbus_WIB+0x86>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	2301      	movne	r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  	req[req_length++] = byte_count;
 8001a88:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001a92:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001a96:	b2d1      	uxtb	r1, r2
 8001a98:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001a9c:	54d1      	strb	r1, [r2, r3]

	int i; 
    	for (i = 0; i < byte_count; i++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001aa4:	e05c      	b.n	8001b60 <modbus_WIB+0x17c>
        
		int bit;
		bit = 0x01;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        	req[req_length] = 0;
 8001aac:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001ab0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 8001aba:	e038      	b.n	8001b2e <modbus_WIB+0x14a>
            		if (src[pos++])
 8001abc:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8001ac6:	1d3a      	adds	r2, r7, #4
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d013      	beq.n	8001afa <modbus_WIB+0x116>
                		req[req_length] |= bit;
 8001ad2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001ad6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001af0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001af4:	440b      	add	r3, r1
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e014      	b.n	8001b24 <modbus_WIB+0x140>
            		else
                		req[req_length] &=~ bit;
 8001afa:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001afe:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4013      	ands	r3, r2
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001b1c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b20:	440b      	add	r3, r1
 8001b22:	701a      	strb	r2, [r3, #0]

            		bit = bit << 1;
 8001b24:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        
		int bit;
		bit = 0x01;
        	req[req_length] = 0;

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 8001b2e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <modbus_WIB+0x168>
 8001b38:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 8001b42:	f107 0208 	add.w	r2, r7, #8
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	dbb7      	blt.n	8001abc <modbus_WIB+0xd8>
                		req[req_length] &=~ bit;

            		bit = bit << 1;
        	}	
        	
		req_length++;
 8001b4c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b50:	3301      	adds	r3, #1
 8001b52:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
  	req[req_length++] = byte_count;

	int i; 
    	for (i = 0; i < byte_count; i++) {
 8001b56:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001b60:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001b64:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	db9c      	blt.n	8001aa6 <modbus_WIB+0xc2>
        	}	
        	
		req_length++;
	 }

	uint16_t crc = crc16(req, req_length);
 8001b6c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff fe73 	bl	8001864 <crc16>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416

	req[req_length++] = crc >> 8; 
 8001b84:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001b8e:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8001b92:	0a12      	lsrs	r2, r2, #8
 8001b94:	b292      	uxth	r2, r2
 8001b96:	b2d1      	uxtb	r1, r2
 8001b98:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001b9c:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001b9e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8001ba8:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8001bac:	b2d1      	uxtb	r1, r2
 8001bae:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001bb2:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req,rsp, req_length ,8); 
 8001bb4:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	f7ff feaf 	bl	8001928 <write_read_modbus>
	return modbus_confirmation (req, rsp,req_length, 8); 
 8001bca:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001bd4:	f107 0214 	add.w	r2, r7, #20
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2308      	movs	r3, #8
 8001be0:	f7ff fe76 	bl	80018d0 <modbus_confirmation>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b2db      	uxtb	r3, r3

	
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop

08001bf4 <modbus_WR>:

/* Write the values from the array to the registers of the remote device */
uint8_t modbus_WR( int address, int nb, const uint16_t *src)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	6018      	str	r0, [r3, #0]
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	6019      	str	r1, [r3, #0]
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	601a      	str	r2, [r3, #0]
    	int byte_count;

    	uint8_t req[REQ_MAX_LEN];
	uint8_t rsp[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001c0c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c10:	2236      	movs	r2, #54	; 0x36
 8001c12:	701a      	strb	r2, [r3, #0]
	req[1] = 0x10;
 8001c14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c18:	2210      	movs	r2, #16
 8001c1a:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	121b      	asrs	r3, r3, #8
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c2a:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c38:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	121b      	asrs	r3, r3, #8
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c48:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c56:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001c58:	2306      	movs	r3, #6
 8001c5a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	
   	byte_count = nb * 2;
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    	req[req_length++] = byte_count;
 8001c6a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001c74:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001c78:	b2d1      	uxtb	r1, r2
 8001c7a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001c7e:	54d1      	strb	r1, [r2, r3]

    for (i = 0; i < nb; i++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001c86:	e026      	b.n	8001cd6 <modbus_WR+0xe2>
		req[req_length++] = src[i] >> 8;
 8001c88:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001c92:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001c96:	0052      	lsls	r2, r2, #1
 8001c98:	1d39      	adds	r1, r7, #4
 8001c9a:	6809      	ldr	r1, [r1, #0]
 8001c9c:	440a      	add	r2, r1
 8001c9e:	8812      	ldrh	r2, [r2, #0]
 8001ca0:	0a12      	lsrs	r2, r2, #8
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	b2d1      	uxtb	r1, r2
 8001ca6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001caa:	54d1      	strb	r1, [r2, r3]
        	req[req_length++] = src[i] & 0x00ff;
 8001cac:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001cb6:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001cba:	0052      	lsls	r2, r2, #1
 8001cbc:	1d39      	adds	r1, r7, #4
 8001cbe:	6809      	ldr	r1, [r1, #0]
 8001cc0:	440a      	add	r2, r1
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	b2d1      	uxtb	r1, r2
 8001cc6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001cca:	54d1      	strb	r1, [r2, r3]
	req_length = 6; 
	
   	byte_count = nb * 2;
    	req[req_length++] = byte_count;

    for (i = 0; i < nb; i++) {
 8001ccc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbd1      	blt.n	8001c88 <modbus_WR+0x94>
		req[req_length++] = src[i] >> 8;
        	req[req_length++] = src[i] & 0x00ff;
    	}

	uint16_t crc = crc16(req, req_length);
 8001ce4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7ff fdb7 	bl	8001864 <crc16>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412

	req[req_length++] = crc >> 8; 
 8001cfc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001d06:	f8b7 2412 	ldrh.w	r2, [r7, #1042]	; 0x412
 8001d0a:	0a12      	lsrs	r2, r2, #8
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	b2d1      	uxtb	r1, r2
 8001d10:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d14:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff;
 8001d16:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8001d20:	f8b7 2412 	ldrh.w	r2, [r7, #1042]	; 0x412
 8001d24:	b2d1      	uxtb	r1, r2
 8001d26:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d2a:	54d1      	strb	r1, [r2, r3]

	/* write request  to modbus line */
	write_read_modbus( req, rsp, req_length, 8); 
 8001d2c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	f7ff fdf3 	bl	8001928 <write_read_modbus>
	return modbus_confirmation (req, rsp,req_length, 8); 
 8001d42:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001d4c:	f107 0210 	add.w	r2, r7, #16
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	2308      	movs	r3, #8
 8001d58:	f7ff fdba 	bl	80018d0 <modbus_confirmation>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b2db      	uxtb	r3, r3



}
 8001d60:	4618      	mov	r0, r3
 8001d62:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop

08001d6c <modbus_RR>:
}


/* Read the values from the array to the registers of the remote device */
uint8_t modbus_RR( int address, int nb, uint16_t *src)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	6018      	str	r0, [r3, #0]
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	6019      	str	r1, [r3, #0]
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	601a      	str	r2, [r3, #0]
    	int req_length;
	int byte_count;
    	uint8_t req[REQ_MAX_LEN];
  	uint8_t rsp[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001d84:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001d88:	2236      	movs	r2, #54	; 0x36
 8001d8a:	701a      	strb	r2, [r3, #0]
	req[1] = 0x4;
 8001d8c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001d90:	2204      	movs	r2, #4
 8001d92:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	121b      	asrs	r3, r3, #8
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001da2:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001db0:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	121b      	asrs	r3, r3, #8
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001dc0:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001dce:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
   	
	byte_count = nb * 2;
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    	req[req_length++] = byte_count;
 8001de2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001dec:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001df0:	b2d1      	uxtb	r1, r2
 8001df2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001df6:	54d1      	strb	r1, [r2, r3]
	
	uint16_t crc = crc16(req, req_length);
 8001df8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7ff fd2d 	bl	8001864 <crc16>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a

	req[req_length++] = crc >> 8; 
 8001e10:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001e1a:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001e1e:	0a12      	lsrs	r2, r2, #8
 8001e20:	b292      	uxth	r2, r2
 8001e22:	b2d1      	uxtb	r1, r2
 8001e24:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001e28:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001e2a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001e34:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001e38:	b2d1      	uxtb	r1, r2
 8001e3a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001e3e:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	3305      	adds	r3, #5
 8001e4a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001e4e:	f107 0214 	add.w	r2, r7, #20
 8001e52:	4608      	mov	r0, r1
 8001e54:	4611      	mov	r1, r2
 8001e56:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001e5a:	f7ff fd65 	bl	8001928 <write_read_modbus>
	
	int offset = 2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	
	for (i = 0; i < nb; i++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001e6a:	e024      	b.n	8001eb6 <modbus_RR+0x14a>
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001e6c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	1d3a      	adds	r2, r7, #4
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001e7c:	1c51      	adds	r1, r2, #1
 8001e7e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001e82:	0052      	lsls	r2, r2, #1
 8001e84:	440a      	add	r2, r1
 8001e86:	f107 0114 	add.w	r1, r7, #20
 8001e8a:	5c8a      	ldrb	r2, [r1, r2]
 8001e8c:	0212      	lsls	r2, r2, #8
 8001e8e:	b291      	uxth	r1, r2
                rsp[offset + 2 + (i << 1)];
 8001e90:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001e94:	1c90      	adds	r0, r2, #2
 8001e96:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001e9a:	0052      	lsls	r2, r2, #1
 8001e9c:	4402      	add	r2, r0
 8001e9e:	f107 0014 	add.w	r0, r7, #20
 8001ea2:	5c82      	ldrb	r2, [r0, r2]
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	801a      	strh	r2, [r3, #0]
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
 8001eac:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbd3      	blt.n	8001e6c <modbus_RR+0x100>
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
                rsp[offset + 2 + (i << 1)];
		
        }

	return modbus_confirmation (req, rsp,req_length, nb*2 + 5); 
 8001ec4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3305      	adds	r3, #5
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001ede:	f107 0114 	add.w	r1, r7, #20
 8001ee2:	f7ff fcf5 	bl	80018d0 <modbus_confirmation>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b2db      	uxtb	r3, r3


}
 8001eea:	4618      	mov	r0, r3
 8001eec:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <motorHeartBeat_task>:
=====================================================================================
============    		TASKS SECTION			===================== 
=====================================================================================
====================================================================================*/
void motorHeartBeat_task(void * pvParameters)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	
	while(1)
	{

		
		modbus_RR(0,10,tab_reg);
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	2000      	movs	r0, #0
 8001f02:	210a      	movs	r1, #10
 8001f04:	461a      	mov	r2, r3
 8001f06:	f7ff ff31 	bl	8001d6c <modbus_RR>

		vTaskDelay(1000/portTICK_RATE_MS);
 8001f0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0e:	f001 fa37 	bl	8003380 <vTaskDelay>

	}
 8001f12:	e7f3      	b.n	8001efc <motorHeartBeat_task+0x8>

08001f14 <motorControl_task>:


}

void motorControl_task(void * pvParameters)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b096      	sub	sp, #88	; 0x58
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	uint16_t spd[5]; 
	

	

	src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
//	spd[0]=1500;spd[1]=0;spd[2]=2250;spd[3]=10;spd[4]=10;
	
	// create usart semaphore 
	xSmphrUSART = xSemaphoreCreateBinary();	
 8001f34:	2001      	movs	r0, #1
 8001f36:	2100      	movs	r1, #0
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f002 fa63 	bl	8004404 <xQueueGenericCreate>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b79      	ldr	r3, [pc, #484]	; (8002128 <motorControl_task+0x214>)
 8001f42:	601a      	str	r2, [r3, #0]
	
	portTickType xDelay = portMAX_DELAY;//3000 / portTICK_RATE_MS;	
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f48:	657b      	str	r3, [r7, #84]	; 0x54
	

	QueueTelegram telegramR, telegramS; 

	telegramR.data[0] = 1000;
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	telegramR.data[1] = 0;	
 8001f50:	2300      	movs	r3, #0
 8001f52:	85fb      	strh	r3, [r7, #46]	; 0x2e
	telegramR.data[2] = 2250;
 8001f54:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001f58:	863b      	strh	r3, [r7, #48]	; 0x30
	telegramR.data[3] = 10;	
 8001f5a:	230a      	movs	r3, #10
 8001f5c:	867b      	strh	r3, [r7, #50]	; 0x32
	telegramR.data[4] = 10;	
 8001f5e:	230a      	movs	r3, #10
 8001f60:	86bb      	strh	r3, [r7, #52]	; 0x34
	telegramR.size = 5;
 8001f62:	2305      	movs	r3, #5
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
	telegramR.Qcmd = SETDATA;	
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	

	int HB_flag = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	653b      	str	r3, [r7, #80]	; 0x50
	while (1)
	{

		
	
		if (xQueueReceive(QSpd_handle, (void *)&telegramR, xDelay  ) == pdPASS)
 8001f70:	4b6e      	ldr	r3, [pc, #440]	; (800212c <motorControl_task+0x218>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f002 fb9c 	bl	80046bc <xQueueGenericReceive>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 80cd 	bne.w	8002126 <motorControl_task+0x212>
		{
			switch ( telegramR.Qcmd )
 8001f8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	f200 80bb 	bhi.w	800210c <motorControl_task+0x1f8>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <motorControl_task+0x88>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fb5 	.word	0x08001fb5
 8001fa0:	08002029 	.word	0x08002029
 8001fa4:	0800210d 	.word	0x0800210d
 8001fa8:	0800210d 	.word	0x0800210d
 8001fac:	08002065 	.word	0x08002065
 8001fb0:	080020bb 	.word	0x080020bb
			{
				case SETDATA:

					src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

					if ( !modbus_WIB( 0 , 3, src))
 8001fcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	2103      	movs	r1, #3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f7ff fd05 	bl	80019e4 <modbus_WIB>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <motorControl_task+0xd0>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}
					vTaskDelay ( 1000 / portTICK_RATE_MS);
 8001fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe8:	f001 f9ca 	bl	8003380 <vTaskDelay>
					
					if (!modbus_WR(0, 5, telegramR.data))
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	2105      	movs	r1, #5
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f7ff fdfc 	bl	8001bf4 <modbus_WR>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <motorControl_task+0xf2>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 8002002:	2307      	movs	r3, #7
 8002004:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 8002006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800200a:	f001 f9b9 	bl	8003380 <vTaskDelay>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 800200e:	2306      	movs	r3, #6
 8002010:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8002012:	4b46      	ldr	r3, [pc, #280]	; (800212c <motorControl_task+0x218>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002020:	2300      	movs	r3, #0
 8002022:	f002 fa31 	bl	8004488 <xQueueGenericSend>

					break;
 8002026:	e07e      	b.n	8002126 <motorControl_task+0x212>
				       	
				
				case GETDATA:
				
					if ( !modbus_RR(0, 10, telegramS.data))
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	3308      	adds	r3, #8
 800202e:	2000      	movs	r0, #0
 8002030:	210a      	movs	r1, #10
 8002032:	461a      	mov	r2, r3
 8002034:	f7ff fe9a 	bl	8001d6c <modbus_RR>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <motorControl_task+0x12e>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 800203e:	2307      	movs	r3, #7
 8002040:	723b      	strb	r3, [r7, #8]
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 8002042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002046:	f001 f99b 	bl	8003380 <vTaskDelay>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 800204a:	2306      	movs	r3, #6
 800204c:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <motorControl_task+0x218>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800205c:	2300      	movs	r3, #0
 800205e:	f002 fa13 	bl	8004488 <xQueueGenericSend>

					break;
 8002062:	e060      	b.n	8002126 <motorControl_task+0x212>

				
				case START: 
					HB_flag = 1; 
 8002064:	2301      	movs	r3, #1
 8002066:	653b      	str	r3, [r7, #80]	; 0x50
					// set motor speed to 10% 
				         src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800206e:	2301      	movs	r3, #1
 8002070:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002074:	2301      	movs	r3, #1
 8002076:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800207a:	2301      	movs	r3, #1
 800207c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

					if( !modbus_WIB( 0 , 3, src) )
 8002080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002084:	2000      	movs	r0, #0
 8002086:	2103      	movs	r1, #3
 8002088:	461a      	mov	r2, r3
 800208a:	f7ff fcab 	bl	80019e4 <modbus_WIB>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <motorControl_task+0x184>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 8002094:	2307      	movs	r3, #7
 8002096:	723b      	strb	r3, [r7, #8]
						telegramS.Qcmd = ERROR_MODBUS;
					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}*/

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 8002098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800209c:	f001 f970 	bl	8003380 <vTaskDelay>

				//	vTaskResume(motorHeartBeatHandle);

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 80020a0:	2306      	movs	r3, #6
 80020a2:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <motorControl_task+0x218>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020b2:	2300      	movs	r3, #0
 80020b4:	f002 f9e8 	bl	8004488 <xQueueGenericSend>

					break;
 80020b8:	e035      	b.n	8002126 <motorControl_task+0x212>
				
				case STOP:
					
					// send stop bits to motor 
					src[0]=0; src[1]=0; src[2]=0; src[3]=0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

					if (!modbus_WIB( 0 , 3, src)) 
 80020d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020d6:	2000      	movs	r0, #0
 80020d8:	2103      	movs	r1, #3
 80020da:	461a      	mov	r2, r3
 80020dc:	f7ff fc82 	bl	80019e4 <modbus_WIB>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <motorControl_task+0x1d6>
					{
							// send response to CLI 
						telegramS.Qcmd = ERROR_MODBUS;
 80020e6:	2307      	movs	r3, #7
 80020e8:	723b      	strb	r3, [r7, #8]
				//		xQueueSend(QSpd_handle, &telegramS, xDelay);
					//	break;
					}

					vTaskDelay ( 1000 / portTICK_RATE_MS);
 80020ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ee:	f001 f947 	bl	8003380 <vTaskDelay>


//					vTaskSuspend (motorHeartBeatHandle);					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 80020f2:	2306      	movs	r3, #6
 80020f4:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <motorControl_task+0x218>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002104:	2300      	movs	r3, #0
 8002106:	f002 f9bf 	bl	8004488 <xQueueGenericSend>

					break; 
 800210a:	e00c      	b.n	8002126 <motorControl_task+0x212>

				default:

					telegramS.Qcmd = ERROR_MODBUS;
 800210c:	2307      	movs	r3, #7
 800210e:	723b      	strb	r3, [r7, #8]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <motorControl_task+0x218>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800211e:	2300      	movs	r3, #0
 8002120:	f002 f9b2 	bl	8004488 <xQueueGenericSend>
					break;
 8002124:	bf00      	nop
			}
		}
	
		
	
	}
 8002126:	e723      	b.n	8001f70 <motorControl_task+0x5c>
 8002128:	200141a8 	.word	0x200141a8
 800212c:	200131f8 	.word	0x200131f8

08002130 <handleVariable_set>:
				int xParamLength,
				xQueueHandle Qhandle,
				uint8_t * Value,
				int xValueLength,
				int socket )
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	499a      	ldr	r1, [pc, #616]	; (80023ac <handleVariable_set+0x27c>)
 8002142:	2205      	movs	r2, #5
 8002144:	f006 f884 	bl	8008250 <strncmp>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 80a2 	bne.w	8002294 <handleVariable_set+0x164>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength] = '\0'; 	
 8002150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	4413      	add	r3, r2
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 800215a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800215c:	f005 ff40 	bl	8007fe0 <atoi>
 8002160:	4603      	mov	r3, r0
 8002162:	83fb      	strh	r3, [r7, #30]
		// if speed is in range
		if(s1 < 1 ||  s1 > 100 )
 8002164:	8bfb      	ldrh	r3, [r7, #30]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <handleVariable_set+0x40>
 800216a:	8bfb      	ldrh	r3, [r7, #30]
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d907      	bls.n	8002180 <handleVariable_set+0x50>
		{
			// send error via TCP
			sprintf(pcWriteBuffer, "Error: speed is out of range [1,100]p : %d\n\n\0", s1);
 8002170:	8bfb      	ldrh	r3, [r7, #30]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	498e      	ldr	r1, [pc, #568]	; (80023b0 <handleVariable_set+0x280>)
 8002176:	461a      	mov	r2, r3
 8002178:	f000 fdc2 	bl	8002d00 <sprintf>
		//	pcWriteBuffer[11+ 3] = "\0"; 
			
			////send( socket_0, buf, 11+3, 0);

	       		return pdFALSE; 	
 800217c:	2300      	movs	r3, #0
 800217e:	e110      	b.n	80023a2 <handleVariable_set+0x272>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8002180:	8bfb      	ldrh	r3, [r7, #30]
 8002182:	461a      	mov	r2, r3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4413      	add	r3, r2
 8002188:	461a      	mov	r2, r3
 800218a:	0091      	lsls	r1, r2, #2
 800218c:	461a      	mov	r2, r3
 800218e:	460b      	mov	r3, r1
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	83fb      	strh	r3, [r7, #30]
		
		// test i
		telegramS.data[1] = 0;	
 8002196:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <handleVariable_set+0x284>)
 8002198:	2200      	movs	r2, #0
 800219a:	815a      	strh	r2, [r3, #10]
		telegramS.data[2] = 2250;
 800219c:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <handleVariable_set+0x284>)
 800219e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 80021a2:	819a      	strh	r2, [r3, #12]
		telegramS.data[3] = 10;	
 80021a4:	4b83      	ldr	r3, [pc, #524]	; (80023b4 <handleVariable_set+0x284>)
 80021a6:	220a      	movs	r2, #10
 80021a8:	81da      	strh	r2, [r3, #14]
		telegramS.data[4] = 10;	
 80021aa:	4b82      	ldr	r3, [pc, #520]	; (80023b4 <handleVariable_set+0x284>)
 80021ac:	220a      	movs	r2, #10
 80021ae:	821a      	strh	r2, [r3, #16]
		telegramS.size = 5;
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <handleVariable_set+0x284>)
 80021b2:	2205      	movs	r2, #5
 80021b4:	605a      	str	r2, [r3, #4]
		telegramS.Qcmd = SETDATA;	
 80021b6:	4b7f      	ldr	r3, [pc, #508]	; (80023b4 <handleVariable_set+0x284>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
		// test /
		// setup telegram 
		telegramS.Qcmd = SETDATA;
 80021bc:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <handleVariable_set+0x284>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
		telegramS.size = 5;
 80021c2:	4b7c      	ldr	r3, [pc, #496]	; (80023b4 <handleVariable_set+0x284>)
 80021c4:	2205      	movs	r2, #5
 80021c6:	605a      	str	r2, [r3, #4]
		telegramS.data[0] = s1;
 80021c8:	4b7a      	ldr	r3, [pc, #488]	; (80023b4 <handleVariable_set+0x284>)
 80021ca:	8bfa      	ldrh	r2, [r7, #30]
 80021cc:	811a      	strh	r2, [r3, #8]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 80021ce:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <handleVariable_set+0x288>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b7a      	ldr	r3, [pc, #488]	; (80023bc <handleVariable_set+0x28c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4610      	mov	r0, r2
 80021d8:	4976      	ldr	r1, [pc, #472]	; (80023b4 <handleVariable_set+0x284>)
 80021da:	461a      	mov	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	f002 f953 	bl	8004488 <xQueueGenericSend>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d142      	bne.n	800226e <handleVariable_set+0x13e>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
 80021e8:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <handleVariable_set+0x288>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b73      	ldr	r3, [pc, #460]	; (80023bc <handleVariable_set+0x28c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4610      	mov	r0, r2
 80021f2:	4973      	ldr	r1, [pc, #460]	; (80023c0 <handleVariable_set+0x290>)
 80021f4:	461a      	mov	r2, r3
 80021f6:	2300      	movs	r3, #0
 80021f8:	f002 fa60 	bl	80046bc <xQueueGenericReceive>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d124      	bne.n	800224c <handleVariable_set+0x11c>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 8002202:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <handleVariable_set+0x290>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b06      	cmp	r3, #6
 8002208:	d111      	bne.n	800222e <handleVariable_set+0xfe>
				{	
					sprintf(pcWriteBuffer, "Speed succsesfully set.\n\n");
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <handleVariable_set+0x294>)
 800220e:	4615      	mov	r5, r2
 8002210:	461c      	mov	r4, r3
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002214:	6028      	str	r0, [r5, #0]
 8002216:	6069      	str	r1, [r5, #4]
 8002218:	60aa      	str	r2, [r5, #8]
 800221a:	60eb      	str	r3, [r5, #12]
 800221c:	cc03      	ldmia	r4!, {r0, r1}
 800221e:	6128      	str	r0, [r5, #16]
 8002220:	6169      	str	r1, [r5, #20]
 8002222:	8823      	ldrh	r3, [r4, #0]
 8002224:	832b      	strh	r3, [r5, #24]
					xWriteBufferLen = 25; 	
 8002226:	2319      	movs	r3, #25
 8002228:	61bb      	str	r3, [r7, #24]
				//	//send( socket, buf, len, 0);


					return pdPASS;
 800222a:	2301      	movs	r3, #1
 800222c:	e0b9      	b.n	80023a2 <handleVariable_set+0x272>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <handleVariable_set+0x298>)
 8002232:	4615      	mov	r5, r2
 8002234:	461c      	mov	r4, r3
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	6028      	str	r0, [r5, #0]
 800223a:	6069      	str	r1, [r5, #4]
 800223c:	60aa      	str	r2, [r5, #8]
 800223e:	60eb      	str	r3, [r5, #12]
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 8002244:	2313      	movs	r3, #19
 8002246:	61bb      	str	r3, [r7, #24]
//					//send( socket, buf, len, 0);

					return pdFALSE;
 8002248:	2300      	movs	r3, #0
 800224a:	e0aa      	b.n	80023a2 <handleVariable_set+0x272>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <handleVariable_set+0x29c>)
 8002250:	4615      	mov	r5, r2
 8002252:	461c      	mov	r4, r3
 8002254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002256:	6028      	str	r0, [r5, #0]
 8002258:	6069      	str	r1, [r5, #4]
 800225a:	60aa      	str	r2, [r5, #8]
 800225c:	60eb      	str	r3, [r5, #12]
 800225e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002260:	6128      	str	r0, [r5, #16]
 8002262:	6169      	str	r1, [r5, #20]
 8002264:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 8002266:	231b      	movs	r3, #27
 8002268:	61bb      	str	r3, [r7, #24]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 800226a:	2300      	movs	r3, #0
 800226c:	e099      	b.n	80023a2 <handleVariable_set+0x272>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <handleVariable_set+0x2a0>)
 8002272:	4614      	mov	r4, r2
 8002274:	461d      	mov	r5, r3
 8002276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002278:	6020      	str	r0, [r4, #0]
 800227a:	6061      	str	r1, [r4, #4]
 800227c:	60a2      	str	r2, [r4, #8]
 800227e:	60e3      	str	r3, [r4, #12]
 8002280:	6828      	ldr	r0, [r5, #0]
 8002282:	6120      	str	r0, [r4, #16]
 8002284:	88aa      	ldrh	r2, [r5, #4]
 8002286:	79ab      	ldrb	r3, [r5, #6]
 8002288:	82a2      	strh	r2, [r4, #20]
 800228a:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 800228c:	2316      	movs	r3, #22
 800228e:	61bb      	str	r3, [r7, #24]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8002290:	2300      	movs	r3, #0
 8002292:	e086      	b.n	80023a2 <handleVariable_set+0x272>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	494f      	ldr	r1, [pc, #316]	; (80023d4 <handleVariable_set+0x2a4>)
 8002298:	2206      	movs	r2, #6
 800229a:	f005 ffd9 	bl	8008250 <strncmp>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d174      	bne.n	800238e <handleVariable_set+0x25e>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength] = '\0'; 	
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a8:	4413      	add	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 80022ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022b0:	f005 fe96 	bl	8007fe0 <atoi>
 80022b4:	4603      	mov	r3, r0
 80022b6:	82fb      	strh	r3, [r7, #22]
		// if speed is in range
		if(s1 < 15 ||  s1 > 300 )
 80022b8:	8afb      	ldrh	r3, [r7, #22]
 80022ba:	2b0e      	cmp	r3, #14
 80022bc:	d903      	bls.n	80022c6 <handleVariable_set+0x196>
 80022be:	8afb      	ldrh	r3, [r7, #22]
 80022c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022c4:	d909      	bls.n	80022da <handleVariable_set+0x1aa>
		{
			// send error via TCP
			//
			xWriteBufferLen = 100; 
 80022c6:	2364      	movs	r3, #100	; 0x64
 80022c8:	61bb      	str	r3, [r7, #24]
		//	uint8_t buf [len]; //= "Error: speed is out of range!\n\n");
			sprintf(pcWriteBuffer, "Error: speed is out of range [15,300]p : %d\n\n\0", s1);
 80022ca:	8afb      	ldrh	r3, [r7, #22]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	4942      	ldr	r1, [pc, #264]	; (80023d8 <handleVariable_set+0x2a8>)
 80022d0:	461a      	mov	r2, r3
 80022d2:	f000 fd15 	bl	8002d00 <sprintf>
			//send( socket_0, buf, len, 0);

	       		return pdFALSE; 	
 80022d6:	2300      	movs	r3, #0
 80022d8:	e063      	b.n	80023a2 <handleVariable_set+0x272>
		}	
	
		telegramS.data[3] = s1; 
 80022da:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <handleVariable_set+0x284>)
 80022dc:	8afa      	ldrh	r2, [r7, #22]
 80022de:	81da      	strh	r2, [r3, #14]
		telegramS.size = 5; 
 80022e0:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <handleVariable_set+0x284>)
 80022e2:	2205      	movs	r2, #5
 80022e4:	605a      	str	r2, [r3, #4]
		telegramS.Qcmd = SETDATA;
 80022e6:	4b33      	ldr	r3, [pc, #204]	; (80023b4 <handleVariable_set+0x284>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <handleVariable_set+0x288>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <handleVariable_set+0x28c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4610      	mov	r0, r2
 80022f6:	492f      	ldr	r1, [pc, #188]	; (80023b4 <handleVariable_set+0x284>)
 80022f8:	461a      	mov	r2, r3
 80022fa:	2300      	movs	r3, #0
 80022fc:	f002 f8c4 	bl	8004488 <xQueueGenericSend>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d130      	bne.n	8002368 <handleVariable_set+0x238>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay))
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <handleVariable_set+0x288>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <handleVariable_set+0x28c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4610      	mov	r0, r2
 8002310:	492b      	ldr	r1, [pc, #172]	; (80023c0 <handleVariable_set+0x290>)
 8002312:	461a      	mov	r2, r3
 8002314:	2300      	movs	r3, #0
 8002316:	f002 f9d1 	bl	80046bc <xQueueGenericReceive>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d036      	beq.n	800238e <handleVariable_set+0x25e>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <handleVariable_set+0x290>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b06      	cmp	r3, #6
 8002326:	d110      	bne.n	800234a <handleVariable_set+0x21a>
				{	
					sprintf(pcWriteBuffer, "Up ramp succsesfully set.\n\n");
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <handleVariable_set+0x2ac>)
 800232c:	4615      	mov	r5, r2
 800232e:	461c      	mov	r4, r3
 8002330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002332:	6028      	str	r0, [r5, #0]
 8002334:	6069      	str	r1, [r5, #4]
 8002336:	60aa      	str	r2, [r5, #8]
 8002338:	60eb      	str	r3, [r5, #12]
 800233a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800233c:	6128      	str	r0, [r5, #16]
 800233e:	6169      	str	r1, [r5, #20]
 8002340:	61aa      	str	r2, [r5, #24]
					xWriteBufferLen = 27; 	
 8002342:	231b      	movs	r3, #27
 8002344:	61bb      	str	r3, [r7, #24]
					//send( socket, buf, len, 0);


					return pdPASS;
 8002346:	2301      	movs	r3, #1
 8002348:	e02b      	b.n	80023a2 <handleVariable_set+0x272>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <handleVariable_set+0x298>)
 800234e:	4615      	mov	r5, r2
 8002350:	461c      	mov	r4, r3
 8002352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002354:	6028      	str	r0, [r5, #0]
 8002356:	6069      	str	r1, [r5, #4]
 8002358:	60aa      	str	r2, [r5, #8]
 800235a:	60eb      	str	r3, [r5, #12]
 800235c:	6820      	ldr	r0, [r4, #0]
 800235e:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 8002360:	2313      	movs	r3, #19
 8002362:	61bb      	str	r3, [r7, #24]
					//send( socket, buf, len, 0);

					return pdFALSE;
 8002364:	2300      	movs	r3, #0
 8002366:	e01c      	b.n	80023a2 <handleVariable_set+0x272>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <handleVariable_set+0x2a0>)
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002372:	6020      	str	r0, [r4, #0]
 8002374:	6061      	str	r1, [r4, #4]
 8002376:	60a2      	str	r2, [r4, #8]
 8002378:	60e3      	str	r3, [r4, #12]
 800237a:	6828      	ldr	r0, [r5, #0]
 800237c:	6120      	str	r0, [r4, #16]
 800237e:	88aa      	ldrh	r2, [r5, #4]
 8002380:	79ab      	ldrb	r3, [r5, #6]
 8002382:	82a2      	strh	r2, [r4, #20]
 8002384:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002386:	2316      	movs	r3, #22
 8002388:	61bb      	str	r3, [r7, #24]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 800238a:	2300      	movs	r3, #0
 800238c:	e009      	b.n	80023a2 <handleVariable_set+0x272>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4913      	ldr	r1, [pc, #76]	; (80023e0 <handleVariable_set+0x2b0>)
 8002392:	2208      	movs	r2, #8
 8002394:	f005 ff5c 	bl	8008250 <strncmp>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <handleVariable_set+0x272>
	{	
	
	
		
				return 0; 
 800239e:	2300      	movs	r3, #0
 80023a0:	e7ff      	b.n	80023a2 <handleVariable_set+0x272>

	}
			
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bdb0      	pop	{r4, r5, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	08008614 	.word	0x08008614
 80023b0:	0800861c 	.word	0x0800861c
 80023b4:	200143f8 	.word	0x200143f8
 80023b8:	200131f8 	.word	0x200131f8
 80023bc:	20000000 	.word	0x20000000
 80023c0:	200143dc 	.word	0x200143dc
 80023c4:	0800864c 	.word	0x0800864c
 80023c8:	08008668 	.word	0x08008668
 80023cc:	0800867c 	.word	0x0800867c
 80023d0:	08008698 	.word	0x08008698
 80023d4:	080086b0 	.word	0x080086b0
 80023d8:	080086b8 	.word	0x080086b8
 80023dc:	080086e8 	.word	0x080086e8
 80023e0:	08008704 	.word	0x08008704

080023e4 <handleVariable_get>:
				size_t xWriteBufferLen,
				uint8_t * Param, 
				int xParamLength,
				xQueueHandle Qhandle,
				int socket )
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	496b      	ldr	r1, [pc, #428]	; (80025a4 <handleVariable_get+0x1c0>)
 80023f6:	2205      	movs	r2, #5
 80023f8:	f005 ff2a 	bl	8008250 <strncmp>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d16c      	bne.n	80024dc <handleVariable_get+0xf8>
	{	
	
		telegramS.Qcmd = GETDATA; 
 8002402:	4b69      	ldr	r3, [pc, #420]	; (80025a8 <handleVariable_get+0x1c4>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 8002408:	4b68      	ldr	r3, [pc, #416]	; (80025ac <handleVariable_get+0x1c8>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <handleVariable_get+0x1cc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4610      	mov	r0, r2
 8002412:	4965      	ldr	r1, [pc, #404]	; (80025a8 <handleVariable_get+0x1c4>)
 8002414:	461a      	mov	r2, r3
 8002416:	2300      	movs	r3, #0
 8002418:	f002 f836 	bl	8004488 <xQueueGenericSend>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d149      	bne.n	80024b6 <handleVariable_get+0xd2>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
 8002422:	4b62      	ldr	r3, [pc, #392]	; (80025ac <handleVariable_get+0x1c8>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <handleVariable_get+0x1cc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4610      	mov	r0, r2
 800242c:	4961      	ldr	r1, [pc, #388]	; (80025b4 <handleVariable_get+0x1d0>)
 800242e:	461a      	mov	r2, r3
 8002430:	2300      	movs	r3, #0
 8002432:	f002 f943 	bl	80046bc <xQueueGenericReceive>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d12b      	bne.n	8002494 <handleVariable_get+0xb0>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <handleVariable_get+0x1d0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d118      	bne.n	8002476 <handleVariable_get+0x92>
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
					telegramR.data[3]/100,
 8002444:	4b5b      	ldr	r3, [pc, #364]	; (80025b4 <handleVariable_get+0x1d0>)
 8002446:	89da      	ldrh	r2, [r3, #14]
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
			{
				if ( telegramR.Qcmd == SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 8002448:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <handleVariable_get+0x1d4>)
 800244a:	fba3 0302 	umull	r0, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
					telegramR.data[3]/100,
					telegramR.data[3] % 100);
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <handleVariable_get+0x1d0>)
 8002456:	89db      	ldrh	r3, [r3, #14]
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
			{
				if ( telegramR.Qcmd == SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Speed is  %2d.%2dp \n\n\0", 
 8002458:	4957      	ldr	r1, [pc, #348]	; (80025b8 <handleVariable_get+0x1d4>)
 800245a:	fba1 0103 	umull	r0, r1, r1, r3
 800245e:	0949      	lsrs	r1, r1, #5
 8002460:	2064      	movs	r0, #100	; 0x64
 8002462:	fb00 f101 	mul.w	r1, r0, r1
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	b29b      	uxth	r3, r3
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	4953      	ldr	r1, [pc, #332]	; (80025bc <handleVariable_get+0x1d8>)
 800246e:	f000 fc47 	bl	8002d00 <sprintf>
					telegramR.data[3] % 100);
				
					//send( socket, buf, len, 0);


					return pdPASS;
 8002472:	2301      	movs	r3, #1
 8002474:	e092      	b.n	800259c <handleVariable_get+0x1b8>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <handleVariable_get+0x1dc>)
 800247a:	4615      	mov	r5, r2
 800247c:	461c      	mov	r4, r3
 800247e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002480:	6028      	str	r0, [r5, #0]
 8002482:	6069      	str	r1, [r5, #4]
 8002484:	60aa      	str	r2, [r5, #8]
 8002486:	60eb      	str	r3, [r5, #12]
 8002488:	6820      	ldr	r0, [r4, #0]
 800248a:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 800248c:	2313      	movs	r3, #19
 800248e:	617b      	str	r3, [r7, #20]
					//send( socket, buf, len, 0);

					return pdFALSE;
 8002490:	2300      	movs	r3, #0
 8002492:	e083      	b.n	800259c <handleVariable_get+0x1b8>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <handleVariable_get+0x1e0>)
 8002498:	4615      	mov	r5, r2
 800249a:	461c      	mov	r4, r3
 800249c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249e:	6028      	str	r0, [r5, #0]
 80024a0:	6069      	str	r1, [r5, #4]
 80024a2:	60aa      	str	r2, [r5, #8]
 80024a4:	60eb      	str	r3, [r5, #12]
 80024a6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80024a8:	6128      	str	r0, [r5, #16]
 80024aa:	6169      	str	r1, [r5, #20]
 80024ac:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 80024ae:	231b      	movs	r3, #27
 80024b0:	617b      	str	r3, [r7, #20]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 80024b2:	2300      	movs	r3, #0
 80024b4:	e072      	b.n	800259c <handleVariable_get+0x1b8>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <handleVariable_get+0x1e4>)
 80024ba:	4614      	mov	r4, r2
 80024bc:	461d      	mov	r5, r3
 80024be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c0:	6020      	str	r0, [r4, #0]
 80024c2:	6061      	str	r1, [r4, #4]
 80024c4:	60a2      	str	r2, [r4, #8]
 80024c6:	60e3      	str	r3, [r4, #12]
 80024c8:	6828      	ldr	r0, [r5, #0]
 80024ca:	6120      	str	r0, [r4, #16]
 80024cc:	88aa      	ldrh	r2, [r5, #4]
 80024ce:	79ab      	ldrb	r3, [r5, #6]
 80024d0:	82a2      	strh	r2, [r4, #20]
 80024d2:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80024d4:	2316      	movs	r3, #22
 80024d6:	617b      	str	r3, [r7, #20]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80024d8:	2300      	movs	r3, #0
 80024da:	e05f      	b.n	800259c <handleVariable_get+0x1b8>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	493b      	ldr	r1, [pc, #236]	; (80025cc <handleVariable_get+0x1e8>)
 80024e0:	2206      	movs	r2, #6
 80024e2:	f005 feb5 	bl	8008250 <strncmp>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d14d      	bne.n	8002588 <handleVariable_get+0x1a4>
	{	
	
	
		telegramS.Qcmd = GETDATA;
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <handleVariable_get+0x1c4>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
			
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <handleVariable_get+0x1c8>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <handleVariable_get+0x1cc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4610      	mov	r0, r2
 80024fc:	492a      	ldr	r1, [pc, #168]	; (80025a8 <handleVariable_get+0x1c4>)
 80024fe:	461a      	mov	r2, r3
 8002500:	2300      	movs	r3, #0
 8002502:	f001 ffc1 	bl	8004488 <xQueueGenericSend>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d12a      	bne.n	8002562 <handleVariable_get+0x17e>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay))
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <handleVariable_get+0x1c8>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <handleVariable_get+0x1cc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4610      	mov	r0, r2
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <handleVariable_get+0x1d0>)
 8002518:	461a      	mov	r2, r3
 800251a:	2300      	movs	r3, #0
 800251c:	f002 f8ce 	bl	80046bc <xQueueGenericReceive>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d030      	beq.n	8002588 <handleVariable_get+0x1a4>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <handleVariable_get+0x1d0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b06      	cmp	r3, #6
 800252c:	d10a      	bne.n	8002544 <handleVariable_get+0x160>
				{	
					sprintf(pcWriteBuffer, "Up ramp is %d seconds\n\n\0", 
							telegramR.data[3]);
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <handleVariable_get+0x1d0>)
 8002530:	89db      	ldrh	r3, [r3, #14]
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay))
			{
				if ( telegramR.Qcmd == SUCCSESS) 
				{	
					sprintf(pcWriteBuffer, "Up ramp is %d seconds\n\n\0", 
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	4926      	ldr	r1, [pc, #152]	; (80025d0 <handleVariable_get+0x1ec>)
 8002536:	461a      	mov	r2, r3
 8002538:	f000 fbe2 	bl	8002d00 <sprintf>
							telegramR.data[3]);
					
					xWriteBufferLen = 25; 	
 800253c:	2319      	movs	r3, #25
 800253e:	617b      	str	r3, [r7, #20]
					//send( socket, buf, len, 0);


					return pdPASS;
 8002540:	2301      	movs	r3, #1
 8002542:	e02b      	b.n	800259c <handleVariable_get+0x1b8>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <handleVariable_get+0x1dc>)
 8002548:	4615      	mov	r5, r2
 800254a:	461c      	mov	r4, r3
 800254c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254e:	6028      	str	r0, [r5, #0]
 8002550:	6069      	str	r1, [r5, #4]
 8002552:	60aa      	str	r2, [r5, #8]
 8002554:	60eb      	str	r3, [r5, #12]
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 800255a:	2313      	movs	r3, #19
 800255c:	617b      	str	r3, [r7, #20]
					//send( socket, buf, len, 0);

					return pdFALSE;
 800255e:	2300      	movs	r3, #0
 8002560:	e01c      	b.n	800259c <handleVariable_get+0x1b8>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <handleVariable_get+0x1e4>)
 8002566:	4614      	mov	r4, r2
 8002568:	461d      	mov	r5, r3
 800256a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256c:	6020      	str	r0, [r4, #0]
 800256e:	6061      	str	r1, [r4, #4]
 8002570:	60a2      	str	r2, [r4, #8]
 8002572:	60e3      	str	r3, [r4, #12]
 8002574:	6828      	ldr	r0, [r5, #0]
 8002576:	6120      	str	r0, [r4, #16]
 8002578:	88aa      	ldrh	r2, [r5, #4]
 800257a:	79ab      	ldrb	r3, [r5, #6]
 800257c:	82a2      	strh	r2, [r4, #20]
 800257e:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002580:	2316      	movs	r3, #22
 8002582:	617b      	str	r3, [r7, #20]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 8002584:	2300      	movs	r3, #0
 8002586:	e009      	b.n	800259c <handleVariable_get+0x1b8>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4912      	ldr	r1, [pc, #72]	; (80025d4 <handleVariable_get+0x1f0>)
 800258c:	2208      	movs	r2, #8
 800258e:	f005 fe5f 	bl	8008250 <strncmp>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <handleVariable_get+0x1b8>
	
				
	
	

			return 0; 
 8002598:	2300      	movs	r3, #0
 800259a:	e7ff      	b.n	800259c <handleVariable_get+0x1b8>
	}




}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	08008614 	.word	0x08008614
 80025a8:	200143f8 	.word	0x200143f8
 80025ac:	200131f8 	.word	0x200131f8
 80025b0:	20000000 	.word	0x20000000
 80025b4:	200143dc 	.word	0x200143dc
 80025b8:	51eb851f 	.word	0x51eb851f
 80025bc:	08008710 	.word	0x08008710
 80025c0:	08008668 	.word	0x08008668
 80025c4:	0800867c 	.word	0x0800867c
 80025c8:	08008698 	.word	0x08008698
 80025cc:	080086b0 	.word	0x080086b0
 80025d0:	08008728 	.word	0x08008728
 80025d4:	08008704 	.word	0x08008704

080025d8 <prvMotorCommand>:
 * ==============================================================================================*/

portBASE_TYPE prvMotorCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b08e      	sub	sp, #56	; 0x38
 80025dc:	af04      	add	r7, sp, #16
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
	int xOptionLength, xParamLength, xValueLength; 
	//QueueTelegram telegram; 
	
	// get option from command line 

	Option = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80025e4:	f107 0318 	add.w	r3, r7, #24
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	2101      	movs	r1, #1
 80025ec:	461a      	mov	r2, r3
 80025ee:	f002 ffd5 	bl	800559c <FreeRTOS_CLIGetParameter>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24
					  1,  		   // first parameter
				  	  &xOptionLength // parameter string length
					  
					 );

	if ( Option == NULL)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10e      	bne.n	8002618 <prvMotorCommand+0x40>
	{
		sprintf(pcWriteBuffer, "To few arguments. \n\n\0");
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4b9f      	ldr	r3, [pc, #636]	; (800287c <prvMotorCommand+0x2a4>)
 80025fe:	4615      	mov	r5, r2
 8002600:	461c      	mov	r4, r3
 8002602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002604:	6028      	str	r0, [r5, #0]
 8002606:	6069      	str	r1, [r5, #4]
 8002608:	60aa      	str	r2, [r5, #8]
 800260a:	60eb      	str	r3, [r5, #12]
 800260c:	6820      	ldr	r0, [r4, #0]
 800260e:	6128      	str	r0, [r5, #16]
 8002610:	7923      	ldrb	r3, [r4, #4]
 8002612:	752b      	strb	r3, [r5, #20]
		return pdFALSE;
 8002614:	2300      	movs	r3, #0
 8002616:	e18e      	b.n	8002936 <prvMotorCommand+0x35e>
	}

	if (!strncmp(Option, "help", 4))
 8002618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800261a:	4999      	ldr	r1, [pc, #612]	; (8002880 <prvMotorCommand+0x2a8>)
 800261c:	2204      	movs	r2, #4
 800261e:	f005 fe17 	bl	8008250 <strncmp>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <prvMotorCommand+0x68>
	{
		strcpy(pcWriteBuffer, 
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4b96      	ldr	r3, [pc, #600]	; (8002884 <prvMotorCommand+0x2ac>)
 800262c:	4611      	mov	r1, r2
 800262e:	461a      	mov	r2, r3
 8002630:	23bc      	movs	r3, #188	; 0xbc
 8002632:	4608      	mov	r0, r1
 8002634:	4611      	mov	r1, r2
 8002636:	461a      	mov	r2, r3
 8002638:	f7fd fdd0 	bl	80001dc <memcpy>
			
			"\0"

		      );

		return pdPASS;
 800263c:	2301      	movs	r3, #1
 800263e:	e17a      	b.n	8002936 <prvMotorCommand+0x35e>

	//================================================================================//
	//		CASE COMMAND SET [parameter name] [value]
	//================================================================================//

	if( !strncmp( Option, "set", 3) ) 
 8002640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002642:	4991      	ldr	r1, [pc, #580]	; (8002888 <prvMotorCommand+0x2b0>)
 8002644:	2203      	movs	r2, #3
 8002646:	f005 fe03 	bl	8008250 <strncmp>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d133      	bne.n	80026b8 <prvMotorCommand+0xe0>
	{

		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	2102      	movs	r1, #2
 8002658:	461a      	mov	r2, r3
 800265a:	f002 ff9f 	bl	800559c <FreeRTOS_CLIGetParameter>
 800265e:	6238      	str	r0, [r7, #32]
					  2,  		   // 2nd parameter
				  	  &xParamLength // parameter string length
					  
					 );
		Value = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	2103      	movs	r1, #3
 8002668:	461a      	mov	r2, r3
 800266a:	f002 ff97 	bl	800559c <FreeRTOS_CLIGetParameter>
 800266e:	61f8      	str	r0, [r7, #28]
					  
					 );
		
		// return pdFALSE if there is no 3rd parameter 

		if (Value==NULL||Param==NULL)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <prvMotorCommand+0xa4>
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <prvMotorCommand+0xb2>
		{
			strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 800267c:	4b83      	ldr	r3, [pc, #524]	; (800288c <prvMotorCommand+0x2b4>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	4619      	mov	r1, r3
 8002682:	f005 fd57 	bl	8008134 <strcpy>

			return pdFALSE; 
 8002686:	2300      	movs	r3, #0
 8002688:	e155      	b.n	8002936 <prvMotorCommand+0x35e>

		}

		
		if ( handleVariable_set ( 
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4a80      	ldr	r2, [pc, #512]	; (8002890 <prvMotorCommand+0x2b8>)
 800268e:	6810      	ldr	r0, [r2, #0]
 8002690:	6939      	ldr	r1, [r7, #16]
 8002692:	4a80      	ldr	r2, [pc, #512]	; (8002894 <prvMotorCommand+0x2bc>)
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	9000      	str	r0, [sp, #0]
 8002698:	69f8      	ldr	r0, [r7, #28]
 800269a:	9001      	str	r0, [sp, #4]
 800269c:	9102      	str	r1, [sp, #8]
 800269e:	9203      	str	r2, [sp, #12]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	6a3a      	ldr	r2, [r7, #32]
 80026a6:	f7ff fd43 	bl	8002130 <handleVariable_set>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <prvMotorCommand+0xdc>
					   Param, 
					   xParamLength, 
					   QSpd_handle, 
					   Value,
					   xValueLength,  
					   socket_0)) return pdPASS;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e140      	b.n	8002936 <prvMotorCommand+0x35e>

		
			
		return pdFALSE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e13e      	b.n	8002936 <prvMotorCommand+0x35e>
	//================================================================================//
	//		CASE COMMAND GET [parameter name] [value]
	//================================================================================//


	if (!strncmp ( Option, "get", 3))
 80026b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ba:	4977      	ldr	r1, [pc, #476]	; (8002898 <prvMotorCommand+0x2c0>)
 80026bc:	2203      	movs	r2, #3
 80026be:	f005 fdc7 	bl	8008250 <strncmp>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d127      	bne.n	8002718 <prvMotorCommand+0x140>
	{
		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	2102      	movs	r1, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	f002 ff63 	bl	800559c <FreeRTOS_CLIGetParameter>
 80026d6:	6238      	str	r0, [r7, #32]
					  
					 );
			
		// return pdFALSE if there is no 3rd parameter 

		if(Value==NULL||Param==NULL)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <prvMotorCommand+0x10c>
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <prvMotorCommand+0x11a>
		{
			strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 80026e4:	4b69      	ldr	r3, [pc, #420]	; (800288c <prvMotorCommand+0x2b4>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f005 fd23 	bl	8008134 <strcpy>

			return pdFALSE; 
 80026ee:	2300      	movs	r3, #0
 80026f0:	e121      	b.n	8002936 <prvMotorCommand+0x35e>

		}

		
		if ( handleVariable_get ( 
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4a66      	ldr	r2, [pc, #408]	; (8002890 <prvMotorCommand+0x2b8>)
 80026f6:	6811      	ldr	r1, [r2, #0]
 80026f8:	4a66      	ldr	r2, [pc, #408]	; (8002894 <prvMotorCommand+0x2bc>)
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	9100      	str	r1, [sp, #0]
 80026fe:	9201      	str	r2, [sp, #4]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	f7ff fe6d 	bl	80023e4 <handleVariable_get>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <prvMotorCommand+0x13c>
					   xWriteBufferLen,
	
				           Param, 
					   xParamLength, 
					   QSpd_handle, 
					   socket_0)) return pdPASS;
 8002710:	2301      	movs	r3, #1
 8002712:	e110      	b.n	8002936 <prvMotorCommand+0x35e>
		return pdFALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	e10e      	b.n	8002936 <prvMotorCommand+0x35e>
	}
		
	//================================================================================//
	//		CASE COMMAND STOP 
	//================================================================================//
	if (!strncmp ( Option, "stop", 4))
 8002718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271a:	4960      	ldr	r1, [pc, #384]	; (800289c <prvMotorCommand+0x2c4>)
 800271c:	2204      	movs	r2, #4
 800271e:	f005 fd97 	bl	8008250 <strncmp>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d169      	bne.n	80027fc <prvMotorCommand+0x224>
	{

		telegramS.Qcmd = STOP; 
 8002728:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <prvMotorCommand+0x2c8>)
 800272a:	2205      	movs	r2, #5
 800272c:	701a      	strb	r2, [r3, #0]
		telegramS.size = 5; 
 800272e:	4b5c      	ldr	r3, [pc, #368]	; (80028a0 <prvMotorCommand+0x2c8>)
 8002730:	2205      	movs	r2, #5
 8002732:	605a      	str	r2, [r3, #4]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) )
 8002734:	4b56      	ldr	r3, [pc, #344]	; (8002890 <prvMotorCommand+0x2b8>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <prvMotorCommand+0x2cc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4610      	mov	r0, r2
 800273e:	4958      	ldr	r1, [pc, #352]	; (80028a0 <prvMotorCommand+0x2c8>)
 8002740:	461a      	mov	r2, r3
 8002742:	2300      	movs	r3, #0
 8002744:	f001 fea0 	bl	8004488 <xQueueGenericSend>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d043      	beq.n	80027d6 <prvMotorCommand+0x1fe>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay)== pdPASS)
 800274e:	4b50      	ldr	r3, [pc, #320]	; (8002890 <prvMotorCommand+0x2b8>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b54      	ldr	r3, [pc, #336]	; (80028a4 <prvMotorCommand+0x2cc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4610      	mov	r0, r2
 8002758:	4953      	ldr	r1, [pc, #332]	; (80028a8 <prvMotorCommand+0x2d0>)
 800275a:	461a      	mov	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	f001 ffad 	bl	80046bc <xQueueGenericReceive>
 8002762:	4603      	mov	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d125      	bne.n	80027b4 <prvMotorCommand+0x1dc>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <prvMotorCommand+0x2d0>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b06      	cmp	r3, #6
 800276e:	d112      	bne.n	8002796 <prvMotorCommand+0x1be>
				{	
					sprintf(pcWriteBuffer ,"Motor succsesfully stopped.\n\n");
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <prvMotorCommand+0x2d4>)
 8002774:	4615      	mov	r5, r2
 8002776:	461c      	mov	r4, r3
 8002778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277a:	6028      	str	r0, [r5, #0]
 800277c:	6069      	str	r1, [r5, #4]
 800277e:	60aa      	str	r2, [r5, #8]
 8002780:	60eb      	str	r3, [r5, #12]
 8002782:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002784:	6128      	str	r0, [r5, #16]
 8002786:	6169      	str	r1, [r5, #20]
 8002788:	61aa      	str	r2, [r5, #24]
 800278a:	8823      	ldrh	r3, [r4, #0]
 800278c:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29 ; 	
 800278e:	231d      	movs	r3, #29
 8002790:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 8002792:	2301      	movs	r3, #1
 8002794:	e0cf      	b.n	8002936 <prvMotorCommand+0x35e>

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4b45      	ldr	r3, [pc, #276]	; (80028b0 <prvMotorCommand+0x2d8>)
 800279a:	4615      	mov	r5, r2
 800279c:	461c      	mov	r4, r3
 800279e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a0:	6028      	str	r0, [r5, #0]
 80027a2:	6069      	str	r1, [r5, #4]
 80027a4:	60aa      	str	r2, [r5, #8]
 80027a6:	60eb      	str	r3, [r5, #12]
 80027a8:	6820      	ldr	r0, [r4, #0]
 80027aa:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 80027ac:	2313      	movs	r3, #19
 80027ae:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					return pdFALSE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e0c0      	b.n	8002936 <prvMotorCommand+0x35e>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <prvMotorCommand+0x2dc>)
 80027b8:	4615      	mov	r5, r2
 80027ba:	461c      	mov	r4, r3
 80027bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027be:	6028      	str	r0, [r5, #0]
 80027c0:	6069      	str	r1, [r5, #4]
 80027c2:	60aa      	str	r2, [r5, #8]
 80027c4:	60eb      	str	r3, [r5, #12]
 80027c6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80027c8:	6128      	str	r0, [r5, #16]
 80027ca:	6169      	str	r1, [r5, #20]
 80027cc:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 80027ce:	231b      	movs	r3, #27
 80027d0:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 80027d2:	2300      	movs	r3, #0
 80027d4:	e0af      	b.n	8002936 <prvMotorCommand+0x35e>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer, "Error sending Queue!\n\n");
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <prvMotorCommand+0x2e0>)
 80027da:	4614      	mov	r4, r2
 80027dc:	461d      	mov	r5, r3
 80027de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e0:	6020      	str	r0, [r4, #0]
 80027e2:	6061      	str	r1, [r4, #4]
 80027e4:	60a2      	str	r2, [r4, #8]
 80027e6:	60e3      	str	r3, [r4, #12]
 80027e8:	6828      	ldr	r0, [r5, #0]
 80027ea:	6120      	str	r0, [r4, #16]
 80027ec:	88aa      	ldrh	r2, [r5, #4]
 80027ee:	79ab      	ldrb	r3, [r5, #6]
 80027f0:	82a2      	strh	r2, [r4, #20]
 80027f2:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 80027f4:	2316      	movs	r3, #22
 80027f6:	60bb      	str	r3, [r7, #8]
			//send( socket, buf, len, 0);

			return pdFALSE; 	
 80027f8:	2300      	movs	r3, #0
 80027fa:	e09c      	b.n	8002936 <prvMotorCommand+0x35e>
	}
	//================================================================================//
	//		CASE COMMAND START
	//================================================================================//

	if (!strncmp ( Option, "start", 5))
 80027fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027fe:	492f      	ldr	r1, [pc, #188]	; (80028bc <prvMotorCommand+0x2e4>)
 8002800:	2205      	movs	r2, #5
 8002802:	f005 fd25 	bl	8008250 <strncmp>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 808e 	bne.w	800292a <prvMotorCommand+0x352>
	{
		telegramS.Qcmd = START; 
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <prvMotorCommand+0x2c8>)
 8002810:	2204      	movs	r2, #4
 8002812:	701a      	strb	r2, [r3, #0]
		telegramS.size = 5; 
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <prvMotorCommand+0x2c8>)
 8002816:	2205      	movs	r2, #5
 8002818:	605a      	str	r2, [r3, #4]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegramS, xDelay ) == pdPASS )
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <prvMotorCommand+0x2b8>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <prvMotorCommand+0x2cc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4610      	mov	r0, r2
 8002824:	491e      	ldr	r1, [pc, #120]	; (80028a0 <prvMotorCommand+0x2c8>)
 8002826:	461a      	mov	r2, r3
 8002828:	2300      	movs	r3, #0
 800282a:	f001 fe2d 	bl	8004488 <xQueueGenericSend>
 800282e:	4603      	mov	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d167      	bne.n	8002904 <prvMotorCommand+0x32c>
		{	
		//	vTaskDelay(500/portTICK_RATE_MS);		
			if (  xQueueReceive ( QSpd_handle, &telegramR, xDelay) == pdPASS)
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <prvMotorCommand+0x2b8>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <prvMotorCommand+0x2cc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4610      	mov	r0, r2
 800283e:	491a      	ldr	r1, [pc, #104]	; (80028a8 <prvMotorCommand+0x2d0>)
 8002840:	461a      	mov	r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	f001 ff3a 	bl	80046bc <xQueueGenericReceive>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d149      	bne.n	80028e2 <prvMotorCommand+0x30a>
			{
				if ( telegramR.Qcmd == SUCCSESS) 
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <prvMotorCommand+0x2d0>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b06      	cmp	r3, #6
 8002854:	d136      	bne.n	80028c4 <prvMotorCommand+0x2ec>
				{	
					sprintf(pcWriteBuffer , "Motor succsesfully started.\n\n");
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <prvMotorCommand+0x2e8>)
 800285a:	4615      	mov	r5, r2
 800285c:	461c      	mov	r4, r3
 800285e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002860:	6028      	str	r0, [r5, #0]
 8002862:	6069      	str	r1, [r5, #4]
 8002864:	60aa      	str	r2, [r5, #8]
 8002866:	60eb      	str	r3, [r5, #12]
 8002868:	cc07      	ldmia	r4!, {r0, r1, r2}
 800286a:	6128      	str	r0, [r5, #16]
 800286c:	6169      	str	r1, [r5, #20]
 800286e:	61aa      	str	r2, [r5, #24]
 8002870:	8823      	ldrh	r3, [r4, #0]
 8002872:	83ab      	strh	r3, [r5, #28]
					xWriteBufferLen = 29; 	
 8002874:	231d      	movs	r3, #29
 8002876:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					
					return pdPASS;
 8002878:	2301      	movs	r3, #1
 800287a:	e05c      	b.n	8002936 <prvMotorCommand+0x35e>
 800287c:	08008744 	.word	0x08008744
 8002880:	0800875c 	.word	0x0800875c
 8002884:	08008764 	.word	0x08008764
 8002888:	08008824 	.word	0x08008824
 800288c:	080085a8 	.word	0x080085a8
 8002890:	200131f8 	.word	0x200131f8
 8002894:	200131f4 	.word	0x200131f4
 8002898:	08008828 	.word	0x08008828
 800289c:	0800882c 	.word	0x0800882c
 80028a0:	200143f8 	.word	0x200143f8
 80028a4:	20000000 	.word	0x20000000
 80028a8:	200143dc 	.word	0x200143dc
 80028ac:	08008834 	.word	0x08008834
 80028b0:	08008668 	.word	0x08008668
 80028b4:	0800867c 	.word	0x0800867c
 80028b8:	08008698 	.word	0x08008698
 80028bc:	08008854 	.word	0x08008854
 80028c0:	0800885c 	.word	0x0800885c

				}
				else
				{
					sprintf(pcWriteBuffer, "MODBUS ERROR !!!.\n\n");
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <prvMotorCommand+0x368>)
 80028c8:	4615      	mov	r5, r2
 80028ca:	461c      	mov	r4, r3
 80028cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ce:	6028      	str	r0, [r5, #0]
 80028d0:	6069      	str	r1, [r5, #4]
 80028d2:	60aa      	str	r2, [r5, #8]
 80028d4:	60eb      	str	r3, [r5, #12]
 80028d6:	6820      	ldr	r0, [r4, #0]
 80028d8:	6128      	str	r0, [r5, #16]
			       		xWriteBufferLen = 19; 	
 80028da:	2313      	movs	r3, #19
 80028dc:	60bb      	str	r3, [r7, #8]
					//send( socket_0, buf, len, 0);

					return pdFALSE;
 80028de:	2300      	movs	r3, #0
 80028e0:	e029      	b.n	8002936 <prvMotorCommand+0x35e>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				sprintf(pcWriteBuffer, "Error recieving response!\n\n");
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <prvMotorCommand+0x36c>)
 80028e6:	4615      	mov	r5, r2
 80028e8:	461c      	mov	r4, r3
 80028ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ec:	6028      	str	r0, [r5, #0]
 80028ee:	6069      	str	r1, [r5, #4]
 80028f0:	60aa      	str	r2, [r5, #8]
 80028f2:	60eb      	str	r3, [r5, #12]
 80028f4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80028f6:	6128      	str	r0, [r5, #16]
 80028f8:	6169      	str	r1, [r5, #20]
 80028fa:	61aa      	str	r2, [r5, #24]
	 			xWriteBufferLen = 27; 	
 80028fc:	231b      	movs	r3, #27
 80028fe:	60bb      	str	r3, [r7, #8]
				//send( socket_0, buf, len, 0);

				return pdFALSE; 	
 8002900:	2300      	movs	r3, #0
 8002902:	e018      	b.n	8002936 <prvMotorCommand+0x35e>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			sprintf(pcWriteBuffer,"Error sending Queue!\n\n");
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <prvMotorCommand+0x370>)
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	6020      	str	r0, [r4, #0]
 8002910:	6061      	str	r1, [r4, #4]
 8002912:	60a2      	str	r2, [r4, #8]
 8002914:	60e3      	str	r3, [r4, #12]
 8002916:	6828      	ldr	r0, [r5, #0]
 8002918:	6120      	str	r0, [r4, #16]
 800291a:	88aa      	ldrh	r2, [r5, #4]
 800291c:	79ab      	ldrb	r3, [r5, #6]
 800291e:	82a2      	strh	r2, [r4, #20]
 8002920:	75a3      	strb	r3, [r4, #22]
	 		xWriteBufferLen = 22; 	
 8002922:	2316      	movs	r3, #22
 8002924:	60bb      	str	r3, [r7, #8]
			//send( socket_0, buf, len, 0);

			return pdFALSE; 	
 8002926:	2300      	movs	r3, #0
 8002928:	e005      	b.n	8002936 <prvMotorCommand+0x35e>


	}


	strcpy(pcWriteBuffer, xMotorCommand.pcHelpString);
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <prvMotorCommand+0x374>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	4619      	mov	r1, r3
 8002930:	f005 fc00 	bl	8008134 <strcpy>
		
	return pdFALSE;
 8002934:	2300      	movs	r3, #0


}
 8002936:	4618      	mov	r0, r3
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bdb0      	pop	{r4, r5, r7, pc}
 800293e:	bf00      	nop
 8002940:	08008668 	.word	0x08008668
 8002944:	0800867c 	.word	0x0800867c
 8002948:	08008698 	.word	0x08008698
 800294c:	080085a8 	.word	0x080085a8

08002950 <prvTaskStatsCommand>:

portBASE_TYPE prvTaskStatsCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
    /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
    generated by executing vTaskList() is written directly into the output
    buffer. */

  
    vTaskList( pcWriteBuffer);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f001 fc83 	bl	8004268 <vTaskList>

 

    /* The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE. */
    return pdFALSE;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <printchar+0x24>
		**str = (char)c;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
		++(*str);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop

0800299c <prints>:
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
static int prints(char **out, const char *string, int width, int pad)
{
 800299c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80029ac:	2400      	movs	r4, #0
 80029ae:	2620      	movs	r6, #32

	if (width > 0) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	dd19      	ble.n	80029ea <prints+0x4e>
		register int len = 0;
 80029b6:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80029b8:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80029bc:	e002      	b.n	80029c4 <prints+0x28>
 80029be:	3501      	adds	r5, #1
 80029c0:	f108 0801 	add.w	r8, r8, #1
 80029c4:	f898 3000 	ldrb.w	r3, [r8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f8      	bne.n	80029be <prints+0x22>
		if (len >= width) width = 0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	429d      	cmp	r5, r3
 80029d0:	db02      	blt.n	80029d8 <prints+0x3c>
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	e002      	b.n	80029de <prints+0x42>
		else width -= len;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1b5b      	subs	r3, r3, r5
 80029dc:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d000      	beq.n	80029ea <prints+0x4e>
 80029e8:	2630      	movs	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <prints+0x70>
		for ( ; width > 0; --width) {
 80029f4:	e007      	b.n	8002a06 <prints+0x6a>
			printchar (out, padchar);
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	4631      	mov	r1, r6
 80029fa:	f7ff ffb7 	bl	800296c <printchar>
			++pc;
 80029fe:	3401      	adds	r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	dcf4      	bgt.n	80029f6 <prints+0x5a>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002a0c:	e009      	b.n	8002a22 <prints+0x86>
		printchar (out, *string);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7ff ffa9 	bl	800296c <printchar>
		++pc;
 8002a1a:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f1      	bne.n	8002a0e <prints+0x72>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8002a2a:	e007      	b.n	8002a3c <prints+0xa0>
		printchar (out, padchar);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	4631      	mov	r1, r6
 8002a30:	f7ff ff9c 	bl	800296c <printchar>
		++pc;
 8002a34:	3401      	adds	r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	dcf4      	bgt.n	8002a2c <prints+0x90>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 8002a42:	4623      	mov	r3, r4
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a4e:	bf00      	nop

08002a50 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8002a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a54:	b089      	sub	sp, #36	; 0x24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8002a60:	f04f 0900 	mov.w	r9, #0
 8002a64:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
 8002a68:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <printi+0x3c>
		print_buf[0] = '0';
 8002a70:	2330      	movs	r3, #48	; 0x30
 8002a72:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8002a74:	2300      	movs	r3, #0
 8002a76:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a84:	f7ff ff8a 	bl	800299c <prints>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	e049      	b.n	8002b20 <printi+0xd0>
	}

	if (sg && b == 10 && i < 0) {
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <printi+0x58>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0a      	cmp	r3, #10
 8002a96:	d107      	bne.n	8002aa8 <printi+0x58>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da04      	bge.n	8002aa8 <printi+0x58>
		neg = 1;
 8002a9e:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	425b      	negs	r3, r3
 8002aa6:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8002aa8:	f107 0414 	add.w	r4, r7, #20
 8002aac:	340b      	adds	r4, #11
	*s = '\0';
 8002aae:	2300      	movs	r3, #0
 8002ab0:	7023      	strb	r3, [r4, #0]

	while (u) {
 8002ab2:	e013      	b.n	8002adc <printi+0x8c>
		t = (unsigned int)u % b;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	fbb5 f2f3 	udiv	r2, r5, r3
 8002aba:	fb03 f302 	mul.w	r3, r3, r2
 8002abe:	1aeb      	subs	r3, r5, r3
 8002ac0:	461e      	mov	r6, r3
		if( t >= 10 )
 8002ac2:	2e09      	cmp	r6, #9
 8002ac4:	dd02      	ble.n	8002acc <printi+0x7c>
			t += letbase - '0' - 10;
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	3b3a      	subs	r3, #58	; 0x3a
 8002aca:	441e      	add	r6, r3
		*--s = (char)(t + '0');
 8002acc:	3c01      	subs	r4, #1
 8002ace:	b2f3      	uxtb	r3, r6
 8002ad0:	3330      	adds	r3, #48	; 0x30
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	7023      	strb	r3, [r4, #0]
		u /= b;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8002adc:	2d00      	cmp	r5, #0
 8002ade:	d1e9      	bne.n	8002ab4 <printi+0x64>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
 8002ae0:	f1b9 0f00 	cmp.w	r9, #0
 8002ae4:	d014      	beq.n	8002b10 <printi+0xc0>
		if( width && (pad & PAD_ZERO) ) {
 8002ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <printi+0xba>
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <printi+0xba>
			printchar (out, '-');
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	212d      	movs	r1, #45	; 0x2d
 8002afa:	f7ff ff37 	bl	800296c <printchar>
			++pc;
 8002afe:	f108 0801 	add.w	r8, r8, #1
			--width;
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	3b01      	subs	r3, #1
 8002b06:	643b      	str	r3, [r7, #64]	; 0x40
 8002b08:	e002      	b.n	8002b10 <printi+0xc0>
		}
		else {
			*--s = '-';
 8002b0a:	3c01      	subs	r4, #1
 8002b0c:	232d      	movs	r3, #45	; 0x2d
 8002b0e:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	4621      	mov	r1, r4
 8002b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b18:	f7ff ff40 	bl	800299c <prints>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4443      	add	r3, r8
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3724      	adds	r7, #36	; 0x24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b2a:	bf00      	nop

08002b2c <print>:

static int print( char **out, const char *format, va_list args )
{
 8002b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b30:	b08a      	sub	sp, #40	; 0x28
 8002b32:	af04      	add	r7, sp, #16
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8002b3a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8002b3c:	e0cc      	b.n	8002cd8 <print+0x1ac>
		if (*format == '%') {
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b25      	cmp	r3, #37	; 0x25
 8002b44:	f040 80be 	bne.w	8002cc4 <print+0x198>
			++format;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8002b4e:	2600      	movs	r6, #0
 8002b50:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d100      	bne.n	8002b5c <print+0x30>
 8002b5a:	e0c2      	b.n	8002ce2 <print+0x1b6>
			if (*format == '%') goto out;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b25      	cmp	r3, #37	; 0x25
 8002b62:	d100      	bne.n	8002b66 <print+0x3a>
 8002b64:	e0ae      	b.n	8002cc4 <print+0x198>
			if (*format == '-') {
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b2d      	cmp	r3, #45	; 0x2d
 8002b6c:	d104      	bne.n	8002b78 <print+0x4c>
				++format;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8002b74:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8002b76:	e005      	b.n	8002b84 <print+0x58>
 8002b78:	e004      	b.n	8002b84 <print+0x58>
				++format;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8002b80:	f046 0602 	orr.w	r6, r6, #2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d0f6      	beq.n	8002b7a <print+0x4e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002b8c:	e00b      	b.n	8002ba6 <print+0x7a>
				width *= 10;
 8002b8e:	462b      	mov	r3, r5
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	442b      	add	r3, r5
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	461d      	mov	r5, r3
				width += *format - '0';
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	3b30      	subs	r3, #48	; 0x30
 8002b9e:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b2f      	cmp	r3, #47	; 0x2f
 8002bac:	d903      	bls.n	8002bb6 <print+0x8a>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b39      	cmp	r3, #57	; 0x39
 8002bb4:	d9eb      	bls.n	8002b8e <print+0x62>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b73      	cmp	r3, #115	; 0x73
 8002bbc:	d113      	bne.n	8002be6 <print+0xba>
				register char *s = (char *)va_arg( args, int );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1d1a      	adds	r2, r3, #4
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8002bc8:	f1b8 0f00 	cmp.w	r8, #0
 8002bcc:	d001      	beq.n	8002bd2 <print+0xa6>
 8002bce:	4643      	mov	r3, r8
 8002bd0:	e000      	b.n	8002bd4 <print+0xa8>
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <print+0x1d0>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4633      	mov	r3, r6
 8002bdc:	f7ff fede 	bl	800299c <prints>
 8002be0:	4603      	mov	r3, r0
 8002be2:	441c      	add	r4, r3
				continue;
 8002be4:	e075      	b.n	8002cd2 <print+0x1a6>
			}
			if( *format == 'd' || *format == 'i' ) {
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d003      	beq.n	8002bf6 <print+0xca>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b69      	cmp	r3, #105	; 0x69
 8002bf4:	d110      	bne.n	8002c18 <print+0xec>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1d1a      	adds	r2, r3, #4
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	9500      	str	r5, [sp, #0]
 8002c00:	9601      	str	r6, [sp, #4]
 8002c02:	2261      	movs	r2, #97	; 0x61
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	220a      	movs	r2, #10
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f7ff ff1f 	bl	8002a50 <printi>
 8002c12:	4603      	mov	r3, r0
 8002c14:	441c      	add	r4, r3
				continue;
 8002c16:	e05c      	b.n	8002cd2 <print+0x1a6>
			}
			if( *format == 'x' ) {
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b78      	cmp	r3, #120	; 0x78
 8002c1e:	d110      	bne.n	8002c42 <print+0x116>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1d1a      	adds	r2, r3, #4
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	9500      	str	r5, [sp, #0]
 8002c2a:	9601      	str	r6, [sp, #4]
 8002c2c:	2261      	movs	r2, #97	; 0x61
 8002c2e:	9202      	str	r2, [sp, #8]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	4619      	mov	r1, r3
 8002c34:	2210      	movs	r2, #16
 8002c36:	2300      	movs	r3, #0
 8002c38:	f7ff ff0a 	bl	8002a50 <printi>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	441c      	add	r4, r3
				continue;
 8002c40:	e047      	b.n	8002cd2 <print+0x1a6>
			}
			if( *format == 'X' ) {
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b58      	cmp	r3, #88	; 0x58
 8002c48:	d110      	bne.n	8002c6c <print+0x140>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1d1a      	adds	r2, r3, #4
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	9500      	str	r5, [sp, #0]
 8002c54:	9601      	str	r6, [sp, #4]
 8002c56:	2241      	movs	r2, #65	; 0x41
 8002c58:	9202      	str	r2, [sp, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2210      	movs	r2, #16
 8002c60:	2300      	movs	r3, #0
 8002c62:	f7ff fef5 	bl	8002a50 <printi>
 8002c66:	4603      	mov	r3, r0
 8002c68:	441c      	add	r4, r3
				continue;
 8002c6a:	e032      	b.n	8002cd2 <print+0x1a6>
			}
			if( *format == 'u' ) {
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b75      	cmp	r3, #117	; 0x75
 8002c72:	d110      	bne.n	8002c96 <print+0x16a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	9500      	str	r5, [sp, #0]
 8002c7e:	9601      	str	r6, [sp, #4]
 8002c80:	2261      	movs	r2, #97	; 0x61
 8002c82:	9202      	str	r2, [sp, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	4619      	mov	r1, r3
 8002c88:	220a      	movs	r2, #10
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f7ff fee0 	bl	8002a50 <printi>
 8002c90:	4603      	mov	r3, r0
 8002c92:	441c      	add	r4, r3
				continue;
 8002c94:	e01d      	b.n	8002cd2 <print+0x1a6>
			}
			if( *format == 'c' ) {
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b63      	cmp	r3, #99	; 0x63
 8002c9c:	d119      	bne.n	8002cd2 <print+0x1a6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8002caa:	2300      	movs	r3, #0
 8002cac:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	462a      	mov	r2, r5
 8002cb8:	4633      	mov	r3, r6
 8002cba:	f7ff fe6f 	bl	800299c <prints>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	441c      	add	r4, r3
				continue;
 8002cc2:	e006      	b.n	8002cd2 <print+0x1a6>
			}
		}
		else {
		out:
			printchar (out, *format);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7ff fe4e 	bl	800296c <printchar>
			++pc;
 8002cd0:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f47f af2e 	bne.w	8002b3e <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <print+0x1c4>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8002cf0:	4623      	mov	r3, r4
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cfc:	0800887c 	.word	0x0800887c

08002d00 <sprintf>:
	va_start( args, format );
	return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8002d00:	b40e      	push	{r1, r2, r3}
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args, format );
 8002d0a:	f107 0320 	add.w	r3, r7, #32
 8002d0e:	60fb      	str	r3, [r7, #12]
	return print( &out, format, args );
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	4618      	mov	r0, r3
 8002d14:	69f9      	ldr	r1, [r7, #28]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	f7ff ff08 	bl	8002b2c <print>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d28:	b003      	add	sp, #12
 8002d2a:	4770      	bx	lr

08002d2c <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <NVIC_SetPendingIRQ+0x30>)
 8002d38:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002d3c:	0952      	lsrs	r2, r2, #5
 8002d3e:	79f9      	ldrb	r1, [r7, #7]
 8002d40:	f001 011f 	and.w	r1, r1, #31
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f101 	lsl.w	r1, r0, r1
 8002d4a:	3240      	adds	r2, #64	; 0x40
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af04      	add	r7, sp, #16
	/*<! Configure the hardware ready to run the test. */
	prvSetupHardware();;
 8002d66:	f000 f857 	bl	8002e18 <prvSetupHardware>
	
	// ============now register CLI commands ===================
	
	FreeRTOS_CLIRegisterCommand( &xMotorCommand );
 8002d6a:	481f      	ldr	r0, [pc, #124]	; (8002de8 <main+0x88>)
 8002d6c:	f002 fb5c 	bl	8005428 <FreeRTOS_CLIRegisterCommand>
       	FreeRTOS_CLIRegisterCommand( &xTaskStatsCommand);		
 8002d70:	481e      	ldr	r0, [pc, #120]	; (8002dec <main+0x8c>)
 8002d72:	f002 fb59 	bl	8005428 <FreeRTOS_CLIRegisterCommand>

	// create queues 
	QSpd_handle = xQueueCreate(2, sizeof(QueueTelegram));
 8002d76:	2002      	movs	r0, #2
 8002d78:	211c      	movs	r1, #28
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f001 fb42 	bl	8004404 <xQueueGenericCreate>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <main+0x90>)
 8002d84:	601a      	str	r2, [r3, #0]
/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/



	// echo server task 
	xTaskCreate(set_macTask, "TCPsrv", configMINIMAL_STACK_SIZE * 8 , 
 8002d86:	2301      	movs	r3, #1
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <main+0x94>)
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9302      	str	r3, [sp, #8]
 8002d92:	2300      	movs	r3, #0
 8002d94:	9303      	str	r3, [sp, #12]
 8002d96:	4818      	ldr	r0, [pc, #96]	; (8002df8 <main+0x98>)
 8002d98:	4918      	ldr	r1, [pc, #96]	; (8002dfc <main+0x9c>)
 8002d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f000 f99c 	bl	80030dc <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY , &set_macTaskHandle);
	
	// run motor task 
	xTaskCreate(motorControl_task, "motor", configMINIMAL_STACK_SIZE * 8 ,
 8002da4:	2301      	movs	r3, #1
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <main+0xa0>)
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	2300      	movs	r3, #0
 8002db2:	9303      	str	r3, [sp, #12]
 8002db4:	4813      	ldr	r0, [pc, #76]	; (8002e04 <main+0xa4>)
 8002db6:	4914      	ldr	r1, [pc, #80]	; (8002e08 <main+0xa8>)
 8002db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f000 f98d 	bl	80030dc <xTaskGenericCreate>
		       	NULL, mainFLASH_TASK_PRIORITY, &motorHBHandle);

	// set motor task 
	xTaskCreate(motorHeartBeat_task, "motorHB", configMINIMAL_STACK_SIZE * 8,		       				
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <main+0xac>)
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9302      	str	r3, [sp, #8]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9303      	str	r3, [sp, #12]
 8002dd2:	480f      	ldr	r0, [pc, #60]	; (8002e10 <main+0xb0>)
 8002dd4:	490f      	ldr	r1, [pc, #60]	; (8002e14 <main+0xb4>)
 8002dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f000 f97e 	bl	80030dc <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8002de0:	f000 fbbe 	bl	8003560 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8002de4:	e7fe      	b.n	8002de4 <main+0x84>
 8002de6:	bf00      	nop
 8002de8:	08008e98 	.word	0x08008e98
 8002dec:	08008ea8 	.word	0x08008ea8
 8002df0:	200131f8 	.word	0x200131f8
 8002df4:	200141b8 	.word	0x200141b8
 8002df8:	080015a1 	.word	0x080015a1
 8002dfc:	080088f8 	.word	0x080088f8
 8002e00:	200131f0 	.word	0x200131f0
 8002e04:	08001f15 	.word	0x08001f15
 8002e08:	08008884 	.word	0x08008884
 8002e0c:	200139d0 	.word	0x200139d0
 8002e10:	08001ef5 	.word	0x08001ef5
 8002e14:	08008900 	.word	0x08008900

08002e18 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af04      	add	r7, sp, #16
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8002e1e:	f000 f8af 	bl	8002f80 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002e22:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002e26:	f002 fded 	bl	8005a04 <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 8002e2a:	f7fd fa71 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 8002e2e:	f7fe fc23 	bl	8001678 <init_USARTx>
	 * Function : 		init_W5200 from W5200.c file 
	 * Stack size :		5 times minimial stack size 
	 * Task priority :	main flash task priority + 1 
	 * Parameters 	 :	no parameters (NULL)
	 */  
	xTaskCreate(init_W5200, "init_W5200", configMINIMAL_STACK_SIZE*4, 
 8002e32:	2302      	movs	r3, #2
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9303      	str	r3, [sp, #12]
 8002e42:	4804      	ldr	r0, [pc, #16]	; (8002e54 <prvSetupHardware+0x3c>)
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <prvSetupHardware+0x40>)
 8002e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f000 f946 	bl	80030dc <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY + 1 , NULL);
	
	
}
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	08000ac5 	.word	0x08000ac5
 8002e58:	08008908 	.word	0x08008908

08002e5c <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <vApplicationTickHook+0x20>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <vApplicationTickHook+0x20>)
 8002e68:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8002e6a:	201c      	movs	r0, #28
 8002e6c:	f7ff ff5e 	bl	8002d2c <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <vApplicationTickHook+0x20>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1e5a      	subs	r2, r3, #1
 8002e76:	4b01      	ldr	r3, [pc, #4]	; (8002e7c <vApplicationTickHook+0x20>)
 8002e78:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000490 	.word	0x20000490

08002e80 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <TIM3_IRQHandler+0x34>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <TIM3_IRQHandler+0x34>)
 8002e8c:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <TIM3_IRQHandler+0x34>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <TIM3_IRQHandler+0x38>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d903      	bls.n	8002ea2 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <TIM3_IRQHandler+0x34>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <TIM3_IRQHandler+0x38>)
 8002ea0:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <TIM3_IRQHandler+0x34>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	4b02      	ldr	r3, [pc, #8]	; (8002eb4 <TIM3_IRQHandler+0x34>)
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	20000490 	.word	0x20000490
 8002eb8:	20000494 	.word	0x20000494

08002ebc <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <TIM2_IRQHandler+0x20>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <TIM2_IRQHandler+0x20>)
 8002ec8:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8002eca:	201d      	movs	r0, #29
 8002ecc:	f7ff ff2e 	bl	8002d2c <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8002ed0:	4b02      	ldr	r3, [pc, #8]	; (8002edc <TIM2_IRQHandler+0x20>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	1e5a      	subs	r2, r3, #1
 8002ed6:	4b01      	ldr	r3, [pc, #4]	; (8002edc <TIM2_IRQHandler+0x20>)
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000490 	.word	0x20000490

08002ee0 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8002ee4:	f001 ff90 	bl	8004e08 <ulPortSetInterruptMask>
	for( ;; );
 8002ee8:	e7fe      	b.n	8002ee8 <vApplicationMallocFailedHook+0x8>
 8002eea:	bf00      	nop

08002eec <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8002f02:	f001 ff81 	bl	8004e08 <ulPortSetInterruptMask>
	for( ;; );
 8002f06:	e7fe      	b.n	8002f06 <vApplicationStackOverflowHook+0xe>

08002f08 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]

}
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <Reset_Handler>:
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f000 b804 	b.w	8002f2a <LoopCopyDataInit>

08002f22 <CopyDataInit>:
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <LoopFillZerobss+0x22>)
 8002f24:	585b      	ldr	r3, [r3, r1]
 8002f26:	5043      	str	r3, [r0, r1]
 8002f28:	3104      	adds	r1, #4

08002f2a <LoopCopyDataInit>:
 8002f2a:	480f      	ldr	r0, [pc, #60]	; (8002f68 <LoopFillZerobss+0x26>)
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <LoopFillZerobss+0x2a>)
 8002f2e:	1842      	adds	r2, r0, r1
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f4ff aff6 	bcc.w	8002f22 <CopyDataInit>
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <LoopFillZerobss+0x2e>)
 8002f38:	f000 b803 	b.w	8002f42 <LoopFillZerobss>

08002f3c <FillZerobss>:
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f842 3b04 	str.w	r3, [r2], #4

08002f42 <LoopFillZerobss>:
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <LoopFillZerobss+0x32>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f4ff aff9 	bcc.w	8002f3c <FillZerobss>
 8002f4a:	480b      	ldr	r0, [pc, #44]	; (8002f78 <LoopFillZerobss+0x36>)
 8002f4c:	6801      	ldr	r1, [r0, #0]
 8002f4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f52:	6001      	str	r1, [r0, #0]
 8002f54:	f000 f814 	bl	8002f80 <SystemInit>
 8002f58:	f005 f846 	bl	8007fe8 <__libc_init_array>
 8002f5c:	f7ff ff00 	bl	8002d60 <main>
 8002f60:	4770      	bx	lr
 8002f62:	0000      	.short	0x0000
 8002f64:	0800900c 	.word	0x0800900c
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	20000460 	.word	0x20000460
 8002f70:	20000460 	.word	0x20000460
 8002f74:	20014414 	.word	0x20014414
 8002f78:	e000ed88 	.word	0xe000ed88

08002f7c <ADC_IRQHandler>:
 8002f7c:	f7ff bffe 	b.w	8002f7c <ADC_IRQHandler>

08002f80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <SystemInit+0x5c>)
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <SystemInit+0x5c>)
 8002f88:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002f8c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <SystemInit+0x60>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <SystemInit+0x60>)
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <SystemInit+0x60>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <SystemInit+0x60>)
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <SystemInit+0x60>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <SystemInit+0x60>)
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <SystemInit+0x64>)
 8002fba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <SystemInit+0x60>)
 8002fbe:	4a08      	ldr	r2, [pc, #32]	; (8002fe0 <SystemInit+0x60>)
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <SystemInit+0x60>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002fce:	f000 f80b 	bl	8002fe8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fd2:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <SystemInit+0x5c>)
 8002fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fd8:	609a      	str	r2, [r3, #8]
#endif
}
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	e000ed00 	.word	0xe000ed00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	24003010 	.word	0x24003010

08002fe8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002ff6:	4b35      	ldr	r3, [pc, #212]	; (80030cc <SetSysClock+0xe4>)
 8002ff8:	4a34      	ldr	r2, [pc, #208]	; (80030cc <SetSysClock+0xe4>)
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003000:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <SetSysClock+0xe4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3301      	adds	r3, #1
 8003010:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <SetSysClock+0x38>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800301e:	d1f0      	bne.n	8003002 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <SetSysClock+0xe4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800302c:	2301      	movs	r3, #1
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	e001      	b.n	8003036 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003032:	2300      	movs	r3, #0
 8003034:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d142      	bne.n	80030c2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800303c:	4b23      	ldr	r3, [pc, #140]	; (80030cc <SetSysClock+0xe4>)
 800303e:	4a23      	ldr	r2, [pc, #140]	; (80030cc <SetSysClock+0xe4>)
 8003040:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003042:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003048:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <SetSysClock+0xe8>)
 800304a:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <SetSysClock+0xe8>)
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003052:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <SetSysClock+0xe4>)
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <SetSysClock+0xe4>)
 8003058:	6892      	ldr	r2, [r2, #8]
 800305a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <SetSysClock+0xe4>)
 800305e:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <SetSysClock+0xe4>)
 8003060:	6892      	ldr	r2, [r2, #8]
 8003062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003066:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <SetSysClock+0xe4>)
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <SetSysClock+0xe4>)
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003072:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <SetSysClock+0xe4>)
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <SetSysClock+0xec>)
 8003078:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <SetSysClock+0xe4>)
 800307c:	4a13      	ldr	r2, [pc, #76]	; (80030cc <SetSysClock+0xe4>)
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003084:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003086:	bf00      	nop
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <SetSysClock+0xe4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f9      	beq.n	8003088 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <SetSysClock+0xf0>)
 8003096:	f240 6204 	movw	r2, #1540	; 0x604
 800309a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <SetSysClock+0xe4>)
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <SetSysClock+0xe4>)
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	f022 0203 	bic.w	r2, r2, #3
 80030a6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <SetSysClock+0xe4>)
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <SetSysClock+0xe4>)
 80030ac:	6892      	ldr	r2, [r2, #8]
 80030ae:	f042 0202 	orr.w	r2, r2, #2
 80030b2:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80030b4:	bf00      	nop
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SetSysClock+0xe4>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d1f9      	bne.n	80030b6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000
 80030d4:	07404b19 	.word	0x07404b19
 80030d8:	40023c00 	.word	0x40023c00

080030dc <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <xTaskGenericCreate+0x1c>
 80030f2:	f001 fe89 	bl	8004e08 <ulPortSetInterruptMask>
 80030f6:	e7fe      	b.n	80030f6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d902      	bls.n	8003104 <xTaskGenericCreate+0x28>
 80030fe:	f001 fe83 	bl	8004e08 <ulPortSetInterruptMask>
 8003102:	e7fe      	b.n	8003102 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	4618      	mov	r0, r3
 8003108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800310a:	f000 ff0b 	bl	8003f24 <prvAllocateTCBAndStack>
 800310e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d072      	beq.n	80031fc <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003120:	3b01      	subs	r3, #1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <xTaskGenericCreate+0x64>
 800313a:	f001 fe65 	bl	8004e08 <ulPortSetInterruptMask>
 800313e:	e7fe      	b.n	800313e <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	69b8      	ldr	r0, [r7, #24]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	f000 fdf4 	bl	8003d38 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003150:	6978      	ldr	r0, [r7, #20]
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	f001 fd65 	bl	8004c24 <pxPortInitialiseStack>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 800316c:	f001 fe2a 	bl	8004dc4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <xTaskGenericCreate+0x150>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <xTaskGenericCreate+0x150>)
 8003178:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <xTaskGenericCreate+0x154>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <xTaskGenericCreate+0x154>)
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8003188:	4b28      	ldr	r3, [pc, #160]	; (800322c <xTaskGenericCreate+0x150>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10f      	bne.n	80031b0 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8003190:	f000 fe1a 	bl	8003dc8 <prvInitialiseTaskLists>
 8003194:	e00c      	b.n	80031b0 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <xTaskGenericCreate+0x158>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <xTaskGenericCreate+0x154>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d802      	bhi.n	80031b0 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <xTaskGenericCreate+0x154>)
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <xTaskGenericCreate+0x15c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <xTaskGenericCreate+0x15c>)
 80031b8:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <xTaskGenericCreate+0x15c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <xTaskGenericCreate+0x160>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d903      	bls.n	80031d6 <xTaskGenericCreate+0xfa>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <xTaskGenericCreate+0x160>)
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <xTaskGenericCreate+0x164>)
 80031e4:	441a      	add	r2, r3
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f001 fc93 	bl	8004b18 <vListInsertEnd>

			xReturn = pdPASS;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80031f6:	f001 fdf5 	bl	8004de4 <vPortExitCritical>
 80031fa:	e002      	b.n	8003202 <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003200:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10b      	bne.n	8003220 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <xTaskGenericCreate+0x158>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <xTaskGenericCreate+0x154>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	429a      	cmp	r2, r3
 800321a:	d201      	bcs.n	8003220 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 800321c:	f001 fdc2 	bl	8004da4 <vPortYield>
			}
		}
	}

	return xReturn;
 8003220:	69fb      	ldr	r3, [r7, #28]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000570 	.word	0x20000570
 8003230:	20000498 	.word	0x20000498
 8003234:	2000057c 	.word	0x2000057c
 8003238:	20000590 	.word	0x20000590
 800323c:	20000578 	.word	0x20000578
 8003240:	2000049c 	.word	0x2000049c

08003244 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle xTaskToDelete )
	{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 800324c:	f001 fdba 	bl	8004dc4 <vPortEnterCritical>
		{
			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <vTaskDelete+0x18>
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <vTaskDelete+0x78>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	e000      	b.n	800325e <vTaskDelete+0x1a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3304      	adds	r3, #4
 8003264:	4618      	mov	r0, r3
 8003266:	f001 fcb3 	bl	8004bd0 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3318      	adds	r3, #24
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fcaa 	bl	8004bd0 <uxListRemove>
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3304      	adds	r3, #4
 8003280:	480f      	ldr	r0, [pc, #60]	; (80032c0 <vTaskDelete+0x7c>)
 8003282:	4619      	mov	r1, r3
 8003284:	f001 fc48 	bl	8004b18 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <vTaskDelete+0x80>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <vTaskDelete+0x80>)
 8003290:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <vTaskDelete+0x84>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <vTaskDelete+0x84>)
 800329a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800329c:	f001 fda2 	bl	8004de4 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <vTaskDelete+0x88>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <vTaskDelete+0x72>
		{
			if( pxTCB == pxCurrentTCB )
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <vTaskDelete+0x78>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d101      	bne.n	80032b6 <vTaskDelete+0x72>
			{
				portYIELD_WITHIN_API();
 80032b2:	f001 fd77 	bl	8004da4 <vPortYield>
			}
		}
	}
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000498 	.word	0x20000498
 80032c0:	20000544 	.word	0x20000544
 80032c4:	20000558 	.word	0x20000558
 80032c8:	20000590 	.word	0x20000590
 80032cc:	2000057c 	.word	0x2000057c

080032d0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <vTaskDelayUntil+0x1a>
 80032e4:	f001 fd90 	bl	8004e08 <ulPortSetInterruptMask>
 80032e8:	e7fe      	b.n	80032e8 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <vTaskDelayUntil+0x26>
 80032f0:	f001 fd8a 	bl	8004e08 <ulPortSetInterruptMask>
 80032f4:	e7fe      	b.n	80032f4 <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 80032f6:	f000 f96b 	bl	80035d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 80032fa:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <vTaskDelayUntil+0xa8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	429a      	cmp	r2, r3
 8003312:	d90b      	bls.n	800332c <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	429a      	cmp	r2, r3
 800331c:	d911      	bls.n	8003342 <vTaskDelayUntil+0x72>
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	429a      	cmp	r2, r3
 8003324:	d90d      	bls.n	8003342 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8003326:	2301      	movs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e00a      	b.n	8003342 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	429a      	cmp	r2, r3
 8003334:	d803      	bhi.n	800333e <vTaskDelayUntil+0x6e>
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	d901      	bls.n	8003342 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 800333e:	2301      	movs	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <vTaskDelayUntil+0xac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3304      	adds	r3, #4
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fc3b 	bl	8004bd0 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fdac 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003360:	f000 f944 	bl	80035ec <xTaskResumeAll>
 8003364:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 800336c:	f001 fd1a 	bl	8004da4 <vPortYield>
		}
	}
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000574 	.word	0x20000574
 800337c:	20000498 	.word	0x20000498

08003380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d012      	beq.n	80033b8 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 8003392:	f000 f91d 	bl	80035d0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <vTaskDelay+0x48>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <vTaskDelay+0x4c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fc12 	bl	8004bd0 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80033ac:	68b8      	ldr	r0, [r7, #8]
 80033ae:	f000 fd83 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033b2:	f000 f91b 	bl	80035ec <xTaskResumeAll>
 80033b6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 80033be:	f001 fcf1 	bl	8004da4 <vPortYield>
		}
	}
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000574 	.word	0x20000574
 80033cc:	20000498 	.word	0x20000498

080033d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80033d8:	f001 fcf4 	bl	8004dc4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <vTaskSuspend+0x18>
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <vTaskSuspend+0x80>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e000      	b.n	80033ea <vTaskSuspend+0x1a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 fbed 	bl	8004bd0 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d004      	beq.n	8003408 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3318      	adds	r3, #24
 8003402:	4618      	mov	r0, r3
 8003404:	f001 fbe4 	bl	8004bd0 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3304      	adds	r3, #4
 800340c:	4811      	ldr	r0, [pc, #68]	; (8003454 <vTaskSuspend+0x84>)
 800340e:	4619      	mov	r1, r3
 8003410:	f001 fb82 	bl	8004b18 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8003414:	f001 fce6 	bl	8004de4 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <vTaskSuspend+0x80>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	d112      	bne.n	8003448 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <vTaskSuspend+0x88>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 800342a:	f001 fcbb 	bl	8004da4 <vPortYield>
 800342e:	e00b      	b.n	8003448 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <vTaskSuspend+0x84>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <vTaskSuspend+0x8c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d103      	bne.n	8003444 <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <vTaskSuspend+0x80>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e001      	b.n	8003448 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 8003444:	f000 fabc 	bl	80039c0 <vTaskSwitchContext>
				}
			}
		}
	}
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000498 	.word	0x20000498
 8003454:	2000055c 	.word	0x2000055c
 8003458:	2000057c 	.word	0x2000057c
 800345c:	20000570 	.word	0x20000570

08003460 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <xTaskIsTaskSuspended+0x1c>
 8003476:	f001 fcc7 	bl	8004e08 <ulPortSetInterruptMask>
 800347a:	e7fe      	b.n	800347a <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <xTaskIsTaskSuspended+0x5c>)
 8003482:	429a      	cmp	r2, r3
 8003484:	d101      	bne.n	800348a <xTaskIsTaskSuspended+0x2a>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xTaskIsTaskSuspended+0x2c>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00f      	beq.n	80034b0 <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <xTaskIsTaskSuspended+0x60>)
 8003496:	429a      	cmp	r2, r3
 8003498:	d00a      	beq.n	80034b0 <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <xTaskIsTaskSuspended+0x46>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <xTaskIsTaskSuspended+0x48>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 80034b0:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000055c 	.word	0x2000055c
 80034c0:	20000530 	.word	0x20000530

080034c4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <vTaskResume+0x18>
 80034d6:	f001 fc97 	bl	8004e08 <ulPortSetInterruptMask>
 80034da:	e7fe      	b.n	80034da <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d034      	beq.n	800354c <vTaskResume+0x88>
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <vTaskResume+0x90>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d02f      	beq.n	800354c <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 80034ec:	f001 fc6a 	bl	8004dc4 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7ff ffb5 	bl	8003460 <xTaskIsTaskSuspended>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d125      	bne.n	8003548 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3304      	adds	r3, #4
 8003500:	4618      	mov	r0, r3
 8003502:	f001 fb65 	bl	8004bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <vTaskResume+0x94>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d903      	bls.n	800351a <vTaskResume+0x56>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <vTaskResume+0x94>)
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4a0d      	ldr	r2, [pc, #52]	; (800355c <vTaskResume+0x98>)
 8003528:	441a      	add	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3304      	adds	r3, #4
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f001 faf1 	bl	8004b18 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <vTaskResume+0x90>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	429a      	cmp	r2, r3
 8003542:	d301      	bcc.n	8003548 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8003544:	f001 fc2e 	bl	8004da4 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8003548:	f001 fc4c 	bl	8004de4 <vPortExitCritical>
		}
	}
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000498 	.word	0x20000498
 8003558:	20000578 	.word	0x20000578
 800355c:	2000049c 	.word	0x2000049c

08003560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8003566:	2300      	movs	r3, #0
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2300      	movs	r3, #0
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2300      	movs	r3, #0
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	2300      	movs	r3, #0
 8003574:	9303      	str	r3, [sp, #12]
 8003576:	4812      	ldr	r0, [pc, #72]	; (80035c0 <vTaskStartScheduler+0x60>)
 8003578:	4912      	ldr	r1, [pc, #72]	; (80035c4 <vTaskStartScheduler+0x64>)
 800357a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357e:	2300      	movs	r3, #0
 8003580:	f7ff fdac 	bl	80030dc <xTaskGenericCreate>
 8003584:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d102      	bne.n	8003592 <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
 800358c:	f001 fcd6 	bl	8004f3c <xTimerCreateTimerTask>
 8003590:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10a      	bne.n	80035ae <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003598:	f001 fc36 	bl	8004e08 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <vTaskStartScheduler+0x68>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <vTaskStartScheduler+0x6c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035a8:	f001 fb96 	bl	8004cd8 <xPortStartScheduler>
 80035ac:	e005      	b.n	80035ba <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <vTaskStartScheduler+0x5a>
 80035b4:	f001 fc28 	bl	8004e08 <ulPortSetInterruptMask>
 80035b8:	e7fe      	b.n	80035b8 <vTaskStartScheduler+0x58>
	}
}
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	08003d15 	.word	0x08003d15
 80035c4:	08008914 	.word	0x08008914
 80035c8:	2000057c 	.word	0x2000057c
 80035cc:	20000574 	.word	0x20000574

080035d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <vTaskSuspendAll+0x18>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <vTaskSuspendAll+0x18>)
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000580 	.word	0x20000580

080035ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035f6:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <xTaskResumeAll+0xec>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <xTaskResumeAll+0x18>
 80035fe:	f001 fc03 	bl	8004e08 <ulPortSetInterruptMask>
 8003602:	e7fe      	b.n	8003602 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003604:	f001 fbde 	bl	8004dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <xTaskResumeAll+0xec>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <xTaskResumeAll+0xec>)
 8003610:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003612:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <xTaskResumeAll+0xec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d156      	bne.n	80036c8 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <xTaskResumeAll+0xf0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d052      	beq.n	80036c8 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003622:	e02f      	b.n	8003684 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003624:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <xTaskResumeAll+0xf4>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3318      	adds	r3, #24
 8003630:	4618      	mov	r0, r3
 8003632:	f001 facd 	bl	8004bd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	3304      	adds	r3, #4
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fac8 	bl	8004bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <xTaskResumeAll+0xf8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d903      	bls.n	8003654 <xTaskResumeAll+0x68>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <xTaskResumeAll+0xf8>)
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <xTaskResumeAll+0xfc>)
 8003662:	441a      	add	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	3304      	adds	r3, #4
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f001 fa54 	bl	8004b18 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <xTaskResumeAll+0x100>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <xTaskResumeAll+0x104>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <xTaskResumeAll+0xf4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1cb      	bne.n	8003624 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <xTaskResumeAll+0x108>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d011      	beq.n	80036b8 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8003694:	e00c      	b.n	80036b0 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8003696:	f000 f8bd 	bl	8003814 <xTaskIncrementTick>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 80036a0:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <xTaskResumeAll+0x104>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <xTaskResumeAll+0x108>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	1e5a      	subs	r2, r3, #1
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <xTaskResumeAll+0x108>)
 80036ae:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <xTaskResumeAll+0x108>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ee      	bne.n	8003696 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <xTaskResumeAll+0x104>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d103      	bne.n	80036c8 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 80036c4:	f001 fb6e 	bl	8004da4 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80036c8:	f001 fb8c 	bl	8004de4 <vPortExitCritical>

	return xAlreadyYielded;
 80036cc:	687b      	ldr	r3, [r7, #4]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000580 	.word	0x20000580
 80036dc:	20000570 	.word	0x20000570
 80036e0:	20000530 	.word	0x20000530
 80036e4:	20000578 	.word	0x20000578
 80036e8:	2000049c 	.word	0x2000049c
 80036ec:	20000498 	.word	0x20000498
 80036f0:	20000588 	.word	0x20000588
 80036f4:	20000584 	.word	0x20000584

080036f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 80036fe:	f001 fb61 	bl	8004dc4 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <xTaskGetTickCount+0x20>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8003708:	f001 fb6c 	bl	8004de4 <vPortExitCritical>

	return xTicks;
 800370c:	687b      	ldr	r3, [r7, #4]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000574 	.word	0x20000574

0800371c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned portBASE_TYPE uxTaskGetSystemState( xTaskStatusType *pxTaskStatusArray, unsigned portBASE_TYPE uxArraySize, unsigned long *pulTotalRunTime )
	{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
	unsigned portBASE_TYPE uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	2305      	movs	r3, #5
 800372e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8003730:	f7ff ff4e 	bl	80035d0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <uxTaskGetSystemState+0xe0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d357      	bcc.n	80037ee <uxTaskGetSystemState+0xd2>
			{
				/* Fill in an xTaskStatusType structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	3b01      	subs	r3, #1
 8003742:	613b      	str	r3, [r7, #16]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	18d1      	adds	r1, r2, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <uxTaskGetSystemState+0xe4>)
 8003758:	4413      	add	r3, r2
 800375a:	4608      	mov	r0, r1
 800375c:	4619      	mov	r1, r3
 800375e:	2201      	movs	r2, #1
 8003760:	f000 fc12 	bl	8003f88 <prvListTaskWithinSingleList>
 8003764:	4603      	mov	r3, r0
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4413      	add	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( unsigned portBASE_TYPE ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e5      	bne.n	800373e <uxTaskGetSystemState+0x22>

				/* Fill in an xTaskStatusType structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxDelayedTaskList, eBlocked );
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	015b      	lsls	r3, r3, #5
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	441a      	add	r2, r3
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <uxTaskGetSystemState+0xe8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	2202      	movs	r2, #2
 8003784:	f000 fc00 	bl	8003f88 <prvListTaskWithinSingleList>
 8003788:	4603      	mov	r3, r0
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4413      	add	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxOverflowDelayedTaskList, eBlocked );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	015b      	lsls	r3, r3, #5
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	441a      	add	r2, r3
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <uxTaskGetSystemState+0xec>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	2202      	movs	r2, #2
 80037a2:	f000 fbf1 	bl	8003f88 <prvListTaskWithinSingleList>
 80037a6:	4603      	mov	r3, r0
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4413      	add	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an xTaskStatusType structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	015b      	lsls	r3, r3, #5
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	4914      	ldr	r1, [pc, #80]	; (800380c <uxTaskGetSystemState+0xf0>)
 80037ba:	2204      	movs	r2, #4
 80037bc:	f000 fbe4 	bl	8003f88 <prvListTaskWithinSingleList>
 80037c0:	4603      	mov	r3, r0
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4413      	add	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an xTaskStatusType structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	015b      	lsls	r3, r3, #5
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	490f      	ldr	r1, [pc, #60]	; (8003810 <uxTaskGetSystemState+0xf4>)
 80037d4:	2203      	movs	r2, #3
 80037d6:	f000 fbd7 	bl	8003f88 <prvListTaskWithinSingleList>
 80037da:	4603      	mov	r3, r0
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4413      	add	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <uxTaskGetSystemState+0xd2>
					{
						*pulTotalRunTime = 0;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
					}
				}
				#endif
			}
		}
		( void ) xTaskResumeAll();
 80037ee:	f7ff fefd 	bl	80035ec <xTaskResumeAll>

		return uxTask;
 80037f2:	697b      	ldr	r3, [r7, #20]
	}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000570 	.word	0x20000570
 8003800:	2000049c 	.word	0x2000049c
 8003804:	20000528 	.word	0x20000528
 8003808:	2000052c 	.word	0x2000052c
 800380c:	20000544 	.word	0x20000544
 8003810:	2000055c 	.word	0x2000055c

08003814 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800381e:	4b5d      	ldr	r3, [pc, #372]	; (8003994 <xTaskIncrementTick+0x180>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 80a4 	bne.w	8003970 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8003828:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <xTaskIncrementTick+0x184>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	4b5a      	ldr	r3, [pc, #360]	; (8003998 <xTaskIncrementTick+0x184>)
 8003830:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8003832:	4b59      	ldr	r3, [pc, #356]	; (8003998 <xTaskIncrementTick+0x184>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d12e      	bne.n	800389c <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <xTaskIncrementTick+0x188>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <xTaskIncrementTick+0x3a>
 8003848:	f001 fade 	bl	8004e08 <ulPortSetInterruptMask>
 800384c:	e7fe      	b.n	800384c <xTaskIncrementTick+0x38>
 800384e:	4b53      	ldr	r3, [pc, #332]	; (800399c <xTaskIncrementTick+0x188>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	4b52      	ldr	r3, [pc, #328]	; (80039a0 <xTaskIncrementTick+0x18c>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <xTaskIncrementTick+0x188>)
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <xTaskIncrementTick+0x18c>)
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <xTaskIncrementTick+0x190>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	4b4e      	ldr	r3, [pc, #312]	; (80039a4 <xTaskIncrementTick+0x190>)
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	4b4b      	ldr	r3, [pc, #300]	; (800399c <xTaskIncrementTick+0x188>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <xTaskIncrementTick+0x66>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <xTaskIncrementTick+0x68>
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <xTaskIncrementTick+0x76>
 8003880:	4b49      	ldr	r3, [pc, #292]	; (80039a8 <xTaskIncrementTick+0x194>)
 8003882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e008      	b.n	800389c <xTaskIncrementTick+0x88>
 800388a:	4b44      	ldr	r3, [pc, #272]	; (800399c <xTaskIncrementTick+0x188>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <xTaskIncrementTick+0x194>)
 800389a:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <xTaskIncrementTick+0x194>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d34f      	bcc.n	8003946 <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038a6:	4b3d      	ldr	r3, [pc, #244]	; (800399c <xTaskIncrementTick+0x188>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <xTaskIncrementTick+0xa0>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <xTaskIncrementTick+0xa2>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <xTaskIncrementTick+0x194>)
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038c0:	601a      	str	r2, [r3, #0]
						break;
 80038c2:	e040      	b.n	8003946 <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <xTaskIncrementTick+0x188>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d203      	bcs.n	80038e4 <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <xTaskIncrementTick+0x194>)
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
							break;
 80038e2:	e030      	b.n	8003946 <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 f971 	bl	8004bd0 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3318      	adds	r3, #24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f968 	bl	8004bd0 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4b29      	ldr	r3, [pc, #164]	; (80039ac <xTaskIncrementTick+0x198>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d903      	bls.n	8003914 <xTaskIncrementTick+0x100>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	4b26      	ldr	r3, [pc, #152]	; (80039ac <xTaskIncrementTick+0x198>)
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <xTaskIncrementTick+0x19c>)
 8003922:	441a      	add	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3304      	adds	r3, #4
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f001 f8f4 	bl	8004b18 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <xTaskIncrementTick+0x1a0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 800393e:	2301      	movs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8003942:	e7b0      	b.n	80038a6 <xTaskIncrementTick+0x92>
 8003944:	e7af      	b.n	80038a6 <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <xTaskIncrementTick+0x1a0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4918      	ldr	r1, [pc, #96]	; (80039b0 <xTaskIncrementTick+0x19c>)
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d901      	bls.n	8003962 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 800395e:	2301      	movs	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <xTaskIncrementTick+0x1a4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 800396a:	f7ff fa77 	bl	8002e5c <vApplicationTickHook>
 800396e:	e006      	b.n	800397e <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <xTaskIncrementTick+0x1a4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <xTaskIncrementTick+0x1a4>)
 8003978:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800397a:	f7ff fa6f 	bl	8002e5c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <xTaskIncrementTick+0x1a8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 8003986:	2301      	movs	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800398a:	697b      	ldr	r3, [r7, #20]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000580 	.word	0x20000580
 8003998:	20000574 	.word	0x20000574
 800399c:	20000528 	.word	0x20000528
 80039a0:	2000052c 	.word	0x2000052c
 80039a4:	2000058c 	.word	0x2000058c
 80039a8:	20000008 	.word	0x20000008
 80039ac:	20000578 	.word	0x20000578
 80039b0:	2000049c 	.word	0x2000049c
 80039b4:	20000498 	.word	0x20000498
 80039b8:	20000584 	.word	0x20000584
 80039bc:	20000588 	.word	0x20000588

080039c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80039c6:	4b35      	ldr	r3, [pc, #212]	; (8003a9c <vTaskSwitchContext+0xdc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039ce:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <vTaskSwitchContext+0xe0>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e05e      	b.n	8003a94 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 80039d6:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <vTaskSwitchContext+0xe0>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d808      	bhi.n	80039fe <vTaskSwitchContext+0x3e>
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3334      	adds	r3, #52	; 0x34
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f7ff fa7d 	bl	8002ef8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4618      	mov	r0, r3
 8003a06:	4928      	ldr	r1, [pc, #160]	; (8003aa8 <vTaskSwitchContext+0xe8>)
 8003a08:	2214      	movs	r2, #20
 8003a0a:	f004 fb15 	bl	8008038 <memcmp>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <vTaskSwitchContext+0x68>
 8003a14:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3334      	adds	r3, #52	; 0x34
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	f7ff fa69 	bl	8002ef8 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a26:	e00c      	b.n	8003a42 <vTaskSwitchContext+0x82>
 8003a28:	e00b      	b.n	8003a42 <vTaskSwitchContext+0x82>
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <vTaskSwitchContext+0xec>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <vTaskSwitchContext+0x78>
 8003a32:	f001 f9e9 	bl	8004e08 <ulPortSetInterruptMask>
 8003a36:	e7fe      	b.n	8003a36 <vTaskSwitchContext+0x76>
 8003a38:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <vTaskSwitchContext+0xec>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <vTaskSwitchContext+0xec>)
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <vTaskSwitchContext+0xec>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	491a      	ldr	r1, [pc, #104]	; (8003ab0 <vTaskSwitchContext+0xf0>)
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0e8      	beq.n	8003a2a <vTaskSwitchContext+0x6a>
 8003a58:	4b14      	ldr	r3, [pc, #80]	; (8003aac <vTaskSwitchContext+0xec>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <vTaskSwitchContext+0xf0>)
 8003a66:	4413      	add	r3, r2
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d104      	bne.n	8003a8a <vTaskSwitchContext+0xca>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <vTaskSwitchContext+0xe4>)
 8003a92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000580 	.word	0x20000580
 8003aa0:	20000588 	.word	0x20000588
 8003aa4:	20000498 	.word	0x20000498
 8003aa8:	08008eb8 	.word	0x08008eb8
 8003aac:	20000578 	.word	0x20000578
 8003ab0:	2000049c 	.word	0x2000049c

08003ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <vTaskPlaceOnEventList+0x16>
 8003ac4:	f001 f9a0 	bl	8004e08 <ulPortSetInterruptMask>
 8003ac8:	e7fe      	b.n	8003ac8 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <vTaskPlaceOnEventList+0x60>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3318      	adds	r3, #24
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f001 f844 	bl	8004b60 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <vTaskPlaceOnEventList+0x60>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f876 	bl	8004bd0 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aea:	d107      	bne.n	8003afc <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <vTaskPlaceOnEventList+0x60>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4809      	ldr	r0, [pc, #36]	; (8003b18 <vTaskPlaceOnEventList+0x64>)
 8003af4:	4619      	mov	r1, r3
 8003af6:	f001 f80f 	bl	8004b18 <vListInsertEnd>
 8003afa:	e007      	b.n	8003b0c <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <vTaskPlaceOnEventList+0x68>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f9d6 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000498 	.word	0x20000498
 8003b18:	2000055c 	.word	0x2000055c
 8003b1c:	20000574 	.word	0x20000574

08003b20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <vTaskPlaceOnEventListRestricted+0x16>
 8003b30:	f001 f96a 	bl	8004e08 <ulPortSetInterruptMask>
 8003b34:	e7fe      	b.n	8003b34 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <vTaskPlaceOnEventListRestricted+0x48>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3318      	adds	r3, #24
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f000 ffea 	bl	8004b18 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <vTaskPlaceOnEventListRestricted+0x48>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f840 	bl	8004bd0 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <vTaskPlaceOnEventListRestricted+0x4c>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f9ac 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
	}
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000498 	.word	0x20000498
 8003b6c:	20000574 	.word	0x20000574

08003b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <xTaskRemoveFromEventList+0x1c>
 8003b86:	f001 f93f 	bl	8004e08 <ulPortSetInterruptMask>
 8003b8a:	e7fe      	b.n	8003b8a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 f81d 	bl	8004bd0 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003b96:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <xTaskRemoveFromEventList+0xa0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11d      	bne.n	8003bda <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 f814 	bl	8004bd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <xTaskRemoveFromEventList+0xa4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d903      	bls.n	8003bbc <xTaskRemoveFromEventList+0x4c>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <xTaskRemoveFromEventList+0xa4>)
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <xTaskRemoveFromEventList+0xa8>)
 8003bca:	441a      	add	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f000 ffa0 	bl	8004b18 <vListInsertEnd>
 8003bd8:	e005      	b.n	8003be6 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3318      	adds	r3, #24
 8003bde:	480f      	ldr	r0, [pc, #60]	; (8003c1c <xTaskRemoveFromEventList+0xac>)
 8003be0:	4619      	mov	r1, r3
 8003be2:	f000 ff99 	bl	8004b18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <xTaskRemoveFromEventList+0xb0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d305      	bcc.n	8003c00 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <xTaskRemoveFromEventList+0xb4>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e001      	b.n	8003c04 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003c04:	68fb      	ldr	r3, [r7, #12]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000580 	.word	0x20000580
 8003c14:	20000578 	.word	0x20000578
 8003c18:	2000049c 	.word	0x2000049c
 8003c1c:	20000530 	.word	0x20000530
 8003c20:	20000498 	.word	0x20000498
 8003c24:	20000588 	.word	0x20000588

08003c28 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <vTaskSetTimeOutState+0x14>
 8003c36:	f001 f8e7 	bl	8004e08 <ulPortSetInterruptMask>
 8003c3a:	e7fe      	b.n	8003c3a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <vTaskSetTimeOutState+0x2c>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <vTaskSetTimeOutState+0x30>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	605a      	str	r2, [r3, #4]
}
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000058c 	.word	0x2000058c
 8003c58:	20000574 	.word	0x20000574

08003c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <xTaskCheckForTimeOut+0x16>
 8003c6c:	f001 f8cc 	bl	8004e08 <ulPortSetInterruptMask>
 8003c70:	e7fe      	b.n	8003c70 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <xTaskCheckForTimeOut+0x22>
 8003c78:	f001 f8c6 	bl	8004e08 <ulPortSetInterruptMask>
 8003c7c:	e7fe      	b.n	8003c7c <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8003c7e:	f001 f8a1 	bl	8004dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8003c82:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <xTaskCheckForTimeOut+0x98>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c90:	d102      	bne.n	8003c98 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e026      	b.n	8003ce6 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <xTaskCheckForTimeOut+0x9c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d007      	beq.n	8003cb4 <xTaskCheckForTimeOut+0x58>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d802      	bhi.n	8003cb4 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e018      	b.n	8003ce6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d20e      	bcs.n	8003ce2 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	441a      	add	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ffa6 	bl	8003c28 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e001      	b.n	8003ce6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ce6:	f001 f87d 	bl	8004de4 <vPortExitCritical>

	return xReturn;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000574 	.word	0x20000574
 8003cf8:	2000058c 	.word	0x2000058c

08003cfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <vTaskMissedYield+0x14>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
}
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000588 	.word	0x20000588

08003d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003d1c:	f000 f892 	bl	8003e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <prvIdleTask+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d901      	bls.n	8003d2c <prvIdleTask+0x18>
			{
				taskYIELD();
 8003d28:	f001 f83c 	bl	8004da4 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003d2c:	f7ff f8de 	bl	8002eec <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003d30:	e7f4      	b.n	8003d1c <prvIdleTask+0x8>
 8003d32:	bf00      	nop
 8003d34:	2000049c 	.word	0x2000049c

08003d38 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e012      	b.n	8003d72 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4413      	add	r3, r2
 8003d52:	781a      	ldrb	r2, [r3, #0]
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	440b      	add	r3, r1
 8003d5a:	3330      	adds	r3, #48	; 0x30
 8003d5c:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4413      	add	r3, r2
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d100      	bne.n	8003d6c <prvInitialiseTCBVariables+0x34>
		{
			break;
 8003d6a:	e005      	b.n	8003d78 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b09      	cmp	r3, #9
 8003d76:	d9e9      	bls.n	8003d4c <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d901      	bls.n	8003d8a <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8003d86:	2304      	movs	r3, #4
 8003d88:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 feb0 	bl	8004b00 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3318      	adds	r3, #24
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 feab 	bl	8004b00 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1c3 0205 	rsb	r2, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop

08003dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	e00c      	b.n	8003dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <prvInitialiseTaskLists+0x5c>)
 8003de0:	4413      	add	r3, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fe6c 	bl	8004ac0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3301      	adds	r3, #1
 8003dec:	607b      	str	r3, [r7, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d9ef      	bls.n	8003dd4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003df4:	480c      	ldr	r0, [pc, #48]	; (8003e28 <prvInitialiseTaskLists+0x60>)
 8003df6:	f000 fe63 	bl	8004ac0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dfa:	480c      	ldr	r0, [pc, #48]	; (8003e2c <prvInitialiseTaskLists+0x64>)
 8003dfc:	f000 fe60 	bl	8004ac0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e00:	480b      	ldr	r0, [pc, #44]	; (8003e30 <prvInitialiseTaskLists+0x68>)
 8003e02:	f000 fe5d 	bl	8004ac0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e06:	480b      	ldr	r0, [pc, #44]	; (8003e34 <prvInitialiseTaskLists+0x6c>)
 8003e08:	f000 fe5a 	bl	8004ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e0c:	480a      	ldr	r0, [pc, #40]	; (8003e38 <prvInitialiseTaskLists+0x70>)
 8003e0e:	f000 fe57 	bl	8004ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <prvInitialiseTaskLists+0x74>)
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <prvInitialiseTaskLists+0x60>)
 8003e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <prvInitialiseTaskLists+0x78>)
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <prvInitialiseTaskLists+0x64>)
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	2000049c 	.word	0x2000049c
 8003e28:	20000500 	.word	0x20000500
 8003e2c:	20000514 	.word	0x20000514
 8003e30:	20000530 	.word	0x20000530
 8003e34:	20000544 	.word	0x20000544
 8003e38:	2000055c 	.word	0x2000055c
 8003e3c:	20000528 	.word	0x20000528
 8003e40:	2000052c 	.word	0x2000052c

08003e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003e4a:	e028      	b.n	8003e9e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003e4c:	f7ff fbc0 	bl	80035d0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <prvCheckTasksWaitingTermination+0x68>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf14      	ite	ne
 8003e58:	2300      	movne	r3, #0
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8003e60:	f7ff fbc4 	bl	80035ec <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d119      	bne.n	8003e9e <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8003e6a:	f000 ffab 	bl	8004dc4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <prvCheckTasksWaitingTermination+0x68>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fea8 	bl	8004bd0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <prvCheckTasksWaitingTermination+0x6c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <prvCheckTasksWaitingTermination+0x6c>)
 8003e88:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <prvCheckTasksWaitingTermination+0x70>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	1e5a      	subs	r2, r3, #1
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <prvCheckTasksWaitingTermination+0x70>)
 8003e92:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8003e94:	f000 ffa6 	bl	8004de4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003e98:	6838      	ldr	r0, [r7, #0]
 8003e9a:	f000 f90f 	bl	80040bc <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <prvCheckTasksWaitingTermination+0x70>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1d2      	bne.n	8003e4c <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000544 	.word	0x20000544
 8003eb0:	20000570 	.word	0x20000570
 8003eb4:	20000558 	.word	0x20000558

08003eb8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x58>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <prvAddCurrentTaskToDelayedList+0x5c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d209      	bcs.n	8003ee6 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <prvAddCurrentTaskToDelayedList+0x60>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x58>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f000 fe3e 	bl	8004b60 <vListInsert>
 8003ee4:	e010      	b.n	8003f08 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <prvAddCurrentTaskToDelayedList+0x64>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x58>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f000 fe34 	bl	8004b60 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <prvAddCurrentTaskToDelayedList+0x68>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d202      	bcs.n	8003f08 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <prvAddCurrentTaskToDelayedList+0x68>)
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000498 	.word	0x20000498
 8003f14:	20000574 	.word	0x20000574
 8003f18:	2000052c 	.word	0x2000052c
 8003f1c:	20000528 	.word	0x20000528
 8003f20:	20000008 	.word	0x20000008

08003f24 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8003f30:	204c      	movs	r0, #76	; 0x4c
 8003f32:	f001 fbeb 	bl	800570c <pvPortMalloc>
 8003f36:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01f      	beq.n	8003f7e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <prvAllocateTCBAndStack+0x2e>
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fbdf 	bl	800570c <pvPortMalloc>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	e000      	b.n	8003f54 <prvAllocateTCBAndStack+0x30>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f001 fc5f 	bl	8005824 <vPortFree>
			pxNewTCB = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e008      	b.n	8003f7e <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4610      	mov	r0, r2
 8003f76:	21a5      	movs	r1, #165	; 0xa5
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f004 f891 	bl	80080a0 <memset>
		}
	}

	return pxNewTCB;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static unsigned portBASE_TYPE prvListTaskWithinSingleList( xTaskStatusType *pxTaskStatusArray, xList *pxList, eTaskState eState )
	{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b08b      	sub	sp, #44	; 0x2c
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned portBASE_TYPE uxTask = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( unsigned portBASE_TYPE ) 0 )
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d06b      	beq.n	800407a <prvListTaskWithinSingleList+0xf2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d104      	bne.n	8003fc6 <prvListTaskWithinSingleList+0x3e>
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of xTaskStatusType in task.h for the
			meaning of each xTaskStatusType structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d104      	bne.n	8003ff2 <prvListTaskWithinSingleList+0x6a>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	617b      	str	r3, [r7, #20]

				pxTaskStatusArray[ uxTask ].xHandle = ( xTaskHandle ) pxNextTCB;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	015b      	lsls	r3, r3, #5
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	601a      	str	r2, [r3, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const signed char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	015b      	lsls	r3, r3, #5
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	3234      	adds	r2, #52	; 0x34
 8004012:	605a      	str	r2, [r3, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	015b      	lsls	r3, r3, #5
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004020:	609a      	str	r2, [r3, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	015b      	lsls	r3, r3, #5
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	79fa      	ldrb	r2, [r7, #7]
 800402c:	731a      	strb	r2, [r3, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	015b      	lsls	r3, r3, #5
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4413      	add	r3, r2
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800403a:	611a      	str	r2, [r3, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004048:	615a      	str	r2, [r3, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	015b      	lsls	r3, r3, #5
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
				{
					ppxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	015b      	lsls	r3, r3, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	18d4      	adds	r4, r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f80e 	bl	8004084 <prvTaskCheckFreeStackSpace>
 8004068:	4603      	mov	r3, r0
 800406a:	83a3      	strh	r3, [r4, #28]
				}
				#endif

				uxTask++;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	3301      	adds	r3, #1
 8004070:	627b      	str	r3, [r7, #36]	; 0x24

			} while( pxNextTCB != pxFirstTCB );
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	429a      	cmp	r2, r3
 8004078:	d1a9      	bne.n	8003fce <prvListTaskWithinSingleList+0x46>
		}

		return uxTask;
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800407c:	4618      	mov	r0, r3
 800407e:	372c      	adds	r7, #44	; 0x2c
 8004080:	46bd      	mov	sp, r7
 8004082:	bd90      	pop	{r4, r7, pc}

08004084 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	unsigned short usCount = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	81fb      	strh	r3, [r7, #14]

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8004090:	e005      	b.n	800409e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3301      	adds	r3, #1
 8004096:	607b      	str	r3, [r7, #4]
			usCount++;
 8004098:	89fb      	ldrh	r3, [r7, #14]
 800409a:	3301      	adds	r3, #1
 800409c:	81fb      	strh	r3, [r7, #14]

	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2ba5      	cmp	r3, #165	; 0xa5
 80040a4:	d0f5      	beq.n	8004092 <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	81fb      	strh	r3, [r7, #14]

		return usCount;
 80040ac:	89fb      	ldrh	r3, [r7, #14]
	}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop

080040bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 fbab 	bl	8005824 <vPortFree>
		vPortFree( pxTCB );
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f001 fba8 	bl	8005824 <vPortFree>
	}
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop

080040dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80040e8:	687b      	ldr	r3, [r7, #4]
	}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000498 	.word	0x20000498

080040fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <xTaskGetSchedulerState+0x34>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	e008      	b.n	8004122 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <xTaskGetSchedulerState+0x38>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004118:	2301      	movs	r3, #1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	e001      	b.n	8004122 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800411e:	2302      	movs	r3, #2
 8004120:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004122:	687b      	ldr	r3, [r7, #4]
	}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	2000057c 	.word	0x2000057c
 8004134:	20000580 	.word	0x20000580

08004138 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d046      	beq.n	80041d8 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <vTaskPriorityInherit+0xa8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	429a      	cmp	r2, r3
 8004156:	d23f      	bcs.n	80041d8 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <vTaskPriorityInherit+0xa8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f1c3 0205 	rsb	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6959      	ldr	r1, [r3, #20]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <vTaskPriorityInherit+0xac>)
 8004178:	4413      	add	r3, r2
 800417a:	4299      	cmp	r1, r3
 800417c:	d101      	bne.n	8004182 <vTaskPriorityInherit+0x4a>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <vTaskPriorityInherit+0x4c>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d022      	beq.n	80041ce <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3304      	adds	r3, #4
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd1f 	bl	8004bd0 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <vTaskPriorityInherit+0xa8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <vTaskPriorityInherit+0xb0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d903      	bls.n	80041b0 <vTaskPriorityInherit+0x78>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <vTaskPriorityInherit+0xb0>)
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <vTaskPriorityInherit+0xac>)
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f000 fca6 	bl	8004b18 <vListInsertEnd>
 80041cc:	e004      	b.n	80041d8 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <vTaskPriorityInherit+0xa8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000498 	.word	0x20000498
 80041e4:	2000049c 	.word	0x2000049c
 80041e8:	20000578 	.word	0x20000578

080041ec <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02c      	beq.n	8004258 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004206:	429a      	cmp	r2, r3
 8004208:	d026      	beq.n	8004258 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fcde 	bl	8004bd0 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	f1c3 0205 	rsb	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <vTaskPriorityDisinherit+0x74>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <vTaskPriorityDisinherit+0x50>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <vTaskPriorityDisinherit+0x74>)
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4a06      	ldr	r2, [pc, #24]	; (8004264 <vTaskPriorityDisinherit+0x78>)
 800424a:	441a      	add	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3304      	adds	r3, #4
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f000 fc60 	bl	8004b18 <vListInsertEnd>
			}
		}
	}
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000578 	.word	0x20000578
 8004264:	2000049c 	.word	0x2000049c

08004268 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )

	void vTaskList( signed char *pcWriteBuffer )
	{
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af04      	add	r7, sp, #16
 800426e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8004276:	4b35      	ldr	r3, [pc, #212]	; (800434c <vTaskList+0xe4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( xTaskStatusType ) );
 800427c:	4b33      	ldr	r3, [pc, #204]	; (800434c <vTaskList+0xe4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	015b      	lsls	r3, r3, #5
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fa42 	bl	800570c <pvPortMalloc>
 8004288:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d05a      	beq.n	8004346 <vTaskList+0xde>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6938      	ldr	r0, [r7, #16]
 8004294:	4619      	mov	r1, r3
 8004296:	2200      	movs	r2, #0
 8004298:	f7ff fa40 	bl	800371c <uxTaskGetSystemState>
 800429c:	4603      	mov	r3, r0
 800429e:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80042a0:	2300      	movs	r3, #0
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	e048      	b.n	8004338 <vTaskList+0xd0>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	015b      	lsls	r3, r3, #5
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4413      	add	r3, r2
 80042ae:	7b1b      	ldrb	r3, [r3, #12]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d816      	bhi.n	80042e4 <vTaskList+0x7c>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <vTaskList+0x54>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042cd 	.word	0x080042cd
 80042c0:	080042d3 	.word	0x080042d3
 80042c4:	080042d9 	.word	0x080042d9
 80042c8:	080042df 	.word	0x080042df
				{
				case eReady:		cStatus = tskREADY_CHAR;
 80042cc:	2352      	movs	r3, #82	; 0x52
 80042ce:	75fb      	strb	r3, [r7, #23]
									break;
 80042d0:	e00b      	b.n	80042ea <vTaskList+0x82>

				case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80042d2:	2342      	movs	r3, #66	; 0x42
 80042d4:	75fb      	strb	r3, [r7, #23]
									break;
 80042d6:	e008      	b.n	80042ea <vTaskList+0x82>

				case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80042d8:	2353      	movs	r3, #83	; 0x53
 80042da:	75fb      	strb	r3, [r7, #23]
									break;
 80042dc:	e005      	b.n	80042ea <vTaskList+0x82>

				case eDeleted:		cStatus = tskDELETED_CHAR;
 80042de:	2344      	movs	r3, #68	; 0x44
 80042e0:	75fb      	strb	r3, [r7, #23]
									break;
 80042e2:	e002      	b.n	80042ea <vTaskList+0x82>

				default:			/* Should not get here, but it is included
									to prevent static checking errors. */
									cStatus = 0x00;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
									break;
 80042e8:	bf00      	nop
				}

				sprintf( ( char * ) pcWriteBuffer, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	015b      	lsls	r3, r3, #5
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4413      	add	r3, r2
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	0149      	lsls	r1, r1, #5
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	4401      	add	r1, r0
 80042fe:	690c      	ldr	r4, [r1, #16]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	0149      	lsls	r1, r1, #5
 8004304:	6938      	ldr	r0, [r7, #16]
 8004306:	4401      	add	r1, r0
 8004308:	8b89      	ldrh	r1, [r1, #28]
 800430a:	4608      	mov	r0, r1
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	0149      	lsls	r1, r1, #5
 8004310:	693d      	ldr	r5, [r7, #16]
 8004312:	4429      	add	r1, r5
 8004314:	6889      	ldr	r1, [r1, #8]
 8004316:	9400      	str	r4, [sp, #0]
 8004318:	9001      	str	r0, [sp, #4]
 800431a:	9102      	str	r1, [sp, #8]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	490c      	ldr	r1, [pc, #48]	; (8004350 <vTaskList+0xe8>)
 8004320:	f7fe fcee 	bl	8002d00 <sprintf>
				pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f003 ff63 	bl	80081f0 <strlen>
 800432a:	4603      	mov	r3, r0
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	607b      	str	r3, [r7, #4]
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3301      	adds	r3, #1
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d3b2      	bcc.n	80042a6 <vTaskList+0x3e>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
				pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8004340:	6938      	ldr	r0, [r7, #16]
 8004342:	f001 fa6f 	bl	8005824 <vPortFree>
		}
	}
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bdb0      	pop	{r4, r5, r7, pc}
 800434c:	20000570 	.word	0x20000570
 8004350:	0800891c 	.word	0x0800891c

08004354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <xQueueGenericReset+0x1a>
 8004368:	f000 fd4e 	bl	8004e08 <ulPortSetInterruptMask>
 800436c:	e7fe      	b.n	800436c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800436e:	f000 fd29 	bl	8004dc4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	441a      	add	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	3b01      	subs	r3, #1
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	441a      	add	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043bc:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10e      	bne.n	80043e2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d014      	beq.n	80043f6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3310      	adds	r3, #16
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fbcd 	bl	8003b70 <xTaskRemoveFromEventList>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10c      	bne.n	80043f6 <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 80043dc:	f000 fce2 	bl	8004da4 <vPortYield>
 80043e0:	e009      	b.n	80043f6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3310      	adds	r3, #16
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fb6a 	bl	8004ac0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb65 	bl	8004ac0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043f6:	f000 fcf5 	bl	8004de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043fa:	2301      	movs	r3, #1
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02a      	beq.n	8004472 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 800441c:	2050      	movs	r0, #80	; 0x50
 800441e:	f001 f975 	bl	800570c <pvPortMalloc>
 8004422:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d023      	beq.n	8004472 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	3301      	adds	r3, #1
 8004434:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f001 f968 	bl	800570c <pvPortMalloc>
 800443c:	4602      	mov	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d010      	beq.n	800446c <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004456:	69b8      	ldr	r0, [r7, #24]
 8004458:	2101      	movs	r1, #1
 800445a:	f7ff ff7b 	bl	8004354 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	79fa      	ldrb	r2, [r7, #7]
 8004462:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e002      	b.n	8004472 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 800446c:	69b8      	ldr	r0, [r7, #24]
 800446e:	f001 f9d9 	bl	8005824 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <xQueueGenericCreate+0x7a>
 8004478:	f000 fcc6 	bl	8004e08 <ulPortSetInterruptMask>
 800447c:	e7fe      	b.n	800447c <xQueueGenericCreate+0x78>

	return xReturn;
 800447e:	69fb      	ldr	r3, [r7, #28]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <xQueueGenericSend+0x22>
 80044a4:	f000 fcb0 	bl	8004e08 <ulPortSetInterruptMask>
 80044a8:	e7fe      	b.n	80044a8 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <xQueueGenericSend+0x30>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <xQueueGenericSend+0x34>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <xQueueGenericSend+0x36>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <xQueueGenericSend+0x40>
 80044c2:	f000 fca1 	bl	8004e08 <ulPortSetInterruptMask>
 80044c6:	e7fe      	b.n	80044c6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d103      	bne.n	80044d6 <xQueueGenericSend+0x4e>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <xQueueGenericSend+0x52>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <xQueueGenericSend+0x54>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <xQueueGenericSend+0x5e>
 80044e0:	f000 fc92 	bl	8004e08 <ulPortSetInterruptMask>
 80044e4:	e7fe      	b.n	80044e4 <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044e6:	f000 fc6d 	bl	8004dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d302      	bcc.n	80044fc <xQueueGenericSend+0x74>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d116      	bne.n	800452a <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044fc:	69b8      	ldr	r0, [r7, #24]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	f000 f9a9 	bl	8004858 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	3324      	adds	r3, #36	; 0x24
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fb2c 	bl	8003b70 <xTaskRemoveFromEventList>
 8004518:	4603      	mov	r3, r0
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 800451e:	f000 fc41 	bl	8004da4 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004522:	f000 fc5f 	bl	8004de4 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8004526:	2301      	movs	r3, #1
 8004528:	e059      	b.n	80045de <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004530:	f000 fc58 	bl	8004de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004534:	2300      	movs	r3, #0
 8004536:	e052      	b.n	80045de <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800453e:	f107 0310 	add.w	r3, r7, #16
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fb70 	bl	8003c28 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 800454c:	f000 fc4a 	bl	8004de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004550:	f7ff f83e 	bl	80035d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004554:	f000 fc36 	bl	8004dc4 <vPortEnterCritical>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004560:	d102      	bne.n	8004568 <xQueueGenericSend+0xe0>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2200      	movs	r2, #0
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d102      	bne.n	8004578 <xQueueGenericSend+0xf0>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2200      	movs	r2, #0
 8004576:	649a      	str	r2, [r3, #72]	; 0x48
 8004578:	f000 fc34 	bl	8004de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800457c:	f107 0210 	add.w	r2, r7, #16
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f7ff fb69 	bl	8003c5c <xTaskCheckForTimeOut>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11e      	bne.n	80045ce <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004590:	69b8      	ldr	r0, [r7, #24]
 8004592:	f000 fa51 	bl	8004a38 <prvIsQueueFull>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f103 0210 	add.w	r2, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f7ff fa84 	bl	8003ab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045ac:	69b8      	ldr	r0, [r7, #24]
 80045ae:	f000 f9e1 	bl	8004974 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045b2:	f7ff f81b 	bl	80035ec <xTaskResumeAll>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10f      	bne.n	80045dc <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 80045bc:	f000 fbf2 	bl	8004da4 <vPortYield>
 80045c0:	e00c      	b.n	80045dc <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045c2:	69b8      	ldr	r0, [r7, #24]
 80045c4:	f000 f9d6 	bl	8004974 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045c8:	f7ff f810 	bl	80035ec <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80045cc:	e78b      	b.n	80044e6 <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045ce:	69b8      	ldr	r0, [r7, #24]
 80045d0:	f000 f9d0 	bl	8004974 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045d4:	f7ff f80a 	bl	80035ec <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <xQueueGenericSend+0x156>
		}
	}
 80045dc:	e783      	b.n	80044e6 <xQueueGenericSend+0x5e>
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop

080045e8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <xQueueGenericSendFromISR+0x1e>
 8004600:	f000 fc02 	bl	8004e08 <ulPortSetInterruptMask>
 8004604:	e7fe      	b.n	8004604 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <xQueueGenericSendFromISR+0x2c>
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <xQueueGenericSendFromISR+0x30>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <xQueueGenericSendFromISR+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <xQueueGenericSendFromISR+0x3c>
 800461e:	f000 fbf3 	bl	8004e08 <ulPortSetInterruptMask>
 8004622:	e7fe      	b.n	8004622 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d103      	bne.n	8004632 <xQueueGenericSendFromISR+0x4a>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <xQueueGenericSendFromISR+0x4e>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <xQueueGenericSendFromISR+0x50>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <xQueueGenericSendFromISR+0x5a>
 800463c:	f000 fbe4 	bl	8004e08 <ulPortSetInterruptMask>
 8004640:	e7fe      	b.n	8004640 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004642:	f000 fc4f 	bl	8004ee4 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004646:	f000 fbdf 	bl	8004e08 <ulPortSetInterruptMask>
 800464a:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <xQueueGenericSendFromISR+0x76>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d124      	bne.n	80046a8 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800465e:	69b8      	ldr	r0, [r7, #24]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	f000 f8f8 	bl	8004858 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004670:	d112      	bne.n	8004698 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d013      	beq.n	80046a2 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	3324      	adds	r3, #36	; 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fa76 	bl	8003b70 <xTaskRemoveFromEventList>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e004      	b.n	80046a2 <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e001      	b.n	80046ac <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80046ac:	6978      	ldr	r0, [r7, #20]
 80046ae:	f000 fbb5 	bl	8004e1c <vPortClearInterruptMask>

	return xReturn;
 80046b2:	69fb      	ldr	r3, [r7, #28]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <xQueueGenericReceive+0x22>
 80046d8:	f000 fb96 	bl	8004e08 <ulPortSetInterruptMask>
 80046dc:	e7fe      	b.n	80046dc <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <xQueueGenericReceive+0x30>
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <xQueueGenericReceive+0x34>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <xQueueGenericReceive+0x36>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <xQueueGenericReceive+0x40>
 80046f6:	f000 fb87 	bl	8004e08 <ulPortSetInterruptMask>
 80046fa:	e7fe      	b.n	80046fa <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046fc:	f000 fb62 	bl	8004dc4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d03b      	beq.n	8004780 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800470e:	6a38      	ldr	r0, [r7, #32]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	f000 f909 	bl	8004928 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11c      	bne.n	8004756 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	1e5a      	subs	r2, r3, #1
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 800472e:	f7ff fcd5 	bl	80040dc <xTaskGetCurrentTaskHandle>
 8004732:	4602      	mov	r2, r0
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01b      	beq.n	8004778 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	3310      	adds	r3, #16
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fa13 	bl	8003b70 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b01      	cmp	r3, #1
 800474e:	d113      	bne.n	8004778 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8004750:	f000 fb28 	bl	8004da4 <vPortYield>
 8004754:	e010      	b.n	8004778 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	3324      	adds	r3, #36	; 0x24
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fa01 	bl	8003b70 <xTaskRemoveFromEventList>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8004774:	f000 fb16 	bl	8004da4 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8004778:	f000 fb34 	bl	8004de4 <vPortExitCritical>
				return pdPASS;
 800477c:	2301      	movs	r3, #1
 800477e:	e066      	b.n	800484e <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004786:	f000 fb2d 	bl	8004de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800478a:	2300      	movs	r3, #0
 800478c:	e05f      	b.n	800484e <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004794:	f107 0314 	add.w	r3, r7, #20
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa45 	bl	8003c28 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479e:	2301      	movs	r3, #1
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 80047a2:	f000 fb1f 	bl	8004de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a6:	f7fe ff13 	bl	80035d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047aa:	f000 fb0b 	bl	8004dc4 <vPortEnterCritical>
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b6:	d102      	bne.n	80047be <xQueueGenericReceive+0x102>
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c6:	d102      	bne.n	80047ce <xQueueGenericReceive+0x112>
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2200      	movs	r2, #0
 80047cc:	649a      	str	r2, [r3, #72]	; 0x48
 80047ce:	f000 fb09 	bl	8004de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047d2:	f107 0214 	add.w	r2, r7, #20
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	f7ff fa3e 	bl	8003c5c <xTaskCheckForTimeOut>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d12b      	bne.n	800483e <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e6:	6a38      	ldr	r0, [r7, #32]
 80047e8:	f000 f910 	bl	8004a0c <prvIsQueueEmpty>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01f      	beq.n	8004832 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d108      	bne.n	800480c <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 80047fa:	f000 fae3 	bl	8004dc4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fc98 	bl	8004138 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8004808:	f000 faec 	bl	8004de4 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	f7ff f94c 	bl	8003ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800481c:	6a38      	ldr	r0, [r7, #32]
 800481e:	f000 f8a9 	bl	8004974 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004822:	f7fe fee3 	bl	80035ec <xTaskResumeAll>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10f      	bne.n	800484c <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 800482c:	f000 faba 	bl	8004da4 <vPortYield>
 8004830:	e00c      	b.n	800484c <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004832:	6a38      	ldr	r0, [r7, #32]
 8004834:	f000 f89e 	bl	8004974 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004838:	f7fe fed8 	bl	80035ec <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800483c:	e75e      	b.n	80046fc <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800483e:	6a38      	ldr	r0, [r7, #32]
 8004840:	f000 f898 	bl	8004974 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004844:	f7fe fed2 	bl	80035ec <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <xQueueGenericReceive+0x192>
		}
	}
 800484c:	e756      	b.n	80046fc <xQueueGenericReceive+0x40>
}
 800484e:	4618      	mov	r0, r3
 8004850:	3728      	adds	r7, #40	; 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop

08004858 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10c      	bne.n	8004886 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d151      	bne.n	8004918 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fcb7 	bl	80041ec <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	e048      	b.n	8004918 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11a      	bne.n	80048c2 <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4610      	mov	r0, r2
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	461a      	mov	r2, r3
 800489a:	f7fb fc9f 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	441a      	add	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d32f      	bcc.n	8004918 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	e02a      	b.n	8004918 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4610      	mov	r0, r2
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fb fc84 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	425b      	negs	r3, r3
 80048de:	441a      	add	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d207      	bcs.n	8004900 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	425b      	negs	r3, r3
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d108      	bne.n	8004918 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d019      	beq.n	800496e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	441a      	add	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d303      	bcc.n	800495c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	6838      	ldr	r0, [r7, #0]
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	f7fb fc37 	bl	80001dc <memcpy>
	}
}
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800497c:	f000 fa22 	bl	8004dc4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004980:	e014      	b.n	80049ac <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3324      	adds	r3, #36	; 0x24
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff f8ee 	bl	8003b70 <xTaskRemoveFromEventList>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800499a:	f7ff f9af 	bl	8003cfc <vTaskMissedYield>
 800499e:	e000      	b.n	80049a2 <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 80049a0:	e008      	b.n	80049b4 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a6:	1e5a      	subs	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dce6      	bgt.n	8004982 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80049bc:	f000 fa12 	bl	8004de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049c0:	f000 fa00 	bl	8004dc4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80049c4:	e014      	b.n	80049f0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00f      	beq.n	80049ee <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3310      	adds	r3, #16
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff f8cc 	bl	8003b70 <xTaskRemoveFromEventList>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 80049de:	f7ff f98d 	bl	8003cfc <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	645a      	str	r2, [r3, #68]	; 0x44
 80049ec:	e000      	b.n	80049f0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 80049ee:	e003      	b.n	80049f8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	dce6      	bgt.n	80049c6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a00:	f000 f9f0 	bl	8004de4 <vPortExitCritical>
}
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop

08004a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004a14:	f000 f9d6 	bl	8004dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e001      	b.n	8004a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a2a:	f000 f9db 	bl	8004de4 <vPortExitCritical>

	return xReturn;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004a40:	f000 f9c0 	bl	8004dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d102      	bne.n	8004a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e001      	b.n	8004a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a5a:	f000 f9c3 	bl	8004de4 <vPortExitCritical>

	return xReturn;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a76:	f000 f9a5 	bl	8004dc4 <vPortEnterCritical>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a82:	d102      	bne.n	8004a8a <vQueueWaitForMessageRestricted+0x22>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a92:	d102      	bne.n	8004a9a <vQueueWaitForMessageRestricted+0x32>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	649a      	str	r2, [r3, #72]	; 0x48
 8004a9a:	f000 f9a3 	bl	8004de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d105      	bne.n	8004ab2 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3324      	adds	r3, #36	; 0x24
 8004aaa:	4618      	mov	r0, r3
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	f7ff f837 	bl	8003b20 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff ff5e 	bl	8004974 <prvUnlockQueue>
	}
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop

08004ac0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f103 0208 	add.w	r2, r3, #8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ad8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f103 0208 	add.w	r2, r3, #8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f103 0208 	add.w	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop

08004b00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	611a      	str	r2, [r3, #16]
}
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop

08004b60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b76:	d103      	bne.n	8004b80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e00c      	b.n	8004b9a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3308      	adds	r3, #8
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e002      	b.n	8004b8e <vListInsert+0x2e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d9f6      	bls.n	8004b88 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6892      	ldr	r2, [r2, #8]
 8004be0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6852      	ldr	r2, [r2, #4]
 8004bea:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d103      	bne.n	8004c04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	1e5a      	subs	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3b04      	subs	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b04      	subs	r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3b04      	subs	r3, #4
 8004c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c50:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <pxPortInitialiseStack+0x60>)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3b14      	subs	r3, #20
 8004c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3b04      	subs	r3, #4
 8004c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f06f 0202 	mvn.w	r2, #2
 8004c6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3b20      	subs	r3, #32
 8004c74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	08004c89 	.word	0x08004c89

08004c88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <prvTaskExitError+0x1c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c94:	d002      	beq.n	8004c9c <prvTaskExitError+0x14>
 8004c96:	f000 f8b7 	bl	8004e08 <ulPortSetInterruptMask>
 8004c9a:	e7fe      	b.n	8004c9a <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8004c9c:	f000 f8b4 	bl	8004e08 <ulPortSetInterruptMask>
	for( ;; );
 8004ca0:	e7fe      	b.n	8004ca0 <prvTaskExitError+0x18>
 8004ca2:	bf00      	nop
 8004ca4:	2000000c 	.word	0x2000000c

08004ca8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <pxCurrentTCBConst2>)
 8004caa:	6819      	ldr	r1, [r3, #0]
 8004cac:	6808      	ldr	r0, [r1, #0]
 8004cae:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb2:	f380 8809 	msr	PSP, r0
 8004cb6:	f04f 0000 	mov.w	r0, #0
 8004cba:	f380 8811 	msr	BASEPRI, r0
 8004cbe:	4770      	bx	lr

08004cc0 <pxCurrentTCBConst2>:
 8004cc0:	20000498 	.word	0x20000498

08004cc4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004cc4:	4803      	ldr	r0, [pc, #12]	; (8004cd4 <prvPortStartFirstTask+0x10>)
 8004cc6:	6800      	ldr	r0, [r0, #0]
 8004cc8:	6800      	ldr	r0, [r0, #0]
 8004cca:	f380 8808 	msr	MSP, r0
 8004cce:	b662      	cpsie	i
 8004cd0:	df00      	svc	0
 8004cd2:	bf00      	nop
 8004cd4:	e000ed08 	.word	0xe000ed08

08004cd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cde:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <xPortStartScheduler+0xb4>)
 8004ce0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <xPortStartScheduler+0xb8>)
 8004d04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <xPortStartScheduler+0xbc>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d0c:	e009      	b.n	8004d22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d0e:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <xPortStartScheduler+0xbc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	1e5a      	subs	r2, r3, #1
 8004d14:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <xPortStartScheduler+0xbc>)
 8004d16:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dbef      	blt.n	8004d0e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d2e:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <xPortStartScheduler+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	021a      	lsls	r2, r3, #8
 8004d34:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <xPortStartScheduler+0xbc>)
 8004d36:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d38:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <xPortStartScheduler+0xbc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <xPortStartScheduler+0xbc>)
 8004d42:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <xPortStartScheduler+0xc0>)
 8004d4e:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <xPortStartScheduler+0xc0>)
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004d56:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <xPortStartScheduler+0xc0>)
 8004d5a:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <xPortStartScheduler+0xc0>)
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004d62:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d64:	f000 f89a 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <xPortStartScheduler+0xc4>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d6e:	f000 f8af 	bl	8004ed0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <xPortStartScheduler+0xc8>)
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <xPortStartScheduler+0xc8>)
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004d7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d7e:	f7ff ffa1 	bl	8004cc4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	e000e400 	.word	0xe000e400
 8004d90:	20000594 	.word	0x20000594
 8004d94:	20000598 	.word	0x20000598
 8004d98:	e000ed20 	.word	0xe000ed20
 8004d9c:	2000000c 	.word	0x2000000c
 8004da0:	e000ef34 	.word	0xe000ef34

08004da4 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <vPortYield+0x1c>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8004db0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004db4:	f3bf 8f6f 	isb	sy
}
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8004dc8:	f000 f81e 	bl	8004e08 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <vPortEnterCritical+0x1c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <vPortEnterCritical+0x1c>)
 8004dd4:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8004dd6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004dda:	f3bf 8f6f 	isb	sy
}
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <vPortExitCritical+0x20>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	1e5a      	subs	r2, r3, #1
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <vPortExitCritical+0x20>)
 8004df0:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <vPortExitCritical+0x20>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f000 f80e 	bl	8004e1c <vPortClearInterruptMask>
	}
}
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c

08004e08 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8004e08:	f3ef 8011 	mrs	r0, BASEPRI
 8004e0c:	f04f 0150 	mov.w	r1, #80	; 0x50
 8004e10:	f381 8811 	msr	BASEPRI, r1
 8004e14:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bf00      	nop

08004e1c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8004e1c:	f380 8811 	msr	BASEPRI, r0
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e24:	f3ef 8009 	mrs	r0, PSP
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <pxCurrentTCBConst>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	f01e 0f10 	tst.w	lr, #16
 8004e30:	bf08      	it	eq
 8004e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e44:	f380 8811 	msr	BASEPRI, r0
 8004e48:	f7fe fdba 	bl	80039c0 <vTaskSwitchContext>
 8004e4c:	f04f 0000 	mov.w	r0, #0
 8004e50:	f380 8811 	msr	BASEPRI, r0
 8004e54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	6808      	ldr	r0, [r1, #0]
 8004e5c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	f01e 0f10 	tst.w	lr, #16
 8004e64:	bf08      	it	eq
 8004e66:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e6a:	f380 8809 	msr	PSP, r0
 8004e6e:	4770      	bx	lr

08004e70 <pxCurrentTCBConst>:
 8004e70:	20000498 	.word	0x20000498

08004e74 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8004e78:	f7ff ffc6 	bl	8004e08 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e7c:	f7fe fcca 	bl	8003814 <xTaskIncrementTick>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e86:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <SysTick_Handler+0x24>)
 8004e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7ff ffc4 	bl	8004e1c <vPortClearInterruptMask>
}
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <vPortSetupTimerInterrupt+0x24>)
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <vPortSetupTimerInterrupt+0x28>)
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <vPortSetupTimerInterrupt+0x2c>)
 8004ea8:	fba2 0201 	umull	r0, r2, r2, r1
 8004eac:	0992      	lsrs	r2, r2, #6
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <vPortSetupTimerInterrupt+0x30>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
}
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	e000e014 	.word	0xe000e014
 8004ec4:	20000004 	.word	0x20000004
 8004ec8:	10624dd3 	.word	0x10624dd3
 8004ecc:	e000e010 	.word	0xe000e010

08004ed0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ed0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ee0 <vPortEnableVFP+0x10>
 8004ed4:	6801      	ldr	r1, [r0, #0]
 8004ed6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eda:	6001      	str	r1, [r0, #0]
 8004edc:	4770      	bx	lr
 8004ede:	0000      	.short	0x0000
 8004ee0:	e000ed88 	.word	0xe000ed88

08004ee4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004eea:	f3ef 8305 	mrs	r3, IPSR
 8004eee:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d90c      	bls.n	8004f10 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ef6:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <vPortValidateInterruptPriority+0x48>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4413      	add	r3, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortValidateInterruptPriority+0x4c>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d202      	bcs.n	8004f10 <vPortValidateInterruptPriority+0x2c>
 8004f0a:	f7ff ff7d 	bl	8004e08 <ulPortSetInterruptMask>
 8004f0e:	e7fe      	b.n	8004f0e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f10:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <vPortValidateInterruptPriority+0x50>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <vPortValidateInterruptPriority+0x54>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d902      	bls.n	8004f26 <vPortValidateInterruptPriority+0x42>
 8004f20:	f7ff ff72 	bl	8004e08 <ulPortSetInterruptMask>
 8004f24:	e7fe      	b.n	8004f24 <vPortValidateInterruptPriority+0x40>
	}
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	e000e3f0 	.word	0xe000e3f0
 8004f30:	20000594 	.word	0x20000594
 8004f34:	e000ed0c 	.word	0xe000ed0c
 8004f38:	20000598 	.word	0x20000598

08004f3c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f46:	f000 fa45 	bl	80053d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <xTimerCreateTimerTask+0x4c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00f      	beq.n	8004f72 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8004f52:	2302      	movs	r3, #2
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9302      	str	r3, [sp, #8]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9303      	str	r3, [sp, #12]
 8004f62:	480a      	ldr	r0, [pc, #40]	; (8004f8c <xTimerCreateTimerTask+0x50>)
 8004f64:	490a      	ldr	r1, [pc, #40]	; (8004f90 <xTimerCreateTimerTask+0x54>)
 8004f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f7fe f8b6 	bl	80030dc <xTaskGenericCreate>
 8004f70:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <xTimerCreateTimerTask+0x42>
 8004f78:	f7ff ff46 	bl	8004e08 <ulPortSetInterruptMask>
 8004f7c:	e7fe      	b.n	8004f7c <xTimerCreateTimerTask+0x40>
	return xReturn;
 8004f7e:	687b      	ldr	r3, [r7, #4]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200005cc 	.word	0x200005cc
 8004f8c:	08005091 	.word	0x08005091
 8004f90:	08008930 	.word	0x08008930

08004f94 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <xTimerGenericCommand+0x88>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d030      	beq.n	8005010 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11c      	bne.n	8004ffa <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fc0:	f7ff f89c 	bl	80040fc <xTaskGetSchedulerState>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10b      	bne.n	8004fe2 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8004fca:	4b14      	ldr	r3, [pc, #80]	; (800501c <xTimerGenericCommand+0x88>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	f107 0310 	add.w	r3, r7, #16
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f7ff fa55 	bl	8004488 <xQueueGenericSend>
 8004fde:	61f8      	str	r0, [r7, #28]
 8004fe0:	e016      	b.n	8005010 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	; (800501c <xTimerGenericCommand+0x88>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	f107 0310 	add.w	r3, r7, #16
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f7ff fa49 	bl	8004488 <xQueueGenericSend>
 8004ff6:	61f8      	str	r0, [r7, #28]
 8004ff8:	e00a      	b.n	8005010 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <xTimerGenericCommand+0x88>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	f107 0310 	add.w	r3, r7, #16
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	f7ff faed 	bl	80045e8 <xQueueGenericSendFromISR>
 800500e:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8005010:	69fb      	ldr	r3, [r7, #28]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200005cc 	.word	0x200005cc

08005020 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800502a:	4b18      	ldr	r3, [pc, #96]	; (800508c <prvProcessExpiredTimer+0x6c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3304      	adds	r3, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fdc9 	bl	8004bd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d11b      	bne.n	800507e <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	4619      	mov	r1, r3
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f000 f8a9 	bl	80051ac <prvInsertTimerInActiveList>
 800505a:	4603      	mov	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10e      	bne.n	800507e <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8005060:	2300      	movs	r3, #0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	2100      	movs	r1, #0
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	2300      	movs	r3, #0
 800506c:	f7ff ff92 	bl	8004f94 <xTimerGenericCommand>
 8005070:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <prvProcessExpiredTimer+0x5e>
 8005078:	f7ff fec6 	bl	8004e08 <ulPortSetInterruptMask>
 800507c:	e7fe      	b.n	800507c <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	4798      	blx	r3
}
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	200005c4 	.word	0x200005c4

08005090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005098:	f107 0308 	add.w	r3, r7, #8
 800509c:	4618      	mov	r0, r3
 800509e:	f000 f83f 	bl	8005120 <prvGetNextExpireTime>
 80050a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f000 f803 	bl	80050b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050ae:	f000 f8bf 	bl	8005230 <prvProcessReceivedCommands>
	}
 80050b2:	e7f1      	b.n	8005098 <prvTimerTask+0x8>

080050b4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050be:	f7fe fa87 	bl	80035d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f84e 	bl	8005168 <prvSampleTimeNow>
 80050cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11e      	bne.n	8005112 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <prvProcessTimerOrBlockTask+0x3c>
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d806      	bhi.n	80050f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050e2:	f7fe fa83 	bl	80035ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	68f9      	ldr	r1, [r7, #12]
 80050ea:	f7ff ff99 	bl	8005020 <prvProcessExpiredTimer>
 80050ee:	e012      	b.n	8005116 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <prvProcessTimerOrBlockTask+0x68>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1acb      	subs	r3, r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	f7ff fcb3 	bl	8004a68 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8005102:	f7fe fa73 	bl	80035ec <xTaskResumeAll>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 800510c:	f7ff fe4a 	bl	8004da4 <vPortYield>
 8005110:	e001      	b.n	8005116 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8005112:	f7fe fa6b 	bl	80035ec <xTaskResumeAll>
		}
	}
}
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	200005cc 	.word	0x200005cc

08005120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <prvGetNextExpireTime+0x44>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	bf14      	ite	ne
 8005132:	2300      	movne	r3, #0
 8005134:	2301      	moveq	r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005146:	4b07      	ldr	r3, [pc, #28]	; (8005164 <prvGetNextExpireTime+0x44>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e001      	b.n	8005156 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005156:	68fb      	ldr	r3, [r7, #12]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	200005c4 	.word	0x200005c4

08005168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005170:	f7fe fac2 	bl	80036f8 <xTaskGetTickCount>
 8005174:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005176:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvSampleTimeNow+0x40>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d208      	bcs.n	8005192 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <prvSampleTimeNow+0x40>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f8cb 	bl	8005320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e002      	b.n	8005198 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <prvSampleTimeNow+0x40>)
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	200005d0 	.word	0x200005d0

080051ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d812      	bhi.n	80051f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d302      	bcc.n	80051e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e01b      	b.n	800521e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <prvInsertTimerInActiveList+0x7c>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	f7ff fcb5 	bl	8004b60 <vListInsert>
 80051f6:	e012      	b.n	800521e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d206      	bcs.n	800520e <prvInsertTimerInActiveList+0x62>
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005208:	2301      	movs	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e007      	b.n	800521e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <prvInsertTimerInActiveList+0x80>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3304      	adds	r3, #4
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	f7ff fca1 	bl	8004b60 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800521e:	697b      	ldr	r3, [r7, #20]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	200005c8 	.word	0x200005c8
 800522c:	200005c4 	.word	0x200005c4

08005230 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	; 0x28
 8005234:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005236:	e060      	b.n	80052fa <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3304      	adds	r3, #4
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fcc1 	bl	8004bd0 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800524e:	1d3b      	adds	r3, r7, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ff89 	bl	8005168 <prvSampleTimeNow>
 8005256:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d84c      	bhi.n	80052f8 <prvProcessReceivedCommands+0xc8>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <prvProcessReceivedCommands+0x34>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005275 	.word	0x08005275
 8005268:	080052f9 	.word	0x080052f9
 800526c:	080052c7 	.word	0x080052c7
 8005270:	080052f1 	.word	0x080052f1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	441a      	add	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	69f8      	ldr	r0, [r7, #28]
 8005280:	4611      	mov	r1, r2
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	f7ff ff92 	bl	80051ac <prvInsertTimerInActiveList>
 8005288:	4603      	mov	r3, r0
 800528a:	2b01      	cmp	r3, #1
 800528c:	d11a      	bne.n	80052c4 <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	69f8      	ldr	r0, [r7, #28]
 8005294:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d112      	bne.n	80052c4 <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	4413      	add	r3, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	9200      	str	r2, [sp, #0]
 80052aa:	69f8      	ldr	r0, [r7, #28]
 80052ac:	2100      	movs	r1, #0
 80052ae:	461a      	mov	r2, r3
 80052b0:	2300      	movs	r3, #0
 80052b2:	f7ff fe6f 	bl	8004f94 <xTimerGenericCommand>
 80052b6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <prvProcessReceivedCommands+0x94>
 80052be:	f7ff fda3 	bl	8004e08 <ulPortSetInterruptMask>
 80052c2:	e7fe      	b.n	80052c2 <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 80052c4:	e019      	b.n	80052fa <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <prvProcessReceivedCommands+0xaa>
 80052d4:	f7ff fd98 	bl	8004e08 <ulPortSetInterruptMask>
 80052d8:	e7fe      	b.n	80052d8 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4413      	add	r3, r2
 80052e2:	69f8      	ldr	r0, [r7, #28]
 80052e4:	4619      	mov	r1, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f7ff ff5f 	bl	80051ac <prvInsertTimerInActiveList>
				break;
 80052ee:	e004      	b.n	80052fa <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 80052f0:	69f8      	ldr	r0, [r7, #28]
 80052f2:	f000 fa97 	bl	8005824 <vPortFree>
				break;
 80052f6:	e000      	b.n	80052fa <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 80052f8:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <prvProcessReceivedCommands+0xec>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	f107 0308 	add.w	r3, r7, #8
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	2200      	movs	r2, #0
 8005308:	2300      	movs	r3, #0
 800530a:	f7ff f9d7 	bl	80046bc <xQueueGenericReceive>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d191      	bne.n	8005238 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200005cc 	.word	0x200005cc

08005320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	; 0x28
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005328:	e03d      	b.n	80053a6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800532a:	4b28      	ldr	r3, [pc, #160]	; (80053cc <prvSwitchTimerLists+0xac>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <prvSwitchTimerLists+0xac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3304      	adds	r3, #4
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fc44 	bl	8004bd0 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	69b8      	ldr	r0, [r7, #24]
 800534e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d126      	bne.n	80053a6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	429a      	cmp	r2, r3
 8005368:	d90e      	bls.n	8005388 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005376:	4b15      	ldr	r3, [pc, #84]	; (80053cc <prvSwitchTimerLists+0xac>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	3304      	adds	r3, #4
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	f7ff fbed 	bl	8004b60 <vListInsert>
 8005386:	e00e      	b.n	80053a6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8005388:	2300      	movs	r3, #0
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	69b8      	ldr	r0, [r7, #24]
 800538e:	2100      	movs	r1, #0
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	2300      	movs	r3, #0
 8005394:	f7ff fdfe 	bl	8004f94 <xTimerGenericCommand>
 8005398:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <prvSwitchTimerLists+0x86>
 80053a0:	f7ff fd32 	bl	8004e08 <ulPortSetInterruptMask>
 80053a4:	e7fe      	b.n	80053a4 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <prvSwitchTimerLists+0xac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1bc      	bne.n	800532a <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <prvSwitchTimerLists+0xac>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <prvSwitchTimerLists+0xb0>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b04      	ldr	r3, [pc, #16]	; (80053cc <prvSwitchTimerLists+0xac>)
 80053bc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <prvSwitchTimerLists+0xb0>)
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200005c4 	.word	0x200005c4
 80053d0:	200005c8 	.word	0x200005c8

080053d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053d8:	f7ff fcf4 	bl	8004dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <prvCheckForValidListAndQueue+0x40>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d113      	bne.n	800540c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80053e4:	480c      	ldr	r0, [pc, #48]	; (8005418 <prvCheckForValidListAndQueue+0x44>)
 80053e6:	f7ff fb6b 	bl	8004ac0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053ea:	480c      	ldr	r0, [pc, #48]	; (800541c <prvCheckForValidListAndQueue+0x48>)
 80053ec:	f7ff fb68 	bl	8004ac0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <prvCheckForValidListAndQueue+0x4c>)
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <prvCheckForValidListAndQueue+0x44>)
 80053f4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <prvCheckForValidListAndQueue+0x50>)
 80053f8:	4a08      	ldr	r2, [pc, #32]	; (800541c <prvCheckForValidListAndQueue+0x48>)
 80053fa:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 80053fc:	200a      	movs	r0, #10
 80053fe:	210c      	movs	r1, #12
 8005400:	2200      	movs	r2, #0
 8005402:	f7fe ffff 	bl	8004404 <xQueueGenericCreate>
 8005406:	4602      	mov	r2, r0
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <prvCheckForValidListAndQueue+0x40>)
 800540a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 800540c:	f7ff fcea 	bl	8004de4 <vPortExitCritical>
}
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200005cc 	.word	0x200005cc
 8005418:	2000059c 	.word	0x2000059c
 800541c:	200005b0 	.word	0x200005b0
 8005420:	200005c4 	.word	0x200005c4
 8005424:	200005c8 	.word	0x200005c8

08005428 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <FreeRTOS_CLIRegisterCommand+0x18>
 800543a:	f7ff fce5 	bl	8004e08 <ulPortSetInterruptMask>
 800543e:	e7fe      	b.n	800543e <FreeRTOS_CLIRegisterCommand+0x16>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8005440:	2008      	movs	r0, #8
 8005442:	f000 f963 	bl	800570c <pvPortMalloc>
 8005446:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <FreeRTOS_CLIRegisterCommand+0x2c>
 800544e:	f7ff fcdb 	bl	8004e08 <ulPortSetInterruptMask>
 8005452:	e7fe      	b.n	8005452 <FreeRTOS_CLIRegisterCommand+0x2a>

	if( pxNewListItem != NULL )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d012      	beq.n	8005480 <FreeRTOS_CLIRegisterCommand+0x58>
	{
		taskENTER_CRITICAL();
 800545a:	f7ff fcb3 	bl	8004dc4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2200      	movs	r2, #0
 8005468:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <FreeRTOS_CLIRegisterCommand+0x64>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <FreeRTOS_CLIRegisterCommand+0x64>)
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 8005478:	f7ff fcb4 	bl	8004de4 <vPortExitCritical>

		xReturn = pdPASS;
 800547c:	2301      	movs	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000018 	.word	0x20000018

08005490 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
portBASE_TYPE xReturn = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80054a0:	4b3a      	ldr	r3, [pc, #232]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d141      	bne.n	800552c <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80054a8:	4b38      	ldr	r3, [pc, #224]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 80054aa:	4a39      	ldr	r2, [pc, #228]	; (8005590 <FreeRTOS_CLIProcessCommand+0x100>)
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e039      	b.n	8005524 <FreeRTOS_CLIProcessCommand+0x94>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80054b0:	4b36      	ldr	r3, [pc, #216]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80054ba:	69b8      	ldr	r0, [r7, #24]
 80054bc:	f002 fe98 	bl	80081f0 <strlen>
 80054c0:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d005      	beq.n	80054dc <FreeRTOS_CLIProcessCommand+0x4c>
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	4413      	add	r3, r2
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d11e      	bne.n	800551a <FreeRTOS_CLIProcessCommand+0x8a>
			{
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	f002 feb5 	bl	8008250 <strncmp>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <FreeRTOS_CLIProcessCommand+0x8a>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80054ec:	4b27      	ldr	r3, [pc, #156]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	7b1b      	ldrb	r3, [r3, #12]
 80054f4:	b25b      	sxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	db0e      	blt.n	8005518 <FreeRTOS_CLIProcessCommand+0x88>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f8d8 	bl	80056b0 <prvGetNumberOfParameters>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	4b21      	ldr	r3, [pc, #132]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	7b1b      	ldrb	r3, [r3, #12]
 800550c:	b25b      	sxtb	r3, r3
 800550e:	429a      	cmp	r2, r3
 8005510:	d002      	beq.n	8005518 <FreeRTOS_CLIProcessCommand+0x88>
						{
							xReturn = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8005516:	e009      	b.n	800552c <FreeRTOS_CLIProcessCommand+0x9c>
 8005518:	e008      	b.n	800552c <FreeRTOS_CLIProcessCommand+0x9c>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800551a:	4b1c      	ldr	r3, [pc, #112]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	4b1a      	ldr	r3, [pc, #104]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	4b19      	ldr	r3, [pc, #100]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1c1      	bne.n	80054b0 <FreeRTOS_CLIProcessCommand+0x20>
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800552c:	4b17      	ldr	r3, [pc, #92]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <FreeRTOS_CLIProcessCommand+0xbc>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d108      	bne.n	800554c <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	4915      	ldr	r1, [pc, #84]	; (8005594 <FreeRTOS_CLIProcessCommand+0x104>)
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	f002 fee0 	bl	8008304 <strncpy>
		pxCommand = NULL;
 8005544:	4b11      	ldr	r3, [pc, #68]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	e01a      	b.n	8005582 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 800554c:	4b0f      	ldr	r3, [pc, #60]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00f      	beq.n	8005574 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8005554:	4b0d      	ldr	r3, [pc, #52]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	68b8      	ldr	r0, [r7, #8]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4798      	blx	r3
 8005564:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 800556c:	4b07      	ldr	r3, [pc, #28]	; (800558c <FreeRTOS_CLIProcessCommand+0xfc>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e006      	b.n	8005582 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( ( char * ) pcWriteBuffer, ( const char * const ) "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8005574:	68b8      	ldr	r0, [r7, #8]
 8005576:	4908      	ldr	r1, [pc, #32]	; (8005598 <FreeRTOS_CLIProcessCommand+0x108>)
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	f002 fec3 	bl	8008304 <strncpy>
		xReturn = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 8005582:	69fb      	ldr	r3, [r7, #28]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200005d4 	.word	0x200005d4
 8005590:	20000010 	.word	0x20000010
 8005594:	08008970 	.word	0x08008970
 8005598:	080089c8 	.word	0x080089c8

0800559c <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const int8_t *FreeRTOS_CLIGetParameter( const int8_t *pcCommandString, unsigned portBASE_TYPE uxWantedParameter, portBASE_TYPE *pxParameterStringLength )
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
unsigned portBASE_TYPE uxParametersFound = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
const int8_t *pcReturn = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 80055b6:	e041      	b.n	800563c <FreeRTOS_CLIGetParameter+0xa0>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80055b8:	e002      	b.n	80055c0 <FreeRTOS_CLIGetParameter+0x24>
		{
			pcCommandString++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <FreeRTOS_CLIGetParameter+0x36>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d1f3      	bne.n	80055ba <FreeRTOS_CLIGetParameter+0x1e>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 80055d2:	e002      	b.n	80055da <FreeRTOS_CLIGetParameter+0x3e>
		{
			pcCommandString++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <FreeRTOS_CLIGetParameter+0x50>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d0f3      	beq.n	80055d4 <FreeRTOS_CLIGetParameter+0x38>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d022      	beq.n	800563a <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3301      	adds	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d11c      	bne.n	800563c <FreeRTOS_CLIGetParameter+0xa0>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005606:	e007      	b.n	8005618 <FreeRTOS_CLIGetParameter+0x7c>
				{
					( *pxParameterStringLength )++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3301      	adds	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <FreeRTOS_CLIGetParameter+0x8e>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b25b      	sxtb	r3, r3
 8005626:	2b20      	cmp	r3, #32
 8005628:	d1ee      	bne.n	8005608 <FreeRTOS_CLIGetParameter+0x6c>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <FreeRTOS_CLIGetParameter+0x9c>
				{
					pcReturn = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
				}

				break;
 8005636:	e005      	b.n	8005644 <FreeRTOS_CLIGetParameter+0xa8>
 8005638:	e004      	b.n	8005644 <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 800563a:	e003      	b.n	8005644 <FreeRTOS_CLIGetParameter+0xa8>
unsigned portBASE_TYPE uxParametersFound = 0;
const int8_t *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	d3b9      	bcc.n	80055b8 <FreeRTOS_CLIGetParameter+0x1c>
		{
			break;
		}
	}

	return pcReturn;
 8005644:	693b      	ldr	r3, [r7, #16]
}
 8005646:	4618      	mov	r0, r3
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop

08005654 <prvHelpCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
signed portBASE_TYPE xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <prvHelpCommand+0x54>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8005668:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <prvHelpCommand+0x54>)
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <prvHelpCommand+0x58>)
 800566c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <prvHelpCommand+0x54>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	4619      	mov	r1, r3
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	f002 fe42 	bl	8008304 <strncpy>
	pxCommand = pxCommand->pxNext;
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <prvHelpCommand+0x54>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <prvHelpCommand+0x54>)
 8005688:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
 800568a:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <prvHelpCommand+0x54>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
	//	strcat ( (char * ) pcWriteBuffer, "\nend help\n\n\0");
		xReturn = pdFALSE;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	e001      	b.n	800569c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800569c:	697b      	ldr	r3, [r7, #20]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200005d8 	.word	0x200005d8
 80056ac:	20000010 	.word	0x20000010

080056b0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 80056c0:	e012      	b.n	80056e8 <prvGetNumberOfParameters+0x38>
	{
		if( ( *pcCommandString ) == ' ' )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d108      	bne.n	80056de <prvGetNumberOfParameters+0x2e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d007      	beq.n	80056e2 <prvGetNumberOfParameters+0x32>
			{
				cParameters++;
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	3301      	adds	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	e001      	b.n	80056e2 <prvGetNumberOfParameters+0x32>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3301      	adds	r3, #1
 80056e6:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e8      	bne.n	80056c2 <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d102      	bne.n	80056fc <prvGetNumberOfParameters+0x4c>
	{
		cParameters--;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	b25b      	sxtb	r3, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005718:	f7fd ff5a 	bl	80035d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800571c:	4b3d      	ldr	r3, [pc, #244]	; (8005814 <pvPortMalloc+0x108>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005724:	f000 f8c8 	bl	80058b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005728:	4b3b      	ldr	r3, [pc, #236]	; (8005818 <pvPortMalloc+0x10c>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d163      	bne.n	80057fc <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 800573a:	2308      	movs	r3, #8
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	4413      	add	r3, r2
 8005740:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f023 0307 	bic.w	r3, r3, #7
 8005752:	3308      	adds	r3, #8
 8005754:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d04f      	beq.n	80057fc <pvPortMalloc+0xf0>
 800575c:	4b2f      	ldr	r3, [pc, #188]	; (800581c <pvPortMalloc+0x110>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d84a      	bhi.n	80057fc <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005766:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <pvPortMalloc+0x114>)
 8005768:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800576a:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <pvPortMalloc+0x114>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005770:	e004      	b.n	800577c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d203      	bcs.n	800578e <pvPortMalloc+0x82>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f1      	bne.n	8005772 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <pvPortMalloc+0x108>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d031      	beq.n	80057fc <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	2308      	movs	r3, #8
 800579e:	4413      	add	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	2308      	movs	r3, #8
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d90f      	bls.n	80057da <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4413      	add	r3, r2
 80057c0:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	1ad2      	subs	r2, r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80057d4:	68b8      	ldr	r0, [r7, #8]
 80057d6:	f000 f8bd 	bl	8005954 <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057da:	4b10      	ldr	r3, [pc, #64]	; (800581c <pvPortMalloc+0x110>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <pvPortMalloc+0x110>)
 80057e6:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <pvPortMalloc+0x10c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 80057fc:	f7fd fef6 	bl	80035ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005806:	f7fd fb6b 	bl	8002ee0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800580a:	68fb      	ldr	r3, [r7, #12]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	200131e4 	.word	0x200131e4
 8005818:	200131e8 	.word	0x200131e8
 800581c:	2000001c 	.word	0x2000001c
 8005820:	200131dc 	.word	0x200131dc

08005824 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d038      	beq.n	80058a8 <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8005836:	2308      	movs	r3, #8
 8005838:	425b      	negs	r3, r3
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <vPortFree+0x8c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <vPortFree+0x34>
 8005852:	f7ff fad9 	bl	8004e08 <ulPortSetInterruptMask>
 8005856:	e7fe      	b.n	8005856 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <vPortFree+0x42>
 8005860:	f7ff fad2 	bl	8004e08 <ulPortSetInterruptMask>
 8005864:	e7fe      	b.n	8005864 <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <vPortFree+0x8c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4013      	ands	r3, r2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d019      	beq.n	80058a8 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d115      	bne.n	80058a8 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <vPortFree+0x8c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800588c:	f7fd fea0 	bl	80035d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <vPortFree+0x90>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	441a      	add	r2, r3
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <vPortFree+0x90>)
 800589c:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 800589e:	68b8      	ldr	r0, [r7, #8]
 80058a0:	f000 f858 	bl	8005954 <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 80058a4:	f7fd fea2 	bl	80035ec <xTaskResumeAll>
			}
		}
	}
}
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	200131e8 	.word	0x200131e8
 80058b4:	2000001c 	.word	0x2000001c

080058b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 80058be:	4b1f      	ldr	r3, [pc, #124]	; (800593c <prvHeapInit+0x84>)
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058c6:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <prvHeapInit+0x88>)
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058cc:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <prvHeapInit+0x88>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <prvHeapInit+0x8c>)
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 80058da:	2308      	movs	r3, #8
 80058dc:	425b      	negs	r3, r3
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4413      	add	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <prvHeapInit+0x90>)
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 80058ea:	4b17      	ldr	r3, [pc, #92]	; (8005948 <prvHeapInit+0x90>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <prvHeapInit+0x44>
 80058f6:	f7ff fa87 	bl	8004e08 <ulPortSetInterruptMask>
 80058fa:	e7fe      	b.n	80058fa <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <prvHeapInit+0x90>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2200      	movs	r2, #0
 8005902:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005904:	4b10      	ldr	r3, [pc, #64]	; (8005948 <prvHeapInit+0x90>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 8005910:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <prvHeapInit+0x8c>)
 8005912:	2308      	movs	r3, #8
 8005914:	1ad2      	subs	r2, r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <prvHeapInit+0x90>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <prvHeapInit+0x94>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	2308      	movs	r3, #8
 8005928:	1ad2      	subs	r2, r2, r3
 800592a:	4b08      	ldr	r3, [pc, #32]	; (800594c <prvHeapInit+0x94>)
 800592c:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <prvHeapInit+0x98>)
 8005930:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200005e4 	.word	0x200005e4
 8005940:	200131dc 	.word	0x200131dc
 8005944:	00012bf8 	.word	0x00012bf8
 8005948:	200131e4 	.word	0x200131e4
 800594c:	2000001c 	.word	0x2000001c
 8005950:	200131e8 	.word	0x200131e8

08005954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <prvInsertBlockIntoFreeList+0xa8>)
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e002      	b.n	8005968 <prvInsertBlockIntoFreeList+0x14>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d3f7      	bcc.n	8005962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d108      	bne.n	8005996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	441a      	add	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d118      	bne.n	80059dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <prvInsertBlockIntoFreeList+0xac>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d00d      	beq.n	80059d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e008      	b.n	80059e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059d2:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <prvInsertBlockIntoFreeList+0xac>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e003      	b.n	80059e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d002      	beq.n	80059f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
	}
}
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	200131dc 	.word	0x200131dc
 8005a00:	200131e4 	.word	0x200131e4

08005a04 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a12:	d013      	beq.n	8005a3c <NVIC_PriorityGroupConfig+0x38>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a1a:	d00f      	beq.n	8005a3c <NVIC_PriorityGroupConfig+0x38>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005a22:	d00b      	beq.n	8005a3c <NVIC_PriorityGroupConfig+0x38>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2a:	d007      	beq.n	8005a3c <NVIC_PriorityGroupConfig+0x38>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a32:	d003      	beq.n	8005a3c <NVIC_PriorityGroupConfig+0x38>
 8005a34:	4806      	ldr	r0, [pc, #24]	; (8005a50 <NVIC_PriorityGroupConfig+0x4c>)
 8005a36:	2173      	movs	r1, #115	; 0x73
 8005a38:	f7fd fa66 	bl	8002f08 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005a3c:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <NVIC_PriorityGroupConfig+0x50>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a48:	60d3      	str	r3, [r2, #12]
}
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	08008a18 	.word	0x08008a18
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]
 8005a64:	2300      	movs	r3, #0
 8005a66:	73bb      	strb	r3, [r7, #14]
 8005a68:	230f      	movs	r3, #15
 8005a6a:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	78db      	ldrb	r3, [r3, #3]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <NVIC_Init+0x2c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	78db      	ldrb	r3, [r3, #3]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d003      	beq.n	8005a84 <NVIC_Init+0x2c>
 8005a7c:	4830      	ldr	r0, [pc, #192]	; (8005b40 <NVIC_Init+0xe8>)
 8005a7e:	2187      	movs	r1, #135	; 0x87
 8005a80:	f7fd fa42 	bl	8002f08 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b0f      	cmp	r3, #15
 8005a8a:	d903      	bls.n	8005a94 <NVIC_Init+0x3c>
 8005a8c:	482c      	ldr	r0, [pc, #176]	; (8005b40 <NVIC_Init+0xe8>)
 8005a8e:	2188      	movs	r1, #136	; 0x88
 8005a90:	f7fd fa3a 	bl	8002f08 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	789b      	ldrb	r3, [r3, #2]
 8005a98:	2b0f      	cmp	r3, #15
 8005a9a:	d903      	bls.n	8005aa4 <NVIC_Init+0x4c>
 8005a9c:	4828      	ldr	r0, [pc, #160]	; (8005b40 <NVIC_Init+0xe8>)
 8005a9e:	2189      	movs	r1, #137	; 0x89
 8005aa0:	f7fd fa32 	bl	8002f08 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	78db      	ldrb	r3, [r3, #3]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d037      	beq.n	8005b1c <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <NVIC_Init+0xec>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	f1c3 0304 	rsb	r3, r3, #4
 8005ac0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8005ac2:	7b7a      	ldrb	r2, [r7, #13]
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	fa42 f303 	asr.w	r3, r2, r3
 8005aca:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	789a      	ldrb	r2, [r3, #2]
 8005ade:	7b7b      	ldrb	r3, [r7, #13]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005af0:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <NVIC_Init+0xf0>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	4413      	add	r3, r2
 8005af8:	7bfa      	ldrb	r2, [r7, #15]
 8005afa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <NVIC_Init+0xf0>)
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	0952      	lsrs	r2, r2, #5
 8005b06:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	7809      	ldrb	r1, [r1, #0]
 8005b0c:	f001 011f 	and.w	r1, r1, #31
 8005b10:	2001      	movs	r0, #1
 8005b12:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b1a:	e00e      	b.n	8005b3a <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <NVIC_Init+0xf0>)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	0952      	lsrs	r2, r2, #5
 8005b24:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	7809      	ldrb	r1, [r1, #0]
 8005b2a:	f001 011f 	and.w	r1, r1, #31
 8005b2e:	2001      	movs	r0, #1
 8005b30:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b34:	3220      	adds	r2, #32
 8005b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	08008a18 	.word	0x08008a18
 8005b44:	e000ed00 	.word	0xe000ed00
 8005b48:	e000e100 	.word	0xe000e100

08005b4c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4b72      	ldr	r3, [pc, #456]	; (8005d20 <DMA_DeInit+0x1d4>)
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d03f      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4b71      	ldr	r3, [pc, #452]	; (8005d24 <DMA_DeInit+0x1d8>)
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d03b      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4b70      	ldr	r3, [pc, #448]	; (8005d28 <DMA_DeInit+0x1dc>)
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d037      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	4b6f      	ldr	r3, [pc, #444]	; (8005d2c <DMA_DeInit+0x1e0>)
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d033      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4b6e      	ldr	r3, [pc, #440]	; (8005d30 <DMA_DeInit+0x1e4>)
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d02f      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4b6d      	ldr	r3, [pc, #436]	; (8005d34 <DMA_DeInit+0x1e8>)
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d02b      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4b6c      	ldr	r3, [pc, #432]	; (8005d38 <DMA_DeInit+0x1ec>)
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d027      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	4b6b      	ldr	r3, [pc, #428]	; (8005d3c <DMA_DeInit+0x1f0>)
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d023      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <DMA_DeInit+0x1f4>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d01f      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4b69      	ldr	r3, [pc, #420]	; (8005d44 <DMA_DeInit+0x1f8>)
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d01b      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4b68      	ldr	r3, [pc, #416]	; (8005d48 <DMA_DeInit+0x1fc>)
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d017      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <DMA_DeInit+0x200>)
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d013      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4b66      	ldr	r3, [pc, #408]	; (8005d50 <DMA_DeInit+0x204>)
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d00f      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4b65      	ldr	r3, [pc, #404]	; (8005d54 <DMA_DeInit+0x208>)
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d00b      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4b64      	ldr	r3, [pc, #400]	; (8005d58 <DMA_DeInit+0x20c>)
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d007      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4b63      	ldr	r3, [pc, #396]	; (8005d5c <DMA_DeInit+0x210>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d003      	beq.n	8005bdc <DMA_DeInit+0x90>
 8005bd4:	4862      	ldr	r0, [pc, #392]	; (8005d60 <DMA_DeInit+0x214>)
 8005bd6:	21bf      	movs	r1, #191	; 0xbf
 8005bd8:	f7fd f996 	bl	8002f08 <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f023 0201 	bic.w	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2221      	movs	r2, #33	; 0x21
 8005c0a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	4b44      	ldr	r3, [pc, #272]	; (8005d20 <DMA_DeInit+0x1d4>)
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d103      	bne.n	8005c1c <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005c14:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <DMA_DeInit+0x218>)
 8005c16:	223d      	movs	r2, #61	; 0x3d
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	e07e      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <DMA_DeInit+0x1d8>)
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d104      	bne.n	8005c2e <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8005c24:	4b4f      	ldr	r3, [pc, #316]	; (8005d64 <DMA_DeInit+0x218>)
 8005c26:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	e075      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4b3d      	ldr	r3, [pc, #244]	; (8005d28 <DMA_DeInit+0x1dc>)
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d104      	bne.n	8005c40 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8005c36:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <DMA_DeInit+0x218>)
 8005c38:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	e06c      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4b3a      	ldr	r3, [pc, #232]	; (8005d2c <DMA_DeInit+0x1e0>)
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d104      	bne.n	8005c52 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005c48:	4b46      	ldr	r3, [pc, #280]	; (8005d64 <DMA_DeInit+0x218>)
 8005c4a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	e063      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <DMA_DeInit+0x1e4>)
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d103      	bne.n	8005c62 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005c5a:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <DMA_DeInit+0x218>)
 8005c5c:	4a42      	ldr	r2, [pc, #264]	; (8005d68 <DMA_DeInit+0x21c>)
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	e05b      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4b33      	ldr	r3, [pc, #204]	; (8005d34 <DMA_DeInit+0x1e8>)
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d103      	bne.n	8005c72 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8005c6a:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <DMA_DeInit+0x218>)
 8005c6c:	4a3f      	ldr	r2, [pc, #252]	; (8005d6c <DMA_DeInit+0x220>)
 8005c6e:	60da      	str	r2, [r3, #12]
 8005c70:	e053      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <DMA_DeInit+0x1ec>)
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d103      	bne.n	8005c82 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8005c7a:	4b3a      	ldr	r3, [pc, #232]	; (8005d64 <DMA_DeInit+0x218>)
 8005c7c:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <DMA_DeInit+0x224>)
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	e04b      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <DMA_DeInit+0x1f0>)
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d104      	bne.n	8005c94 <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8005c8a:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <DMA_DeInit+0x218>)
 8005c8c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e042      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4b2a      	ldr	r3, [pc, #168]	; (8005d40 <DMA_DeInit+0x1f4>)
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d103      	bne.n	8005ca4 <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8005c9c:	4b35      	ldr	r3, [pc, #212]	; (8005d74 <DMA_DeInit+0x228>)
 8005c9e:	223d      	movs	r2, #61	; 0x3d
 8005ca0:	609a      	str	r2, [r3, #8]
 8005ca2:	e03a      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <DMA_DeInit+0x1f8>)
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d104      	bne.n	8005cb6 <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8005cac:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <DMA_DeInit+0x228>)
 8005cae:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	e031      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <DMA_DeInit+0x1fc>)
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d104      	bne.n	8005cc8 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8005cbe:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <DMA_DeInit+0x228>)
 8005cc0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005cc4:	609a      	str	r2, [r3, #8]
 8005cc6:	e028      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <DMA_DeInit+0x200>)
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d104      	bne.n	8005cda <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8005cd0:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <DMA_DeInit+0x228>)
 8005cd2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	e01f      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <DMA_DeInit+0x204>)
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d103      	bne.n	8005cea <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005ce2:	4b24      	ldr	r3, [pc, #144]	; (8005d74 <DMA_DeInit+0x228>)
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <DMA_DeInit+0x21c>)
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	e017      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <DMA_DeInit+0x208>)
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d103      	bne.n	8005cfa <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8005cf2:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <DMA_DeInit+0x228>)
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <DMA_DeInit+0x220>)
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	e00f      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <DMA_DeInit+0x20c>)
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d103      	bne.n	8005d0a <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <DMA_DeInit+0x228>)
 8005d04:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <DMA_DeInit+0x224>)
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	e007      	b.n	8005d1a <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <DMA_DeInit+0x210>)
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d103      	bne.n	8005d1a <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005d12:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <DMA_DeInit+0x228>)
 8005d14:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005d18:	60da      	str	r2, [r3, #12]
    }
  }
}
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40026010 	.word	0x40026010
 8005d24:	40026028 	.word	0x40026028
 8005d28:	40026040 	.word	0x40026040
 8005d2c:	40026058 	.word	0x40026058
 8005d30:	40026070 	.word	0x40026070
 8005d34:	40026088 	.word	0x40026088
 8005d38:	400260a0 	.word	0x400260a0
 8005d3c:	400260b8 	.word	0x400260b8
 8005d40:	40026410 	.word	0x40026410
 8005d44:	40026428 	.word	0x40026428
 8005d48:	40026440 	.word	0x40026440
 8005d4c:	40026458 	.word	0x40026458
 8005d50:	40026470 	.word	0x40026470
 8005d54:	40026488 	.word	0x40026488
 8005d58:	400264a0 	.word	0x400264a0
 8005d5c:	400264b8 	.word	0x400264b8
 8005d60:	08008a60 	.word	0x08008a60
 8005d64:	40026000 	.word	0x40026000
 8005d68:	2000003d 	.word	0x2000003d
 8005d6c:	20000f40 	.word	0x20000f40
 8005d70:	203d0000 	.word	0x203d0000
 8005d74:	40026400 	.word	0x40026400

08005d78 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4b98      	ldr	r3, [pc, #608]	; (8005fec <DMA_Init+0x274>)
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d040      	beq.n	8005e10 <DMA_Init+0x98>
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4b97      	ldr	r3, [pc, #604]	; (8005ff0 <DMA_Init+0x278>)
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d03c      	beq.n	8005e10 <DMA_Init+0x98>
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4b96      	ldr	r3, [pc, #600]	; (8005ff4 <DMA_Init+0x27c>)
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d038      	beq.n	8005e10 <DMA_Init+0x98>
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4b95      	ldr	r3, [pc, #596]	; (8005ff8 <DMA_Init+0x280>)
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d034      	beq.n	8005e10 <DMA_Init+0x98>
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4b94      	ldr	r3, [pc, #592]	; (8005ffc <DMA_Init+0x284>)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d030      	beq.n	8005e10 <DMA_Init+0x98>
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4b93      	ldr	r3, [pc, #588]	; (8006000 <DMA_Init+0x288>)
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d02c      	beq.n	8005e10 <DMA_Init+0x98>
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4b92      	ldr	r3, [pc, #584]	; (8006004 <DMA_Init+0x28c>)
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d028      	beq.n	8005e10 <DMA_Init+0x98>
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4b91      	ldr	r3, [pc, #580]	; (8006008 <DMA_Init+0x290>)
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d024      	beq.n	8005e10 <DMA_Init+0x98>
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4b90      	ldr	r3, [pc, #576]	; (800600c <DMA_Init+0x294>)
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d020      	beq.n	8005e10 <DMA_Init+0x98>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4b8f      	ldr	r3, [pc, #572]	; (8006010 <DMA_Init+0x298>)
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d01c      	beq.n	8005e10 <DMA_Init+0x98>
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	4b8e      	ldr	r3, [pc, #568]	; (8006014 <DMA_Init+0x29c>)
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d018      	beq.n	8005e10 <DMA_Init+0x98>
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4b8d      	ldr	r3, [pc, #564]	; (8006018 <DMA_Init+0x2a0>)
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d014      	beq.n	8005e10 <DMA_Init+0x98>
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4b8c      	ldr	r3, [pc, #560]	; (800601c <DMA_Init+0x2a4>)
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d010      	beq.n	8005e10 <DMA_Init+0x98>
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4b8b      	ldr	r3, [pc, #556]	; (8006020 <DMA_Init+0x2a8>)
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d00c      	beq.n	8005e10 <DMA_Init+0x98>
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4b8a      	ldr	r3, [pc, #552]	; (8006024 <DMA_Init+0x2ac>)
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d008      	beq.n	8005e10 <DMA_Init+0x98>
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4b89      	ldr	r3, [pc, #548]	; (8006028 <DMA_Init+0x2b0>)
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d004      	beq.n	8005e10 <DMA_Init+0x98>
 8005e06:	4889      	ldr	r0, [pc, #548]	; (800602c <DMA_Init+0x2b4>)
 8005e08:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8005e0c:	f7fd f87c 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d027      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e20:	d022      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e2a:	d01d      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005e34:	d018      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e3e:	d013      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005e48:	d00e      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e52:	d009      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005e5c:	d004      	beq.n	8005e68 <DMA_Init+0xf0>
 8005e5e:	4873      	ldr	r0, [pc, #460]	; (800602c <DMA_Init+0x2b4>)
 8005e60:	f240 113d 	movw	r1, #317	; 0x13d
 8005e64:	f7fd f850 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00c      	beq.n	8005e8a <DMA_Init+0x112>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d008      	beq.n	8005e8a <DMA_Init+0x112>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d004      	beq.n	8005e8a <DMA_Init+0x112>
 8005e80:	486a      	ldr	r0, [pc, #424]	; (800602c <DMA_Init+0x2b4>)
 8005e82:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005e86:	f7fd f83f 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <DMA_Init+0x124>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9a:	d304      	bcc.n	8005ea6 <DMA_Init+0x12e>
 8005e9c:	4863      	ldr	r0, [pc, #396]	; (800602c <DMA_Init+0x2b4>)
 8005e9e:	f240 113f 	movw	r1, #319	; 0x13f
 8005ea2:	f7fd f831 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eae:	d008      	beq.n	8005ec2 <DMA_Init+0x14a>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <DMA_Init+0x14a>
 8005eb8:	485c      	ldr	r0, [pc, #368]	; (800602c <DMA_Init+0x2b4>)
 8005eba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ebe:	f7fd f823 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eca:	d008      	beq.n	8005ede <DMA_Init+0x166>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <DMA_Init+0x166>
 8005ed4:	4855      	ldr	r0, [pc, #340]	; (800602c <DMA_Init+0x2b4>)
 8005ed6:	f240 1141 	movw	r1, #321	; 0x141
 8005eda:	f7fd f815 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <DMA_Init+0x18c>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eee:	d009      	beq.n	8005f04 <DMA_Init+0x18c>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef8:	d004      	beq.n	8005f04 <DMA_Init+0x18c>
 8005efa:	484c      	ldr	r0, [pc, #304]	; (800602c <DMA_Init+0x2b4>)
 8005efc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005f00:	f7fd f802 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <DMA_Init+0x1b2>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f14:	d009      	beq.n	8005f2a <DMA_Init+0x1b2>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1e:	d004      	beq.n	8005f2a <DMA_Init+0x1b2>
 8005f20:	4842      	ldr	r0, [pc, #264]	; (800602c <DMA_Init+0x2b4>)
 8005f22:	f240 1143 	movw	r1, #323	; 0x143
 8005f26:	f7fc ffef 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <DMA_Init+0x1ce>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3a:	d004      	beq.n	8005f46 <DMA_Init+0x1ce>
 8005f3c:	483b      	ldr	r0, [pc, #236]	; (800602c <DMA_Init+0x2b4>)
 8005f3e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005f42:	f7fc ffe1 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d013      	beq.n	8005f76 <DMA_Init+0x1fe>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f56:	d00e      	beq.n	8005f76 <DMA_Init+0x1fe>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f60:	d009      	beq.n	8005f76 <DMA_Init+0x1fe>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f6a:	d004      	beq.n	8005f76 <DMA_Init+0x1fe>
 8005f6c:	482f      	ldr	r0, [pc, #188]	; (800602c <DMA_Init+0x2b4>)
 8005f6e:	f240 1145 	movw	r1, #325	; 0x145
 8005f72:	f7fc ffc9 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <DMA_Init+0x218>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d004      	beq.n	8005f90 <DMA_Init+0x218>
 8005f86:	4829      	ldr	r0, [pc, #164]	; (800602c <DMA_Init+0x2b4>)
 8005f88:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005f8c:	f7fc ffbc 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <DMA_Init+0x242>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d00c      	beq.n	8005fba <DMA_Init+0x242>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d008      	beq.n	8005fba <DMA_Init+0x242>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d004      	beq.n	8005fba <DMA_Init+0x242>
 8005fb0:	481e      	ldr	r0, [pc, #120]	; (800602c <DMA_Init+0x2b4>)
 8005fb2:	f240 1147 	movw	r1, #327	; 0x147
 8005fb6:	f7fc ffa7 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d036      	beq.n	8006030 <DMA_Init+0x2b8>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fca:	d031      	beq.n	8006030 <DMA_Init+0x2b8>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fd4:	d02c      	beq.n	8006030 <DMA_Init+0x2b8>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fde:	d027      	beq.n	8006030 <DMA_Init+0x2b8>
 8005fe0:	4812      	ldr	r0, [pc, #72]	; (800602c <DMA_Init+0x2b4>)
 8005fe2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005fe6:	f7fc ff8f 	bl	8002f08 <assert_failed>
 8005fea:	e021      	b.n	8006030 <DMA_Init+0x2b8>
 8005fec:	40026010 	.word	0x40026010
 8005ff0:	40026028 	.word	0x40026028
 8005ff4:	40026040 	.word	0x40026040
 8005ff8:	40026058 	.word	0x40026058
 8005ffc:	40026070 	.word	0x40026070
 8006000:	40026088 	.word	0x40026088
 8006004:	400260a0 	.word	0x400260a0
 8006008:	400260b8 	.word	0x400260b8
 800600c:	40026410 	.word	0x40026410
 8006010:	40026428 	.word	0x40026428
 8006014:	40026440 	.word	0x40026440
 8006018:	40026458 	.word	0x40026458
 800601c:	40026470 	.word	0x40026470
 8006020:	40026488 	.word	0x40026488
 8006024:	400264a0 	.word	0x400264a0
 8006028:	400264b8 	.word	0x400264b8
 800602c:	08008a60 	.word	0x08008a60
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d013      	beq.n	8006060 <DMA_Init+0x2e8>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006040:	d00e      	beq.n	8006060 <DMA_Init+0x2e8>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800604a:	d009      	beq.n	8006060 <DMA_Init+0x2e8>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006054:	d004      	beq.n	8006060 <DMA_Init+0x2e8>
 8006056:	4828      	ldr	r0, [pc, #160]	; (80060f8 <DMA_Init+0x380>)
 8006058:	f240 1149 	movw	r1, #329	; 0x149
 800605c:	f7fc ff54 	bl	8002f08 <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4b24      	ldr	r3, [pc, #144]	; (80060fc <DMA_Init+0x384>)
 800606a:	4013      	ands	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800607c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006088:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006094:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80060a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	4313      	orrs	r3, r2
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]
}
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	08008a60 	.word	0x08008a60
 80060fc:	f01c803f 	.word	0xf01c803f

08006100 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4b31      	ldr	r3, [pc, #196]	; (8006240 <DMA_Cmd+0xd4>)
 800617c:	429a      	cmp	r2, r3
 800617e:	d040      	beq.n	8006202 <DMA_Cmd+0x96>
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4b30      	ldr	r3, [pc, #192]	; (8006244 <DMA_Cmd+0xd8>)
 8006184:	429a      	cmp	r2, r3
 8006186:	d03c      	beq.n	8006202 <DMA_Cmd+0x96>
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <DMA_Cmd+0xdc>)
 800618c:	429a      	cmp	r2, r3
 800618e:	d038      	beq.n	8006202 <DMA_Cmd+0x96>
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <DMA_Cmd+0xe0>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d034      	beq.n	8006202 <DMA_Cmd+0x96>
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <DMA_Cmd+0xe4>)
 800619c:	429a      	cmp	r2, r3
 800619e:	d030      	beq.n	8006202 <DMA_Cmd+0x96>
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4b2c      	ldr	r3, [pc, #176]	; (8006254 <DMA_Cmd+0xe8>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d02c      	beq.n	8006202 <DMA_Cmd+0x96>
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <DMA_Cmd+0xec>)
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d028      	beq.n	8006202 <DMA_Cmd+0x96>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <DMA_Cmd+0xf0>)
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d024      	beq.n	8006202 <DMA_Cmd+0x96>
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4b29      	ldr	r3, [pc, #164]	; (8006260 <DMA_Cmd+0xf4>)
 80061bc:	429a      	cmp	r2, r3
 80061be:	d020      	beq.n	8006202 <DMA_Cmd+0x96>
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4b28      	ldr	r3, [pc, #160]	; (8006264 <DMA_Cmd+0xf8>)
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d01c      	beq.n	8006202 <DMA_Cmd+0x96>
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4b27      	ldr	r3, [pc, #156]	; (8006268 <DMA_Cmd+0xfc>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d018      	beq.n	8006202 <DMA_Cmd+0x96>
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <DMA_Cmd+0x100>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d014      	beq.n	8006202 <DMA_Cmd+0x96>
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4b25      	ldr	r3, [pc, #148]	; (8006270 <DMA_Cmd+0x104>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	d010      	beq.n	8006202 <DMA_Cmd+0x96>
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4b24      	ldr	r3, [pc, #144]	; (8006274 <DMA_Cmd+0x108>)
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d00c      	beq.n	8006202 <DMA_Cmd+0x96>
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <DMA_Cmd+0x10c>)
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d008      	beq.n	8006202 <DMA_Cmd+0x96>
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4b22      	ldr	r3, [pc, #136]	; (800627c <DMA_Cmd+0x110>)
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d004      	beq.n	8006202 <DMA_Cmd+0x96>
 80061f8:	4821      	ldr	r0, [pc, #132]	; (8006280 <DMA_Cmd+0x114>)
 80061fa:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061fe:	f7fc fe83 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <DMA_Cmd+0xac>
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d004      	beq.n	8006218 <DMA_Cmd+0xac>
 800620e:	481c      	ldr	r0, [pc, #112]	; (8006280 <DMA_Cmd+0x114>)
 8006210:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006214:	f7fc fe78 	bl	8002f08 <assert_failed>

  if (NewState != DISABLE)
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d006      	beq.n	800622c <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f043 0201 	orr.w	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e005      	b.n	8006238 <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 0201 	bic.w	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
  }
}
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40026010 	.word	0x40026010
 8006244:	40026028 	.word	0x40026028
 8006248:	40026040 	.word	0x40026040
 800624c:	40026058 	.word	0x40026058
 8006250:	40026070 	.word	0x40026070
 8006254:	40026088 	.word	0x40026088
 8006258:	400260a0 	.word	0x400260a0
 800625c:	400260b8 	.word	0x400260b8
 8006260:	40026410 	.word	0x40026410
 8006264:	40026428 	.word	0x40026428
 8006268:	40026440 	.word	0x40026440
 800626c:	40026458 	.word	0x40026458
 8006270:	40026470 	.word	0x40026470
 8006274:	40026488 	.word	0x40026488
 8006278:	400264a0 	.word	0x400264a0
 800627c:	400264b8 	.word	0x400264b8
 8006280:	08008a60 	.word	0x08008a60

08006284 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	4b25      	ldr	r3, [pc, #148]	; (8006328 <DMA_SetCurrDataCounter+0xa4>)
 8006294:	429a      	cmp	r2, r3
 8006296:	d040      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <DMA_SetCurrDataCounter+0xa8>)
 800629c:	429a      	cmp	r2, r3
 800629e:	d03c      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4b23      	ldr	r3, [pc, #140]	; (8006330 <DMA_SetCurrDataCounter+0xac>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d038      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4b22      	ldr	r3, [pc, #136]	; (8006334 <DMA_SetCurrDataCounter+0xb0>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d034      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4b21      	ldr	r3, [pc, #132]	; (8006338 <DMA_SetCurrDataCounter+0xb4>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d030      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4b20      	ldr	r3, [pc, #128]	; (800633c <DMA_SetCurrDataCounter+0xb8>)
 80062bc:	429a      	cmp	r2, r3
 80062be:	d02c      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <DMA_SetCurrDataCounter+0xbc>)
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d028      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <DMA_SetCurrDataCounter+0xc0>)
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d024      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <DMA_SetCurrDataCounter+0xc4>)
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d020      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4b1c      	ldr	r3, [pc, #112]	; (800634c <DMA_SetCurrDataCounter+0xc8>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	d01c      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <DMA_SetCurrDataCounter+0xcc>)
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d018      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <DMA_SetCurrDataCounter+0xd0>)
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d014      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4b19      	ldr	r3, [pc, #100]	; (8006358 <DMA_SetCurrDataCounter+0xd4>)
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d010      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4b18      	ldr	r3, [pc, #96]	; (800635c <DMA_SetCurrDataCounter+0xd8>)
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d00c      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	4b17      	ldr	r3, [pc, #92]	; (8006360 <DMA_SetCurrDataCounter+0xdc>)
 8006304:	429a      	cmp	r2, r3
 8006306:	d008      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <DMA_SetCurrDataCounter+0xe0>)
 800630c:	429a      	cmp	r2, r3
 800630e:	d004      	beq.n	800631a <DMA_SetCurrDataCounter+0x96>
 8006310:	4815      	ldr	r0, [pc, #84]	; (8006368 <DMA_SetCurrDataCounter+0xe4>)
 8006312:	f240 2175 	movw	r1, #629	; 0x275
 8006316:	f7fc fdf7 	bl	8002f08 <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800631a:	887a      	ldrh	r2, [r7, #2]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	605a      	str	r2, [r3, #4]
}
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40026010 	.word	0x40026010
 800632c:	40026028 	.word	0x40026028
 8006330:	40026040 	.word	0x40026040
 8006334:	40026058 	.word	0x40026058
 8006338:	40026070 	.word	0x40026070
 800633c:	40026088 	.word	0x40026088
 8006340:	400260a0 	.word	0x400260a0
 8006344:	400260b8 	.word	0x400260b8
 8006348:	40026410 	.word	0x40026410
 800634c:	40026428 	.word	0x40026428
 8006350:	40026440 	.word	0x40026440
 8006354:	40026458 	.word	0x40026458
 8006358:	40026470 	.word	0x40026470
 800635c:	40026488 	.word	0x40026488
 8006360:	400264a0 	.word	0x400264a0
 8006364:	400264b8 	.word	0x400264b8
 8006368:	08008a60 	.word	0x08008a60

0800636c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	4b2a      	ldr	r3, [pc, #168]	; (8006424 <DMA_GetCmdStatus+0xb8>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d040      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <DMA_GetCmdStatus+0xbc>)
 8006384:	429a      	cmp	r2, r3
 8006386:	d03c      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4b28      	ldr	r3, [pc, #160]	; (800642c <DMA_GetCmdStatus+0xc0>)
 800638c:	429a      	cmp	r2, r3
 800638e:	d038      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4b27      	ldr	r3, [pc, #156]	; (8006430 <DMA_GetCmdStatus+0xc4>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d034      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	4b26      	ldr	r3, [pc, #152]	; (8006434 <DMA_GetCmdStatus+0xc8>)
 800639c:	429a      	cmp	r2, r3
 800639e:	d030      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	4b25      	ldr	r3, [pc, #148]	; (8006438 <DMA_GetCmdStatus+0xcc>)
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d02c      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <DMA_GetCmdStatus+0xd0>)
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d028      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4b23      	ldr	r3, [pc, #140]	; (8006440 <DMA_GetCmdStatus+0xd4>)
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d024      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4b22      	ldr	r3, [pc, #136]	; (8006444 <DMA_GetCmdStatus+0xd8>)
 80063bc:	429a      	cmp	r2, r3
 80063be:	d020      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4b21      	ldr	r3, [pc, #132]	; (8006448 <DMA_GetCmdStatus+0xdc>)
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d01c      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	4b20      	ldr	r3, [pc, #128]	; (800644c <DMA_GetCmdStatus+0xe0>)
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d018      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <DMA_GetCmdStatus+0xe4>)
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d014      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <DMA_GetCmdStatus+0xe8>)
 80063dc:	429a      	cmp	r2, r3
 80063de:	d010      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <DMA_GetCmdStatus+0xec>)
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d00c      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4b1c      	ldr	r3, [pc, #112]	; (800645c <DMA_GetCmdStatus+0xf0>)
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d008      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <DMA_GetCmdStatus+0xf4>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d004      	beq.n	8006402 <DMA_GetCmdStatus+0x96>
 80063f8:	481a      	ldr	r0, [pc, #104]	; (8006464 <DMA_GetCmdStatus+0xf8>)
 80063fa:	f240 31a2 	movw	r1, #930	; 0x3a2
 80063fe:	f7fc fd83 	bl	8002f08 <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
 8006412:	e001      	b.n	8006418 <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40026010 	.word	0x40026010
 8006428:	40026028 	.word	0x40026028
 800642c:	40026040 	.word	0x40026040
 8006430:	40026058 	.word	0x40026058
 8006434:	40026070 	.word	0x40026070
 8006438:	40026088 	.word	0x40026088
 800643c:	400260a0 	.word	0x400260a0
 8006440:	400260b8 	.word	0x400260b8
 8006444:	40026410 	.word	0x40026410
 8006448:	40026428 	.word	0x40026428
 800644c:	40026440 	.word	0x40026440
 8006450:	40026458 	.word	0x40026458
 8006454:	40026470 	.word	0x40026470
 8006458:	40026488 	.word	0x40026488
 800645c:	400264a0 	.word	0x400264a0
 8006460:	400264b8 	.word	0x400264b8
 8006464:	08008a60 	.word	0x08008a60

08006468 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4b45      	ldr	r3, [pc, #276]	; (8006590 <DMA_ITConfig+0x128>)
 800647a:	429a      	cmp	r2, r3
 800647c:	d040      	beq.n	8006500 <DMA_ITConfig+0x98>
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4b44      	ldr	r3, [pc, #272]	; (8006594 <DMA_ITConfig+0x12c>)
 8006482:	429a      	cmp	r2, r3
 8006484:	d03c      	beq.n	8006500 <DMA_ITConfig+0x98>
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4b43      	ldr	r3, [pc, #268]	; (8006598 <DMA_ITConfig+0x130>)
 800648a:	429a      	cmp	r2, r3
 800648c:	d038      	beq.n	8006500 <DMA_ITConfig+0x98>
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4b42      	ldr	r3, [pc, #264]	; (800659c <DMA_ITConfig+0x134>)
 8006492:	429a      	cmp	r2, r3
 8006494:	d034      	beq.n	8006500 <DMA_ITConfig+0x98>
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <DMA_ITConfig+0x138>)
 800649a:	429a      	cmp	r2, r3
 800649c:	d030      	beq.n	8006500 <DMA_ITConfig+0x98>
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4b40      	ldr	r3, [pc, #256]	; (80065a4 <DMA_ITConfig+0x13c>)
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d02c      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <DMA_ITConfig+0x140>)
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d028      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <DMA_ITConfig+0x144>)
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d024      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <DMA_ITConfig+0x148>)
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d020      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4b3c      	ldr	r3, [pc, #240]	; (80065b4 <DMA_ITConfig+0x14c>)
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d01c      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <DMA_ITConfig+0x150>)
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d018      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4b3a      	ldr	r3, [pc, #232]	; (80065bc <DMA_ITConfig+0x154>)
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d014      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4b39      	ldr	r3, [pc, #228]	; (80065c0 <DMA_ITConfig+0x158>)
 80064da:	429a      	cmp	r2, r3
 80064dc:	d010      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4b38      	ldr	r3, [pc, #224]	; (80065c4 <DMA_ITConfig+0x15c>)
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d00c      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4b37      	ldr	r3, [pc, #220]	; (80065c8 <DMA_ITConfig+0x160>)
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d008      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4b36      	ldr	r3, [pc, #216]	; (80065cc <DMA_ITConfig+0x164>)
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d004      	beq.n	8006500 <DMA_ITConfig+0x98>
 80064f6:	4836      	ldr	r0, [pc, #216]	; (80065d0 <DMA_ITConfig+0x168>)
 80064f8:	f240 414f 	movw	r1, #1103	; 0x44f
 80064fc:	f7fc fd04 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <DMA_ITConfig+0xa8>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <DMA_ITConfig+0xb2>
 8006510:	482f      	ldr	r0, [pc, #188]	; (80065d0 <DMA_ITConfig+0x168>)
 8006512:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8006516:	f7fc fcf7 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <DMA_ITConfig+0xc8>
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d004      	beq.n	8006530 <DMA_ITConfig+0xc8>
 8006526:	482a      	ldr	r0, [pc, #168]	; (80065d0 <DMA_ITConfig+0x168>)
 8006528:	f240 4151 	movw	r1, #1105	; 0x451
 800652c:	f7fc fcec 	bl	8002f08 <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00f      	beq.n	800655a <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	615a      	str	r2, [r3, #20]
 800654c:	e005      	b.n	800655a <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	d014      	beq.n	800658a <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f003 031e 	and.w	r3, r3, #30
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e008      	b.n	800658a <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 031e 	and.w	r3, r3, #30
 8006582:	43db      	mvns	r3, r3
 8006584:	401a      	ands	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40026010 	.word	0x40026010
 8006594:	40026028 	.word	0x40026028
 8006598:	40026040 	.word	0x40026040
 800659c:	40026058 	.word	0x40026058
 80065a0:	40026070 	.word	0x40026070
 80065a4:	40026088 	.word	0x40026088
 80065a8:	400260a0 	.word	0x400260a0
 80065ac:	400260b8 	.word	0x400260b8
 80065b0:	40026410 	.word	0x40026410
 80065b4:	40026428 	.word	0x40026428
 80065b8:	40026440 	.word	0x40026440
 80065bc:	40026458 	.word	0x40026458
 80065c0:	40026470 	.word	0x40026470
 80065c4:	40026488 	.word	0x40026488
 80065c8:	400264a0 	.word	0x400264a0
 80065cc:	400264b8 	.word	0x400264b8
 80065d0:	08008a60 	.word	0x08008a60

080065d4 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4b97      	ldr	r3, [pc, #604]	; (800684c <DMA_GetITStatus+0x278>)
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d040      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	4b96      	ldr	r3, [pc, #600]	; (8006850 <DMA_GetITStatus+0x27c>)
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d03c      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4b95      	ldr	r3, [pc, #596]	; (8006854 <DMA_GetITStatus+0x280>)
 80065fe:	429a      	cmp	r2, r3
 8006600:	d038      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4b94      	ldr	r3, [pc, #592]	; (8006858 <DMA_GetITStatus+0x284>)
 8006606:	429a      	cmp	r2, r3
 8006608:	d034      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	4b93      	ldr	r3, [pc, #588]	; (800685c <DMA_GetITStatus+0x288>)
 800660e:	429a      	cmp	r2, r3
 8006610:	d030      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4b92      	ldr	r3, [pc, #584]	; (8006860 <DMA_GetITStatus+0x28c>)
 8006616:	429a      	cmp	r2, r3
 8006618:	d02c      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4b91      	ldr	r3, [pc, #580]	; (8006864 <DMA_GetITStatus+0x290>)
 800661e:	429a      	cmp	r2, r3
 8006620:	d028      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4b90      	ldr	r3, [pc, #576]	; (8006868 <DMA_GetITStatus+0x294>)
 8006626:	429a      	cmp	r2, r3
 8006628:	d024      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4b8f      	ldr	r3, [pc, #572]	; (800686c <DMA_GetITStatus+0x298>)
 800662e:	429a      	cmp	r2, r3
 8006630:	d020      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4b8e      	ldr	r3, [pc, #568]	; (8006870 <DMA_GetITStatus+0x29c>)
 8006636:	429a      	cmp	r2, r3
 8006638:	d01c      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4b8d      	ldr	r3, [pc, #564]	; (8006874 <DMA_GetITStatus+0x2a0>)
 800663e:	429a      	cmp	r2, r3
 8006640:	d018      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4b8c      	ldr	r3, [pc, #560]	; (8006878 <DMA_GetITStatus+0x2a4>)
 8006646:	429a      	cmp	r2, r3
 8006648:	d014      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	4b8b      	ldr	r3, [pc, #556]	; (800687c <DMA_GetITStatus+0x2a8>)
 800664e:	429a      	cmp	r2, r3
 8006650:	d010      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4b8a      	ldr	r3, [pc, #552]	; (8006880 <DMA_GetITStatus+0x2ac>)
 8006656:	429a      	cmp	r2, r3
 8006658:	d00c      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4b89      	ldr	r3, [pc, #548]	; (8006884 <DMA_GetITStatus+0x2b0>)
 800665e:	429a      	cmp	r2, r3
 8006660:	d008      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	4b88      	ldr	r3, [pc, #544]	; (8006888 <DMA_GetITStatus+0x2b4>)
 8006666:	429a      	cmp	r2, r3
 8006668:	d004      	beq.n	8006674 <DMA_GetITStatus+0xa0>
 800666a:	4888      	ldr	r0, [pc, #544]	; (800688c <DMA_GetITStatus+0x2b8>)
 800666c:	f240 4187 	movw	r1, #1159	; 0x487
 8006670:	f7fc fc4a 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	4b86      	ldr	r3, [pc, #536]	; (8006890 <DMA_GetITStatus+0x2bc>)
 8006678:	429a      	cmp	r2, r3
 800667a:	f000 80a9 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	4b84      	ldr	r3, [pc, #528]	; (8006894 <DMA_GetITStatus+0x2c0>)
 8006682:	429a      	cmp	r2, r3
 8006684:	f000 80a4 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	4b83      	ldr	r3, [pc, #524]	; (8006898 <DMA_GetITStatus+0x2c4>)
 800668c:	429a      	cmp	r2, r3
 800668e:	f000 809f 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	4b81      	ldr	r3, [pc, #516]	; (800689c <DMA_GetITStatus+0x2c8>)
 8006696:	429a      	cmp	r2, r3
 8006698:	f000 809a 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	4b80      	ldr	r3, [pc, #512]	; (80068a0 <DMA_GetITStatus+0x2cc>)
 80066a0:	429a      	cmp	r2, r3
 80066a2:	f000 8095 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4b7e      	ldr	r3, [pc, #504]	; (80068a4 <DMA_GetITStatus+0x2d0>)
 80066aa:	429a      	cmp	r2, r3
 80066ac:	f000 8090 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	4b7d      	ldr	r3, [pc, #500]	; (80068a8 <DMA_GetITStatus+0x2d4>)
 80066b4:	429a      	cmp	r2, r3
 80066b6:	f000 808b 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	4b7b      	ldr	r3, [pc, #492]	; (80068ac <DMA_GetITStatus+0x2d8>)
 80066be:	429a      	cmp	r2, r3
 80066c0:	f000 8086 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	4b7a      	ldr	r3, [pc, #488]	; (80068b0 <DMA_GetITStatus+0x2dc>)
 80066c8:	429a      	cmp	r2, r3
 80066ca:	f000 8081 	beq.w	80067d0 <DMA_GetITStatus+0x1fc>
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4b78      	ldr	r3, [pc, #480]	; (80068b4 <DMA_GetITStatus+0x2e0>)
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d07c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4b77      	ldr	r3, [pc, #476]	; (80068b8 <DMA_GetITStatus+0x2e4>)
 80066da:	429a      	cmp	r2, r3
 80066dc:	d078      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	4b76      	ldr	r3, [pc, #472]	; (80068bc <DMA_GetITStatus+0x2e8>)
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d074      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4b75      	ldr	r3, [pc, #468]	; (80068c0 <DMA_GetITStatus+0x2ec>)
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d070      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4b74      	ldr	r3, [pc, #464]	; (80068c4 <DMA_GetITStatus+0x2f0>)
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d06c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	4b73      	ldr	r3, [pc, #460]	; (80068c8 <DMA_GetITStatus+0x2f4>)
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d068      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4b72      	ldr	r3, [pc, #456]	; (80068cc <DMA_GetITStatus+0x2f8>)
 8006702:	429a      	cmp	r2, r3
 8006704:	d064      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	4b71      	ldr	r3, [pc, #452]	; (80068d0 <DMA_GetITStatus+0x2fc>)
 800670a:	429a      	cmp	r2, r3
 800670c:	d060      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	4b70      	ldr	r3, [pc, #448]	; (80068d4 <DMA_GetITStatus+0x300>)
 8006712:	429a      	cmp	r2, r3
 8006714:	d05c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4b6f      	ldr	r3, [pc, #444]	; (80068d8 <DMA_GetITStatus+0x304>)
 800671a:	429a      	cmp	r2, r3
 800671c:	d058      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <DMA_GetITStatus+0x308>)
 8006722:	429a      	cmp	r2, r3
 8006724:	d054      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	4b6d      	ldr	r3, [pc, #436]	; (80068e0 <DMA_GetITStatus+0x30c>)
 800672a:	429a      	cmp	r2, r3
 800672c:	d050      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4b6c      	ldr	r3, [pc, #432]	; (80068e4 <DMA_GetITStatus+0x310>)
 8006732:	429a      	cmp	r2, r3
 8006734:	d04c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4b6b      	ldr	r3, [pc, #428]	; (80068e8 <DMA_GetITStatus+0x314>)
 800673a:	429a      	cmp	r2, r3
 800673c:	d048      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	4b6a      	ldr	r3, [pc, #424]	; (80068ec <DMA_GetITStatus+0x318>)
 8006742:	429a      	cmp	r2, r3
 8006744:	d044      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <DMA_GetITStatus+0x31c>)
 800674a:	429a      	cmp	r2, r3
 800674c:	d040      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4b68      	ldr	r3, [pc, #416]	; (80068f4 <DMA_GetITStatus+0x320>)
 8006752:	429a      	cmp	r2, r3
 8006754:	d03c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	4b67      	ldr	r3, [pc, #412]	; (80068f8 <DMA_GetITStatus+0x324>)
 800675a:	429a      	cmp	r2, r3
 800675c:	d038      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	4b66      	ldr	r3, [pc, #408]	; (80068fc <DMA_GetITStatus+0x328>)
 8006762:	429a      	cmp	r2, r3
 8006764:	d034      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	4b65      	ldr	r3, [pc, #404]	; (8006900 <DMA_GetITStatus+0x32c>)
 800676a:	429a      	cmp	r2, r3
 800676c:	d030      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4b64      	ldr	r3, [pc, #400]	; (8006904 <DMA_GetITStatus+0x330>)
 8006772:	429a      	cmp	r2, r3
 8006774:	d02c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	4b63      	ldr	r3, [pc, #396]	; (8006908 <DMA_GetITStatus+0x334>)
 800677a:	429a      	cmp	r2, r3
 800677c:	d028      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	4b62      	ldr	r3, [pc, #392]	; (800690c <DMA_GetITStatus+0x338>)
 8006782:	429a      	cmp	r2, r3
 8006784:	d024      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	4b61      	ldr	r3, [pc, #388]	; (8006910 <DMA_GetITStatus+0x33c>)
 800678a:	429a      	cmp	r2, r3
 800678c:	d020      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	4b60      	ldr	r3, [pc, #384]	; (8006914 <DMA_GetITStatus+0x340>)
 8006792:	429a      	cmp	r2, r3
 8006794:	d01c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4b5f      	ldr	r3, [pc, #380]	; (8006918 <DMA_GetITStatus+0x344>)
 800679a:	429a      	cmp	r2, r3
 800679c:	d018      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	4b5e      	ldr	r3, [pc, #376]	; (800691c <DMA_GetITStatus+0x348>)
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d014      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	4b5d      	ldr	r3, [pc, #372]	; (8006920 <DMA_GetITStatus+0x34c>)
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d010      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4b5c      	ldr	r3, [pc, #368]	; (8006924 <DMA_GetITStatus+0x350>)
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d00c      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	4b5b      	ldr	r3, [pc, #364]	; (8006928 <DMA_GetITStatus+0x354>)
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d008      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	4b5a      	ldr	r3, [pc, #360]	; (800692c <DMA_GetITStatus+0x358>)
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d004      	beq.n	80067d0 <DMA_GetITStatus+0x1fc>
 80067c6:	4831      	ldr	r0, [pc, #196]	; (800688c <DMA_GetITStatus+0x2b8>)
 80067c8:	f44f 6191 	mov.w	r1, #1160	; 0x488
 80067cc:	f7fc fb9c 	bl	8002f08 <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	4b57      	ldr	r3, [pc, #348]	; (8006930 <DMA_GetITStatus+0x35c>)
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d802      	bhi.n	80067de <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80067d8:	4b56      	ldr	r3, [pc, #344]	; (8006934 <DMA_GetITStatus+0x360>)
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	e001      	b.n	80067e2 <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80067de:	4b56      	ldr	r3, [pc, #344]	; (8006938 <DMA_GetITStatus+0x364>)
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80067e8:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	0adb      	lsrs	r3, r3, #11
 80067f4:	f003 031e 	and.w	r3, r3, #30
 80067f8:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4013      	ands	r3, r2
 8006802:	60bb      	str	r3, [r7, #8]
 8006804:	e004      	b.n	8006810 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e002      	b.n	8006828 <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800682e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006832:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d07e      	beq.n	800693c <DMA_GetITStatus+0x368>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d07b      	beq.n	800693c <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8006844:	2301      	movs	r3, #1
 8006846:	75fb      	strb	r3, [r7, #23]
 8006848:	e07a      	b.n	8006940 <DMA_GetITStatus+0x36c>
 800684a:	bf00      	nop
 800684c:	40026010 	.word	0x40026010
 8006850:	40026028 	.word	0x40026028
 8006854:	40026040 	.word	0x40026040
 8006858:	40026058 	.word	0x40026058
 800685c:	40026070 	.word	0x40026070
 8006860:	40026088 	.word	0x40026088
 8006864:	400260a0 	.word	0x400260a0
 8006868:	400260b8 	.word	0x400260b8
 800686c:	40026410 	.word	0x40026410
 8006870:	40026428 	.word	0x40026428
 8006874:	40026440 	.word	0x40026440
 8006878:	40026458 	.word	0x40026458
 800687c:	40026470 	.word	0x40026470
 8006880:	40026488 	.word	0x40026488
 8006884:	400264a0 	.word	0x400264a0
 8006888:	400264b8 	.word	0x400264b8
 800688c:	08008a60 	.word	0x08008a60
 8006890:	10008020 	.word	0x10008020
 8006894:	10004010 	.word	0x10004010
 8006898:	10002008 	.word	0x10002008
 800689c:	10001004 	.word	0x10001004
 80068a0:	90000001 	.word	0x90000001
 80068a4:	10008800 	.word	0x10008800
 80068a8:	10004400 	.word	0x10004400
 80068ac:	10002200 	.word	0x10002200
 80068b0:	10001100 	.word	0x10001100
 80068b4:	90000040 	.word	0x90000040
 80068b8:	10208000 	.word	0x10208000
 80068bc:	10104000 	.word	0x10104000
 80068c0:	10082000 	.word	0x10082000
 80068c4:	10041000 	.word	0x10041000
 80068c8:	90010000 	.word	0x90010000
 80068cc:	18008000 	.word	0x18008000
 80068d0:	14004000 	.word	0x14004000
 80068d4:	12002000 	.word	0x12002000
 80068d8:	11001000 	.word	0x11001000
 80068dc:	90400000 	.word	0x90400000
 80068e0:	20008020 	.word	0x20008020
 80068e4:	20004010 	.word	0x20004010
 80068e8:	20002008 	.word	0x20002008
 80068ec:	20001004 	.word	0x20001004
 80068f0:	a0000001 	.word	0xa0000001
 80068f4:	20008800 	.word	0x20008800
 80068f8:	20004400 	.word	0x20004400
 80068fc:	20002200 	.word	0x20002200
 8006900:	20001100 	.word	0x20001100
 8006904:	a0000040 	.word	0xa0000040
 8006908:	20208000 	.word	0x20208000
 800690c:	20104000 	.word	0x20104000
 8006910:	20082000 	.word	0x20082000
 8006914:	20041000 	.word	0x20041000
 8006918:	a0010000 	.word	0xa0010000
 800691c:	28008000 	.word	0x28008000
 8006920:	24004000 	.word	0x24004000
 8006924:	22002000 	.word	0x22002000
 8006928:	21001000 	.word	0x21001000
 800692c:	a0400000 	.word	0xa0400000
 8006930:	4002640f 	.word	0x4002640f
 8006934:	40026000 	.word	0x40026000
 8006938:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop

0800694c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4b3d      	ldr	r3, [pc, #244]	; (8006a50 <DMA_ClearITPendingBit+0x104>)
 800695a:	429a      	cmp	r2, r3
 800695c:	d040      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4b3c      	ldr	r3, [pc, #240]	; (8006a54 <DMA_ClearITPendingBit+0x108>)
 8006962:	429a      	cmp	r2, r3
 8006964:	d03c      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	4b3b      	ldr	r3, [pc, #236]	; (8006a58 <DMA_ClearITPendingBit+0x10c>)
 800696a:	429a      	cmp	r2, r3
 800696c:	d038      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4b3a      	ldr	r3, [pc, #232]	; (8006a5c <DMA_ClearITPendingBit+0x110>)
 8006972:	429a      	cmp	r2, r3
 8006974:	d034      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4b39      	ldr	r3, [pc, #228]	; (8006a60 <DMA_ClearITPendingBit+0x114>)
 800697a:	429a      	cmp	r2, r3
 800697c:	d030      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <DMA_ClearITPendingBit+0x118>)
 8006982:	429a      	cmp	r2, r3
 8006984:	d02c      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4b37      	ldr	r3, [pc, #220]	; (8006a68 <DMA_ClearITPendingBit+0x11c>)
 800698a:	429a      	cmp	r2, r3
 800698c:	d028      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <DMA_ClearITPendingBit+0x120>)
 8006992:	429a      	cmp	r2, r3
 8006994:	d024      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4b35      	ldr	r3, [pc, #212]	; (8006a70 <DMA_ClearITPendingBit+0x124>)
 800699a:	429a      	cmp	r2, r3
 800699c:	d020      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4b34      	ldr	r3, [pc, #208]	; (8006a74 <DMA_ClearITPendingBit+0x128>)
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d01c      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4b33      	ldr	r3, [pc, #204]	; (8006a78 <DMA_ClearITPendingBit+0x12c>)
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d018      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4b32      	ldr	r3, [pc, #200]	; (8006a7c <DMA_ClearITPendingBit+0x130>)
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d014      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4b31      	ldr	r3, [pc, #196]	; (8006a80 <DMA_ClearITPendingBit+0x134>)
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d010      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4b30      	ldr	r3, [pc, #192]	; (8006a84 <DMA_ClearITPendingBit+0x138>)
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d00c      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	4b2f      	ldr	r3, [pc, #188]	; (8006a88 <DMA_ClearITPendingBit+0x13c>)
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d008      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <DMA_ClearITPendingBit+0x140>)
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d004      	beq.n	80069e0 <DMA_ClearITPendingBit+0x94>
 80069d6:	482e      	ldr	r0, [pc, #184]	; (8006a90 <DMA_ClearITPendingBit+0x144>)
 80069d8:	f240 41d7 	movw	r1, #1239	; 0x4d7
 80069dc:	f7fc fa94 	bl	8002f08 <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069ea:	d00c      	beq.n	8006a06 <DMA_ClearITPendingBit+0xba>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <DMA_ClearITPendingBit+0xba>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <DMA_ClearITPendingBit+0xba>
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	4b25      	ldr	r3, [pc, #148]	; (8006a94 <DMA_ClearITPendingBit+0x148>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <DMA_ClearITPendingBit+0xc4>
 8006a06:	4822      	ldr	r0, [pc, #136]	; (8006a90 <DMA_ClearITPendingBit+0x144>)
 8006a08:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8006a0c:	f7fc fa7c 	bl	8002f08 <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <DMA_ClearITPendingBit+0x14c>)
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d802      	bhi.n	8006a1e <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006a18:	4b20      	ldr	r3, [pc, #128]	; (8006a9c <DMA_ClearITPendingBit+0x150>)
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e001      	b.n	8006a22 <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006a1e:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <DMA_ClearITPendingBit+0x154>)
 8006a20:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006a32:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	60d3      	str	r3, [r2, #12]
 8006a3a:	e006      	b.n	8006a4a <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006a42:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	6093      	str	r3, [r2, #8]
  }   
}
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40026010 	.word	0x40026010
 8006a54:	40026028 	.word	0x40026028
 8006a58:	40026040 	.word	0x40026040
 8006a5c:	40026058 	.word	0x40026058
 8006a60:	40026070 	.word	0x40026070
 8006a64:	40026088 	.word	0x40026088
 8006a68:	400260a0 	.word	0x400260a0
 8006a6c:	400260b8 	.word	0x400260b8
 8006a70:	40026410 	.word	0x40026410
 8006a74:	40026428 	.word	0x40026428
 8006a78:	40026440 	.word	0x40026440
 8006a7c:	40026458 	.word	0x40026458
 8006a80:	40026470 	.word	0x40026470
 8006a84:	40026488 	.word	0x40026488
 8006a88:	400264a0 	.word	0x400264a0
 8006a8c:	400264b8 	.word	0x400264b8
 8006a90:	08008a60 	.word	0x08008a60
 8006a94:	40820082 	.word	0x40820082
 8006a98:	4002640f 	.word	0x4002640f
 8006a9c:	40026000 	.word	0x40026000
 8006aa0:	40026400 	.word	0x40026400

08006aa4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	791b      	ldrb	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <EXTI_Init+0x24>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	791b      	ldrb	r3, [r3, #4]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d003      	beq.n	8006ac8 <EXTI_Init+0x24>
 8006ac0:	4848      	ldr	r0, [pc, #288]	; (8006be4 <EXTI_Init+0x140>)
 8006ac2:	217c      	movs	r1, #124	; 0x7c
 8006ac4:	f7fc fa20 	bl	8002f08 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	795b      	ldrb	r3, [r3, #5]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d00b      	beq.n	8006ae8 <EXTI_Init+0x44>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	795b      	ldrb	r3, [r3, #5]
 8006ad4:	2b0c      	cmp	r3, #12
 8006ad6:	d007      	beq.n	8006ae8 <EXTI_Init+0x44>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	795b      	ldrb	r3, [r3, #5]
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d003      	beq.n	8006ae8 <EXTI_Init+0x44>
 8006ae0:	4840      	ldr	r0, [pc, #256]	; (8006be4 <EXTI_Init+0x140>)
 8006ae2:	217d      	movs	r1, #125	; 0x7d
 8006ae4:	f7fc fa10 	bl	8002f08 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	0ddb      	lsrs	r3, r3, #23
 8006aee:	05db      	lsls	r3, r3, #23
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <EXTI_Init+0x58>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <EXTI_Init+0x60>
 8006afc:	4839      	ldr	r0, [pc, #228]	; (8006be4 <EXTI_Init+0x140>)
 8006afe:	217e      	movs	r1, #126	; 0x7e
 8006b00:	f7fc fa02 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	799b      	ldrb	r3, [r3, #6]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <EXTI_Init+0x78>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	799b      	ldrb	r3, [r3, #6]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d003      	beq.n	8006b1c <EXTI_Init+0x78>
 8006b14:	4833      	ldr	r0, [pc, #204]	; (8006be4 <EXTI_Init+0x140>)
 8006b16:	217f      	movs	r1, #127	; 0x7f
 8006b18:	f7fc f9f6 	bl	8002f08 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 8006b1c:	4b32      	ldr	r3, [pc, #200]	; (8006be8 <EXTI_Init+0x144>)
 8006b1e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	799b      	ldrb	r3, [r3, #6]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d04d      	beq.n	8006bc4 <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8006b28:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <EXTI_Init+0x144>)
 8006b2a:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <EXTI_Init+0x144>)
 8006b2c:	6811      	ldr	r1, [r2, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	43d2      	mvns	r2, r2
 8006b34:	400a      	ands	r2, r1
 8006b36:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8006b38:	4b2b      	ldr	r3, [pc, #172]	; (8006be8 <EXTI_Init+0x144>)
 8006b3a:	4a2b      	ldr	r2, [pc, #172]	; (8006be8 <EXTI_Init+0x144>)
 8006b3c:	6851      	ldr	r1, [r2, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	43d2      	mvns	r2, r2
 8006b44:	400a      	ands	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	791b      	ldrb	r3, [r3, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	6811      	ldr	r1, [r2, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006b60:	4b21      	ldr	r3, [pc, #132]	; (8006be8 <EXTI_Init+0x144>)
 8006b62:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <EXTI_Init+0x144>)
 8006b64:	6891      	ldr	r1, [r2, #8]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6812      	ldr	r2, [r2, #0]
 8006b6a:	43d2      	mvns	r2, r2
 8006b6c:	400a      	ands	r2, r1
 8006b6e:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006b70:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <EXTI_Init+0x144>)
 8006b72:	4a1d      	ldr	r2, [pc, #116]	; (8006be8 <EXTI_Init+0x144>)
 8006b74:	68d1      	ldr	r1, [r2, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	43d2      	mvns	r2, r2
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	795b      	ldrb	r3, [r3, #5]
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	d10e      	bne.n	8006ba6 <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8006b88:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <EXTI_Init+0x144>)
 8006b8a:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <EXTI_Init+0x144>)
 8006b8c:	6891      	ldr	r1, [r2, #8]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <EXTI_Init+0x144>)
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <EXTI_Init+0x144>)
 8006b9a:	68d1      	ldr	r1, [r2, #12]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6812      	ldr	r2, [r2, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	60da      	str	r2, [r3, #12]
 8006ba4:	e01b      	b.n	8006bde <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <EXTI_Init+0x144>)
 8006ba8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	795b      	ldrb	r3, [r3, #5]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	6811      	ldr	r1, [r2, #0]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e00c      	b.n	8006bde <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	791b      	ldrb	r3, [r3, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	6811      	ldr	r1, [r2, #0]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6812      	ldr	r2, [r2, #0]
 8006bd8:	43d2      	mvns	r2, r2
 8006bda:	400a      	ands	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
  }
}
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	08008ab0 	.word	0x08008ab0
 8006be8:	40013c00 	.word	0x40013c00

08006bec <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0ddb      	lsrs	r3, r3, #23
 8006bf8:	05db      	lsls	r3, r3, #23
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <EXTI_ClearFlag+0x18>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <EXTI_ClearFlag+0x20>
 8006c04:	4804      	ldr	r0, [pc, #16]	; (8006c18 <EXTI_ClearFlag+0x2c>)
 8006c06:	21f6      	movs	r1, #246	; 0xf6
 8006c08:	f7fc f97e 	bl	8002f08 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8006c0c:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <EXTI_ClearFlag+0x30>)
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	615a      	str	r2, [r3, #20]
}
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	08008ab0 	.word	0x08008ab0
 8006c1c:	40013c00 	.word	0x40013c00

08006c20 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d055      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d052      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d04f      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d04c      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b10      	cmp	r3, #16
 8006c4c:	d049      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d046      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d043      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b80      	cmp	r3, #128	; 0x80
 8006c5e:	d040      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c66:	d03c      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d038      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c76:	d034      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7e:	d030      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	d02c      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d028      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c96:	d024      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	d020      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca6:	d01c      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cae:	d018      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cb6:	d014      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cbe:	d010      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc6:	d00c      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cce:	d008      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cd6:	d004      	beq.n	8006ce2 <EXTI_GetITStatus+0xc2>
 8006cd8:	480e      	ldr	r0, [pc, #56]	; (8006d14 <EXTI_GetITStatus+0xf4>)
 8006cda:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006cde:	f7fc f913 	bl	8002f08 <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <EXTI_GetITStatus+0xf8>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <EXTI_GetITStatus+0xf8>)
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <EXTI_GetITStatus+0xe4>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
 8006d02:	e001      	b.n	8006d08 <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	08008ab0 	.word	0x08008ab0
 8006d18:	40013c00 	.word	0x40013c00

08006d1c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4b7a      	ldr	r3, [pc, #488]	; (8006f20 <GPIO_Init+0x204>)
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d023      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4b79      	ldr	r3, [pc, #484]	; (8006f24 <GPIO_Init+0x208>)
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d01f      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4b78      	ldr	r3, [pc, #480]	; (8006f28 <GPIO_Init+0x20c>)
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d01b      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4b77      	ldr	r3, [pc, #476]	; (8006f2c <GPIO_Init+0x210>)
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d017      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4b76      	ldr	r3, [pc, #472]	; (8006f30 <GPIO_Init+0x214>)
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d013      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4b75      	ldr	r3, [pc, #468]	; (8006f34 <GPIO_Init+0x218>)
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d00f      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	4b74      	ldr	r3, [pc, #464]	; (8006f38 <GPIO_Init+0x21c>)
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d00b      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4b73      	ldr	r3, [pc, #460]	; (8006f3c <GPIO_Init+0x220>)
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d007      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	4b72      	ldr	r3, [pc, #456]	; (8006f40 <GPIO_Init+0x224>)
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d003      	beq.n	8006d82 <GPIO_Init+0x66>
 8006d7a:	4872      	ldr	r0, [pc, #456]	; (8006f44 <GPIO_Init+0x228>)
 8006d7c:	21bb      	movs	r1, #187	; 0xbb
 8006d7e:	f7fc f8c3 	bl	8002f08 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d103      	bne.n	8006d92 <GPIO_Init+0x76>
 8006d8a:	486e      	ldr	r0, [pc, #440]	; (8006f44 <GPIO_Init+0x228>)
 8006d8c:	21bc      	movs	r1, #188	; 0xbc
 8006d8e:	f7fc f8bb 	bl	8002f08 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	791b      	ldrb	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00f      	beq.n	8006dba <GPIO_Init+0x9e>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	791b      	ldrb	r3, [r3, #4]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d00b      	beq.n	8006dba <GPIO_Init+0x9e>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	791b      	ldrb	r3, [r3, #4]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d007      	beq.n	8006dba <GPIO_Init+0x9e>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	791b      	ldrb	r3, [r3, #4]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d003      	beq.n	8006dba <GPIO_Init+0x9e>
 8006db2:	4864      	ldr	r0, [pc, #400]	; (8006f44 <GPIO_Init+0x228>)
 8006db4:	21bd      	movs	r1, #189	; 0xbd
 8006db6:	f7fc f8a7 	bl	8002f08 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	79db      	ldrb	r3, [r3, #7]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <GPIO_Init+0xbe>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	79db      	ldrb	r3, [r3, #7]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d007      	beq.n	8006dda <GPIO_Init+0xbe>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	79db      	ldrb	r3, [r3, #7]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d003      	beq.n	8006dda <GPIO_Init+0xbe>
 8006dd2:	485c      	ldr	r0, [pc, #368]	; (8006f44 <GPIO_Init+0x228>)
 8006dd4:	21be      	movs	r1, #190	; 0xbe
 8006dd6:	f7fc f897 	bl	8002f08 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e097      	b.n	8006f10 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2201      	movs	r2, #1
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	4013      	ands	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	f040 8086 	bne.w	8006f0a <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	2103      	movs	r1, #3
 8006e08:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	401a      	ands	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	791b      	ldrb	r3, [r3, #4]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	791b      	ldrb	r3, [r3, #4]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d003      	beq.n	8006e3c <GPIO_Init+0x120>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	791b      	ldrb	r3, [r3, #4]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d14e      	bne.n	8006eda <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	795b      	ldrb	r3, [r3, #5]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00f      	beq.n	8006e64 <GPIO_Init+0x148>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	795b      	ldrb	r3, [r3, #5]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d00b      	beq.n	8006e64 <GPIO_Init+0x148>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	795b      	ldrb	r3, [r3, #5]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d007      	beq.n	8006e64 <GPIO_Init+0x148>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	795b      	ldrb	r3, [r3, #5]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d003      	beq.n	8006e64 <GPIO_Init+0x148>
 8006e5c:	4839      	ldr	r0, [pc, #228]	; (8006f44 <GPIO_Init+0x228>)
 8006e5e:	21d0      	movs	r1, #208	; 0xd0
 8006e60:	f7fc f852 	bl	8002f08 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	2103      	movs	r1, #3
 8006e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e72:	43db      	mvns	r3, r3
 8006e74:	401a      	ands	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	795b      	ldrb	r3, [r3, #5]
 8006e82:	4619      	mov	r1, r3
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	799b      	ldrb	r3, [r3, #6]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <GPIO_Init+0x18e>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	799b      	ldrb	r3, [r3, #6]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d003      	beq.n	8006eaa <GPIO_Init+0x18e>
 8006ea2:	4828      	ldr	r0, [pc, #160]	; (8006f44 <GPIO_Init+0x228>)
 8006ea4:	21d7      	movs	r1, #215	; 0xd7
 8006ea6:	f7fc f82f 	bl	8002f08 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	401a      	ands	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	799b      	ldrb	r3, [r3, #6]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	2103      	movs	r1, #3
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	401a      	ands	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	79db      	ldrb	r3, [r3, #7]
 8006efa:	4619      	mov	r1, r3
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	fa01 f303 	lsl.w	r3, r1, r3
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b0f      	cmp	r3, #15
 8006f14:	f67f af64 	bls.w	8006de0 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40020000 	.word	0x40020000
 8006f24:	40020400 	.word	0x40020400
 8006f28:	40020800 	.word	0x40020800
 8006f2c:	40020c00 	.word	0x40020c00
 8006f30:	40021000 	.word	0x40021000
 8006f34:	40021400 	.word	0x40021400
 8006f38:	40021800 	.word	0x40021800
 8006f3c:	40021c00 	.word	0x40021c00
 8006f40:	40022000 	.word	0x40022000
 8006f44:	08008b00 	.word	0x08008b00

08006f48 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	460a      	mov	r2, r1
 8006f54:	807a      	strh	r2, [r7, #2]
 8006f56:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4b83      	ldr	r3, [pc, #524]	; (8007170 <GPIO_PinAFConfig+0x228>)
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d024      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	4b82      	ldr	r3, [pc, #520]	; (8007174 <GPIO_PinAFConfig+0x22c>)
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d020      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4b81      	ldr	r3, [pc, #516]	; (8007178 <GPIO_PinAFConfig+0x230>)
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d01c      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	4b80      	ldr	r3, [pc, #512]	; (800717c <GPIO_PinAFConfig+0x234>)
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d018      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4b7f      	ldr	r3, [pc, #508]	; (8007180 <GPIO_PinAFConfig+0x238>)
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d014      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4b7e      	ldr	r3, [pc, #504]	; (8007184 <GPIO_PinAFConfig+0x23c>)
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d010      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	4b7d      	ldr	r3, [pc, #500]	; (8007188 <GPIO_PinAFConfig+0x240>)
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d00c      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	4b7c      	ldr	r3, [pc, #496]	; (800718c <GPIO_PinAFConfig+0x244>)
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d008      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4b7b      	ldr	r3, [pc, #492]	; (8007190 <GPIO_PinAFConfig+0x248>)
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d004      	beq.n	8006fb2 <GPIO_PinAFConfig+0x6a>
 8006fa8:	487a      	ldr	r0, [pc, #488]	; (8007194 <GPIO_PinAFConfig+0x24c>)
 8006faa:	f240 2117 	movw	r1, #535	; 0x217
 8006fae:	f7fb ffab 	bl	8002f08 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8006fb2:	887b      	ldrh	r3, [r7, #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d031      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fb8:	887b      	ldrh	r3, [r7, #2]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d02e      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fbe:	887b      	ldrh	r3, [r7, #2]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d02b      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fc4:	887b      	ldrh	r3, [r7, #2]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d028      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fca:	887b      	ldrh	r3, [r7, #2]
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d025      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fd0:	887b      	ldrh	r3, [r7, #2]
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d022      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fd6:	887b      	ldrh	r3, [r7, #2]
 8006fd8:	2b06      	cmp	r3, #6
 8006fda:	d01f      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fdc:	887b      	ldrh	r3, [r7, #2]
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	d01c      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fe2:	887b      	ldrh	r3, [r7, #2]
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d019      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fe8:	887b      	ldrh	r3, [r7, #2]
 8006fea:	2b09      	cmp	r3, #9
 8006fec:	d016      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006fee:	887b      	ldrh	r3, [r7, #2]
 8006ff0:	2b0a      	cmp	r3, #10
 8006ff2:	d013      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006ff4:	887b      	ldrh	r3, [r7, #2]
 8006ff6:	2b0b      	cmp	r3, #11
 8006ff8:	d010      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8006ffa:	887b      	ldrh	r3, [r7, #2]
 8006ffc:	2b0c      	cmp	r3, #12
 8006ffe:	d00d      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8007000:	887b      	ldrh	r3, [r7, #2]
 8007002:	2b0d      	cmp	r3, #13
 8007004:	d00a      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8007006:	887b      	ldrh	r3, [r7, #2]
 8007008:	2b0e      	cmp	r3, #14
 800700a:	d007      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 800700c:	887b      	ldrh	r3, [r7, #2]
 800700e:	2b0f      	cmp	r3, #15
 8007010:	d004      	beq.n	800701c <GPIO_PinAFConfig+0xd4>
 8007012:	4860      	ldr	r0, [pc, #384]	; (8007194 <GPIO_PinAFConfig+0x24c>)
 8007014:	f44f 7106 	mov.w	r1, #536	; 0x218
 8007018:	f7fb ff76 	bl	8002f08 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 800701c:	787b      	ldrb	r3, [r7, #1]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d06d      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007022:	787b      	ldrb	r3, [r7, #1]
 8007024:	2b09      	cmp	r3, #9
 8007026:	d06a      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007028:	787b      	ldrb	r3, [r7, #1]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d067      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800702e:	787b      	ldrb	r3, [r7, #1]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d064      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007034:	787b      	ldrb	r3, [r7, #1]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d061      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800703a:	787b      	ldrb	r3, [r7, #1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d05e      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007040:	787b      	ldrb	r3, [r7, #1]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d05b      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007046:	787b      	ldrb	r3, [r7, #1]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d058      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800704c:	787b      	ldrb	r3, [r7, #1]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d055      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007052:	787b      	ldrb	r3, [r7, #1]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d052      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007058:	787b      	ldrb	r3, [r7, #1]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d04f      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800705e:	787b      	ldrb	r3, [r7, #1]
 8007060:	2b03      	cmp	r3, #3
 8007062:	d04c      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007064:	787b      	ldrb	r3, [r7, #1]
 8007066:	2b04      	cmp	r3, #4
 8007068:	d049      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800706a:	787b      	ldrb	r3, [r7, #1]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d046      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007070:	787b      	ldrb	r3, [r7, #1]
 8007072:	2b04      	cmp	r3, #4
 8007074:	d043      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007076:	787b      	ldrb	r3, [r7, #1]
 8007078:	2b05      	cmp	r3, #5
 800707a:	d040      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800707c:	787b      	ldrb	r3, [r7, #1]
 800707e:	2b05      	cmp	r3, #5
 8007080:	d03d      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007082:	787b      	ldrb	r3, [r7, #1]
 8007084:	2b09      	cmp	r3, #9
 8007086:	d03a      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007088:	787b      	ldrb	r3, [r7, #1]
 800708a:	2b06      	cmp	r3, #6
 800708c:	d037      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800708e:	787b      	ldrb	r3, [r7, #1]
 8007090:	2b09      	cmp	r3, #9
 8007092:	d034      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 8007094:	787b      	ldrb	r3, [r7, #1]
 8007096:	2b07      	cmp	r3, #7
 8007098:	d031      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 800709a:	787b      	ldrb	r3, [r7, #1]
 800709c:	2b07      	cmp	r3, #7
 800709e:	d02e      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070a0:	787b      	ldrb	r3, [r7, #1]
 80070a2:	2b07      	cmp	r3, #7
 80070a4:	d02b      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070a6:	787b      	ldrb	r3, [r7, #1]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d028      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070ac:	787b      	ldrb	r3, [r7, #1]
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d025      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070b2:	787b      	ldrb	r3, [r7, #1]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d022      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070b8:	787b      	ldrb	r3, [r7, #1]
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	d01f      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070be:	787b      	ldrb	r3, [r7, #1]
 80070c0:	2b09      	cmp	r3, #9
 80070c2:	d01c      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070c4:	787b      	ldrb	r3, [r7, #1]
 80070c6:	2b0a      	cmp	r3, #10
 80070c8:	d019      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070ca:	787b      	ldrb	r3, [r7, #1]
 80070cc:	2b0a      	cmp	r3, #10
 80070ce:	d016      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070d0:	787b      	ldrb	r3, [r7, #1]
 80070d2:	2b0b      	cmp	r3, #11
 80070d4:	d013      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070d6:	787b      	ldrb	r3, [r7, #1]
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d010      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070dc:	787b      	ldrb	r3, [r7, #1]
 80070de:	2b0c      	cmp	r3, #12
 80070e0:	d00d      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070e2:	787b      	ldrb	r3, [r7, #1]
 80070e4:	2b0c      	cmp	r3, #12
 80070e6:	d00a      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070e8:	787b      	ldrb	r3, [r7, #1]
 80070ea:	2b0d      	cmp	r3, #13
 80070ec:	d007      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070ee:	787b      	ldrb	r3, [r7, #1]
 80070f0:	2b0f      	cmp	r3, #15
 80070f2:	d004      	beq.n	80070fe <GPIO_PinAFConfig+0x1b6>
 80070f4:	4827      	ldr	r0, [pc, #156]	; (8007194 <GPIO_PinAFConfig+0x24c>)
 80070f6:	f240 2119 	movw	r1, #537	; 0x219
 80070fa:	f7fb ff05 	bl	8002f08 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80070fe:	787a      	ldrb	r2, [r7, #1]
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800710e:	887b      	ldrh	r3, [r7, #2]
 8007110:	08db      	lsrs	r3, r3, #3
 8007112:	b29b      	uxth	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	b29b      	uxth	r3, r3
 800711c:	4619      	mov	r1, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3108      	adds	r1, #8
 8007122:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007126:	887b      	ldrh	r3, [r7, #2]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	200f      	movs	r0, #15
 8007130:	fa00 f303 	lsl.w	r3, r0, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	4019      	ands	r1, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3208      	adds	r2, #8
 800713c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8007140:	887b      	ldrh	r3, [r7, #2]
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	b29b      	uxth	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3208      	adds	r2, #8
 800714c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8007156:	887b      	ldrh	r3, [r7, #2]
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3208      	adds	r2, #8
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40020000 	.word	0x40020000
 8007174:	40020400 	.word	0x40020400
 8007178:	40020800 	.word	0x40020800
 800717c:	40020c00 	.word	0x40020c00
 8007180:	40021000 	.word	0x40021000
 8007184:	40021400 	.word	0x40021400
 8007188:	40021800 	.word	0x40021800
 800718c:	40021c00 	.word	0x40021c00
 8007190:	40022000 	.word	0x40022000
 8007194:	08008b00 	.word	0x08008b00

08007198 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8007198:	b480      	push	{r7}
 800719a:	b089      	sub	sp, #36	; 0x24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	2302      	movs	r3, #2
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	2302      	movs	r3, #2
 80071b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80071b8:	4b48      	ldr	r3, [pc, #288]	; (80072dc <RCC_GetClocksFreq+0x144>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 030c 	and.w	r3, r3, #12
 80071c0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d007      	beq.n	80071d8 <RCC_GetClocksFreq+0x40>
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d009      	beq.n	80071e0 <RCC_GetClocksFreq+0x48>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d13f      	bne.n	8007250 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a43      	ldr	r2, [pc, #268]	; (80072e0 <RCC_GetClocksFreq+0x148>)
 80071d4:	601a      	str	r2, [r3, #0]
      break;
 80071d6:	e03f      	b.n	8007258 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a42      	ldr	r2, [pc, #264]	; (80072e4 <RCC_GetClocksFreq+0x14c>)
 80071dc:	601a      	str	r2, [r3, #0]
      break;
 80071de:	e03b      	b.n	8007258 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80071e0:	4b3e      	ldr	r3, [pc, #248]	; (80072dc <RCC_GetClocksFreq+0x144>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e8:	0d9b      	lsrs	r3, r3, #22
 80071ea:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071ec:	4b3b      	ldr	r3, [pc, #236]	; (80072dc <RCC_GetClocksFreq+0x144>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00d      	beq.n	8007218 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80071fc:	4a39      	ldr	r2, [pc, #228]	; (80072e4 <RCC_GetClocksFreq+0x14c>)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	fbb2 f2f3 	udiv	r2, r2, r3
 8007204:	4b35      	ldr	r3, [pc, #212]	; (80072dc <RCC_GetClocksFreq+0x144>)
 8007206:	6859      	ldr	r1, [r3, #4]
 8007208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800720c:	400b      	ands	r3, r1
 800720e:	099b      	lsrs	r3, r3, #6
 8007210:	fb03 f302 	mul.w	r3, r3, r2
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e00c      	b.n	8007232 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007218:	4a31      	ldr	r2, [pc, #196]	; (80072e0 <RCC_GetClocksFreq+0x148>)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007220:	4b2e      	ldr	r3, [pc, #184]	; (80072dc <RCC_GetClocksFreq+0x144>)
 8007222:	6859      	ldr	r1, [r3, #4]
 8007224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007228:	400b      	ands	r3, r1
 800722a:	099b      	lsrs	r3, r3, #6
 800722c:	fb03 f302 	mul.w	r3, r3, r2
 8007230:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007232:	4b2a      	ldr	r3, [pc, #168]	; (80072dc <RCC_GetClocksFreq+0x144>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	3301      	adds	r3, #1
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	fbb2 f2f3 	udiv	r2, r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	601a      	str	r2, [r3, #0]
      break;
 800724e:	e003      	b.n	8007258 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <RCC_GetClocksFreq+0x148>)
 8007254:	601a      	str	r2, [r3, #0]
      break;
 8007256:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8007258:	4b20      	ldr	r3, [pc, #128]	; (80072dc <RCC_GetClocksFreq+0x144>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007260:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8007268:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <RCC_GetClocksFreq+0x150>)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	4413      	add	r3, r2
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	40da      	lsrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8007280:	4b16      	ldr	r3, [pc, #88]	; (80072dc <RCC_GetClocksFreq+0x144>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007288:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	0a9b      	lsrs	r3, r3, #10
 800728e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8007290:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <RCC_GetClocksFreq+0x150>)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	4413      	add	r3, r2
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	40da      	lsrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <RCC_GetClocksFreq+0x144>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80072b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	0b5b      	lsrs	r3, r3, #13
 80072b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80072b8:	4a0b      	ldr	r2, [pc, #44]	; (80072e8 <RCC_GetClocksFreq+0x150>)
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	4413      	add	r3, r2
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	40da      	lsrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
}
 80072d0:	3724      	adds	r7, #36	; 0x24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40023800 	.word	0x40023800
 80072e0:	00f42400 	.word	0x00f42400
 80072e4:	017d7840 	.word	0x017d7840
 80072e8:	20000020 	.word	0x20000020

080072ec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <RCC_AHB1PeriphClockCmd+0x64>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d102      	bne.n	8007308 <RCC_AHB1PeriphClockCmd+0x1c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <RCC_AHB1PeriphClockCmd+0x26>
 8007308:	4812      	ldr	r0, [pc, #72]	; (8007354 <RCC_AHB1PeriphClockCmd+0x68>)
 800730a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800730e:	f7fb fdfb 	bl	8002f08 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <RCC_AHB1PeriphClockCmd+0x3c>
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d004      	beq.n	8007328 <RCC_AHB1PeriphClockCmd+0x3c>
 800731e:	480d      	ldr	r0, [pc, #52]	; (8007354 <RCC_AHB1PeriphClockCmd+0x68>)
 8007320:	f240 4142 	movw	r1, #1090	; 0x442
 8007324:	f7fb fdf0 	bl	8002f08 <assert_failed>
  if (NewState != DISABLE)
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d006      	beq.n	800733c <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800732e:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <RCC_AHB1PeriphClockCmd+0x6c>)
 8007330:	4a09      	ldr	r2, [pc, #36]	; (8007358 <RCC_AHB1PeriphClockCmd+0x6c>)
 8007332:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	430a      	orrs	r2, r1
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
 800733a:	e006      	b.n	800734a <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <RCC_AHB1PeriphClockCmd+0x6c>)
 800733e:	4a06      	ldr	r2, [pc, #24]	; (8007358 <RCC_AHB1PeriphClockCmd+0x6c>)
 8007340:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	43d2      	mvns	r2, r2
 8007346:	400a      	ands	r2, r1
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	818bee00 	.word	0x818bee00
 8007354:	08008b50 	.word	0x08008b50
 8007358:	40023800 	.word	0x40023800

0800735c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4b15      	ldr	r3, [pc, #84]	; (80073c0 <RCC_APB2PeriphClockCmd+0x64>)
 800736c:	4013      	ands	r3, r2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <RCC_APB2PeriphClockCmd+0x1c>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <RCC_APB2PeriphClockCmd+0x26>
 8007378:	4812      	ldr	r0, [pc, #72]	; (80073c4 <RCC_APB2PeriphClockCmd+0x68>)
 800737a:	f240 41d5 	movw	r1, #1237	; 0x4d5
 800737e:	f7fb fdc3 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d007      	beq.n	8007398 <RCC_APB2PeriphClockCmd+0x3c>
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d004      	beq.n	8007398 <RCC_APB2PeriphClockCmd+0x3c>
 800738e:	480d      	ldr	r0, [pc, #52]	; (80073c4 <RCC_APB2PeriphClockCmd+0x68>)
 8007390:	f240 41d6 	movw	r1, #1238	; 0x4d6
 8007394:	f7fb fdb8 	bl	8002f08 <assert_failed>

  if (NewState != DISABLE)
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800739e:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <RCC_APB2PeriphClockCmd+0x6c>)
 80073a0:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <RCC_APB2PeriphClockCmd+0x6c>)
 80073a2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44
 80073aa:	e006      	b.n	80073ba <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <RCC_APB2PeriphClockCmd+0x6c>)
 80073ae:	4a06      	ldr	r2, [pc, #24]	; (80073c8 <RCC_APB2PeriphClockCmd+0x6c>)
 80073b0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	43d2      	mvns	r2, r2
 80073b6:	400a      	ands	r2, r1
 80073b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	fff8a0cc 	.word	0xfff8a0cc
 80073c4:	08008b50 	.word	0x08008b50
 80073c8:	40023800 	.word	0x40023800

080073cc <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4b70      	ldr	r3, [pc, #448]	; (80075a0 <SPI_Init+0x1d4>)
 80073de:	429a      	cmp	r2, r3
 80073e0:	d00c      	beq.n	80073fc <SPI_Init+0x30>
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4b6f      	ldr	r3, [pc, #444]	; (80075a4 <SPI_Init+0x1d8>)
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d008      	beq.n	80073fc <SPI_Init+0x30>
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	4b6e      	ldr	r3, [pc, #440]	; (80075a8 <SPI_Init+0x1dc>)
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d004      	beq.n	80073fc <SPI_Init+0x30>
 80073f2:	486e      	ldr	r0, [pc, #440]	; (80075ac <SPI_Init+0x1e0>)
 80073f4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80073f8:	f7fb fd86 	bl	8002f08 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d013      	beq.n	800742c <SPI_Init+0x60>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740c:	d00e      	beq.n	800742c <SPI_Init+0x60>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007416:	d009      	beq.n	800742c <SPI_Init+0x60>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007420:	d004      	beq.n	800742c <SPI_Init+0x60>
 8007422:	4862      	ldr	r0, [pc, #392]	; (80075ac <SPI_Init+0x1e0>)
 8007424:	f240 1109 	movw	r1, #265	; 0x109
 8007428:	f7fb fd6e 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	885b      	ldrh	r3, [r3, #2]
 8007430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007434:	d008      	beq.n	8007448 <SPI_Init+0x7c>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	885b      	ldrh	r3, [r3, #2]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <SPI_Init+0x7c>
 800743e:	485b      	ldr	r0, [pc, #364]	; (80075ac <SPI_Init+0x1e0>)
 8007440:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007444:	f7fb fd60 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	889b      	ldrh	r3, [r3, #4]
 800744c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007450:	d008      	beq.n	8007464 <SPI_Init+0x98>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	889b      	ldrh	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <SPI_Init+0x98>
 800745a:	4854      	ldr	r0, [pc, #336]	; (80075ac <SPI_Init+0x1e0>)
 800745c:	f240 110b 	movw	r1, #267	; 0x10b
 8007460:	f7fb fd52 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	88db      	ldrh	r3, [r3, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <SPI_Init+0xb2>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	88db      	ldrh	r3, [r3, #6]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d004      	beq.n	800747e <SPI_Init+0xb2>
 8007474:	484d      	ldr	r0, [pc, #308]	; (80075ac <SPI_Init+0x1e0>)
 8007476:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800747a:	f7fb fd45 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	891b      	ldrh	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d008      	beq.n	8007498 <SPI_Init+0xcc>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	891b      	ldrh	r3, [r3, #8]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d004      	beq.n	8007498 <SPI_Init+0xcc>
 800748e:	4847      	ldr	r0, [pc, #284]	; (80075ac <SPI_Init+0x1e0>)
 8007490:	f240 110d 	movw	r1, #269	; 0x10d
 8007494:	f7fb fd38 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	895b      	ldrh	r3, [r3, #10]
 800749c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a0:	d008      	beq.n	80074b4 <SPI_Init+0xe8>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	895b      	ldrh	r3, [r3, #10]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <SPI_Init+0xe8>
 80074aa:	4840      	ldr	r0, [pc, #256]	; (80075ac <SPI_Init+0x1e0>)
 80074ac:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80074b0:	f7fb fd2a 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	899b      	ldrh	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d020      	beq.n	80074fe <SPI_Init+0x132>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	899b      	ldrh	r3, [r3, #12]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d01c      	beq.n	80074fe <SPI_Init+0x132>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	899b      	ldrh	r3, [r3, #12]
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d018      	beq.n	80074fe <SPI_Init+0x132>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	899b      	ldrh	r3, [r3, #12]
 80074d0:	2b18      	cmp	r3, #24
 80074d2:	d014      	beq.n	80074fe <SPI_Init+0x132>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	899b      	ldrh	r3, [r3, #12]
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d010      	beq.n	80074fe <SPI_Init+0x132>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	899b      	ldrh	r3, [r3, #12]
 80074e0:	2b28      	cmp	r3, #40	; 0x28
 80074e2:	d00c      	beq.n	80074fe <SPI_Init+0x132>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	899b      	ldrh	r3, [r3, #12]
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d008      	beq.n	80074fe <SPI_Init+0x132>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	899b      	ldrh	r3, [r3, #12]
 80074f0:	2b38      	cmp	r3, #56	; 0x38
 80074f2:	d004      	beq.n	80074fe <SPI_Init+0x132>
 80074f4:	482d      	ldr	r0, [pc, #180]	; (80075ac <SPI_Init+0x1e0>)
 80074f6:	f240 110f 	movw	r1, #271	; 0x10f
 80074fa:	f7fb fd05 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	89db      	ldrh	r3, [r3, #14]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <SPI_Init+0x14c>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	89db      	ldrh	r3, [r3, #14]
 800750a:	2b80      	cmp	r3, #128	; 0x80
 800750c:	d004      	beq.n	8007518 <SPI_Init+0x14c>
 800750e:	4827      	ldr	r0, [pc, #156]	; (80075ac <SPI_Init+0x1e0>)
 8007510:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007514:	f7fb fcf8 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	8a1b      	ldrh	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <SPI_Init+0x15e>
 8007520:	4822      	ldr	r0, [pc, #136]	; (80075ac <SPI_Init+0x1e0>)
 8007522:	f240 1111 	movw	r1, #273	; 0x111
 8007526:	f7fb fcef 	bl	8002f08 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8007530:	89fb      	ldrh	r3, [r7, #14]
 8007532:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8007536:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	881a      	ldrh	r2, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	885b      	ldrh	r3, [r3, #2]
 8007540:	4313      	orrs	r3, r2
 8007542:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007548:	4313      	orrs	r3, r2
 800754a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007550:	4313      	orrs	r3, r2
 8007552:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007558:	4313      	orrs	r3, r2
 800755a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007560:	4313      	orrs	r3, r2
 8007562:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007568:	4313      	orrs	r3, r2
 800756a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007570:	4313      	orrs	r3, r2
 8007572:	b29a      	uxth	r2, r3
 8007574:	89fb      	ldrh	r3, [r7, #14]
 8007576:	4313      	orrs	r3, r2
 8007578:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	89fa      	ldrh	r2, [r7, #14]
 800757e:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8b9b      	ldrh	r3, [r3, #28]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	8a1a      	ldrh	r2, [r3, #16]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	821a      	strh	r2, [r3, #16]
}
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40013000 	.word	0x40013000
 80075a4:	40003800 	.word	0x40003800
 80075a8:	40003c00 	.word	0x40003c00
 80075ac:	08008ba0 	.word	0x08008ba0

080075b0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <SPI_Cmd+0x74>)
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d00c      	beq.n	80075de <SPI_Cmd+0x2e>
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4b18      	ldr	r3, [pc, #96]	; (8007628 <SPI_Cmd+0x78>)
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d008      	beq.n	80075de <SPI_Cmd+0x2e>
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4b17      	ldr	r3, [pc, #92]	; (800762c <SPI_Cmd+0x7c>)
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d004      	beq.n	80075de <SPI_Cmd+0x2e>
 80075d4:	4816      	ldr	r0, [pc, #88]	; (8007630 <SPI_Cmd+0x80>)
 80075d6:	f240 2101 	movw	r1, #513	; 0x201
 80075da:	f7fb fc95 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <SPI_Cmd+0x44>
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d004      	beq.n	80075f4 <SPI_Cmd+0x44>
 80075ea:	4811      	ldr	r0, [pc, #68]	; (8007630 <SPI_Cmd+0x80>)
 80075ec:	f240 2102 	movw	r1, #514	; 0x202
 80075f0:	f7fb fc8a 	bl	8002f08 <assert_failed>
  if (NewState != DISABLE)
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d008      	beq.n	800760c <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007604:	b29a      	uxth	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	e007      	b.n	800761c <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007616:	b29a      	uxth	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	801a      	strh	r2, [r3, #0]
  }
}
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40013000 	.word	0x40013000
 8007628:	40003800 	.word	0x40003800
 800762c:	40003c00 	.word	0x40003c00
 8007630:	08008ba0 	.word	0x08008ba0

08007634 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	460a      	mov	r2, r1
 8007640:	807a      	strh	r2, [r7, #2]
 8007642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4b25      	ldr	r3, [pc, #148]	; (80076dc <SPI_I2S_DMACmd+0xa8>)
 8007648:	429a      	cmp	r2, r3
 800764a:	d014      	beq.n	8007676 <SPI_I2S_DMACmd+0x42>
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	4b24      	ldr	r3, [pc, #144]	; (80076e0 <SPI_I2S_DMACmd+0xac>)
 8007650:	429a      	cmp	r2, r3
 8007652:	d010      	beq.n	8007676 <SPI_I2S_DMACmd+0x42>
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <SPI_I2S_DMACmd+0xb0>)
 8007658:	429a      	cmp	r2, r3
 800765a:	d00c      	beq.n	8007676 <SPI_I2S_DMACmd+0x42>
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	4b22      	ldr	r3, [pc, #136]	; (80076e8 <SPI_I2S_DMACmd+0xb4>)
 8007660:	429a      	cmp	r2, r3
 8007662:	d008      	beq.n	8007676 <SPI_I2S_DMACmd+0x42>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800766a:	d004      	beq.n	8007676 <SPI_I2S_DMACmd+0x42>
 800766c:	481f      	ldr	r0, [pc, #124]	; (80076ec <SPI_I2S_DMACmd+0xb8>)
 800766e:	f240 31d9 	movw	r1, #985	; 0x3d9
 8007672:	f7fb fc49 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007676:	787b      	ldrb	r3, [r7, #1]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <SPI_I2S_DMACmd+0x58>
 800767c:	787b      	ldrb	r3, [r7, #1]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d004      	beq.n	800768c <SPI_I2S_DMACmd+0x58>
 8007682:	481a      	ldr	r0, [pc, #104]	; (80076ec <SPI_I2S_DMACmd+0xb8>)
 8007684:	f240 31da 	movw	r1, #986	; 0x3da
 8007688:	f7fb fc3e 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 800768c:	887a      	ldrh	r2, [r7, #2]
 800768e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007692:	4013      	ands	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <SPI_I2S_DMACmd+0x6a>
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <SPI_I2S_DMACmd+0x74>
 800769e:	4813      	ldr	r0, [pc, #76]	; (80076ec <SPI_I2S_DMACmd+0xb8>)
 80076a0:	f240 31db 	movw	r1, #987	; 0x3db
 80076a4:	f7fb fc30 	bl	8002f08 <assert_failed>

  if (NewState != DISABLE)
 80076a8:	787b      	ldrb	r3, [r7, #1]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	889b      	ldrh	r3, [r3, #4]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	887b      	ldrh	r3, [r7, #2]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	809a      	strh	r2, [r3, #4]
 80076be:	e009      	b.n	80076d4 <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	889b      	ldrh	r3, [r3, #4]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	887b      	ldrh	r3, [r7, #2]
 80076c8:	43db      	mvns	r3, r3
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	4013      	ands	r3, r2
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	809a      	strh	r2, [r3, #4]
  }
}
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40013000 	.word	0x40013000
 80076e0:	40003800 	.word	0x40003800
 80076e4:	40003c00 	.word	0x40003c00
 80076e8:	40003400 	.word	0x40003400
 80076ec:	08008ba0 	.word	0x08008ba0

080076f0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	4b25      	ldr	r3, [pc, #148]	; (8007798 <SPI_I2S_GetFlagStatus+0xa8>)
 8007704:	429a      	cmp	r2, r3
 8007706:	d014      	beq.n	8007732 <SPI_I2S_GetFlagStatus+0x42>
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4b24      	ldr	r3, [pc, #144]	; (800779c <SPI_I2S_GetFlagStatus+0xac>)
 800770c:	429a      	cmp	r2, r3
 800770e:	d010      	beq.n	8007732 <SPI_I2S_GetFlagStatus+0x42>
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	4b23      	ldr	r3, [pc, #140]	; (80077a0 <SPI_I2S_GetFlagStatus+0xb0>)
 8007714:	429a      	cmp	r2, r3
 8007716:	d00c      	beq.n	8007732 <SPI_I2S_GetFlagStatus+0x42>
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	4b22      	ldr	r3, [pc, #136]	; (80077a4 <SPI_I2S_GetFlagStatus+0xb4>)
 800771c:	429a      	cmp	r2, r3
 800771e:	d008      	beq.n	8007732 <SPI_I2S_GetFlagStatus+0x42>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8007726:	d004      	beq.n	8007732 <SPI_I2S_GetFlagStatus+0x42>
 8007728:	481f      	ldr	r0, [pc, #124]	; (80077a8 <SPI_I2S_GetFlagStatus+0xb8>)
 800772a:	f240 4173 	movw	r1, #1139	; 0x473
 800772e:	f7fb fbeb 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 8007732:	887b      	ldrh	r3, [r7, #2]
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d01d      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 8007738:	887b      	ldrh	r3, [r7, #2]
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d01a      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	2b20      	cmp	r3, #32
 8007742:	d017      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 8007744:	887b      	ldrh	r3, [r7, #2]
 8007746:	2b10      	cmp	r3, #16
 8007748:	d014      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 800774a:	887b      	ldrh	r3, [r7, #2]
 800774c:	2b08      	cmp	r3, #8
 800774e:	d011      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 8007750:	887b      	ldrh	r3, [r7, #2]
 8007752:	2b04      	cmp	r3, #4
 8007754:	d00e      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 8007756:	887b      	ldrh	r3, [r7, #2]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d00b      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 800775c:	887b      	ldrh	r3, [r7, #2]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d008      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 8007762:	887b      	ldrh	r3, [r7, #2]
 8007764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007768:	d004      	beq.n	8007774 <SPI_I2S_GetFlagStatus+0x84>
 800776a:	480f      	ldr	r0, [pc, #60]	; (80077a8 <SPI_I2S_GetFlagStatus+0xb8>)
 800776c:	f240 4174 	movw	r1, #1140	; 0x474
 8007770:	f7fb fbca 	bl	8002f08 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	891b      	ldrh	r3, [r3, #8]
 8007778:	b29a      	uxth	r2, r3
 800777a:	887b      	ldrh	r3, [r7, #2]
 800777c:	4013      	ands	r3, r2
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
 8007788:	e001      	b.n	800778e <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	40013000 	.word	0x40013000
 800779c:	40003800 	.word	0x40003800
 80077a0:	40003c00 	.word	0x40003c00
 80077a4:	40003400 	.word	0x40003400
 80077a8:	08008ba0 	.word	0x08008ba0

080077ac <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4b14      	ldr	r3, [pc, #80]	; (800780c <SPI_I2S_ClearFlag+0x60>)
 80077bc:	429a      	cmp	r2, r3
 80077be:	d014      	beq.n	80077ea <SPI_I2S_ClearFlag+0x3e>
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <SPI_I2S_ClearFlag+0x64>)
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d010      	beq.n	80077ea <SPI_I2S_ClearFlag+0x3e>
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4b12      	ldr	r3, [pc, #72]	; (8007814 <SPI_I2S_ClearFlag+0x68>)
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d00c      	beq.n	80077ea <SPI_I2S_ClearFlag+0x3e>
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <SPI_I2S_ClearFlag+0x6c>)
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d008      	beq.n	80077ea <SPI_I2S_ClearFlag+0x3e>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80077de:	d004      	beq.n	80077ea <SPI_I2S_ClearFlag+0x3e>
 80077e0:	480e      	ldr	r0, [pc, #56]	; (800781c <SPI_I2S_ClearFlag+0x70>)
 80077e2:	f240 419b 	movw	r1, #1179	; 0x49b
 80077e6:	f7fb fb8f 	bl	8002f08 <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d004      	beq.n	80077fa <SPI_I2S_ClearFlag+0x4e>
 80077f0:	480a      	ldr	r0, [pc, #40]	; (800781c <SPI_I2S_ClearFlag+0x70>)
 80077f2:	f240 419c 	movw	r1, #1180	; 0x49c
 80077f6:	f7fb fb87 	bl	8002f08 <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80077fa:	887b      	ldrh	r3, [r7, #2]
 80077fc:	43db      	mvns	r3, r3
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	811a      	strh	r2, [r3, #8]
}
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40013000 	.word	0x40013000
 8007810:	40003800 	.word	0x40003800
 8007814:	40003c00 	.word	0x40003c00
 8007818:	40003400 	.word	0x40003400
 800781c:	08008ba0 	.word	0x08008ba0

08007820 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	71fa      	strb	r2, [r7, #7]
 800782c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 8007832:	79fb      	ldrb	r3, [r7, #7]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01b      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d018      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d015      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	2b03      	cmp	r3, #3
 8007848:	d012      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	2b04      	cmp	r3, #4
 800784e:	d00f      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	2b05      	cmp	r3, #5
 8007854:	d00c      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	2b06      	cmp	r3, #6
 800785a:	d009      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b07      	cmp	r3, #7
 8007860:	d006      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d003      	beq.n	8007870 <SYSCFG_EXTILineConfig+0x50>
 8007868:	4834      	ldr	r0, [pc, #208]	; (800793c <SYSCFG_EXTILineConfig+0x11c>)
 800786a:	217c      	movs	r1, #124	; 0x7c
 800786c:	f7fb fb4c 	bl	8002f08 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8007870:	79bb      	ldrb	r3, [r7, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d030      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 8007876:	79bb      	ldrb	r3, [r7, #6]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d02d      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 800787c:	79bb      	ldrb	r3, [r7, #6]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d02a      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 8007882:	79bb      	ldrb	r3, [r7, #6]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d027      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 8007888:	79bb      	ldrb	r3, [r7, #6]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d024      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 800788e:	79bb      	ldrb	r3, [r7, #6]
 8007890:	2b05      	cmp	r3, #5
 8007892:	d021      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 8007894:	79bb      	ldrb	r3, [r7, #6]
 8007896:	2b06      	cmp	r3, #6
 8007898:	d01e      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 800789a:	79bb      	ldrb	r3, [r7, #6]
 800789c:	2b07      	cmp	r3, #7
 800789e:	d01b      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078a0:	79bb      	ldrb	r3, [r7, #6]
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d018      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078a6:	79bb      	ldrb	r3, [r7, #6]
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d015      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078ac:	79bb      	ldrb	r3, [r7, #6]
 80078ae:	2b0a      	cmp	r3, #10
 80078b0:	d012      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078b2:	79bb      	ldrb	r3, [r7, #6]
 80078b4:	2b0b      	cmp	r3, #11
 80078b6:	d00f      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078b8:	79bb      	ldrb	r3, [r7, #6]
 80078ba:	2b0c      	cmp	r3, #12
 80078bc:	d00c      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078be:	79bb      	ldrb	r3, [r7, #6]
 80078c0:	2b0d      	cmp	r3, #13
 80078c2:	d009      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078c4:	79bb      	ldrb	r3, [r7, #6]
 80078c6:	2b0e      	cmp	r3, #14
 80078c8:	d006      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078ca:	79bb      	ldrb	r3, [r7, #6]
 80078cc:	2b0f      	cmp	r3, #15
 80078ce:	d003      	beq.n	80078d8 <SYSCFG_EXTILineConfig+0xb8>
 80078d0:	481a      	ldr	r0, [pc, #104]	; (800793c <SYSCFG_EXTILineConfig+0x11c>)
 80078d2:	217d      	movs	r1, #125	; 0x7d
 80078d4:	f7fb fb18 	bl	8002f08 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80078d8:	79bb      	ldrb	r3, [r7, #6]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	220f      	movs	r2, #15
 80078e2:	fa02 f303 	lsl.w	r3, r2, r3
 80078e6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80078e8:	4b15      	ldr	r3, [pc, #84]	; (8007940 <SYSCFG_EXTILineConfig+0x120>)
 80078ea:	79ba      	ldrb	r2, [r7, #6]
 80078ec:	0892      	lsrs	r2, r2, #2
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	4913      	ldr	r1, [pc, #76]	; (8007940 <SYSCFG_EXTILineConfig+0x120>)
 80078f2:	79b8      	ldrb	r0, [r7, #6]
 80078f4:	0880      	lsrs	r0, r0, #2
 80078f6:	b2c0      	uxtb	r0, r0
 80078f8:	3002      	adds	r0, #2
 80078fa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	43c9      	mvns	r1, r1
 8007902:	4001      	ands	r1, r0
 8007904:	3202      	adds	r2, #2
 8007906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <SYSCFG_EXTILineConfig+0x120>)
 800790c:	79ba      	ldrb	r2, [r7, #6]
 800790e:	0892      	lsrs	r2, r2, #2
 8007910:	b2d2      	uxtb	r2, r2
 8007912:	490b      	ldr	r1, [pc, #44]	; (8007940 <SYSCFG_EXTILineConfig+0x120>)
 8007914:	79b8      	ldrb	r0, [r7, #6]
 8007916:	0880      	lsrs	r0, r0, #2
 8007918:	b2c0      	uxtb	r0, r0
 800791a:	3002      	adds	r0, #2
 800791c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007920:	79fc      	ldrb	r4, [r7, #7]
 8007922:	79b9      	ldrb	r1, [r7, #6]
 8007924:	f001 0103 	and.w	r1, r1, #3
 8007928:	0089      	lsls	r1, r1, #2
 800792a:	fa04 f101 	lsl.w	r1, r4, r1
 800792e:	4301      	orrs	r1, r0
 8007930:	3202      	adds	r2, #2
 8007932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	bd90      	pop	{r4, r7, pc}
 800793c:	08008bf0 	.word	0x08008bf0
 8007940:	40013800 	.word	0x40013800

08007944 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	; 0x28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800794e:	2300      	movs	r3, #0
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
 8007952:	2300      	movs	r3, #0
 8007954:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4b97      	ldr	r3, [pc, #604]	; (8007bc0 <USART_Init+0x27c>)
 8007962:	429a      	cmp	r2, r3
 8007964:	d017      	beq.n	8007996 <USART_Init+0x52>
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	4b96      	ldr	r3, [pc, #600]	; (8007bc4 <USART_Init+0x280>)
 800796a:	429a      	cmp	r2, r3
 800796c:	d013      	beq.n	8007996 <USART_Init+0x52>
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4b95      	ldr	r3, [pc, #596]	; (8007bc8 <USART_Init+0x284>)
 8007972:	429a      	cmp	r2, r3
 8007974:	d00f      	beq.n	8007996 <USART_Init+0x52>
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4b94      	ldr	r3, [pc, #592]	; (8007bcc <USART_Init+0x288>)
 800797a:	429a      	cmp	r2, r3
 800797c:	d00b      	beq.n	8007996 <USART_Init+0x52>
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4b93      	ldr	r3, [pc, #588]	; (8007bd0 <USART_Init+0x28c>)
 8007982:	429a      	cmp	r2, r3
 8007984:	d007      	beq.n	8007996 <USART_Init+0x52>
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4b92      	ldr	r3, [pc, #584]	; (8007bd4 <USART_Init+0x290>)
 800798a:	429a      	cmp	r2, r3
 800798c:	d003      	beq.n	8007996 <USART_Init+0x52>
 800798e:	4892      	ldr	r0, [pc, #584]	; (8007bd8 <USART_Init+0x294>)
 8007990:	21eb      	movs	r1, #235	; 0xeb
 8007992:	f7fb fab9 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <USART_Init+0x64>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b8e      	ldr	r3, [pc, #568]	; (8007bdc <USART_Init+0x298>)
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d903      	bls.n	80079b0 <USART_Init+0x6c>
 80079a8:	488b      	ldr	r0, [pc, #556]	; (8007bd8 <USART_Init+0x294>)
 80079aa:	21ec      	movs	r1, #236	; 0xec
 80079ac:	f7fb faac 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	889b      	ldrh	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <USART_Init+0x86>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	889b      	ldrh	r3, [r3, #4]
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	d003      	beq.n	80079ca <USART_Init+0x86>
 80079c2:	4885      	ldr	r0, [pc, #532]	; (8007bd8 <USART_Init+0x294>)
 80079c4:	21ed      	movs	r1, #237	; 0xed
 80079c6:	f7fb fa9f 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d012      	beq.n	80079f8 <USART_Init+0xb4>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	88db      	ldrh	r3, [r3, #6]
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079da:	d00d      	beq.n	80079f8 <USART_Init+0xb4>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e4:	d008      	beq.n	80079f8 <USART_Init+0xb4>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079ee:	d003      	beq.n	80079f8 <USART_Init+0xb4>
 80079f0:	4879      	ldr	r0, [pc, #484]	; (8007bd8 <USART_Init+0x294>)
 80079f2:	21ee      	movs	r1, #238	; 0xee
 80079f4:	f7fb fa88 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	891b      	ldrh	r3, [r3, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00d      	beq.n	8007a1c <USART_Init+0xd8>
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	891b      	ldrh	r3, [r3, #8]
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a08:	d008      	beq.n	8007a1c <USART_Init+0xd8>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	891b      	ldrh	r3, [r3, #8]
 8007a0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a12:	d003      	beq.n	8007a1c <USART_Init+0xd8>
 8007a14:	4870      	ldr	r0, [pc, #448]	; (8007bd8 <USART_Init+0x294>)
 8007a16:	21ef      	movs	r1, #239	; 0xef
 8007a18:	f7fb fa76 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	895b      	ldrh	r3, [r3, #10]
 8007a20:	461a      	mov	r2, r3
 8007a22:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <USART_Init+0xf0>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	895b      	ldrh	r3, [r3, #10]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <USART_Init+0xf8>
 8007a34:	4868      	ldr	r0, [pc, #416]	; (8007bd8 <USART_Init+0x294>)
 8007a36:	21f0      	movs	r1, #240	; 0xf0
 8007a38:	f7fb fa66 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	899b      	ldrh	r3, [r3, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d012      	beq.n	8007a6a <USART_Init+0x126>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	899b      	ldrh	r3, [r3, #12]
 8007a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4c:	d00d      	beq.n	8007a6a <USART_Init+0x126>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	899b      	ldrh	r3, [r3, #12]
 8007a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a56:	d008      	beq.n	8007a6a <USART_Init+0x126>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	899b      	ldrh	r3, [r3, #12]
 8007a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a60:	d003      	beq.n	8007a6a <USART_Init+0x126>
 8007a62:	485d      	ldr	r0, [pc, #372]	; (8007bd8 <USART_Init+0x294>)
 8007a64:	21f1      	movs	r1, #241	; 0xf1
 8007a66:	f7fb fa4f 	bl	8002f08 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	899b      	ldrh	r3, [r3, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d013      	beq.n	8007a9a <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4b52      	ldr	r3, [pc, #328]	; (8007bc0 <USART_Init+0x27c>)
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d00f      	beq.n	8007a9a <USART_Init+0x156>
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4b51      	ldr	r3, [pc, #324]	; (8007bc4 <USART_Init+0x280>)
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d00b      	beq.n	8007a9a <USART_Init+0x156>
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4b50      	ldr	r3, [pc, #320]	; (8007bc8 <USART_Init+0x284>)
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d007      	beq.n	8007a9a <USART_Init+0x156>
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	4b51      	ldr	r3, [pc, #324]	; (8007bd4 <USART_Init+0x290>)
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d003      	beq.n	8007a9a <USART_Init+0x156>
 8007a92:	4851      	ldr	r0, [pc, #324]	; (8007bd8 <USART_Init+0x294>)
 8007a94:	21f6      	movs	r1, #246	; 0xf6
 8007a96:	f7fb fa37 	bl	8002f08 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8a1b      	ldrh	r3, [r3, #16]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	88db      	ldrh	r3, [r3, #6]
 8007aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	899b      	ldrh	r3, [r3, #12]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007aca:	f023 030c 	bic.w	r3, r3, #12
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	889a      	ldrh	r2, [r3, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	891b      	ldrh	r3, [r3, #8]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8a9b      	ldrh	r3, [r3, #20]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	899b      	ldrh	r3, [r3, #12]
 8007b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8007b14:	f107 0308 	add.w	r3, r7, #8
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fb3d 	bl	8007198 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <USART_Init+0x27c>)
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d003      	beq.n	8007b2e <USART_Init+0x1ea>
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4b2a      	ldr	r3, [pc, #168]	; (8007bd4 <USART_Init+0x290>)
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d102      	bne.n	8007b34 <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	e001      	b.n	8007b38 <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	899b      	ldrh	r3, [r3, #12]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	b21b      	sxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da0c      	bge.n	8007b60 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009a      	lsls	r2, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e00b      	b.n	8007b78 <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8007b60:	6a3a      	ldr	r2, [r7, #32]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009a      	lsls	r2, r3, #2
 8007b6a:	441a      	add	r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b76:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	4b19      	ldr	r3, [pc, #100]	; (8007be0 <USART_Init+0x29c>)
 8007b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	091b      	lsrs	r3, r3, #4
 8007b8a:	2264      	movs	r2, #100	; 0x64
 8007b8c:	fb02 f303 	mul.w	r3, r2, r3
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	899b      	ldrh	r3, [r3, #12]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	da1f      	bge.n	8007be4 <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <USART_Init+0x29c>)
 8007bae:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbe:	e01e      	b.n	8007bfe <USART_Init+0x2ba>
 8007bc0:	40011000 	.word	0x40011000
 8007bc4:	40004400 	.word	0x40004400
 8007bc8:	40004800 	.word	0x40004800
 8007bcc:	40004c00 	.word	0x40004c00
 8007bd0:	40005000 	.word	0x40005000
 8007bd4:	40011400 	.word	0x40011400
 8007bd8:	08008c44 	.word	0x08008c44
 8007bdc:	007270e0 	.word	0x007270e0
 8007be0:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <USART_Init+0x2c8>)
 8007bee:	fba3 1302 	umull	r1, r3, r3, r2
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	811a      	strh	r2, [r3, #8]
}
 8007c06:	3728      	adds	r7, #40	; 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	51eb851f 	.word	0x51eb851f

08007c10 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4b1f      	ldr	r3, [pc, #124]	; (8007c9c <USART_Cmd+0x8c>)
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d018      	beq.n	8007c56 <USART_Cmd+0x46>
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <USART_Cmd+0x90>)
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d014      	beq.n	8007c56 <USART_Cmd+0x46>
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ca4 <USART_Cmd+0x94>)
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d010      	beq.n	8007c56 <USART_Cmd+0x46>
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4b1c      	ldr	r3, [pc, #112]	; (8007ca8 <USART_Cmd+0x98>)
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d00c      	beq.n	8007c56 <USART_Cmd+0x46>
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <USART_Cmd+0x9c>)
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d008      	beq.n	8007c56 <USART_Cmd+0x46>
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <USART_Cmd+0xa0>)
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d004      	beq.n	8007c56 <USART_Cmd+0x46>
 8007c4c:	4819      	ldr	r0, [pc, #100]	; (8007cb4 <USART_Cmd+0xa4>)
 8007c4e:	f240 119b 	movw	r1, #411	; 0x19b
 8007c52:	f7fb f959 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <USART_Cmd+0x5c>
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d004      	beq.n	8007c6c <USART_Cmd+0x5c>
 8007c62:	4814      	ldr	r0, [pc, #80]	; (8007cb4 <USART_Cmd+0xa4>)
 8007c64:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8007c68:	f7fb f94e 	bl	8002f08 <assert_failed>
  
  if (NewState != DISABLE)
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d008      	beq.n	8007c84 <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	899b      	ldrh	r3, [r3, #12]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	819a      	strh	r2, [r3, #12]
 8007c82:	e007      	b.n	8007c94 <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	899b      	ldrh	r3, [r3, #12]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	819a      	strh	r2, [r3, #12]
  }
}
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40011000 	.word	0x40011000
 8007ca0:	40004400 	.word	0x40004400
 8007ca4:	40004800 	.word	0x40004800
 8007ca8:	40004c00 	.word	0x40004c00
 8007cac:	40005000 	.word	0x40005000
 8007cb0:	40011400 	.word	0x40011400
 8007cb4:	08008c44 	.word	0x08008c44

08007cb8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	460a      	mov	r2, r1
 8007cc4:	807a      	strh	r2, [r7, #2]
 8007cc6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	4b4f      	ldr	r3, [pc, #316]	; (8007e18 <USART_ITConfig+0x160>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d018      	beq.n	8007d12 <USART_ITConfig+0x5a>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4b4e      	ldr	r3, [pc, #312]	; (8007e1c <USART_ITConfig+0x164>)
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d014      	beq.n	8007d12 <USART_ITConfig+0x5a>
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4b4d      	ldr	r3, [pc, #308]	; (8007e20 <USART_ITConfig+0x168>)
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d010      	beq.n	8007d12 <USART_ITConfig+0x5a>
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4b4c      	ldr	r3, [pc, #304]	; (8007e24 <USART_ITConfig+0x16c>)
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d00c      	beq.n	8007d12 <USART_ITConfig+0x5a>
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4b4b      	ldr	r3, [pc, #300]	; (8007e28 <USART_ITConfig+0x170>)
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d008      	beq.n	8007d12 <USART_ITConfig+0x5a>
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4b4a      	ldr	r3, [pc, #296]	; (8007e2c <USART_ITConfig+0x174>)
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d004      	beq.n	8007d12 <USART_ITConfig+0x5a>
 8007d08:	4849      	ldr	r0, [pc, #292]	; (8007e30 <USART_ITConfig+0x178>)
 8007d0a:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8007d0e:	f7fb f8fb 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 8007d12:	887b      	ldrh	r3, [r7, #2]
 8007d14:	2b28      	cmp	r3, #40	; 0x28
 8007d16:	d025      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d18:	887a      	ldrh	r2, [r7, #2]
 8007d1a:	f240 7327 	movw	r3, #1831	; 0x727
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d020      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d22:	887a      	ldrh	r2, [r7, #2]
 8007d24:	f240 6326 	movw	r3, #1574	; 0x626
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d01b      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d2c:	887a      	ldrh	r2, [r7, #2]
 8007d2e:	f240 5325 	movw	r3, #1317	; 0x525
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d016      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d36:	887a      	ldrh	r2, [r7, #2]
 8007d38:	f240 4324 	movw	r3, #1060	; 0x424
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d011      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d40:	887a      	ldrh	r2, [r7, #2]
 8007d42:	f640 0346 	movw	r3, #2118	; 0x846
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d00c      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d4a:	887a      	ldrh	r2, [r7, #2]
 8007d4c:	f640 136a 	movw	r3, #2410	; 0x96a
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d007      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d54:	887b      	ldrh	r3, [r7, #2]
 8007d56:	2b60      	cmp	r3, #96	; 0x60
 8007d58:	d004      	beq.n	8007d64 <USART_ITConfig+0xac>
 8007d5a:	4835      	ldr	r0, [pc, #212]	; (8007e30 <USART_ITConfig+0x178>)
 8007d5c:	f240 41be 	movw	r1, #1214	; 0x4be
 8007d60:	f7fb f8d2 	bl	8002f08 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007d64:	787b      	ldrb	r3, [r7, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <USART_ITConfig+0xc2>
 8007d6a:	787b      	ldrb	r3, [r7, #1]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d004      	beq.n	8007d7a <USART_ITConfig+0xc2>
 8007d70:	482f      	ldr	r0, [pc, #188]	; (8007e30 <USART_ITConfig+0x178>)
 8007d72:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8007d76:	f7fb f8c7 	bl	8002f08 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 8007d7a:	887a      	ldrh	r2, [r7, #2]
 8007d7c:	f640 136a 	movw	r3, #2410	; 0x96a
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d114      	bne.n	8007dae <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <USART_ITConfig+0x160>)
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d010      	beq.n	8007dae <USART_ITConfig+0xf6>
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	4b23      	ldr	r3, [pc, #140]	; (8007e1c <USART_ITConfig+0x164>)
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d00c      	beq.n	8007dae <USART_ITConfig+0xf6>
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <USART_ITConfig+0x168>)
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d008      	beq.n	8007dae <USART_ITConfig+0xf6>
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4b23      	ldr	r3, [pc, #140]	; (8007e2c <USART_ITConfig+0x174>)
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d004      	beq.n	8007dae <USART_ITConfig+0xf6>
 8007da4:	4822      	ldr	r0, [pc, #136]	; (8007e30 <USART_ITConfig+0x178>)
 8007da6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007daa:	f7fb f8ad 	bl	8002f08 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007db2:	887b      	ldrh	r3, [r7, #2]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d103      	bne.n	8007ddc <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	e009      	b.n	8007df0 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d103      	bne.n	8007dea <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	3310      	adds	r3, #16
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e002      	b.n	8007df0 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	3314      	adds	r3, #20
 8007dee:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8007df0:	787b      	ldrb	r3, [r7, #1]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d006      	beq.n	8007e04 <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	6811      	ldr	r1, [r2, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	e006      	b.n	8007e12 <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	6811      	ldr	r1, [r2, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	43d2      	mvns	r2, r2
 8007e0e:	400a      	ands	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]
  }
}
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40011000 	.word	0x40011000
 8007e1c:	40004400 	.word	0x40004400
 8007e20:	40004800 	.word	0x40004800
 8007e24:	40004c00 	.word	0x40004c00
 8007e28:	40005000 	.word	0x40005000
 8007e2c:	40011400 	.word	0x40011400
 8007e30:	08008c44 	.word	0x08008c44

08007e34 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4b5c      	ldr	r3, [pc, #368]	; (8007fc4 <USART_GetITStatus+0x190>)
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d018      	beq.n	8007e8a <USART_GetITStatus+0x56>
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	4b5b      	ldr	r3, [pc, #364]	; (8007fc8 <USART_GetITStatus+0x194>)
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d014      	beq.n	8007e8a <USART_GetITStatus+0x56>
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4b5a      	ldr	r3, [pc, #360]	; (8007fcc <USART_GetITStatus+0x198>)
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d010      	beq.n	8007e8a <USART_GetITStatus+0x56>
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4b59      	ldr	r3, [pc, #356]	; (8007fd0 <USART_GetITStatus+0x19c>)
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d00c      	beq.n	8007e8a <USART_GetITStatus+0x56>
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	4b58      	ldr	r3, [pc, #352]	; (8007fd4 <USART_GetITStatus+0x1a0>)
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d008      	beq.n	8007e8a <USART_GetITStatus+0x56>
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	4b57      	ldr	r3, [pc, #348]	; (8007fd8 <USART_GetITStatus+0x1a4>)
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d004      	beq.n	8007e8a <USART_GetITStatus+0x56>
 8007e80:	4856      	ldr	r0, [pc, #344]	; (8007fdc <USART_GetITStatus+0x1a8>)
 8007e82:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8007e86:	f7fb f83f 	bl	8002f08 <assert_failed>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8007e8a:	887b      	ldrh	r3, [r7, #2]
 8007e8c:	2b28      	cmp	r3, #40	; 0x28
 8007e8e:	d037      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007e90:	887a      	ldrh	r2, [r7, #2]
 8007e92:	f240 7327 	movw	r3, #1831	; 0x727
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d032      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007e9a:	887a      	ldrh	r2, [r7, #2]
 8007e9c:	f240 6326 	movw	r3, #1574	; 0x626
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d02d      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007ea4:	887a      	ldrh	r2, [r7, #2]
 8007ea6:	f240 5325 	movw	r3, #1317	; 0x525
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d028      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007eae:	887a      	ldrh	r2, [r7, #2]
 8007eb0:	f240 4324 	movw	r3, #1060	; 0x424
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d023      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007eb8:	887a      	ldrh	r2, [r7, #2]
 8007eba:	f640 0346 	movw	r3, #2118	; 0x846
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d01e      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007ec2:	887a      	ldrh	r2, [r7, #2]
 8007ec4:	f640 136a 	movw	r3, #2410	; 0x96a
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d019      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007ecc:	887b      	ldrh	r3, [r7, #2]
 8007ece:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007ed2:	d015      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007ed4:	887a      	ldrh	r2, [r7, #2]
 8007ed6:	f240 3325 	movw	r3, #805	; 0x325
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d010      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007ede:	887b      	ldrh	r3, [r7, #2]
 8007ee0:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007ee4:	d00c      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007ee6:	887b      	ldrh	r3, [r7, #2]
 8007ee8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8007eec:	d008      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007eee:	887b      	ldrh	r3, [r7, #2]
 8007ef0:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8007ef4:	d004      	beq.n	8007f00 <USART_GetITStatus+0xcc>
 8007ef6:	4839      	ldr	r0, [pc, #228]	; (8007fdc <USART_GetITStatus+0x1a8>)
 8007ef8:	f240 5151 	movw	r1, #1361	; 0x551
 8007efc:	f7fb f804 	bl	8002f08 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 8007f00:	887a      	ldrh	r2, [r7, #2]
 8007f02:	f640 136a 	movw	r3, #2410	; 0x96a
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d114      	bne.n	8007f34 <USART_GetITStatus+0x100>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4b2d      	ldr	r3, [pc, #180]	; (8007fc4 <USART_GetITStatus+0x190>)
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d010      	beq.n	8007f34 <USART_GetITStatus+0x100>
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4b2c      	ldr	r3, [pc, #176]	; (8007fc8 <USART_GetITStatus+0x194>)
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d00c      	beq.n	8007f34 <USART_GetITStatus+0x100>
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <USART_GetITStatus+0x198>)
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d008      	beq.n	8007f34 <USART_GetITStatus+0x100>
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4b2c      	ldr	r3, [pc, #176]	; (8007fd8 <USART_GetITStatus+0x1a4>)
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d004      	beq.n	8007f34 <USART_GetITStatus+0x100>
 8007f2a:	482c      	ldr	r0, [pc, #176]	; (8007fdc <USART_GetITStatus+0x1a8>)
 8007f2c:	f240 5156 	movw	r1, #1366	; 0x556
 8007f30:	f7fa ffea 	bl	8002f08 <assert_failed>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007f34:	887b      	ldrh	r3, [r7, #2]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8007f3e:	887b      	ldrh	r3, [r7, #2]
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d106      	bne.n	8007f64 <USART_GetITStatus+0x130>
  {
    itmask &= USARTx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	899b      	ldrh	r3, [r3, #12]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	e00f      	b.n	8007f84 <USART_GetITStatus+0x150>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d106      	bne.n	8007f78 <USART_GetITStatus+0x144>
  {
    itmask &= USARTx->CR2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8a1b      	ldrh	r3, [r3, #16]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4013      	ands	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	e005      	b.n	8007f84 <USART_GetITStatus+0x150>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	8a9b      	ldrh	r3, [r3, #20]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4013      	ands	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8007f84:	887b      	ldrh	r3, [r7, #2]
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <USART_GetITStatus+0x180>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <USART_GetITStatus+0x180>
  {
    bitstatus = SET;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	74fb      	strb	r3, [r7, #19]
 8007fb2:	e001      	b.n	8007fb8 <USART_GetITStatus+0x184>
  }
  else
  {
    bitstatus = RESET;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8007fb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40011000 	.word	0x40011000
 8007fc8:	40004400 	.word	0x40004400
 8007fcc:	40004800 	.word	0x40004800
 8007fd0:	40004c00 	.word	0x40004c00
 8007fd4:	40005000 	.word	0x40005000
 8007fd8:	40011400 	.word	0x40011400
 8007fdc:	08008c44 	.word	0x08008c44

08007fe0 <atoi>:
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	220a      	movs	r2, #10
 8007fe4:	f000 ba4a 	b.w	800847c <strtol>

08007fe8 <__libc_init_array>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4e0f      	ldr	r6, [pc, #60]	; (8008028 <__libc_init_array+0x40>)
 8007fec:	4d0f      	ldr	r5, [pc, #60]	; (800802c <__libc_init_array+0x44>)
 8007fee:	1b76      	subs	r6, r6, r5
 8007ff0:	10b6      	asrs	r6, r6, #2
 8007ff2:	d007      	beq.n	8008004 <__libc_init_array+0x1c>
 8007ff4:	3d04      	subs	r5, #4
 8007ff6:	2400      	movs	r4, #0
 8007ff8:	3401      	adds	r4, #1
 8007ffa:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007ffe:	4798      	blx	r3
 8008000:	42a6      	cmp	r6, r4
 8008002:	d1f9      	bne.n	8007ff8 <__libc_init_array+0x10>
 8008004:	4e0a      	ldr	r6, [pc, #40]	; (8008030 <__libc_init_array+0x48>)
 8008006:	4d0b      	ldr	r5, [pc, #44]	; (8008034 <__libc_init_array+0x4c>)
 8008008:	1b76      	subs	r6, r6, r5
 800800a:	f000 ffed 	bl	8008fe8 <_init>
 800800e:	10b6      	asrs	r6, r6, #2
 8008010:	d008      	beq.n	8008024 <__libc_init_array+0x3c>
 8008012:	3d04      	subs	r5, #4
 8008014:	2400      	movs	r4, #0
 8008016:	3401      	adds	r4, #1
 8008018:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800801c:	4798      	blx	r3
 800801e:	42a6      	cmp	r6, r4
 8008020:	d1f9      	bne.n	8008016 <__libc_init_array+0x2e>
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	bd70      	pop	{r4, r5, r6, pc}
 8008026:	bf00      	nop
 8008028:	08009000 	.word	0x08009000
 800802c:	08009000 	.word	0x08009000
 8008030:	08009008 	.word	0x08009008
 8008034:	08009000 	.word	0x08009000

08008038 <memcmp>:
 8008038:	2a03      	cmp	r2, #3
 800803a:	b470      	push	{r4, r5, r6}
 800803c:	d928      	bls.n	8008090 <memcmp+0x58>
 800803e:	ea40 0301 	orr.w	r3, r0, r1
 8008042:	079b      	lsls	r3, r3, #30
 8008044:	d013      	beq.n	800806e <memcmp+0x36>
 8008046:	7805      	ldrb	r5, [r0, #0]
 8008048:	780c      	ldrb	r4, [r1, #0]
 800804a:	42a5      	cmp	r5, r4
 800804c:	d124      	bne.n	8008098 <memcmp+0x60>
 800804e:	3a01      	subs	r2, #1
 8008050:	2300      	movs	r3, #0
 8008052:	e005      	b.n	8008060 <memcmp+0x28>
 8008054:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008058:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800805c:	42a5      	cmp	r5, r4
 800805e:	d11b      	bne.n	8008098 <memcmp+0x60>
 8008060:	4293      	cmp	r3, r2
 8008062:	f103 0301 	add.w	r3, r3, #1
 8008066:	d1f5      	bne.n	8008054 <memcmp+0x1c>
 8008068:	2000      	movs	r0, #0
 800806a:	bc70      	pop	{r4, r5, r6}
 800806c:	4770      	bx	lr
 800806e:	460c      	mov	r4, r1
 8008070:	4603      	mov	r3, r0
 8008072:	6825      	ldr	r5, [r4, #0]
 8008074:	681e      	ldr	r6, [r3, #0]
 8008076:	42ae      	cmp	r6, r5
 8008078:	4621      	mov	r1, r4
 800807a:	4618      	mov	r0, r3
 800807c:	f104 0404 	add.w	r4, r4, #4
 8008080:	f103 0304 	add.w	r3, r3, #4
 8008084:	d104      	bne.n	8008090 <memcmp+0x58>
 8008086:	3a04      	subs	r2, #4
 8008088:	2a03      	cmp	r2, #3
 800808a:	4618      	mov	r0, r3
 800808c:	4621      	mov	r1, r4
 800808e:	d8f0      	bhi.n	8008072 <memcmp+0x3a>
 8008090:	2a00      	cmp	r2, #0
 8008092:	d1d8      	bne.n	8008046 <memcmp+0xe>
 8008094:	4610      	mov	r0, r2
 8008096:	e7e8      	b.n	800806a <memcmp+0x32>
 8008098:	1b28      	subs	r0, r5, r4
 800809a:	bc70      	pop	{r4, r5, r6}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop

080080a0 <memset>:
 80080a0:	b4f0      	push	{r4, r5, r6, r7}
 80080a2:	0784      	lsls	r4, r0, #30
 80080a4:	d043      	beq.n	800812e <memset+0x8e>
 80080a6:	1e54      	subs	r4, r2, #1
 80080a8:	2a00      	cmp	r2, #0
 80080aa:	d03e      	beq.n	800812a <memset+0x8a>
 80080ac:	b2cd      	uxtb	r5, r1
 80080ae:	4603      	mov	r3, r0
 80080b0:	e003      	b.n	80080ba <memset+0x1a>
 80080b2:	1e62      	subs	r2, r4, #1
 80080b4:	2c00      	cmp	r4, #0
 80080b6:	d038      	beq.n	800812a <memset+0x8a>
 80080b8:	4614      	mov	r4, r2
 80080ba:	f803 5b01 	strb.w	r5, [r3], #1
 80080be:	079a      	lsls	r2, r3, #30
 80080c0:	d1f7      	bne.n	80080b2 <memset+0x12>
 80080c2:	2c03      	cmp	r4, #3
 80080c4:	d92a      	bls.n	800811c <memset+0x7c>
 80080c6:	b2cd      	uxtb	r5, r1
 80080c8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80080cc:	2c0f      	cmp	r4, #15
 80080ce:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80080d2:	d915      	bls.n	8008100 <memset+0x60>
 80080d4:	f1a4 0710 	sub.w	r7, r4, #16
 80080d8:	093f      	lsrs	r7, r7, #4
 80080da:	f103 0610 	add.w	r6, r3, #16
 80080de:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80080e2:	461a      	mov	r2, r3
 80080e4:	6015      	str	r5, [r2, #0]
 80080e6:	6055      	str	r5, [r2, #4]
 80080e8:	6095      	str	r5, [r2, #8]
 80080ea:	60d5      	str	r5, [r2, #12]
 80080ec:	3210      	adds	r2, #16
 80080ee:	42b2      	cmp	r2, r6
 80080f0:	d1f8      	bne.n	80080e4 <memset+0x44>
 80080f2:	f004 040f 	and.w	r4, r4, #15
 80080f6:	3701      	adds	r7, #1
 80080f8:	2c03      	cmp	r4, #3
 80080fa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80080fe:	d90d      	bls.n	800811c <memset+0x7c>
 8008100:	461e      	mov	r6, r3
 8008102:	4622      	mov	r2, r4
 8008104:	3a04      	subs	r2, #4
 8008106:	2a03      	cmp	r2, #3
 8008108:	f846 5b04 	str.w	r5, [r6], #4
 800810c:	d8fa      	bhi.n	8008104 <memset+0x64>
 800810e:	1f22      	subs	r2, r4, #4
 8008110:	f022 0203 	bic.w	r2, r2, #3
 8008114:	3204      	adds	r2, #4
 8008116:	4413      	add	r3, r2
 8008118:	f004 0403 	and.w	r4, r4, #3
 800811c:	b12c      	cbz	r4, 800812a <memset+0x8a>
 800811e:	b2c9      	uxtb	r1, r1
 8008120:	441c      	add	r4, r3
 8008122:	f803 1b01 	strb.w	r1, [r3], #1
 8008126:	42a3      	cmp	r3, r4
 8008128:	d1fb      	bne.n	8008122 <memset+0x82>
 800812a:	bcf0      	pop	{r4, r5, r6, r7}
 800812c:	4770      	bx	lr
 800812e:	4614      	mov	r4, r2
 8008130:	4603      	mov	r3, r0
 8008132:	e7c6      	b.n	80080c2 <memset+0x22>

08008134 <strcpy>:
 8008134:	ea80 0201 	eor.w	r2, r0, r1
 8008138:	4684      	mov	ip, r0
 800813a:	f012 0f03 	tst.w	r2, #3
 800813e:	d14f      	bne.n	80081e0 <strcpy+0xac>
 8008140:	f011 0f03 	tst.w	r1, #3
 8008144:	d132      	bne.n	80081ac <strcpy+0x78>
 8008146:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800814a:	f011 0f04 	tst.w	r1, #4
 800814e:	f851 3b04 	ldr.w	r3, [r1], #4
 8008152:	d00b      	beq.n	800816c <strcpy+0x38>
 8008154:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008158:	439a      	bics	r2, r3
 800815a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800815e:	bf04      	itt	eq
 8008160:	f84c 3b04 	streq.w	r3, [ip], #4
 8008164:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008168:	d116      	bne.n	8008198 <strcpy+0x64>
 800816a:	bf00      	nop
 800816c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008170:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008174:	439a      	bics	r2, r3
 8008176:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800817a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800817e:	d10b      	bne.n	8008198 <strcpy+0x64>
 8008180:	f84c 3b04 	str.w	r3, [ip], #4
 8008184:	43a2      	bics	r2, r4
 8008186:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800818a:	bf04      	itt	eq
 800818c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008190:	f84c 4b04 	streq.w	r4, [ip], #4
 8008194:	d0ea      	beq.n	800816c <strcpy+0x38>
 8008196:	4623      	mov	r3, r4
 8008198:	f80c 3b01 	strb.w	r3, [ip], #1
 800819c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081a0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80081a4:	d1f8      	bne.n	8008198 <strcpy+0x64>
 80081a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	f011 0f01 	tst.w	r1, #1
 80081b0:	d006      	beq.n	80081c0 <strcpy+0x8c>
 80081b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081b6:	f80c 2b01 	strb.w	r2, [ip], #1
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	bf08      	it	eq
 80081be:	4770      	bxeq	lr
 80081c0:	f011 0f02 	tst.w	r1, #2
 80081c4:	d0bf      	beq.n	8008146 <strcpy+0x12>
 80081c6:	f831 2b02 	ldrh.w	r2, [r1], #2
 80081ca:	f012 0fff 	tst.w	r2, #255	; 0xff
 80081ce:	bf16      	itet	ne
 80081d0:	f82c 2b02 	strhne.w	r2, [ip], #2
 80081d4:	f88c 2000 	strbeq.w	r2, [ip]
 80081d8:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80081dc:	d1b3      	bne.n	8008146 <strcpy+0x12>
 80081de:	4770      	bx	lr
 80081e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e4:	f80c 2b01 	strb.w	r2, [ip], #1
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	d1f9      	bne.n	80081e0 <strcpy+0xac>
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop

080081f0 <strlen>:
 80081f0:	f020 0103 	bic.w	r1, r0, #3
 80081f4:	f010 0003 	ands.w	r0, r0, #3
 80081f8:	f1c0 0000 	rsb	r0, r0, #0
 80081fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8008200:	f100 0c04 	add.w	ip, r0, #4
 8008204:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008208:	f06f 0200 	mvn.w	r2, #0
 800820c:	bf1c      	itt	ne
 800820e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8008212:	4313      	orrne	r3, r2
 8008214:	f04f 0c01 	mov.w	ip, #1
 8008218:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800821c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8008220:	eba3 020c 	sub.w	r2, r3, ip
 8008224:	ea22 0203 	bic.w	r2, r2, r3
 8008228:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800822c:	bf04      	itt	eq
 800822e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008232:	3004      	addeq	r0, #4
 8008234:	d0f4      	beq.n	8008220 <strlen+0x30>
 8008236:	f013 0fff 	tst.w	r3, #255	; 0xff
 800823a:	bf1f      	itttt	ne
 800823c:	3001      	addne	r0, #1
 800823e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8008242:	3001      	addne	r0, #1
 8008244:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8008248:	bf18      	it	ne
 800824a:	3001      	addne	r0, #1
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop

08008250 <strncmp>:
 8008250:	b430      	push	{r4, r5}
 8008252:	2a00      	cmp	r2, #0
 8008254:	d04a      	beq.n	80082ec <strncmp+0x9c>
 8008256:	ea40 0301 	orr.w	r3, r0, r1
 800825a:	f013 0303 	ands.w	r3, r3, #3
 800825e:	d12d      	bne.n	80082bc <strncmp+0x6c>
 8008260:	2a03      	cmp	r2, #3
 8008262:	d92b      	bls.n	80082bc <strncmp+0x6c>
 8008264:	6804      	ldr	r4, [r0, #0]
 8008266:	680d      	ldr	r5, [r1, #0]
 8008268:	42ac      	cmp	r4, r5
 800826a:	d127      	bne.n	80082bc <strncmp+0x6c>
 800826c:	3a04      	subs	r2, #4
 800826e:	d03d      	beq.n	80082ec <strncmp+0x9c>
 8008270:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8008274:	ea25 0404 	bic.w	r4, r5, r4
 8008278:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800827c:	d13c      	bne.n	80082f8 <strncmp+0xa8>
 800827e:	460c      	mov	r4, r1
 8008280:	4603      	mov	r3, r0
 8008282:	e00e      	b.n	80082a2 <strncmp+0x52>
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	6864      	ldr	r4, [r4, #4]
 8008288:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800828c:	42a3      	cmp	r3, r4
 800828e:	ea25 0503 	bic.w	r5, r5, r3
 8008292:	d113      	bne.n	80082bc <strncmp+0x6c>
 8008294:	3a04      	subs	r2, #4
 8008296:	d029      	beq.n	80082ec <strncmp+0x9c>
 8008298:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800829c:	d129      	bne.n	80082f2 <strncmp+0xa2>
 800829e:	4603      	mov	r3, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	2a03      	cmp	r2, #3
 80082a4:	f100 0004 	add.w	r0, r0, #4
 80082a8:	f101 0104 	add.w	r1, r1, #4
 80082ac:	d8ea      	bhi.n	8008284 <strncmp+0x34>
 80082ae:	1e55      	subs	r5, r2, #1
 80082b0:	b92a      	cbnz	r2, 80082be <strncmp+0x6e>
 80082b2:	7918      	ldrb	r0, [r3, #4]
 80082b4:	7922      	ldrb	r2, [r4, #4]
 80082b6:	1a80      	subs	r0, r0, r2
 80082b8:	bc30      	pop	{r4, r5}
 80082ba:	4770      	bx	lr
 80082bc:	1e55      	subs	r5, r2, #1
 80082be:	7803      	ldrb	r3, [r0, #0]
 80082c0:	780a      	ldrb	r2, [r1, #0]
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d11a      	bne.n	80082fc <strncmp+0xac>
 80082c6:	b1dd      	cbz	r5, 8008300 <strncmp+0xb0>
 80082c8:	b1b3      	cbz	r3, 80082f8 <strncmp+0xa8>
 80082ca:	1c6c      	adds	r4, r5, #1
 80082cc:	440c      	add	r4, r1
 80082ce:	1c8b      	adds	r3, r1, #2
 80082d0:	4601      	mov	r1, r0
 80082d2:	e004      	b.n	80082de <strncmp+0x8e>
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	d00c      	beq.n	80082f2 <strncmp+0xa2>
 80082d8:	3301      	adds	r3, #1
 80082da:	2800      	cmp	r0, #0
 80082dc:	d0ec      	beq.n	80082b8 <strncmp+0x68>
 80082de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082e2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80082e6:	4290      	cmp	r0, r2
 80082e8:	d0f4      	beq.n	80082d4 <strncmp+0x84>
 80082ea:	e7e4      	b.n	80082b6 <strncmp+0x66>
 80082ec:	4610      	mov	r0, r2
 80082ee:	bc30      	pop	{r4, r5}
 80082f0:	4770      	bx	lr
 80082f2:	2000      	movs	r0, #0
 80082f4:	bc30      	pop	{r4, r5}
 80082f6:	4770      	bx	lr
 80082f8:	4618      	mov	r0, r3
 80082fa:	e7dd      	b.n	80082b8 <strncmp+0x68>
 80082fc:	4618      	mov	r0, r3
 80082fe:	e7da      	b.n	80082b6 <strncmp+0x66>
 8008300:	4628      	mov	r0, r5
 8008302:	e7d9      	b.n	80082b8 <strncmp+0x68>

08008304 <strncpy>:
 8008304:	ea40 0301 	orr.w	r3, r0, r1
 8008308:	079b      	lsls	r3, r3, #30
 800830a:	b470      	push	{r4, r5, r6}
 800830c:	d12a      	bne.n	8008364 <strncpy+0x60>
 800830e:	2a03      	cmp	r2, #3
 8008310:	d928      	bls.n	8008364 <strncpy+0x60>
 8008312:	460c      	mov	r4, r1
 8008314:	4603      	mov	r3, r0
 8008316:	4621      	mov	r1, r4
 8008318:	f854 5b04 	ldr.w	r5, [r4], #4
 800831c:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8008320:	ea26 0605 	bic.w	r6, r6, r5
 8008324:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8008328:	d105      	bne.n	8008336 <strncpy+0x32>
 800832a:	3a04      	subs	r2, #4
 800832c:	2a03      	cmp	r2, #3
 800832e:	f843 5b04 	str.w	r5, [r3], #4
 8008332:	4621      	mov	r1, r4
 8008334:	d8ef      	bhi.n	8008316 <strncpy+0x12>
 8008336:	b19a      	cbz	r2, 8008360 <strncpy+0x5c>
 8008338:	780c      	ldrb	r4, [r1, #0]
 800833a:	701c      	strb	r4, [r3, #0]
 800833c:	3a01      	subs	r2, #1
 800833e:	3301      	adds	r3, #1
 8008340:	b13c      	cbz	r4, 8008352 <strncpy+0x4e>
 8008342:	b16a      	cbz	r2, 8008360 <strncpy+0x5c>
 8008344:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008348:	f803 4b01 	strb.w	r4, [r3], #1
 800834c:	3a01      	subs	r2, #1
 800834e:	2c00      	cmp	r4, #0
 8008350:	d1f7      	bne.n	8008342 <strncpy+0x3e>
 8008352:	b12a      	cbz	r2, 8008360 <strncpy+0x5c>
 8008354:	441a      	add	r2, r3
 8008356:	2100      	movs	r1, #0
 8008358:	f803 1b01 	strb.w	r1, [r3], #1
 800835c:	4293      	cmp	r3, r2
 800835e:	d1fb      	bne.n	8008358 <strncpy+0x54>
 8008360:	bc70      	pop	{r4, r5, r6}
 8008362:	4770      	bx	lr
 8008364:	4603      	mov	r3, r0
 8008366:	e7e6      	b.n	8008336 <strncpy+0x32>

08008368 <_strtol_r>:
 8008368:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800836c:	4c42      	ldr	r4, [pc, #264]	; (8008478 <_strtol_r+0x110>)
 800836e:	b082      	sub	sp, #8
 8008370:	f8d4 c000 	ldr.w	ip, [r4]
 8008374:	9001      	str	r0, [sp, #4]
 8008376:	460e      	mov	r6, r1
 8008378:	e000      	b.n	800837c <_strtol_r+0x14>
 800837a:	4626      	mov	r6, r4
 800837c:	4634      	mov	r4, r6
 800837e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008382:	eb0c 0005 	add.w	r0, ip, r5
 8008386:	7840      	ldrb	r0, [r0, #1]
 8008388:	f000 0008 	and.w	r0, r0, #8
 800838c:	f000 0aff 	and.w	sl, r0, #255	; 0xff
 8008390:	2800      	cmp	r0, #0
 8008392:	d1f2      	bne.n	800837a <_strtol_r+0x12>
 8008394:	2d2d      	cmp	r5, #45	; 0x2d
 8008396:	d05b      	beq.n	8008450 <_strtol_r+0xe8>
 8008398:	2d2b      	cmp	r5, #43	; 0x2b
 800839a:	bf04      	itt	eq
 800839c:	7875      	ldrbeq	r5, [r6, #1]
 800839e:	1cb4      	addeq	r4, r6, #2
 80083a0:	f033 0010 	bics.w	r0, r3, #16
 80083a4:	d03c      	beq.n	8008420 <_strtol_r+0xb8>
 80083a6:	4699      	mov	r9, r3
 80083a8:	f1ba 0f00 	cmp.w	sl, #0
 80083ac:	bf0c      	ite	eq
 80083ae:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
 80083b2:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
 80083b6:	fbbb f8f9 	udiv	r8, fp, r9
 80083ba:	2700      	movs	r7, #0
 80083bc:	fb09 bb18 	mls	fp, r9, r8, fp
 80083c0:	4638      	mov	r0, r7
 80083c2:	e00c      	b.n	80083de <_strtol_r+0x76>
 80083c4:	3d30      	subs	r5, #48	; 0x30
 80083c6:	42ab      	cmp	r3, r5
 80083c8:	dd19      	ble.n	80083fe <_strtol_r+0x96>
 80083ca:	1c7e      	adds	r6, r7, #1
 80083cc:	d005      	beq.n	80083da <_strtol_r+0x72>
 80083ce:	4540      	cmp	r0, r8
 80083d0:	d823      	bhi.n	800841a <_strtol_r+0xb2>
 80083d2:	d020      	beq.n	8008416 <_strtol_r+0xae>
 80083d4:	fb09 5000 	mla	r0, r9, r0, r5
 80083d8:	2701      	movs	r7, #1
 80083da:	f814 5b01 	ldrb.w	r5, [r4], #1
 80083de:	eb0c 0605 	add.w	r6, ip, r5
 80083e2:	7876      	ldrb	r6, [r6, #1]
 80083e4:	f016 0f04 	tst.w	r6, #4
 80083e8:	d1ec      	bne.n	80083c4 <_strtol_r+0x5c>
 80083ea:	f016 0603 	ands.w	r6, r6, #3
 80083ee:	d006      	beq.n	80083fe <_strtol_r+0x96>
 80083f0:	2e01      	cmp	r6, #1
 80083f2:	bf14      	ite	ne
 80083f4:	2657      	movne	r6, #87	; 0x57
 80083f6:	2637      	moveq	r6, #55	; 0x37
 80083f8:	1bad      	subs	r5, r5, r6
 80083fa:	42ab      	cmp	r3, r5
 80083fc:	dce5      	bgt.n	80083ca <_strtol_r+0x62>
 80083fe:	1c7b      	adds	r3, r7, #1
 8008400:	d015      	beq.n	800842e <_strtol_r+0xc6>
 8008402:	f1ba 0f00 	cmp.w	sl, #0
 8008406:	d121      	bne.n	800844c <_strtol_r+0xe4>
 8008408:	b10a      	cbz	r2, 800840e <_strtol_r+0xa6>
 800840a:	b9ef      	cbnz	r7, 8008448 <_strtol_r+0xe0>
 800840c:	6011      	str	r1, [r2, #0]
 800840e:	b002      	add	sp, #8
 8008410:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008414:	4770      	bx	lr
 8008416:	455d      	cmp	r5, fp
 8008418:	dddc      	ble.n	80083d4 <_strtol_r+0x6c>
 800841a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800841e:	e7dc      	b.n	80083da <_strtol_r+0x72>
 8008420:	2d30      	cmp	r5, #48	; 0x30
 8008422:	d01a      	beq.n	800845a <_strtol_r+0xf2>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1be      	bne.n	80083a6 <_strtol_r+0x3e>
 8008428:	230a      	movs	r3, #10
 800842a:	4699      	mov	r9, r3
 800842c:	e7bc      	b.n	80083a8 <_strtol_r+0x40>
 800842e:	9901      	ldr	r1, [sp, #4]
 8008430:	f1ba 0f00 	cmp.w	sl, #0
 8008434:	f04f 0322 	mov.w	r3, #34	; 0x22
 8008438:	bf0c      	ite	eq
 800843a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800843e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8008442:	600b      	str	r3, [r1, #0]
 8008444:	2a00      	cmp	r2, #0
 8008446:	d0e2      	beq.n	800840e <_strtol_r+0xa6>
 8008448:	1e61      	subs	r1, r4, #1
 800844a:	e7df      	b.n	800840c <_strtol_r+0xa4>
 800844c:	4240      	negs	r0, r0
 800844e:	e7db      	b.n	8008408 <_strtol_r+0xa0>
 8008450:	1cb4      	adds	r4, r6, #2
 8008452:	7875      	ldrb	r5, [r6, #1]
 8008454:	f04f 0a01 	mov.w	sl, #1
 8008458:	e7a2      	b.n	80083a0 <_strtol_r+0x38>
 800845a:	7820      	ldrb	r0, [r4, #0]
 800845c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008460:	2858      	cmp	r0, #88	; 0x58
 8008462:	d003      	beq.n	800846c <_strtol_r+0x104>
 8008464:	2b00      	cmp	r3, #0
 8008466:	d19e      	bne.n	80083a6 <_strtol_r+0x3e>
 8008468:	2308      	movs	r3, #8
 800846a:	e79c      	b.n	80083a6 <_strtol_r+0x3e>
 800846c:	2310      	movs	r3, #16
 800846e:	7865      	ldrb	r5, [r4, #1]
 8008470:	4699      	mov	r9, r3
 8008472:	3402      	adds	r4, #2
 8008474:	e798      	b.n	80083a8 <_strtol_r+0x40>
 8008476:	bf00      	nop
 8008478:	2000045c 	.word	0x2000045c

0800847c <strtol>:
 800847c:	b430      	push	{r4, r5}
 800847e:	4c04      	ldr	r4, [pc, #16]	; (8008490 <strtol+0x14>)
 8008480:	460d      	mov	r5, r1
 8008482:	4613      	mov	r3, r2
 8008484:	4601      	mov	r1, r0
 8008486:	462a      	mov	r2, r5
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	bc30      	pop	{r4, r5}
 800848c:	f7ff bf6c 	b.w	8008368 <_strtol_r>
 8008490:	20000458 	.word	0x20000458

08008494 <register_fini>:
 8008494:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <register_fini+0xc>)
 8008496:	b113      	cbz	r3, 800849e <register_fini+0xa>
 8008498:	4802      	ldr	r0, [pc, #8]	; (80084a4 <register_fini+0x10>)
 800849a:	f000 b805 	b.w	80084a8 <atexit>
 800849e:	4770      	bx	lr
 80084a0:	00000000 	.word	0x00000000
 80084a4:	080084b5 	.word	0x080084b5

080084a8 <atexit>:
 80084a8:	4601      	mov	r1, r0
 80084aa:	2000      	movs	r0, #0
 80084ac:	4602      	mov	r2, r0
 80084ae:	4603      	mov	r3, r0
 80084b0:	f000 b818 	b.w	80084e4 <__register_exitproc>

080084b4 <__libc_fini_array>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d09      	ldr	r5, [pc, #36]	; (80084dc <__libc_fini_array+0x28>)
 80084b8:	4c09      	ldr	r4, [pc, #36]	; (80084e0 <__libc_fini_array+0x2c>)
 80084ba:	1b64      	subs	r4, r4, r5
 80084bc:	10a4      	asrs	r4, r4, #2
 80084be:	bf18      	it	ne
 80084c0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 80084c4:	d005      	beq.n	80084d2 <__libc_fini_array+0x1e>
 80084c6:	3c01      	subs	r4, #1
 80084c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80084cc:	4798      	blx	r3
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	d1f9      	bne.n	80084c6 <__libc_fini_array+0x12>
 80084d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d6:	f000 bd8d 	b.w	8008ff4 <_fini>
 80084da:	bf00      	nop
 80084dc:	08009008 	.word	0x08009008
 80084e0:	0800900c 	.word	0x0800900c

080084e4 <__register_exitproc>:
 80084e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084e6:	4c27      	ldr	r4, [pc, #156]	; (8008584 <__register_exitproc+0xa0>)
 80084e8:	6826      	ldr	r6, [r4, #0]
 80084ea:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80084ee:	b085      	sub	sp, #20
 80084f0:	4607      	mov	r7, r0
 80084f2:	2c00      	cmp	r4, #0
 80084f4:	d041      	beq.n	800857a <__register_exitproc+0x96>
 80084f6:	6865      	ldr	r5, [r4, #4]
 80084f8:	2d1f      	cmp	r5, #31
 80084fa:	dd1e      	ble.n	800853a <__register_exitproc+0x56>
 80084fc:	4822      	ldr	r0, [pc, #136]	; (8008588 <__register_exitproc+0xa4>)
 80084fe:	b918      	cbnz	r0, 8008508 <__register_exitproc+0x24>
 8008500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008504:	b005      	add	sp, #20
 8008506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008508:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800850c:	9103      	str	r1, [sp, #12]
 800850e:	9202      	str	r2, [sp, #8]
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	f3af 8000 	nop.w
 8008516:	9903      	ldr	r1, [sp, #12]
 8008518:	9a02      	ldr	r2, [sp, #8]
 800851a:	9b01      	ldr	r3, [sp, #4]
 800851c:	4604      	mov	r4, r0
 800851e:	2800      	cmp	r0, #0
 8008520:	d0ee      	beq.n	8008500 <__register_exitproc+0x1c>
 8008522:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8008526:	6025      	str	r5, [r4, #0]
 8008528:	2000      	movs	r0, #0
 800852a:	6060      	str	r0, [r4, #4]
 800852c:	4605      	mov	r5, r0
 800852e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8008532:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8008536:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800853a:	b93f      	cbnz	r7, 800854c <__register_exitproc+0x68>
 800853c:	1cab      	adds	r3, r5, #2
 800853e:	2000      	movs	r0, #0
 8008540:	3501      	adds	r5, #1
 8008542:	6065      	str	r5, [r4, #4]
 8008544:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008548:	b005      	add	sp, #20
 800854a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8008550:	f04f 0c01 	mov.w	ip, #1
 8008554:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8008558:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800855c:	fa0c f205 	lsl.w	r2, ip, r5
 8008560:	4316      	orrs	r6, r2
 8008562:	2f02      	cmp	r7, #2
 8008564:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8008568:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800856c:	d1e6      	bne.n	800853c <__register_exitproc+0x58>
 800856e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8008572:	431a      	orrs	r2, r3
 8008574:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8008578:	e7e0      	b.n	800853c <__register_exitproc+0x58>
 800857a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 800857e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8008582:	e7b8      	b.n	80084f6 <__register_exitproc+0x12>
 8008584:	08008ee0 	.word	0x08008ee0
 8008588:	00000000 	.word	0x00000000
 800858c:	ccbbaadd 	.word	0xccbbaadd
 8008590:	00002211 	.word	0x00002211
 8008594:	0800a8c0 	.word	0x0800a8c0
 8008598:	00ffffff 	.word	0x00ffffff
 800859c:	0100a8c0 	.word	0x0100a8c0
 80085a0:	6f746f6d 	.word	0x6f746f6d
 80085a4:	00000072 	.word	0x00000072
 80085a8:	6f746f6d 	.word	0x6f746f6d
 80085ac:	5b202072 	.word	0x5b202072
 80085b0:	6974706f 	.word	0x6974706f
 80085b4:	5d736e6f 	.word	0x5d736e6f
 80085b8:	705ba0c2 	.word	0x705ba0c2
 80085bc:	6d617261 	.word	0x6d617261
 80085c0:	72657465 	.word	0x72657465
 80085c4:	a0c25d73 	.word	0xa0c25d73
 80085c8:	7954202d 	.word	0x7954202d
 80085cc:	6d206570 	.word	0x6d206570
 80085d0:	726f746f 	.word	0x726f746f
 80085d4:	6c656820 	.word	0x6c656820
 80085d8:	6f662070 	.word	0x6f662070
 80085dc:	6f6d2072 	.word	0x6f6d2072
 80085e0:	68206572 	.word	0x68206572
 80085e4:	0d706c65 	.word	0x0d706c65
 80085e8:	00000a0a 	.word	0x00000a0a
 80085ec:	6b736174 	.word	0x6b736174
 80085f0:	00000000 	.word	0x00000000
 80085f4:	6b736174 	.word	0x6b736174
 80085f8:	72202d20 	.word	0x72202d20
 80085fc:	72757465 	.word	0x72757465
 8008600:	6174206e 	.word	0x6174206e
 8008604:	20736b73 	.word	0x20736b73
 8008608:	7473696c 	.word	0x7473696c
 800860c:	000a0a0d 	.word	0x000a0a0d
 8008610:	00000000 	.word	0x00000000
 8008614:	65657073 	.word	0x65657073
 8008618:	00000064 	.word	0x00000064
 800861c:	6f727245 	.word	0x6f727245
 8008620:	73203a72 	.word	0x73203a72
 8008624:	64656570 	.word	0x64656570
 8008628:	20736920 	.word	0x20736920
 800862c:	2074756f 	.word	0x2074756f
 8008630:	7220666f 	.word	0x7220666f
 8008634:	65676e61 	.word	0x65676e61
 8008638:	2c315b20 	.word	0x2c315b20
 800863c:	5d303031 	.word	0x5d303031
 8008640:	203a2070 	.word	0x203a2070
 8008644:	0a0a6425 	.word	0x0a0a6425
 8008648:	00000000 	.word	0x00000000
 800864c:	65657053 	.word	0x65657053
 8008650:	75732064 	.word	0x75732064
 8008654:	65736363 	.word	0x65736363
 8008658:	6c756673 	.word	0x6c756673
 800865c:	7320796c 	.word	0x7320796c
 8008660:	0a2e7465 	.word	0x0a2e7465
 8008664:	0000000a 	.word	0x0000000a
 8008668:	42444f4d 	.word	0x42444f4d
 800866c:	45205355 	.word	0x45205355
 8008670:	524f5252 	.word	0x524f5252
 8008674:	21212120 	.word	0x21212120
 8008678:	000a0a2e 	.word	0x000a0a2e
 800867c:	6f727245 	.word	0x6f727245
 8008680:	65722072 	.word	0x65722072
 8008684:	76656963 	.word	0x76656963
 8008688:	20676e69 	.word	0x20676e69
 800868c:	70736572 	.word	0x70736572
 8008690:	65736e6f 	.word	0x65736e6f
 8008694:	000a0a21 	.word	0x000a0a21
 8008698:	6f727245 	.word	0x6f727245
 800869c:	65732072 	.word	0x65732072
 80086a0:	6e69646e 	.word	0x6e69646e
 80086a4:	75512067 	.word	0x75512067
 80086a8:	21657565 	.word	0x21657565
 80086ac:	00000a0a 	.word	0x00000a0a
 80086b0:	61727075 	.word	0x61727075
 80086b4:	0000706d 	.word	0x0000706d
 80086b8:	6f727245 	.word	0x6f727245
 80086bc:	73203a72 	.word	0x73203a72
 80086c0:	64656570 	.word	0x64656570
 80086c4:	20736920 	.word	0x20736920
 80086c8:	2074756f 	.word	0x2074756f
 80086cc:	7220666f 	.word	0x7220666f
 80086d0:	65676e61 	.word	0x65676e61
 80086d4:	35315b20 	.word	0x35315b20
 80086d8:	3030332c 	.word	0x3030332c
 80086dc:	3a20705d 	.word	0x3a20705d
 80086e0:	0a642520 	.word	0x0a642520
 80086e4:	0000000a 	.word	0x0000000a
 80086e8:	72207055 	.word	0x72207055
 80086ec:	20706d61 	.word	0x20706d61
 80086f0:	63637573 	.word	0x63637573
 80086f4:	66736573 	.word	0x66736573
 80086f8:	796c6c75 	.word	0x796c6c75
 80086fc:	74657320 	.word	0x74657320
 8008700:	000a0a2e 	.word	0x000a0a2e
 8008704:	6e776f64 	.word	0x6e776f64
 8008708:	706d6172 	.word	0x706d6172
 800870c:	00000000 	.word	0x00000000
 8008710:	65657053 	.word	0x65657053
 8008714:	73692064 	.word	0x73692064
 8008718:	32252020 	.word	0x32252020
 800871c:	32252e64 	.word	0x32252e64
 8008720:	0a207064 	.word	0x0a207064
 8008724:	0000000a 	.word	0x0000000a
 8008728:	72207055 	.word	0x72207055
 800872c:	20706d61 	.word	0x20706d61
 8008730:	25207369 	.word	0x25207369
 8008734:	65732064 	.word	0x65732064
 8008738:	646e6f63 	.word	0x646e6f63
 800873c:	000a0a73 	.word	0x000a0a73
 8008740:	00000000 	.word	0x00000000
 8008744:	66206f54 	.word	0x66206f54
 8008748:	61207765 	.word	0x61207765
 800874c:	6d756772 	.word	0x6d756772
 8008750:	73746e65 	.word	0x73746e65
 8008754:	0a0a202e 	.word	0x0a0a202e
 8008758:	00000000 	.word	0x00000000
 800875c:	706c6568 	.word	0x706c6568
 8008760:	00000000 	.word	0x00000000
 8008764:	67617355 	.word	0x67617355
 8008768:	6e612065 	.word	0x6e612065
 800876c:	61702064 	.word	0x61702064
 8008770:	656d6172 	.word	0x656d6172
 8008774:	73726574 	.word	0x73726574
 8008778:	74706f0a 	.word	0x74706f0a
 800877c:	736e6f69 	.word	0x736e6f69
 8008780:	67090a3a 	.word	0x67090a3a
 8008784:	2d207465 	.word	0x2d207465
 8008788:	74656720 	.word	0x74656720
 800878c:	746f6d20 	.word	0x746f6d20
 8008790:	7020726f 	.word	0x7020726f
 8008794:	6d617261 	.word	0x6d617261
 8008798:	72657465 	.word	0x72657465
 800879c:	6c617620 	.word	0x6c617620
 80087a0:	090a6575 	.word	0x090a6575
 80087a4:	20746573 	.word	0x20746573
 80087a8:	6573202d 	.word	0x6573202d
 80087ac:	6f6d2074 	.word	0x6f6d2074
 80087b0:	20726f74 	.word	0x20726f74
 80087b4:	61726170 	.word	0x61726170
 80087b8:	6574656d 	.word	0x6574656d
 80087bc:	61762072 	.word	0x61762072
 80087c0:	0a65756c 	.word	0x0a65756c
 80087c4:	61747309 	.word	0x61747309
 80087c8:	2d207472 	.word	0x2d207472
 80087cc:	61747320 	.word	0x61747320
 80087d0:	20737472 	.word	0x20737472
 80087d4:	6f746f6d 	.word	0x6f746f6d
 80087d8:	73090a72 	.word	0x73090a72
 80087dc:	20706f74 	.word	0x20706f74
 80087e0:	7473202d 	.word	0x7473202d
 80087e4:	2073706f 	.word	0x2073706f
 80087e8:	6f746f6d 	.word	0x6f746f6d
 80087ec:	61700a72 	.word	0x61700a72
 80087f0:	656d6172 	.word	0x656d6172
 80087f4:	3a737274 	.word	0x3a737274
 80087f8:	7073090a 	.word	0x7073090a
 80087fc:	20646565 	.word	0x20646565
 8008800:	6573202d 	.word	0x6573202d
 8008804:	73207374 	.word	0x73207374
 8008808:	64656570 	.word	0x64656570
 800880c:	7075090a 	.word	0x7075090a
 8008810:	706d6172 	.word	0x706d6172
 8008814:	6f64090a 	.word	0x6f64090a
 8008818:	61726e77 	.word	0x61726e77
 800881c:	000a706d 	.word	0x000a706d
 8008820:	00000000 	.word	0x00000000
 8008824:	00746573 	.word	0x00746573
 8008828:	00746567 	.word	0x00746567
 800882c:	706f7473 	.word	0x706f7473
 8008830:	00000000 	.word	0x00000000
 8008834:	6f746f4d 	.word	0x6f746f4d
 8008838:	75732072 	.word	0x75732072
 800883c:	65736363 	.word	0x65736363
 8008840:	6c756673 	.word	0x6c756673
 8008844:	7320796c 	.word	0x7320796c
 8008848:	70706f74 	.word	0x70706f74
 800884c:	0a2e6465 	.word	0x0a2e6465
 8008850:	0000000a 	.word	0x0000000a
 8008854:	72617473 	.word	0x72617473
 8008858:	00000074 	.word	0x00000074
 800885c:	6f746f4d 	.word	0x6f746f4d
 8008860:	75732072 	.word	0x75732072
 8008864:	65736363 	.word	0x65736363
 8008868:	6c756673 	.word	0x6c756673
 800886c:	7320796c 	.word	0x7320796c
 8008870:	74726174 	.word	0x74726174
 8008874:	0a2e6465 	.word	0x0a2e6465
 8008878:	0000000a 	.word	0x0000000a
 800887c:	6c756e28 	.word	0x6c756e28
 8008880:	0000296c 	.word	0x0000296c
 8008884:	6f746f6d 	.word	0x6f746f6d
 8008888:	00000072 	.word	0x00000072
 800888c:	6f746f6d 	.word	0x6f746f6d
 8008890:	5b202072 	.word	0x5b202072
 8008894:	6974706f 	.word	0x6974706f
 8008898:	5d736e6f 	.word	0x5d736e6f
 800889c:	705ba0c2 	.word	0x705ba0c2
 80088a0:	6d617261 	.word	0x6d617261
 80088a4:	72657465 	.word	0x72657465
 80088a8:	a0c25d73 	.word	0xa0c25d73
 80088ac:	7954202d 	.word	0x7954202d
 80088b0:	6d206570 	.word	0x6d206570
 80088b4:	726f746f 	.word	0x726f746f
 80088b8:	6c656820 	.word	0x6c656820
 80088bc:	6f662070 	.word	0x6f662070
 80088c0:	6f6d2072 	.word	0x6f6d2072
 80088c4:	68206572 	.word	0x68206572
 80088c8:	0d706c65 	.word	0x0d706c65
 80088cc:	00000a0a 	.word	0x00000a0a
 80088d0:	6b736174 	.word	0x6b736174
 80088d4:	00000000 	.word	0x00000000
 80088d8:	6b736174 	.word	0x6b736174
 80088dc:	72202d20 	.word	0x72202d20
 80088e0:	72757465 	.word	0x72757465
 80088e4:	6174206e 	.word	0x6174206e
 80088e8:	20736b73 	.word	0x20736b73
 80088ec:	7473696c 	.word	0x7473696c
 80088f0:	000a0a0d 	.word	0x000a0a0d
 80088f4:	00000000 	.word	0x00000000
 80088f8:	73504354 	.word	0x73504354
 80088fc:	00007672 	.word	0x00007672
 8008900:	6f746f6d 	.word	0x6f746f6d
 8008904:	00424872 	.word	0x00424872
 8008908:	74696e69 	.word	0x74696e69
 800890c:	3235575f 	.word	0x3235575f
 8008910:	00003030 	.word	0x00003030
 8008914:	454c4449 	.word	0x454c4449
 8008918:	00000000 	.word	0x00000000
 800891c:	09097325 	.word	0x09097325
 8008920:	25096325 	.word	0x25096325
 8008924:	75250975 	.word	0x75250975
 8008928:	0d752509 	.word	0x0d752509
 800892c:	0000000a 	.word	0x0000000a
 8008930:	20726d54 	.word	0x20726d54
 8008934:	00637653 	.word	0x00637653
 8008938:	706c6568 	.word	0x706c6568
 800893c:	00000000 	.word	0x00000000
 8008940:	65680a0d 	.word	0x65680a0d
 8008944:	0d3a706c 	.word	0x0d3a706c
 8008948:	694c200a 	.word	0x694c200a
 800894c:	20737473 	.word	0x20737473
 8008950:	206c6c61 	.word	0x206c6c61
 8008954:	20656874 	.word	0x20656874
 8008958:	69676572 	.word	0x69676572
 800895c:	72657473 	.word	0x72657473
 8008960:	63206465 	.word	0x63206465
 8008964:	616d6d6f 	.word	0x616d6d6f
 8008968:	0d73646e 	.word	0x0d73646e
 800896c:	000a0d0a 	.word	0x000a0d0a
 8008970:	6f636e49 	.word	0x6f636e49
 8008974:	63657272 	.word	0x63657272
 8008978:	6f632074 	.word	0x6f632074
 800897c:	6e616d6d 	.word	0x6e616d6d
 8008980:	61702064 	.word	0x61702064
 8008984:	656d6172 	.word	0x656d6172
 8008988:	28726574 	.word	0x28726574
 800898c:	202e2973 	.word	0x202e2973
 8008990:	746e4520 	.word	0x746e4520
 8008994:	22207265 	.word	0x22207265
 8008998:	706c6568 	.word	0x706c6568
 800899c:	6f742022 	.word	0x6f742022
 80089a0:	65697620 	.word	0x65697620
 80089a4:	20612077 	.word	0x20612077
 80089a8:	7473696c 	.word	0x7473696c
 80089ac:	20666f20 	.word	0x20666f20
 80089b0:	69617661 	.word	0x69617661
 80089b4:	6c62616c 	.word	0x6c62616c
 80089b8:	6f632065 	.word	0x6f632065
 80089bc:	6e616d6d 	.word	0x6e616d6d
 80089c0:	0d2e7364 	.word	0x0d2e7364
 80089c4:	000a0d0a 	.word	0x000a0d0a
 80089c8:	6d6d6f43 	.word	0x6d6d6f43
 80089cc:	20646e61 	.word	0x20646e61
 80089d0:	20746f6e 	.word	0x20746f6e
 80089d4:	6f636572 	.word	0x6f636572
 80089d8:	73696e67 	.word	0x73696e67
 80089dc:	202e6465 	.word	0x202e6465
 80089e0:	746e4520 	.word	0x746e4520
 80089e4:	27207265 	.word	0x27207265
 80089e8:	706c6568 	.word	0x706c6568
 80089ec:	6f742027 	.word	0x6f742027
 80089f0:	65697620 	.word	0x65697620
 80089f4:	20612077 	.word	0x20612077
 80089f8:	7473696c 	.word	0x7473696c
 80089fc:	20666f20 	.word	0x20666f20
 8008a00:	69617661 	.word	0x69617661
 8008a04:	6c62616c 	.word	0x6c62616c
 8008a08:	6f632065 	.word	0x6f632065
 8008a0c:	6e616d6d 	.word	0x6e616d6d
 8008a10:	0d2e7364 	.word	0x0d2e7364
 8008a14:	000a0d0a 	.word	0x000a0d0a
 8008a18:	2f707041 	.word	0x2f707041
 8008a1c:	334d5453 	.word	0x334d5453
 8008a20:	2d344632 	.word	0x2d344632
 8008a24:	63736944 	.word	0x63736944
 8008a28:	7265766f 	.word	0x7265766f
 8008a2c:	694c2f79 	.word	0x694c2f79
 8008a30:	72617262 	.word	0x72617262
 8008a34:	2f736569 	.word	0x2f736569
 8008a38:	334d5453 	.word	0x334d5453
 8008a3c:	78344632 	.word	0x78344632
 8008a40:	74535f78 	.word	0x74535f78
 8008a44:	72655064 	.word	0x72655064
 8008a48:	5f687069 	.word	0x5f687069
 8008a4c:	76697244 	.word	0x76697244
 8008a50:	732f7265 	.word	0x732f7265
 8008a54:	6d2f6372 	.word	0x6d2f6372
 8008a58:	2e637369 	.word	0x2e637369
 8008a5c:	00000063 	.word	0x00000063
 8008a60:	2f707041 	.word	0x2f707041
 8008a64:	334d5453 	.word	0x334d5453
 8008a68:	2d344632 	.word	0x2d344632
 8008a6c:	63736944 	.word	0x63736944
 8008a70:	7265766f 	.word	0x7265766f
 8008a74:	694c2f79 	.word	0x694c2f79
 8008a78:	72617262 	.word	0x72617262
 8008a7c:	2f736569 	.word	0x2f736569
 8008a80:	334d5453 	.word	0x334d5453
 8008a84:	78344632 	.word	0x78344632
 8008a88:	74535f78 	.word	0x74535f78
 8008a8c:	72655064 	.word	0x72655064
 8008a90:	5f687069 	.word	0x5f687069
 8008a94:	76697244 	.word	0x76697244
 8008a98:	732f7265 	.word	0x732f7265
 8008a9c:	732f6372 	.word	0x732f6372
 8008aa0:	32336d74 	.word	0x32336d74
 8008aa4:	78783466 	.word	0x78783466
 8008aa8:	616d645f 	.word	0x616d645f
 8008aac:	0000632e 	.word	0x0000632e
 8008ab0:	2f707041 	.word	0x2f707041
 8008ab4:	334d5453 	.word	0x334d5453
 8008ab8:	2d344632 	.word	0x2d344632
 8008abc:	63736944 	.word	0x63736944
 8008ac0:	7265766f 	.word	0x7265766f
 8008ac4:	694c2f79 	.word	0x694c2f79
 8008ac8:	72617262 	.word	0x72617262
 8008acc:	2f736569 	.word	0x2f736569
 8008ad0:	334d5453 	.word	0x334d5453
 8008ad4:	78344632 	.word	0x78344632
 8008ad8:	74535f78 	.word	0x74535f78
 8008adc:	72655064 	.word	0x72655064
 8008ae0:	5f687069 	.word	0x5f687069
 8008ae4:	76697244 	.word	0x76697244
 8008ae8:	732f7265 	.word	0x732f7265
 8008aec:	732f6372 	.word	0x732f6372
 8008af0:	32336d74 	.word	0x32336d74
 8008af4:	78783466 	.word	0x78783466
 8008af8:	7478655f 	.word	0x7478655f
 8008afc:	00632e69 	.word	0x00632e69
 8008b00:	2f707041 	.word	0x2f707041
 8008b04:	334d5453 	.word	0x334d5453
 8008b08:	2d344632 	.word	0x2d344632
 8008b0c:	63736944 	.word	0x63736944
 8008b10:	7265766f 	.word	0x7265766f
 8008b14:	694c2f79 	.word	0x694c2f79
 8008b18:	72617262 	.word	0x72617262
 8008b1c:	2f736569 	.word	0x2f736569
 8008b20:	334d5453 	.word	0x334d5453
 8008b24:	78344632 	.word	0x78344632
 8008b28:	74535f78 	.word	0x74535f78
 8008b2c:	72655064 	.word	0x72655064
 8008b30:	5f687069 	.word	0x5f687069
 8008b34:	76697244 	.word	0x76697244
 8008b38:	732f7265 	.word	0x732f7265
 8008b3c:	732f6372 	.word	0x732f6372
 8008b40:	32336d74 	.word	0x32336d74
 8008b44:	78783466 	.word	0x78783466
 8008b48:	6970675f 	.word	0x6970675f
 8008b4c:	00632e6f 	.word	0x00632e6f
 8008b50:	2f707041 	.word	0x2f707041
 8008b54:	334d5453 	.word	0x334d5453
 8008b58:	2d344632 	.word	0x2d344632
 8008b5c:	63736944 	.word	0x63736944
 8008b60:	7265766f 	.word	0x7265766f
 8008b64:	694c2f79 	.word	0x694c2f79
 8008b68:	72617262 	.word	0x72617262
 8008b6c:	2f736569 	.word	0x2f736569
 8008b70:	334d5453 	.word	0x334d5453
 8008b74:	78344632 	.word	0x78344632
 8008b78:	74535f78 	.word	0x74535f78
 8008b7c:	72655064 	.word	0x72655064
 8008b80:	5f687069 	.word	0x5f687069
 8008b84:	76697244 	.word	0x76697244
 8008b88:	732f7265 	.word	0x732f7265
 8008b8c:	732f6372 	.word	0x732f6372
 8008b90:	32336d74 	.word	0x32336d74
 8008b94:	78783466 	.word	0x78783466
 8008b98:	6363725f 	.word	0x6363725f
 8008b9c:	0000632e 	.word	0x0000632e
 8008ba0:	2f707041 	.word	0x2f707041
 8008ba4:	334d5453 	.word	0x334d5453
 8008ba8:	2d344632 	.word	0x2d344632
 8008bac:	63736944 	.word	0x63736944
 8008bb0:	7265766f 	.word	0x7265766f
 8008bb4:	694c2f79 	.word	0x694c2f79
 8008bb8:	72617262 	.word	0x72617262
 8008bbc:	2f736569 	.word	0x2f736569
 8008bc0:	334d5453 	.word	0x334d5453
 8008bc4:	78344632 	.word	0x78344632
 8008bc8:	74535f78 	.word	0x74535f78
 8008bcc:	72655064 	.word	0x72655064
 8008bd0:	5f687069 	.word	0x5f687069
 8008bd4:	76697244 	.word	0x76697244
 8008bd8:	732f7265 	.word	0x732f7265
 8008bdc:	732f6372 	.word	0x732f6372
 8008be0:	32336d74 	.word	0x32336d74
 8008be4:	78783466 	.word	0x78783466
 8008be8:	6970735f 	.word	0x6970735f
 8008bec:	0000632e 	.word	0x0000632e
 8008bf0:	2f707041 	.word	0x2f707041
 8008bf4:	334d5453 	.word	0x334d5453
 8008bf8:	2d344632 	.word	0x2d344632
 8008bfc:	63736944 	.word	0x63736944
 8008c00:	7265766f 	.word	0x7265766f
 8008c04:	694c2f79 	.word	0x694c2f79
 8008c08:	72617262 	.word	0x72617262
 8008c0c:	2f736569 	.word	0x2f736569
 8008c10:	334d5453 	.word	0x334d5453
 8008c14:	78344632 	.word	0x78344632
 8008c18:	74535f78 	.word	0x74535f78
 8008c1c:	72655064 	.word	0x72655064
 8008c20:	5f687069 	.word	0x5f687069
 8008c24:	76697244 	.word	0x76697244
 8008c28:	732f7265 	.word	0x732f7265
 8008c2c:	732f6372 	.word	0x732f6372
 8008c30:	32336d74 	.word	0x32336d74
 8008c34:	78783466 	.word	0x78783466
 8008c38:	7379735f 	.word	0x7379735f
 8008c3c:	2e676663 	.word	0x2e676663
 8008c40:	00000063 	.word	0x00000063
 8008c44:	2f707041 	.word	0x2f707041
 8008c48:	334d5453 	.word	0x334d5453
 8008c4c:	2d344632 	.word	0x2d344632
 8008c50:	63736944 	.word	0x63736944
 8008c54:	7265766f 	.word	0x7265766f
 8008c58:	694c2f79 	.word	0x694c2f79
 8008c5c:	72617262 	.word	0x72617262
 8008c60:	2f736569 	.word	0x2f736569
 8008c64:	334d5453 	.word	0x334d5453
 8008c68:	78344632 	.word	0x78344632
 8008c6c:	74535f78 	.word	0x74535f78
 8008c70:	72655064 	.word	0x72655064
 8008c74:	5f687069 	.word	0x5f687069
 8008c78:	76697244 	.word	0x76697244
 8008c7c:	732f7265 	.word	0x732f7265
 8008c80:	732f6372 	.word	0x732f6372
 8008c84:	32336d74 	.word	0x32336d74
 8008c88:	78783466 	.word	0x78783466
 8008c8c:	6173755f 	.word	0x6173755f
 8008c90:	632e7472 	.word	0x632e7472
 8008c94:	00000000 	.word	0x00000000

08008c98 <table_crc_hi>:
 8008c98:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008ca8:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008cb8:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008cc8:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008cd8:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008ce8:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008cf8:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008d08:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008d18:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008d28:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008d38:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008d48:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008d58:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008d68:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008d78:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008d88:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@

08008d98 <table_crc_lo>:
 8008d98:	01c1c000 c20203c3 c70706c6 04c4c505     ................
 8008da8:	cd0d0ccc 0ececf0f 0bcbca0a c80809c9     ................
 8008db8:	d91918d8 1adadb1b 1fdfde1e dc1c1ddd     ................
 8008dc8:	15d5d414 d61617d7 d31312d2 10d0d111     ................
 8008dd8:	f13130f0 32f2f333 37f7f636 f43435f5     .01.3..26..7.54.
 8008de8:	3dfdfc3c fe3e3fff fb3b3afa 38f8f939     <..=.?>..:;.9..8
 8008df8:	29e9e828 ea2a2beb ef2f2eee 2ceced2d     (..).+*.../.-..,
 8008e08:	e52524e4 26e6e727 23e3e222 e02021e1     .$%.'..&"..#.! .
 8008e18:	a16160a0 62a2a363 67a7a666 a46465a5     .`a.c..bf..g.ed.
 8008e28:	6dadac6c ae6e6faf ab6b6aaa 68a8a969     l..m.on..jk.i..h
 8008e38:	79b9b878 ba7a7bbb bf7f7ebe 7cbcbd7d     x..y.{z..~..}..|
 8008e48:	b57574b4 76b6b777 73b3b272 b07071b1     .tu.w..vr..s.qp.
 8008e58:	51919050 92525393 97575696 54949555     P..Q.SR..VW.U..T
 8008e68:	9d5d5c9c 5e9e9f5f 5b9b9a5a 98585999     .\]._..^Z..[.YX.
 8008e78:	89494888 4a8a8b4b 4f8f8e4e 8c4c4d8d     .HI.K..JN..O.ML.
 8008e88:	45858444 86464787 83434282 40808141     D..E.GF..BC.A..@

08008e98 <xMotorCommand>:
 8008e98:	08008884 0800888c 080025d9 000000ff     .........%......

08008ea8 <xTaskStatsCommand>:
 8008ea8:	080088d0 080088d8 08002951 00000000     ........Q)......

08008eb8 <ucExpectedStackBytes.9202>:
 8008eb8:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8008ec8:	a5a5a5a5                                ....

08008ecc <xHelpCommand>:
 8008ecc:	08008938 08008940 08005655 00000000     8...@...UV......
 8008edc:	00000043                                C...

08008ee0 <_global_impure_ptr>:
 8008ee0:	20000030                                0.. 

08008ee4 <_ctype_>:
 8008ee4:	20202000 20202020 28282020 20282828     .         ((((( 
 8008ef4:	20202020 20202020 20202020 20202020                     
 8008f04:	10108820 10101010 10101010 10101010      ...............
 8008f14:	04040410 04040404 10040404 10101010     ................
 8008f24:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8008f34:	01010101 01010101 01010101 10101010     ................
 8008f44:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8008f54:	02020202 02020202 02020202 10101010     ................
 8008f64:	00000020 00000000 00000000 00000000      ...............
 8008f74:	00000000 00000000 00000000 00000000     ................
 8008f84:	00000000 00000000 00000000 00000000     ................
 8008f94:	00000000 00000000 00000000 00000000     ................
 8008fa4:	00000000 00000000 00000000 00000000     ................
 8008fb4:	00000000 00000000 00000000 00000000     ................
 8008fc4:	00000000 00000000 00000000 00000000     ................
 8008fd4:	00000000 00000000 00000000 00000000     ................
 8008fe4:	00000000                                ....

08008fe8 <_init>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr

08008ff4 <_fini>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr
