
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008924  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08008aac  08008aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08008ab4  08008ab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000460  20000000  08008ab8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013dfc  20000460  08008f18  00018460  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  2001425c  0801cd14  00018460  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00018460  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b7a0  00000000  00000000  0001848e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000246f  00000000  00000000  00023c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000472b  00000000  00000000  0002609d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c90  00000000  00000000  0002a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  0002b458  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f80  00000000  00000000  0002bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004316  00000000  00000000  00031f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0003621e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002cd8  00000000  00000000  00036290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000460 	.word	0x20000460
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a94 	.word	0x08008a94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008a94 	.word	0x08008a94
 80001d0:	20000464 	.word	0x20000464
 80001d4:	20000460 	.word	0x20000460
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
#define pdTrue 	1

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f006 fe83 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f006 fe7f 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f006 fe7b 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	48b1      	ldr	r0, [pc, #708]	; (8000614 <init_SPIx+0x304>)
 8000350:	4619      	mov	r1, r3
 8000352:	f006 fb7f 	bl	8006a54 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000376:	48a7      	ldr	r0, [pc, #668]	; (8000614 <init_SPIx+0x304>)
 8000378:	4619      	mov	r1, r3
 800037a:	f006 fb6b 	bl	8006a54 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039e:	489d      	ldr	r0, [pc, #628]	; (8000614 <init_SPIx+0x304>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f006 fb57 	bl	8006a54 <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	489b      	ldr	r0, [pc, #620]	; (8000614 <init_SPIx+0x304>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f006 fc68 	bl	8006c80 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	4898      	ldr	r0, [pc, #608]	; (8000614 <init_SPIx+0x304>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f006 fc63 	bl	8006c80 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	4896      	ldr	r0, [pc, #600]	; (8000614 <init_SPIx+0x304>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f006 fc5e 	bl	8006c80 <GPIO_PinAFConfig>


	RCC_AHB1PeriphClockCmd(WIZ_HR_GPIO_CLK, ENABLE);
 80003c4:	2004      	movs	r0, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	f006 fe2c 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(WIZ_IT_GPIO_CLK, ENABLE);
 80003cc:	2004      	movs	r0, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	f006 fe28 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	
		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003d4:	2310      	movs	r3, #16
 80003d6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003d8:	2301      	movs	r3, #1
 80003da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <init_SPIx+0x304>)
 80003f6:	4619      	mov	r1, r3
 80003f8:	f006 fb2c 	bl	8006a54 <GPIO_Init>
	
	CSOFF(); // set PA4 high
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 80003fe:	4a85      	ldr	r2, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 8000400:	8b12      	ldrh	r2, [r2, #24]
 8000402:	b292      	uxth	r2, r2
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	b292      	uxth	r2, r2
 800040a:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = WIZ_HR_PIN;
 800040c:	2320      	movs	r3, #32
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000422:	2301      	movs	r3, #1
 8000424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(WIZ_HR_GPIO_PORT, &GPIO_InitStruct);
 8000428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800042c:	487a      	ldr	r0, [pc, #488]	; (8000618 <init_SPIx+0x308>)
 800042e:	4619      	mov	r1, r3
 8000430:	f006 fb10 	bl	8006a54 <GPIO_Init>
	
	RESET_LOW(); // set PA3 high
 8000434:	4b78      	ldr	r3, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000436:	4a78      	ldr	r2, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000438:	8b12      	ldrh	r2, [r2, #24]
 800043a:	b292      	uxth	r2, r2
 800043c:	f042 0220 	orr.w	r2, r2, #32
 8000440:	b292      	uxth	r2, r2
 8000442:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 8000444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000448:	2101      	movs	r1, #1
 800044a:	f006 fe23 	bl	8007094 <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800044e:	2300      	movs	r3, #0
 8000450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000462:	2300      	movs	r3, #0
 8000464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800046e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000476:	2308      	movs	r3, #8
 8000478:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPIx, &SPI_InitStruct); 
 8000482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000486:	4865      	ldr	r0, [pc, #404]	; (800061c <init_SPIx+0x30c>)
 8000488:	4619      	mov	r1, r3
 800048a:	f006 fe3b 	bl	8007104 <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 800048e:	4863      	ldr	r0, [pc, #396]	; (800061c <init_SPIx+0x30c>)
 8000490:	2101      	movs	r1, #1
 8000492:	f006 ff29 	bl	80072e8 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000496:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800049a:	2101      	movs	r1, #1
 800049c:	f006 fdc2 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 80004a0:	485f      	ldr	r0, [pc, #380]	; (8000620 <init_SPIx+0x310>)
 80004a2:	f005 f9ef 	bl	8005884 <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 80004a6:	485f      	ldr	r0, [pc, #380]	; (8000624 <init_SPIx+0x314>)
 80004a8:	f005 f9ec 	bl	8005884 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 80004ac:	bf00      	nop
 80004ae:	485c      	ldr	r0, [pc, #368]	; (8000620 <init_SPIx+0x310>)
 80004b0:	f005 fdf8 	bl	80060a4 <DMA_GetCmdStatus>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <init_SPIx+0x19e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 80004ba:	bf00      	nop
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <init_SPIx+0x314>)
 80004be:	f005 fdf1 	bl	80060a4 <DMA_GetCmdStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <init_SPIx+0x1ac>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f005 fcb3 	bl	8005e38 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <init_SPIx+0x318>)
 80004e2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <init_SPIx+0x31c>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <init_SPIx+0x310>)
 8000510:	4619      	mov	r1, r3
 8000512:	f005 facd 	bl	8005ab0 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 8000516:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800051a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <init_SPIx+0x320>)
 8000522:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000528:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <init_SPIx+0x314>)
 8000530:	4619      	mov	r1, r3
 8000532:	f005 fabd 	bl	8005ab0 <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <init_SPIx+0x310>)
 8000538:	2110      	movs	r1, #16
 800053a:	2201      	movs	r2, #1
 800053c:	f005 fe30 	bl	80061a0 <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000540:	4838      	ldr	r0, [pc, #224]	; (8000624 <init_SPIx+0x314>)
 8000542:	2110      	movs	r1, #16
 8000544:	2201      	movs	r2, #1
 8000546:	f005 fe2b 	bl	80061a0 <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <init_SPIx+0x30c>)
 800054c:	2102      	movs	r1, #2
 800054e:	f006 ffc9 	bl	80074e4 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <init_SPIx+0x30c>)
 8000554:	2101      	movs	r1, #1
 8000556:	f006 ffc5 	bl	80074e4 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 800055a:	233b      	movs	r3, #59	; 0x3b
 800055c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;
 800055e:	2306      	movs	r3, #6
 8000560:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000562:	2301      	movs	r3, #1
 8000564:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f005 f90e 	bl	8005790 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 8000574:	233a      	movs	r3, #58	; 0x3a
 8000576:	733b      	strb	r3, [r7, #12]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;
 8000578:	2306      	movs	r3, #6
 800057a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x2;
 800057c:	2302      	movs	r3, #2
 800057e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f005 f901 	bl	8005790 <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800058e:	4823      	ldr	r0, [pc, #140]	; (800061c <init_SPIx+0x30c>)
 8000590:	2102      	movs	r1, #2
 8000592:	2201      	movs	r2, #1
 8000594:	f006 feea 	bl	800736c <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <init_SPIx+0x30c>)
 800059a:	2101      	movs	r1, #1
 800059c:	2201      	movs	r2, #1
 800059e:	f006 fee5 	bl	800736c <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin */
	GPIO_InitStruct.GPIO_Pin = WIZ_IT_PIN;
 80005a2:	2310      	movs	r3, #16
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(WIZ_IT_GPIO_PORT, &GPIO_InitStruct);	
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <init_SPIx+0x308>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	f006 fa45 	bl	8006a54 <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2101      	movs	r1, #1
 80005d0:	f006 fd60 	bl	8007094 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(WIZ_IT_EXTI_PORT_SOURCE, WIZ_IT_EXTI_PIN_SOURCE);
 80005d4:	2002      	movs	r0, #2
 80005d6:	2104      	movs	r1, #4
 80005d8:	f006 ffbe 	bl	8007558 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = WIZ_IT_EXTI_LINE;
 80005dc:	2310      	movs	r3, #16
 80005de:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005e0:	2300      	movs	r3, #0
 80005e2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005e4:	230c      	movs	r3, #12
 80005e6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 f8f4 	bl	80067dc <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = WIZ_IT_EXTI_IRQn;
 80005f4:	230a      	movs	r3, #10
 80005f6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 5;
 80005f8:	230a      	movs	r3, #10
 80005fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f005 f8c2 	bl	8005790 <NVIC_Init>


	
}
 800060c:	3768      	adds	r7, #104	; 0x68
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020800 	.word	0x40020800
 800061c:	40013000 	.word	0x40013000
 8000620:	40026458 	.word	0x40026458
 8000624:	40026440 	.word	0x40026440
 8000628:	4001300c 	.word	0x4001300c
 800062c:	200139d8 	.word	0x200139d8
 8000630:	20013200 	.word	0x20013200

08000634 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 800063a:	491e      	ldr	r1, [pc, #120]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800063c:	f005 fe66 	bl	800630c <DMA_GetITStatus>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02a      	beq.n	800069c <DMA2_Stream2_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000648:	491a      	ldr	r1, [pc, #104]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800064a:	f006 f81b 	bl	8006684 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800064e:	bf00      	nop
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	f006 fee8 	bl	8007428 <SPI_I2S_GetFlagStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <DMA2_Stream2_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000662:	8b12      	ldrh	r2, [r2, #24]
 8000664:	b292      	uxth	r2, r2
 8000666:	f042 0210 	orr.w	r2, r2, #16
 800066a:	b292      	uxth	r2, r2
 800066c:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000670:	2100      	movs	r1, #0
 8000672:	f005 fc17 	bl	8005ea4 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <DMA2_Stream2_IRQHandler+0x7c>)
 8000678:	2100      	movs	r1, #0
 800067a:	f005 fc13 	bl	8005ea4 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 800067e:	f004 fa3d 	bl	8004afc <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xHigherPriorityTaskWoken = pdFalse;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA2_Stream2_IRQHandler+0x94>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	2100      	movs	r1, #0
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000692:	2300      	movs	r3, #0
 8000694:	f003 fe44 	bl	8004320 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 8000698:	f004 fa40 	bl	8004b1c <vPortExitCritical>
  }	

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <DMA2_Stream2_IRQHandler+0x78>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <DMA2_Stream2_IRQHandler+0x98>)
 80006a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40026440 	.word	0x40026440
 80006b4:	10208000 	.word	0x10208000
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40026458 	.word	0x40026458
 80006c4:	2000047c 	.word	0x2000047c
 80006c8:	200131ec 	.word	0x200131ec
 80006cc:	e000ed04 	.word	0xe000ed04

080006d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 80006d4:	481d      	ldr	r0, [pc, #116]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006d6:	491e      	ldr	r1, [pc, #120]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006d8:	f005 fe18 	bl	800630c <DMA_GetITStatus>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d02a      	beq.n	8000738 <DMA2_Stream3_IRQHandler+0x68>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006e6:	f005 ffcd 	bl	8006684 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006ea:	bf00      	nop
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	f006 fe9a 	bl	8007428 <SPI_I2S_GetFlagStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0f8      	beq.n	80006ec <DMA2_Stream3_IRQHandler+0x1c>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006fe:	8b12      	ldrh	r2, [r2, #24]
 8000700:	b292      	uxth	r2, r2
 8000702:	f042 0210 	orr.w	r2, r2, #16
 8000706:	b292      	uxth	r2, r2
 8000708:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <DMA2_Stream3_IRQHandler+0x7c>)
 800070c:	2100      	movs	r1, #0
 800070e:	f005 fbc9 	bl	8005ea4 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000714:	2100      	movs	r1, #0
 8000716:	f005 fbc5 	bl	8005ea4 <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 800071a:	f004 f9ef 	bl	8004afc <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xHigherPriorityTaskWoken = pdFalse;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <DMA2_Stream3_IRQHandler+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800072e:	2300      	movs	r3, #0
 8000730:	f003 fdf6 	bl	8004320 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000734:	f004 f9f2 	bl	8004b1c <vPortExitCritical>
 }
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <DMA2_Stream3_IRQHandler+0x78>
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DMA2_Stream3_IRQHandler+0x98>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40026458 	.word	0x40026458
 8000750:	18008000 	.word	0x18008000
 8000754:	40013000 	.word	0x40013000
 8000758:	40020000 	.word	0x40020000
 800075c:	40026440 	.word	0x40026440
 8000760:	2000047c 	.word	0x2000047c
 8000764:	200131ec 	.word	0x200131ec
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <spi_dma_send>:


/*---------------------------- Matic Knap 25 Jun 2014 ---------------------*/

void spi_dma_send(uint16_t address, uint16_t data_len, uint8_t *data_buf)
{
 800076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	460b      	mov	r3, r1
 8000776:	603a      	str	r2, [r7, #0]
 8000778:	4602      	mov	r2, r0
 800077a:	80fa      	strh	r2, [r7, #6]
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	466b      	mov	r3, sp
 8000780:	461e      	mov	r6, r3
		uint8_t buffer[data_len+4];
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	1d19      	adds	r1, r3, #4
 8000786:	1e4b      	subs	r3, r1, #1
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	460b      	mov	r3, r1
 800078c:	461a      	mov	r2, r3
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8000796:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800079a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800079e:	460b      	mov	r3, r1
 80007a0:	461a      	mov	r2, r3
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	00dd      	lsls	r5, r3, #3
 80007a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80007ac:	00d4      	lsls	r4, r2, #3
 80007ae:	460b      	mov	r3, r1
 80007b0:	3307      	adds	r3, #7
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	ebad 0d03 	sub.w	sp, sp, r3
 80007ba:	466b      	mov	r3, sp
 80007bc:	3300      	adds	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80007da:	121b      	asrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 80007f2:	2304      	movs	r3, #4
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <spi_dma_send+0xa4>
			buffer[i] = (data_buf[i-4]);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	68f9      	ldr	r1, [r7, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	440b      	add	r3, r1
 8000808:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
		buffer[3] = (data_len & 0x00ff);

		int i;
		for (i = 4 ; i < data_len+4; i++) 
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	1d1a      	adds	r2, r3, #4
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	429a      	cmp	r2, r3
 8000818:	dcee      	bgt.n	80007f8 <spi_dma_send+0x8c>
			buffer[i] = (data_buf[i-4]);
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, data_len + 4);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	3304      	adds	r3, #4
 800081e:	b29b      	uxth	r3, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <spi_dma_send+0x100>)
 8000822:	4619      	mov	r1, r3
 8000824:	f005 fbca 	bl	8005fbc <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <spi_dma_send+0x100>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <spi_dma_send+0x104>)
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <spi_dma_send+0x104>)
 8000832:	8b52      	ldrh	r2, [r2, #26]
 8000834:	b292      	uxth	r2, r2
 8000836:	f042 0210 	orr.w	r2, r2, #16
 800083a:	b292      	uxth	r2, r2
 800083c:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <spi_dma_send+0x100>)
 8000840:	2101      	movs	r1, #1
 8000842:	f005 fb2f 	bl	8005ea4 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <spi_dma_send+0x108>)
 8000848:	2101      	movs	r1, #1
 800084a:	f005 fb2b 	bl	8005ea4 <DMA_Cmd>
		/* Block until the semaphore is given */
        	 xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <spi_dma_send+0x10c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800085a:	2300      	movs	r3, #0
 800085c:	f003 fdca 	bl	80043f4 <xQueueGenericReceive>
 8000860:	46b5      	mov	sp, r6

	//	CSOFF(); // chip deselect 
			
	
}
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800086a:	bf00      	nop
 800086c:	40026458 	.word	0x40026458
 8000870:	40020000 	.word	0x40020000
 8000874:	40026440 	.word	0x40026440
 8000878:	200131ec 	.word	0x200131ec

0800087c <spi_dma_send2B>:

void spi_dma_send2B(uint16_t address,  uint16_t data_buf)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4602      	mov	r2, r0
 8000884:	460b      	mov	r3, r1
 8000886:	80fa      	strh	r2, [r7, #6]
 8000888:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[6];
	uint16_t data_len = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	81fb      	strh	r3, [r7, #14]
	buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	723b      	strb	r3, [r7, #8]
	buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	727b      	strb	r3, [r7, #9]
	buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	 buffer[3] = (data_len & 0x00ff);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	72fb      	strb	r3, [r7, #11]
	 buffer[4] = ((data_buf & 0xff00) >> 8);
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	733b      	strb	r3, [r7, #12]
	 buffer[5] = (data_buf & 0x00ff);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	737b      	strb	r3, [r7, #13]
	DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 6);
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <spi_dma_send2B+0x94>)
 80008ca:	2106      	movs	r1, #6
 80008cc:	f005 fb76 	bl	8005fbc <DMA_SetCurrDataCounter>
	SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <spi_dma_send2B+0x94>)
 80008d2:	f107 0208 	add.w	r2, r7, #8
 80008d6:	60da      	str	r2, [r3, #12]
	CSON(); // chip select 
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <spi_dma_send2B+0x98>)
 80008dc:	8b52      	ldrh	r2, [r2, #26]
 80008de:	b292      	uxth	r2, r2
 80008e0:	f042 0210 	orr.w	r2, r2, #16
 80008e4:	b292      	uxth	r2, r2
 80008e6:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <spi_dma_send2B+0x94>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	f005 fada 	bl	8005ea4 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);	
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <spi_dma_send2B+0x9c>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	f005 fad6 	bl	8005ea4 <DMA_Cmd>
	/* Block until the semaphore is given */
        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <spi_dma_send2B+0xa0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000904:	2300      	movs	r3, #0
 8000906:	f003 fd75 	bl	80043f4 <xQueueGenericReceive>
	
//	CSOFF(); // chip deselect 
			
}
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40026458 	.word	0x40026458
 8000914:	40020000 	.word	0x40020000
 8000918:	40026440 	.word	0x40026440
 800091c:	200131ec 	.word	0x200131ec

08000920 <spi_dma_sendByte>:

void spi_dma_sendByte(uint16_t address,  uint8_t data_buf)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	80fa      	strh	r2, [r7, #6]
 800092c:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[5];
		uint16_t data_len=0x1;
 800092e:	2301      	movs	r3, #1
 8000930:	81fb      	strh	r3, [r7, #14]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	723b      	strb	r3, [r7, #8]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	727b      	strb	r3, [r7, #9]
		buffer[2] = ((0x80 | (data_len & 0x7f00) >> 8 ));
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000948:	121b      	asrs	r3, r3, #8
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	72bb      	strb	r3, [r7, #10]
		buffer[3] = (data_len & 0x00ff);
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	72fb      	strb	r3, [r7, #11]
		buffer[4] = data_buf ; 
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	733b      	strb	r3, [r7, #12]
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 5);
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000962:	2105      	movs	r1, #5
 8000964:	f005 fb2a 	bl	8005fbc <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <spi_dma_sendByte+0x88>)
 800096a:	f107 0208 	add.w	r2, r7, #8
 800096e:	60da      	str	r2, [r3, #12]
		CSON(); // chip select 
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <spi_dma_sendByte+0x8c>)
 8000974:	8b52      	ldrh	r2, [r2, #26]
 8000976:	b292      	uxth	r2, r2
 8000978:	f042 0210 	orr.w	r2, r2, #16
 800097c:	b292      	uxth	r2, r2
 800097e:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <spi_dma_sendByte+0x88>)
 8000982:	2101      	movs	r1, #1
 8000984:	f005 fa8e 	bl	8005ea4 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <spi_dma_sendByte+0x90>)
 800098a:	2101      	movs	r1, #1
 800098c:	f005 fa8a 	bl	8005ea4 <DMA_Cmd>
		/* Block until the semaphore is given */
	        xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <spi_dma_sendByte+0x94>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	2300      	movs	r3, #0
 800099e:	f003 fd29 	bl	80043f4 <xQueueGenericReceive>
				
//		CSOFF(); // chip deselect 
			
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40026458 	.word	0x40026458
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40026440 	.word	0x40026440
 80009b4:	200131ec 	.word	0x200131ec

080009b8 <spi_dma_read>:

		return (data_buf[0] << 8) | data_buf[1];

}
void spi_dma_read(uint16_t address, uint16_t data_len)
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	80f8      	strh	r0, [r7, #6]
 80009c2:	80b9      	strh	r1, [r7, #4]
 80009c4:	4669      	mov	r1, sp
 80009c6:	4688      	mov	r8, r1
		
		/*! spi_dma_read it has to be used with \n
		 * memcpy from bufferRX right after it has recieve \n
		 * data on SPI. */
		
		uint8_t buffer[data_len+4];
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	1d0e      	adds	r6, r1, #4
 80009cc:	1e71      	subs	r1, r6, #1
 80009ce:	6139      	str	r1, [r7, #16]
 80009d0:	4631      	mov	r1, r6
 80009d2:	4608      	mov	r0, r1
 80009d4:	f04f 0100 	mov.w	r1, #0
 80009d8:	00cd      	lsls	r5, r1, #3
 80009da:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80009de:	00c4      	lsls	r4, r0, #3
 80009e0:	4631      	mov	r1, r6
 80009e2:	4608      	mov	r0, r1
 80009e4:	f04f 0100 	mov.w	r1, #0
 80009e8:	00cb      	lsls	r3, r1, #3
 80009ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009ee:	00c2      	lsls	r2, r0, #3
 80009f0:	4633      	mov	r3, r6
 80009f2:	3307      	adds	r3, #7
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	ebad 0d03 	sub.w	sp, sp, r3
 80009fc:	466b      	mov	r3, sp
 80009fe:	3300      	adds	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
		buffer[0] = ((address & 0xff00) >> 8); // addres byte 1 
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	701a      	strb	r2, [r3, #0]
		buffer[1] = ((address & 0x00ff)); //address byte 2 
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	705a      	strb	r2, [r3, #1]
		buffer[2] = ((0x00 | (data_len & 0x7f00) >> 8 ));
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a1c:	121b      	asrs	r3, r3, #8
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	709a      	strb	r2, [r3, #2]
		buffer[3] = (data_len & 0x00ff);
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	70da      	strb	r2, [r3, #3]

		int i;
		for (i = 4 ; i < data_len+4; i++) buffer[i] = 0x0;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e007      	b.n	8000a42 <spi_dma_read+0x8a>
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dcf2      	bgt.n	8000a32 <spi_dma_read+0x7a>

		DMA_SetCurrDataCounter(SPIx_RX_DMA_STREAM, data_len+4);
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a54:	4619      	mov	r1, r3
 8000a56:	f005 fab1 	bl	8005fbc <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(SPIx_TX_DMA_STREAM, 4+data_len);
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a62:	4619      	mov	r1, r3
 8000a64:	f005 faaa 	bl	8005fbc <DMA_SetCurrDataCounter>
		SPIx_TX_DMA_STREAM->M0AR =(uint32_t) &buffer;	
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
		SPIx_RX_DMA_STREAM->M0AR =(uint32_t)&bufferRX;	
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <spi_dma_read+0x100>)
 8000a72:	60da      	str	r2, [r3, #12]

		CSON(); // chip select 
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <spi_dma_read+0x104>)
 8000a78:	8b52      	ldrh	r2, [r2, #26]
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	f042 0210 	orr.w	r2, r2, #16
 8000a80:	b292      	uxth	r2, r2
 8000a82:	835a      	strh	r2, [r3, #26]
		DMA_Cmd(SPIx_TX_DMA_STREAM, ENABLE);		
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <spi_dma_read+0xfc>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	f005 fa0c 	bl	8005ea4 <DMA_Cmd>
		DMA_Cmd(SPIx_RX_DMA_STREAM, ENABLE);
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <spi_dma_read+0xf8>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f005 fa08 	bl	8005ea4 <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, portMAX_DELAY);	
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <spi_dma_read+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f003 fca7 	bl	80043f4 <xQueueGenericReceive>
 8000aa6:	46c5      	mov	sp, r8
		//CSOFF(); // chip deselect		

}	
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	40026440 	.word	0x40026440
 8000ab4:	40026458 	.word	0x40026458
 8000ab8:	20013200 	.word	0x20013200
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	200131ec 	.word	0x200131ec

08000ac4 <init_W5200>:
//==================================================================================//
//===	func 	init_W5200							 ===//
//==================================================================================//

void init_W5200(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
	 *
	 * */


	// mac address
	uint8_t address[6] =	{0xdd, 0xaa, 0xbb, 0xcc, 0x11, 0x22}; 
 8000aca:	4a58      	ldr	r2, [pc, #352]	; (8000c2c <init_W5200+0x168>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	6810      	ldr	r0, [r2, #0]
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	8892      	ldrh	r2, [r2, #4]
 8000ad6:	809a      	strh	r2, [r3, #4]
	
	// ip 
	const  uint8_t ip[4] = {0xc0, 0xa8, 0x0, 0x08};
 8000ad8:	4a55      	ldr	r2, [pc, #340]	; (8000c30 <init_W5200+0x16c>)
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	6810      	ldr	r0, [r2, #0]
 8000ae0:	6018      	str	r0, [r3, #0]
	// subnet 
	const uint8_t subnet[4] = {0xff,0xff,0xff,0x0};
 8000ae2:	4a54      	ldr	r2, [pc, #336]	; (8000c34 <init_W5200+0x170>)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
	// gateway
	const uint8_t gw[4] = {0xc0, 0xa8, 0x0, 0x01};
 8000aec:	4a52      	ldr	r2, [pc, #328]	; (8000c38 <init_W5200+0x174>)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	6810      	ldr	r0, [r2, #0]
 8000af4:	6018      	str	r0, [r3, #0]
	
	portTickType xLastWakeTime;	
	
	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 8000af6:	2001      	movs	r0, #1
 8000af8:	2100      	movs	r1, #0
 8000afa:	2203      	movs	r2, #3
 8000afc:	f003 fb1e 	bl	800413c <xQueueGenericCreate>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <init_W5200+0x178>)
 8000b04:	601a      	str	r2, [r3, #0]

//	vTaskSuspend(set_macTaskHandle);
	
	xLastWakeTime = xTaskGetTickCount();
 8000b06:	f002 fe1f 	bl	8003748 <xTaskGetTickCount>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60bb      	str	r3, [r7, #8]

	RESET_HIGH();
 8000b0e:	4b4c      	ldr	r3, [pc, #304]	; (8000c40 <init_W5200+0x17c>)
 8000b10:	4a4b      	ldr	r2, [pc, #300]	; (8000c40 <init_W5200+0x17c>)
 8000b12:	8b52      	ldrh	r2, [r2, #26]
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f042 0220 	orr.w	r2, r2, #32
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	835a      	strh	r2, [r3, #26]
	RESET_LOW();	
 8000b1e:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <init_W5200+0x17c>)
 8000b20:	4a47      	ldr	r2, [pc, #284]	; (8000c40 <init_W5200+0x17c>)
 8000b22:	8b12      	ldrh	r2, [r2, #24]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	831a      	strh	r2, [r3, #24]

	vTaskDelay( 500/portTICK_RATE_MS );		
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f002 fc4d 	bl	80033d0 <vTaskDelay>
	const portTickType xFrequency = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
	
	// ===================================================//
	//SW reset 
	spi_dma_sendByte(W5200_MR, W5200_MR_RST);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	f7ff feef 	bl	8000920 <spi_dma_sendByte>
	// wait until reset complete
	uint8_t data = W5200_MR_RST; 
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	71fb      	strb	r3, [r7, #7]
	while((data  && W5200_MR_RST) == W5200_MR_RST)
 8000b46:	bf00      	nop
		spi_dma_read(W5200_MR, 1);
		memcpy(&data, bufferRX+4, 1);
	}
		
	// PING enable, PPPoE disable 
	spi_dma_sendByte(W5200_MR, 0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f7ff fee8 	bl	8000920 <spi_dma_sendByte>
	// all socket interrupts sets to nonmask. set '1' is interrupt enable. 
	spi_dma_sendByte(W5200_IMR, 0xff);
 8000b50:	2016      	movs	r0, #22
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	f7ff fee4 	bl	8000920 <spi_dma_sendByte>
	// IP-confilict, PPPoE Close are mask. set '0' interupt disable. 
	spi_dma_sendByte(W5200_IMR2, 0);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f7ff fee0 	bl	8000920 <spi_dma_sendByte>
	// set timeoput to 200msec
	spi_dma_sendByte(W5200_RTR, 200);
 8000b60:	2017      	movs	r0, #23
 8000b62:	21c8      	movs	r1, #200	; 0xc8
 8000b64:	f7ff fedc 	bl	8000920 <spi_dma_sendByte>
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	f7ff fed8 	bl	8000920 <spi_dma_sendByte>

	int n = 0; 
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

	for (n = 0; n < 8; n++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	e02b      	b.n	8000bd2 <init_W5200+0x10e>
	{
		spi_dma_sendByte(W5200_Sn_RXMEM_SIZE(n), 0x2);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b86:	331e      	adds	r3, #30
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	f7ff fec7 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_TXMEM_SIZE(n),0x2);
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000b9e:	331f      	adds	r3, #31
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	f7ff febb 	bl	8000920 <spi_dma_sendByte>
		spi_dma_sendByte(W5200_Sn_IMR(n), 0xff);	
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000bb6:	332c      	adds	r3, #44	; 0x2c
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	21ff      	movs	r1, #255	; 0xff
 8000bbe:	f7ff feaf 	bl	8000920 <spi_dma_sendByte>
		socket_flg[n] = 0;
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <init_W5200+0x180>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	// set retry count register to 3rd
	spi_dma_sendByte(W5200_RCR, 3);

	int n = 0; 

	for (n = 0; n < 8; n++)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	ddd0      	ble.n	8000b7a <init_W5200+0xb6>
		socket_flg[n] = 0;
			
	}	
	// =========================================================//
		
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be2:	f002 fb9d 	bl	8003320 <vTaskDelayUntil>

	W5200_configure_network(ip, subnet, gw);
 8000be6:	f107 0114 	add.w	r1, r7, #20
 8000bea:	f107 0210 	add.w	r2, r7, #16
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f000 f834 	bl	8000c64 <W5200_configure_network>
	W5200_set_hardware_address(address);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f823 	bl	8000c4c <W5200_set_hardware_address>
	
	vTaskDelayUntil(&xLastWakeTime, 500/portTICK_RATE_MS );		
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c10:	f002 fb86 	bl	8003320 <vTaskDelayUntil>
	// end of initialization W5200 
	// delete task

	// unblock set_macTask
	
	vTaskResume( set_macTaskHandle); 
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <init_W5200+0x184>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fc7b 	bl	8003514 <vTaskResume>

	vTaskDelete ( NULL );
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f002 fb38 	bl	8003294 <vTaskDelete>
	
	
	
	
}
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08008208 	.word	0x08008208
 8000c30:	08008210 	.word	0x08008210
 8000c34:	08008214 	.word	0x08008214
 8000c38:	08008218 	.word	0x08008218
 8000c3c:	200131ec 	.word	0x200131ec
 8000c40:	40020800 	.word	0x40020800
 8000c44:	20000480 	.word	0x20000480
 8000c48:	200141b8 	.word	0x200141b8

08000c4c <W5200_set_hardware_address>:

//==================================================================================//
//===	func W5200_set_hardware_address
//==================================================================================//
void  W5200_set_hardware_address(const macaddress_t address)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	/*! Function set wiznet register to address via SPI DMA
	 */

	spi_dma_send(W5200_SHAR, 6, address);
 8000c54:	2009      	movs	r0, #9
 8000c56:	2106      	movs	r1, #6
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	f7ff fd87 	bl	800076c <spi_dma_send>
}
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <W5200_configure_network>:


void  W5200_configure_network(const ipv4address_t address,
                             const ipv4address_t subnet,
                             const ipv4address_t gateway)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	/*! It configures ip, subnet and gateway */
	spi_dma_send(W5200_SIPR, 4, address);
 8000c70:	200f      	movs	r0, #15
 8000c72:	2104      	movs	r1, #4
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	f7ff fd79 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_SUBR, 4, subnet);
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f7ff fd74 	bl	800076c <spi_dma_send>
	spi_dma_send(W5200_GAR, 4 , gateway);
 8000c84:	2001      	movs	r0, #1
 8000c86:	2104      	movs	r1, #4
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	f7ff fd6f 	bl	800076c <spi_dma_send>
}
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <get_CRStatus>:
//==================================================================================//



static uint8_t get_CRStatus(uint8_t sck_fd)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_CR(sck_fd),1);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f7ff fe81 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <get_CRStatus+0x34>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	73fb      	strb	r3, [r7, #15]
	return var;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20013204 	.word	0x20013204

08000ccc <get_SRStatus>:


static uint8_t get_SRStatus(uint8_t sck_fd)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t var; 
	spi_dma_read(W5200_Sn_SR(sck_fd), 1);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ce2:	3303      	adds	r3, #3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	2101      	movs	r1, #1
 8000cea:	f7ff fe65 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 1);
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <get_SRStatus+0x34>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	73fb      	strb	r3, [r7, #15]
	return var;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20013204 	.word	0x20013204

08000d04 <get_TXFSRStatus>:

static uint16_t get_TXFSRStatus(uint8_t sck_fd)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_FSR(sck_fd), 2);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d1a:	3320      	adds	r3, #32
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	2102      	movs	r1, #2
 8000d22:	f7ff fe49 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <get_TXFSRStatus+0x44>)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	8812      	ldrh	r2, [r2, #0]
 8000d2e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b29b      	uxth	r3, r3
	
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20013204 	.word	0x20013204

08000d4c <get_TXWRStatus>:

static uint16_t get_TXWRStatus(uint8_t sck_fd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_WR(sck_fd), 2 );
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d62:	3324      	adds	r3, #36	; 0x24
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	2102      	movs	r1, #2
 8000d6a:	f7ff fe25 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <get_TXWRStatus+0x44>)
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	7b7b      	ldrb	r3, [r7, #13]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b29b      	uxth	r3, r3

	
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20013204 	.word	0x20013204

08000d94 <get_TXRD>:
static uint16_t get_TXRD(uint8_t sck_fd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_TX_RD(sck_fd), 2);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000daa:	3322      	adds	r3, #34	; 0x22
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	2102      	movs	r1, #2
 8000db2:	f7ff fe01 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <get_TXRD+0x44>)
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	7b7b      	ldrb	r3, [r7, #13]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b29b      	uxth	r3, r3
	
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20013204 	.word	0x20013204

08000ddc <set_TXWR>:

static void  set_TXWR(uint8_t sck_fd, uint16_t val)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	71fa      	strb	r2, [r7, #7]
 8000de8:	80bb      	strh	r3, [r7, #4]
 	spi_dma_send2B(W5200_Sn_TX_WR(sck_fd), val);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000df6:	3324      	adds	r3, #36	; 0x24
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fd3c 	bl	800087c <spi_dma_send2B>
}
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop

08000e0c <get_RXRSR>:

static uint16_t get_RXRSR(uint8_t sck_fd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RSR(sck_fd), 2);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e22:	3326      	adds	r3, #38	; 0x26
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	2102      	movs	r1, #2
 8000e2a:	f7ff fdc5 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <get_RXRSR+0x44>)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b29b      	uxth	r3, r3

}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20013204 	.word	0x20013204

08000e54 <get_RXRD>:

static uint16_t get_RXRD(uint8_t sck_fd)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t var[2]; 
	spi_dma_read(W5200_Sn_RX_RD(sck_fd), 2 );
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e6a:	3328      	adds	r3, #40	; 0x28
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	2102      	movs	r1, #2
 8000e72:	f7ff fda1 	bl	80009b8 <spi_dma_read>
	memcpy(&var, bufferRX+4, 2);
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <get_RXRD+0x44>)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	8812      	ldrh	r2, [r2, #0]
 8000e7e:	801a      	strh	r2, [r3, #0]
	
	return ((var[0] << 8) | var[1] );
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	7b7b      	ldrb	r3, [r7, #13]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b29b      	uxth	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20013204 	.word	0x20013204

08000e9c <set_RXRD>:

static void set_RXRD(uint8_t sck_fd, uint16_t val)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	71fa      	strb	r2, [r7, #7]
 8000ea8:	80bb      	strh	r3, [r7, #4]
	spi_dma_send2B(W5200_Sn_RX_RD(sck_fd), val);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000eb6:	3328      	adds	r3, #40	; 0x28
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fcdc 	bl	800087c <spi_dma_send2B>
}
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop

08000ecc <write_memory>:
//		func write_memory 
//===============================================================================================//


void write_memory(uint8_t sck_fd, uint16_t write_ptr, uint8_t *buf, uint16_t len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60ba      	str	r2, [r7, #8]
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	73fa      	strb	r2, [r7, #15]
 8000ed8:	460a      	mov	r2, r1
 8000eda:	81ba      	strh	r2, [r7, #12]
 8000edc:	80fb      	strh	r3, [r7, #6]
	*/
	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = write_ptr & 0x07ff;
 8000ede:	89bb      	ldrh	r3, [r7, #12]
 8000ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee4:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_TX_BASE(sck_fd)  + offset;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000efc:	82bb      	strh	r3, [r7, #20]

	// if overflow socket TX memory ?
	if(offset + len > W5200_Sn_TXMEM_SIZE(sck_fd) +1 ){
 8000efe:	8afa      	ldrh	r2, [r7, #22]
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	441a      	add	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f0c:	3320      	adds	r3, #32
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dd2a      	ble.n	8000f68 <write_memory+0x9c>

		// copy upper_size bytes
		upper_size = W5200_SOCKET_TX_BASE(sck_fd) - offset;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	8afb      	ldrh	r3, [r7, #22]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f28:	827b      	strh	r3, [r7, #18]
		spi_dma_send( memory_addr,upper_size, buf);
 8000f2a:	8aba      	ldrh	r2, [r7, #20]
 8000f2c:	8a7b      	ldrh	r3, [r7, #18]
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f7ff fc1a 	bl	800076c <spi_dma_send>
		buf += upper_size;
 8000f38:	8a7b      	ldrh	r3, [r7, #18]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	8a7b      	ldrh	r3, [r7, #18]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	823b      	strh	r3, [r7, #16]
		spi_dma_send( W5200_SOCKET_TX_BASE(sck_fd),
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	f7ff fc03 	bl	800076c <spi_dma_send>
 8000f66:	e006      	b.n	8000f76 <write_memory+0xaa>
		left_size,  buf);

	}else{

		// copy len size bytes
		spi_dma_send( memory_addr,len,  buf);
 8000f68:	8aba      	ldrh	r2, [r7, #20]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	f7ff fbfb 	bl	800076c <spi_dma_send>
	}
}
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <read_memory>:
// 			func read_memory
//==================================================================================//


void	read_memory(uint8_t sck_fd, uint16_t read_ptr, uint8_t *buf, uint16_t len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	4602      	mov	r2, r0
 8000f86:	73fa      	strb	r2, [r7, #15]
 8000f88:	460a      	mov	r2, r1
 8000f8a:	81ba      	strh	r2, [r7, #12]
 8000f8c:	80fb      	strh	r3, [r7, #6]

	uint16_t	memory_addr, offset;
	uint16_t	upper_size, left_size;

	// calculate offset address 
	offset = read_ptr & 0x07ff;
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f94:	82fb      	strh	r3, [r7, #22]

	// calculate physical memory start address
	memory_addr = W5200_SOCKET_RX_BASE(sck_fd)  + offset;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fac:	82bb      	strh	r3, [r7, #20]

	// if overflow socket RX memory ?
	if(offset + len > 0x0800){
 8000fae:	8afa      	ldrh	r2, [r7, #22]
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fb8:	dd2f      	ble.n	800101a <read_memory+0x9e>

		// copy upper_size bytes
		upper_size = 0x0800 - offset;
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000fc0:	827b      	strh	r3, [r7, #18]
		spi_dma_read( memory_addr,upper_size);
 8000fc2:	8aba      	ldrh	r2, [r7, #20]
 8000fc4:	8a7b      	ldrh	r3, [r7, #18]
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fcf5 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, upper_size);
 8000fce:	8a7b      	ldrh	r3, [r7, #18]
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	4919      	ldr	r1, [pc, #100]	; (8001038 <read_memory+0xbc>)
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f7ff f901 	bl	80001dc <memcpy>

		buf += upper_size;
 8000fda:	8a7b      	ldrh	r3, [r7, #18]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]

		// copy left size bytes
		left_size = len - upper_size;
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	8a7b      	ldrh	r3, [r7, #18]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	823b      	strh	r3, [r7, #16]
		spi_dma_read(W5200_SOCKET_RX_BASE(sck_fd), left_size);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	8a3b      	ldrh	r3, [r7, #16]
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fcd9 	bl	80009b8 <spi_dma_read>
		memcpy(buf+upper_size, bufferRX+4, left_size);
 8001006:	8a7b      	ldrh	r3, [r7, #18]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	441a      	add	r2, r3
 800100c:	8a3b      	ldrh	r3, [r7, #16]
 800100e:	4610      	mov	r0, r2
 8001010:	4909      	ldr	r1, [pc, #36]	; (8001038 <read_memory+0xbc>)
 8001012:	461a      	mov	r2, r3
 8001014:	f7ff f8e2 	bl	80001dc <memcpy>
 8001018:	e00b      	b.n	8001032 <read_memory+0xb6>
	}else{

		// copy len size bytes
		spi_dma_read( memory_addr,len);
 800101a:	8aba      	ldrh	r2, [r7, #20]
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fcc9 	bl	80009b8 <spi_dma_read>
		memcpy(buf, bufferRX+4, len);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	4903      	ldr	r1, [pc, #12]	; (8001038 <read_memory+0xbc>)
 800102c:	461a      	mov	r2, r3
 800102e:	f7ff f8d5 	bl	80001dc <memcpy>
	}
}
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20013204 	.word	0x20013204

0800103c <socket>:
	socket()	create socket, handle open
		ip_proto, RAW mode only.
===========================================================================*/

uint8_t	socket(uint8_t  mode, uint16_t  port, uint8_t ip_proto)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4613      	mov	r3, r2
 8001044:	4602      	mov	r2, r0
 8001046:	71fa      	strb	r2, [r7, #7]
 8001048:	460a      	mov	r2, r1
 800104a:	80ba      	strh	r2, [r7, #4]
 800104c:	71bb      	strb	r3, [r7, #6]
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e00c      	b.n	800106e <socket+0x32>
		if(socket_flg[sck_fd] == 0){
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <socket+0x14c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <socket+0x2c>
			socket_flg[sck_fd] = 1;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <socket+0x14c>)
 8001062:	2101      	movs	r1, #1
 8001064:	54d1      	strb	r1, [r2, r3]
			break;
 8001066:	e005      	b.n	8001074 <socket+0x38>
{
	uint8_t	sck_fd;
	uint8_t	stat;

	// check free socket exists? 
	for(sck_fd = 0; sck_fd < W5200_MAX_SOCKETS; sck_fd++){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9ef      	bls.n	8001054 <socket+0x18>
		if(socket_flg[sck_fd] == 0){
			socket_flg[sck_fd] = 1;
			break;
		}
	}
	if(sck_fd >= W5200_MAX_SOCKETS) return -1;	// no more sockets.
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b07      	cmp	r3, #7
 8001078:	d901      	bls.n	800107e <socket+0x42>
 800107a:	23ff      	movs	r3, #255	; 0xff
 800107c:	e07f      	b.n	800117e <socket+0x142>
	// check mode parameter
	if((mode & 0x0f) > W5200_MR_PPPOE_ENABLE) return -1;	// mode error.
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	2b08      	cmp	r3, #8
 8001086:	dd01      	ble.n	800108c <socket+0x50>
 8001088:	23ff      	movs	r3, #255	; 0xff
 800108a:	e078      	b.n	800117e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_UDP) && (mode & W5200_Sn_MR_MULTI)) return -1; // MULTI is UDP only.
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	2b02      	cmp	r3, #2
 8001094:	d005      	beq.n	80010a2 <socket+0x66>
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	da01      	bge.n	80010a2 <socket+0x66>
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	e06d      	b.n	800117e <socket+0x142>
	if(((mode & 0x0f) != W5200_Sn_MR_TCP) && (mode & W5200_Sn_MR_ND)) return -1; // ND is TCP only.
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d006      	beq.n	80010ba <socket+0x7e>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <socket+0x7e>
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	e061      	b.n	800117e <socket+0x142>

	// set MODE register
	spi_dma_sendByte(W5200_Sn_MR(sck_fd) , mode);
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fc27 	bl	8000920 <spi_dma_sendByte>
	//socket_mode[sck_fd] = mode & 0x0f;	// omitting ND/MULTICAST
	mode &= 0x0f;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	71fb      	strb	r3, [r7, #7]

	uint8_t prt[2];

	// set PORT, PROTOCOL 
	switch(mode){
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	db29      	blt.n	8001134 <socket+0xf8>
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	dd02      	ble.n	80010ea <socket+0xae>
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d018      	beq.n	800111a <socket+0xde>
 80010e8:	e024      	b.n	8001134 <socket+0xf8>
	case W5200_Sn_MR_TCP:
	case W5200_Sn_MR_UDP:

		// split port for sending on two 8bits
		prt[0] = (port & 0xff00) >> 8;
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	733b      	strb	r3, [r7, #12]
		prt[1] =  (port & 0x00ff);
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	737b      	strb	r3, [r7, #13]
		spi_dma_send(W5200_Sn_PORT(sck_fd), 2 , prt);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001106:	3304      	adds	r3, #4
 8001108:	b29a      	uxth	r2, r3
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4610      	mov	r0, r2
 8001110:	2102      	movs	r1, #2
 8001112:	461a      	mov	r2, r3
 8001114:	f7ff fb2a 	bl	800076c <spi_dma_send>
		
		break;
 8001118:	e00c      	b.n	8001134 <socket+0xf8>
	case W5200_Sn_MR_IPRAW:
		spi_dma_sendByte(W5200_Sn_PROTO(sck_fd), ip_proto);
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001126:	3314      	adds	r3, #20
 8001128:	b29a      	uxth	r2, r3
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fbf6 	bl	8000920 <spi_dma_sendByte>
	}

	// execute socket open
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_OPEN);
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	b29b      	uxth	r3, r3
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b29b      	uxth	r3, r3
 800113c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	2101      	movs	r1, #1
 8001148:	f7ff fbea 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd)  != 0);	// 0 value is command complete. 
 800114c:	bf00      	nop
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fd9f 	bl	8000c94 <get_CRStatus>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f8      	bne.n	800114e <socket+0x112>

	// check status
	if(stat = get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_INIT) return -1;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fdb4 	bl	8000ccc <get_SRStatus>
 8001164:	4603      	mov	r3, r0
 8001166:	2b13      	cmp	r3, #19
 8001168:	bf0c      	ite	eq
 800116a:	2300      	moveq	r3, #0
 800116c:	2301      	movne	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73bb      	strb	r3, [r7, #14]
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <socket+0x140>
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	e000      	b.n	800117e <socket+0x142>

	// success return
	return sck_fd;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000480 	.word	0x20000480

0800118c <send>:
/*==========================================================================
	send()	send *buf to  (TCP only)
===========================================================================*/

int	send(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 800118c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001190:	b08b      	sub	sp, #44	; 0x2c
 8001192:	af00      	add	r7, sp, #0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4601      	mov	r1, r0
 8001198:	73f9      	strb	r1, [r7, #15]
 800119a:	81ba      	strh	r2, [r7, #12]
 800119c:	80fb      	strh	r3, [r7, #6]
	uint16_t	send_size;
	uint16_t	write_ptr;
	uint16_t status = get_SRStatus(sck_fd);
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd93 	bl	8000ccc <get_SRStatus>
 80011a6:	4603      	mov	r3, r0
 80011a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d804      	bhi.n	80011ba <send+0x2e>
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	4a56      	ldr	r2, [pc, #344]	; (800130c <send+0x180>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d002      	beq.n	80011c0 <send+0x34>
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011be:	e0a0      	b.n	8001302 <send+0x176>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <send+0x40>
 80011c6:	89bb      	ldrh	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <send+0x46>
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d0:	e097      	b.n	8001302 <send+0x176>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd79 	bl	8000ccc <get_SRStatus>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b17      	cmp	r3, #23
 80011de:	d001      	beq.n	80011e4 <send+0x58>
 80011e0:	2300      	movs	r3, #0
 80011e2:	e08e      	b.n	8001302 <send+0x176>

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 80011e4:	e004      	b.n	80011f0 <send+0x64>
		if(flag == 1) return 0;	// NONE BLOCKING
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <send+0x64>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e088      	b.n	8001302 <send+0x176>
	
	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0; // closing or fin close wait.

	// check TX memory free size?
	while((send_size = get_TXFSRStatus(sck_fd)) == 0){
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fd86 	bl	8000d04 <get_TXFSRStatus>
 80011f8:	4603      	mov	r3, r0
 80011fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f1      	beq.n	80011e6 <send+0x5a>
		if(flag == 1) return 0;	// NONE BLOCKING
	}

	// get write pointer
	write_ptr = get_TXWRStatus(sck_fd);
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fda1 	bl	8000d4c <get_TXWRStatus>
 800120a:	4603      	mov	r3, r0
 800120c:	847b      	strh	r3, [r7, #34]	; 0x22

	// check write length
	if(send_size > len) send_size = len;
 800120e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	429a      	cmp	r2, r3
 8001214:	d901      	bls.n	800121a <send+0x8e>
 8001216:	89bb      	ldrh	r3, [r7, #12]
 8001218:	84fb      	strh	r3, [r7, #38]	; 0x26

	// data write to memory
	write_memory(sck_fd, write_ptr, buf, send_size);
 800121a:	7bf9      	ldrb	r1, [r7, #15]
 800121c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800121e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	f7ff fe51 	bl	8000ecc <write_memory>

	// pointer update
	write_ptr += send_size;
 800122a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800122c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800122e:	4413      	add	r3, r2
 8001230:	847b      	strh	r3, [r7, #34]	; 0x22
	set_TXWR(sck_fd, write_ptr);
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fdcf 	bl	8000ddc <set_TXWR>
		
	// test function 
	

	uint16_t start = get_TXRD(sck_fd);
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fda7 	bl	8000d94 <get_TXRD>
 8001246:	4603      	mov	r3, r0
 8001248:	843b      	strh	r3, [r7, #32]
	uint16_t end   = get_TXWRStatus(sck_fd); 
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd7d 	bl	8000d4c <get_TXWRStatus>
 8001252:	4603      	mov	r3, r0
 8001254:	83fb      	strh	r3, [r7, #30]
	uint8_t data [write_ptr-start]; 	
 8001256:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001258:	8c3b      	ldrh	r3, [r7, #32]
 800125a:	1ad1      	subs	r1, r2, r3
 800125c:	466b      	mov	r3, sp
 800125e:	461e      	mov	r6, r3
 8001260:	1e4b      	subs	r3, r1, #1
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	460b      	mov	r3, r1
 8001266:	461a      	mov	r2, r3
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001270:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001274:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001278:	460b      	mov	r3, r1
 800127a:	461a      	mov	r2, r3
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	00dd      	lsls	r5, r3, #3
 8001282:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001286:	00d4      	lsls	r4, r2, #3
 8001288:	460b      	mov	r3, r1
 800128a:	3307      	adds	r3, #7
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	ebad 0d03 	sub.w	sp, sp, r3
 8001294:	466b      	mov	r3, sp
 8001296:	3300      	adds	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
	spi_dma_read(start+0x8000, write_ptr-start );
 800129a:	8c3b      	ldrh	r3, [r7, #32]
 800129c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80012a4:	8c3b      	ldrh	r3, [r7, #32]
 80012a6:	1acb      	subs	r3, r1, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fb83 	bl	80009b8 <spi_dma_read>
	memcpy(data, bufferRX +4, write_ptr-start);
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80012b6:	8c3b      	ldrh	r3, [r7, #32]
 80012b8:	1acb      	subs	r3, r1, r3
 80012ba:	4610      	mov	r0, r2
 80012bc:	4914      	ldr	r1, [pc, #80]	; (8001310 <send+0x184>)
 80012be:	461a      	mov	r2, r3
 80012c0:	f7fe ff8c 	bl	80001dc <memcpy>

	
	// test function 
	
	// send command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_SEND);
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012d0:	3301      	adds	r3, #1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	2120      	movs	r1, #32
 80012d8:	f7ff fb22 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 80012dc:	bf00      	nop
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fcd7 	bl	8000c94 <get_CRStatus>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f8      	bne.n	80012de <send+0x152>

	// wait sending complete
	while(get_TXRD(sck_fd) != write_ptr);
 80012ec:	bf00      	nop
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd4f 	bl	8000d94 <get_TXRD>
 80012f6:	4603      	mov	r3, r0
 80012f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d1f7      	bne.n	80012ee <send+0x162>

	return send_size;
 80012fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001300:	46b5      	mov	sp, r6
}
 8001302:	4618      	mov	r0, r3
 8001304:	372c      	adds	r7, #44	; 0x2c
 8001306:	46bd      	mov	sp, r7
 8001308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800130c:	20000480 	.word	0x20000480
 8001310:	20013204 	.word	0x20013204

08001314 <recv>:
	return code is received data size.
	if received disconnectÂ@from peer, size was set to Zero, 
===========================================================================*/

int	recv(uint8_t sck_fd, uint8_t *buf, uint16_t len, uint16_t flag)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	4601      	mov	r1, r0
 800131e:	73f9      	strb	r1, [r7, #15]
 8001320:	81ba      	strh	r2, [r7, #12]
 8001322:	80fb      	strh	r3, [r7, #6]
	uint16_t	read_len;
	uint16_t	read_ptr;

	// check asign flag
	if(sck_fd < 0 || sck_fd >= W5200_MAX_SOCKETS ||  socket_flg[sck_fd] != 1) return -1;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b07      	cmp	r3, #7
 8001328:	d804      	bhi.n	8001334 <recv+0x20>
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <recv+0xe0>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d002      	beq.n	800133a <recv+0x26>
 8001334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001338:	e057      	b.n	80013ea <recv+0xd6>

	// check parameter
	if(buf == NULL || len == 0) return -1;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <recv+0x32>
 8001340:	89bb      	ldrh	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <recv+0x38>
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134a:	e04e      	b.n	80013ea <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fcbc 	bl	8000ccc <get_SRStatus>
 8001354:	4603      	mov	r3, r0
 8001356:	2b17      	cmp	r3, #23
 8001358:	d001      	beq.n	800135e <recv+0x4a>
 800135a:	2300      	movs	r3, #0
 800135c:	e045      	b.n	80013ea <recv+0xd6>

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800135e:	e004      	b.n	800136a <recv+0x56>
		if(flag == 1) return 0;	// NONE BLOCKING
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <recv+0x56>
 8001366:	2300      	movs	r3, #0
 8001368:	e03f      	b.n	80013ea <recv+0xd6>

	// check status
	if(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_ESTABLISHED) return 0;	// closing or fin close wait.

	// received data exists?
	while((read_len = get_RXRSR(sck_fd)) == 0){
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fd4d 	bl	8000e0c <get_RXRSR>
 8001372:	4603      	mov	r3, r0
 8001374:	82fb      	strh	r3, [r7, #22]
 8001376:	8afb      	ldrh	r3, [r7, #22]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f1      	beq.n	8001360 <recv+0x4c>

	// set read length
	//if(read_len > len) read_len = len;

	// get read pointer
	read_ptr = get_RXRD(sck_fd);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd68 	bl	8000e54 <get_RXRD>
 8001384:	4603      	mov	r3, r0
 8001386:	82bb      	strh	r3, [r7, #20]

	// read from RX memory
	read_memory(sck_fd, read_ptr, buf, read_len < len ? read_len: len);
 8001388:	89ba      	ldrh	r2, [r7, #12]
 800138a:	8afb      	ldrh	r3, [r7, #22]
 800138c:	429a      	cmp	r2, r3
 800138e:	bf38      	it	cc
 8001390:	4613      	movcc	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	7bf9      	ldrb	r1, [r7, #15]
 8001396:	8aba      	ldrh	r2, [r7, #20]
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	f7ff fded 	bl	8000f7c <read_memory>

	// update pointer
	read_ptr += read_len;
 80013a2:	8aba      	ldrh	r2, [r7, #20]
 80013a4:	8afb      	ldrh	r3, [r7, #22]
 80013a6:	4413      	add	r3, r2
 80013a8:	82bb      	strh	r3, [r7, #20]
	set_RXRD(sck_fd, read_ptr);
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	8abb      	ldrh	r3, [r7, #20]
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fd73 	bl	8000e9c <set_RXRD>

	// recive command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_RECV);
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013c2:	3301      	adds	r3, #1
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	f7ff faa9 	bl	8000920 <spi_dma_sendByte>
	// wait command complete.
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 80013ce:	bf00      	nop
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc5e 	bl	8000c94 <get_CRStatus>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f8      	bne.n	80013d0 <recv+0xbc>
	

 	return	(read_len < len ? read_len: len);
 80013de:	89ba      	ldrh	r2, [r7, #12]
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	bf38      	it	cc
 80013e6:	4613      	movcc	r3, r2
 80013e8:	b29b      	uxth	r3, r3
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000480 	.word	0x20000480

080013f8 <listen>:
//	func listen 
//==================================================================================//


int	listen(int sck_fd)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	// check socket asign flag
	if(sck_fd < 0 || sck_fd >=W5200_MAX_SOCKETS||  socket_flg[sck_fd] != 1) return -1;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db08      	blt.n	8001418 <listen+0x20>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b07      	cmp	r3, #7
 800140a:	dc05      	bgt.n	8001418 <listen+0x20>
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <listen+0xa0>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d002      	beq.n	800141e <listen+0x26>
 8001418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141c:	e038      	b.n	8001490 <listen+0x98>

	// LISTEN start from INIT only.
	if(get_SRStatus(sck_fd)  != W5200_Sn_SR_SOCK_INIT) return -1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fc52 	bl	8000ccc <get_SRStatus>
 8001428:	4603      	mov	r3, r0
 800142a:	2b13      	cmp	r3, #19
 800142c:	d002      	beq.n	8001434 <listen+0x3c>
 800142e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001432:	e02d      	b.n	8001490 <listen+0x98>


	uint8_t b;
	spi_dma_read(W5200_Sn_IR(sck_fd), 1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	b29b      	uxth	r3, r3
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b29b      	uxth	r3, r3
 800143c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001440:	3302      	adds	r3, #2
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	2101      	movs	r1, #1
 8001448:	f7ff fab6 	bl	80009b8 <spi_dma_read>
	memcpy(&b, bufferRX + 4, 1);
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <listen+0xa4>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	73fb      	strb	r3, [r7, #15]

	// CONNECT command
	spi_dma_sendByte(W5200_Sn_CR(sck_fd), W5200_Sn_CR_LISTEN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	b29b      	uxth	r3, r3
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b29b      	uxth	r3, r3
 800145a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800145e:	3301      	adds	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	2102      	movs	r1, #2
 8001466:	f7ff fa5b 	bl	8000920 <spi_dma_sendByte>
	while(get_CRStatus(sck_fd) != 0);	// 0 value is command complete. 
 800146a:	bf00      	nop
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fc0f 	bl	8000c94 <get_CRStatus>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f7      	bne.n	800146c <listen+0x74>

	// wait for status change to LISTEN
	while(get_SRStatus(sck_fd) != W5200_Sn_SR_SOCK_LISTEN);
 800147c:	bf00      	nop
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fc22 	bl	8000ccc <get_SRStatus>
 8001488:	4603      	mov	r3, r0
 800148a:	2b14      	cmp	r3, #20
 800148c:	d1f7      	bne.n	800147e <listen+0x86>
	 
	return 0;	// listen success complete
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000480 	.word	0x20000480
 800149c:	20013204 	.word	0x20013204

080014a0 <locate_interrupt>:

//==================================================================================
////	func locate_interrupt
//==================================================================================
void locate_interrupt()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	*  Function used by interrupt service routine. \n
	* Reads wiznet interrupt registers and identify 
	* interupt plus on which socket interrupt occured. \n
	* It depends on interrupt what follows
	* ****************************************************** */
	uint8_t code = 0x4; 
 80014a6:	2304      	movs	r3, #4
 80014a8:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_IMR2, 1);
 80014aa:	2036      	movs	r0, #54	; 0x36
 80014ac:	2101      	movs	r1, #1
 80014ae:	f7ff fa83 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX + 4, 1);
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <locate_interrupt+0xc4>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
	spi_dma_read(W5200_Sn_IR(code), 1);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014c2:	3302      	adds	r3, #2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	2101      	movs	r1, #1
 80014ca:	f7ff fa75 	bl	80009b8 <spi_dma_read>
	memcpy(&code, bufferRX +4 , 1);
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <locate_interrupt+0xc4>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
       
	
	spi_dma_sendByte(W5200_Sn_IR(0x0), 0xff);
 80014d4:	f244 0002 	movw	r0, #16386	; 0x4002
 80014d8:	21ff      	movs	r1, #255	; 0xff
 80014da:	f7ff fa21 	bl	8000920 <spi_dma_sendByte>
	switch (code )
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d839      	bhi.n	800155a <locate_interrupt+0xba>
 80014e6:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <locate_interrupt+0x4c>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	0800152d 	.word	0x0800152d
 80014f0:	08001539 	.word	0x08001539
 80014f4:	0800155b 	.word	0x0800155b
 80014f8:	08001545 	.word	0x08001545
 80014fc:	0800155b 	.word	0x0800155b
 8001500:	0800155b 	.word	0x0800155b
 8001504:	0800155b 	.word	0x0800155b
 8001508:	0800155b 	.word	0x0800155b
 800150c:	0800155b 	.word	0x0800155b
 8001510:	0800155b 	.word	0x0800155b
 8001514:	0800155b 	.word	0x0800155b
 8001518:	0800155b 	.word	0x0800155b
 800151c:	0800155b 	.word	0x0800155b
 8001520:	0800155b 	.word	0x0800155b
 8001524:	0800155b 	.word	0x0800155b
 8001528:	0800155b 	.word	0x0800155b
	{
		case 0x1: 
			vTaskSuspend(motorHBHandle);
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <locate_interrupt+0xc8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f001 ff75 	bl	8003420 <vTaskSuspend>
			// connection established 
			// do nothing wait for input. 
			break;
 8001536:	e011      	b.n	800155c <locate_interrupt+0xbc>
		case 0x2:

			
			vTaskSuspend(motorHBHandle);
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <locate_interrupt+0xc8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f001 ff6f 	bl	8003420 <vTaskSuspend>

			break;
 8001542:	e00b      	b.n	800155c <locate_interrupt+0xbc>
		case 0x4:
			vTaskResume(motorHBHandle);
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <locate_interrupt+0xc8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f001 ffe3 	bl	8003514 <vTaskResume>
			vTaskResume(set_macTaskHandle); 
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <locate_interrupt+0xcc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f001 ffde 	bl	8003514 <vTaskResume>
			break;
 8001558:	e000      	b.n	800155c <locate_interrupt+0xbc>
		case 0x10:
			break;
		default:
			break;		
 800155a:	bf00      	nop
	}
}
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20013204 	.word	0x20013204
 8001568:	200131f0 	.word	0x200131f0
 800156c:	200141b8 	.word	0x200141b8

08001570 <EXTI4_IRQHandler>:

//==================================================================================
//// EXTI4_IRQHandler
//==================================================================================
void EXTI4_IRQHandler(void) //EXTI0 ISR
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	 * Interuppt service routine for wiznet it locates interrupt and resets 
	 * interrupt line. 
	 * *******************************************************************/
	
	
	if(EXTI_GetITStatus(WIZ_IT_EXTI_LINE) != RESET) //check if EXTI line is asserted
 8001574:	2010      	movs	r0, #16
 8001576:	f005 f9ef 	bl	8006958 <EXTI_GetITStatus>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <EXTI4_IRQHandler+0x1a>
	{
		locate_interrupt();	
 8001580:	f7ff ff8e 	bl	80014a0 <locate_interrupt>
		EXTI_ClearFlag(WIZ_IT_EXTI_LINE); //clear interrupt
 8001584:	2010      	movs	r0, #16
 8001586:	f005 f9cd 	bl	8006924 <EXTI_ClearFlag>
 	
	}
}
 800158a:	bd80      	pop	{r7, pc}

0800158c <set_macTask>:
//============================================================================/
// func set_macTask 
//==================================================================================

void set_macTask(void *pvParameters)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0b6      	sub	sp, #216	; 0xd8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	 * **********************************************************************/


	/* suspend task until init_W5200 is finished */
	//vTaskSuspend(set_macTaskHandle);
	vTaskSuspend(NULL);
 8001594:	2000      	movs	r0, #0
 8001596:	f001 ff43 	bl	8003420 <vTaskSuspend>
	uint8_t	buf[100], buf1[100]; 
	int len; 
		/*create socket and send byte */
	socket_0 = socket(W5200_Sn_MR_TCP, 80, 0);
 800159a:	2001      	movs	r0, #1
 800159c:	2150      	movs	r1, #80	; 0x50
 800159e:	2200      	movs	r2, #0
 80015a0:	f7ff fd4c 	bl	800103c <socket>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <set_macTask+0x60>)
 80015aa:	601a      	str	r2, [r3, #0]
	listen(socket_0);
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <set_macTask+0x60>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff21 	bl	80013f8 <listen>
        {

	
		/*we are now listening
		suspend task set_macTask()*/
		vTaskSuspend(NULL);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f001 ff32 	bl	8003420 <vTaskSuspend>
		
		// interrupt on W5200 occured 
		// receive data 
		len = recv(socket_0, buf, 100, 0);
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <set_macTask+0x60>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	2264      	movs	r2, #100	; 0x64
 80015cc:	2300      	movs	r3, #0
 80015ce:	f7ff fea1 	bl	8001314 <recv>
 80015d2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		
		// proces data with CLI 
		
		FreeRTOS_CLIProcessCommand ( buf, buf1, 100);
 80015d6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	2264      	movs	r2, #100	; 0x64
 80015e4:	f003 fdf0 	bl	80051c8 <FreeRTOS_CLIProcessCommand>

		

		
	}	
 80015e8:	e7e5      	b.n	80015b6 <set_macTask+0x2a>
 80015ea:	bf00      	nop
 80015ec:	200131f4 	.word	0x200131f4

080015f0 <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1


void init_USARTx(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 80015f6:	2020      	movs	r0, #32
 80015f8:	2101      	movs	r1, #1
 80015fa:	f005 fd4b 	bl	8007094 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 80015fe:	2004      	movs	r0, #4
 8001600:	2101      	movs	r1, #1
 8001602:	f005 fd0f 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 8001606:	2004      	movs	r0, #4
 8001608:	2101      	movs	r1, #1
 800160a:	f005 fd0b 	bl	8007024 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 800160e:	2040      	movs	r0, #64	; 0x40
 8001610:	2101      	movs	r1, #1
 8001612:	f005 fd07 	bl	8007024 <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 8001616:	23c0      	movs	r3, #192	; 0xc0
 8001618:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 800161a:	2302      	movs	r3, #2
 800161c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 800161e:	2303      	movs	r3, #3
 8001620:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 8001622:	2300      	movs	r3, #0
 8001624:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 8001626:	2301      	movs	r3, #1
 8001628:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	4829      	ldr	r0, [pc, #164]	; (80016d4 <init_USARTx+0xe4>)
 8001630:	4619      	mov	r1, r3
 8001632:	f005 fa0f 	bl	8006a54 <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 8001636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800163c:	2301      	movs	r3, #1
 800163e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001640:	2300      	movs	r3, #0
 8001642:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001644:	2303      	movs	r3, #3
 8001646:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001648:	2301      	movs	r3, #1
 800164a:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	4821      	ldr	r0, [pc, #132]	; (80016d8 <init_USARTx+0xe8>)
 8001652:	4619      	mov	r1, r3
 8001654:	f005 f9fe 	bl	8006a54 <GPIO_Init>

	DD() // set PG8 high
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <init_USARTx+0xe8>)
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <init_USARTx+0xe8>)
 800165c:	8b12      	ldrh	r2, [r2, #24]
 800165e:	b292      	uxth	r2, r2
 8001660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001664:	b292      	uxth	r2, r2
 8001666:	831a      	strh	r2, [r3, #24]
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <init_USARTx+0xe4>)
 800166a:	2106      	movs	r1, #6
 800166c:	2208      	movs	r2, #8
 800166e:	f005 fb07 	bl	8006c80 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 8001672:	4818      	ldr	r0, [pc, #96]	; (80016d4 <init_USARTx+0xe4>)
 8001674:	2107      	movs	r1, #7
 8001676:	2208      	movs	r2, #8
 8001678:	f005 fb02 	bl	8006c80 <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 800167c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001680:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001682:	2300      	movs	r3, #0
 8001684:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8001686:	2300      	movs	r3, #0
 8001688:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 800168a:	2300      	movs	r3, #0
 800168c:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800168e:	2300      	movs	r3, #0
 8001690:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001692:	230c      	movs	r3, #12
 8001694:	827b      	strh	r3, [r7, #18]
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4810      	ldr	r0, [pc, #64]	; (80016dc <init_USARTx+0xec>)
 800169c:	4619      	mov	r1, r3
 800169e:	f005 ffed 	bl	800767c <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 80016a2:	480e      	ldr	r0, [pc, #56]	; (80016dc <init_USARTx+0xec>)
 80016a4:	f240 5125 	movw	r1, #1317	; 0x525
 80016a8:	2201      	movs	r2, #1
 80016aa:	f006 f9a1 	bl	80079f0 <USART_ITConfig>
	
	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 80016ae:	2347      	movs	r3, #71	; 0x47
 80016b0:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 4;;// this sets the priority group of the USART1 interrupts
 80016b2:	2309      	movs	r3, #9
 80016b4:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x6;		 // this sets the subpriority inside the group
 80016b6:	2306      	movs	r3, #6
 80016b8:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 80016ba:	2301      	movs	r3, #1
 80016bc:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 f865 	bl	8005790 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <init_USARTx+0xec>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	f006 f93d 	bl	8007948 <USART_Cmd>
}
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40021800 	.word	0x40021800
 80016dc:	40011400 	.word	0x40011400

080016e0 <USART_puts>:


void USART_puts(uint8_t *s, int nb)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	 * 
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
	while(i < nb && *s){
 80016ee:	e010      	b.n	8001712 <USART_puts+0x32>
		// wait until data register is empty
		while( !(USART6->SR & 0x00000040) ); 
 80016f0:	bf00      	nop
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <USART_puts+0x4c>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f8      	beq.n	80016f2 <USART_puts+0x12>
		//USART_SendData(USART6, s[i]);
		USART6->DR = s[i];
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <USART_puts+0x4c>)
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	440a      	add	r2, r1
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	809a      	strh	r2, [r3, #4]
		i++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
	 * Note 2: At the moment it takes a volatile char because the received_string variable
	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
	 * */

	int i = 0;
	while(i < nb && *s){
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	da03      	bge.n	8001722 <USART_puts+0x42>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e6      	bne.n	80016f0 <USART_puts+0x10>
		i++;
	
	}
	
	
}
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40011400 	.word	0x40011400

08001730 <USART6_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART6 interrupts
void USART6_IRQHandler(void){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	
	

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USARTx, USART_IT_RXNE) ){
 8001736:	4823      	ldr	r0, [pc, #140]	; (80017c4 <USART6_IRQHandler+0x94>)
 8001738:	f240 5125 	movw	r1, #1317	; 0x525
 800173c:	f006 fa16 	bl	8007b6c <USART_GetITStatus>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d033      	beq.n	80017ae <USART6_IRQHandler+0x7e>
		
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USARTx->DR; // the character from the USART1 data register is saved in t
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <USART6_IRQHandler+0x94>)
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	b29b      	uxth	r3, r3
 800174c:	71fb      	strb	r3, [r7, #7]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		xHigherPriorityTaskWoken_usart = pdFalse;
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <USART6_IRQHandler+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

		
		if( (cnt < rx_length  ) && (cnt < MAX_STRLEN) ){ 
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <USART6_IRQHandler+0x9c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <USART6_IRQHandler+0xa0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	da11      	bge.n	8001786 <USART6_IRQHandler+0x56>
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <USART6_IRQHandler+0x9c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	b25b      	sxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <USART6_IRQHandler+0x56>
			received_string[cnt] = t;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <USART6_IRQHandler+0x9c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <USART6_IRQHandler+0xa4>)
 8001774:	79f9      	ldrb	r1, [r7, #7]
 8001776:	54d1      	strb	r1, [r2, r3]
			cnt++;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <USART6_IRQHandler+0x9c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <USART6_IRQHandler+0x9c>)
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	e013      	b.n	80017ae <USART6_IRQHandler+0x7e>
		}
		else{ // otherwise reset the character counter and print the received string
			received_string[cnt] = t; 
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <USART6_IRQHandler+0x9c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <USART6_IRQHandler+0xa4>)
 800178c:	79f9      	ldrb	r1, [r7, #7]
 800178e:	54d1      	strb	r1, [r2, r3]
			cnt = 0;
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <USART6_IRQHandler+0x9c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
		//	USART_ITConfig(USART6, USART_IT_RXNE, DISABLE); 
		taskENTER_CRITICAL();
 8001796:	f003 f9b1 	bl	8004afc <vPortEnterCritical>
			xSemaphoreGiveFromISR(xSmphrUSART,&xHigherPriorityTaskWoken_usart );
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <USART6_IRQHandler+0xa8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	2100      	movs	r1, #0
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <USART6_IRQHandler+0x98>)
 80017a4:	2300      	movs	r3, #0
 80017a6:	f002 fdbb 	bl	8004320 <xQueueGenericSendFromISR>
		taskEXIT_CRITICAL();
 80017aa:	f003 f9b7 	bl	8004b1c <vPortExitCritical>
			//USART_puts(USART1, received_string);
		}


	}
 portYIELD_FROM_ISR( xHigherPriorityTaskWoken_usart );
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <USART6_IRQHandler+0x98>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <USART6_IRQHandler+0x8e>
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <USART6_IRQHandler+0xac>)
 80017b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017bc:	601a      	str	r2, [r3, #0]
	
}
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40011400 	.word	0x40011400
 80017c8:	20000488 	.word	0x20000488
 80017cc:	2000048c 	.word	0x2000048c
 80017d0:	200141d4 	.word	0x200141d4
 80017d4:	200141d8 	.word	0x200141d8
 80017d8:	200141a8 	.word	0x200141a8
 80017dc:	e000ed04 	.word	0xe000ed04

080017e0 <crc16>:



/* function for  */
uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80017ec:	23ff      	movs	r3, #255	; 0xff
 80017ee:	73fb      	strb	r3, [r7, #15]
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80017f0:	23ff      	movs	r3, #255	; 0xff
 80017f2:	73bb      	strb	r3, [r7, #14]
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 80017f4:	e013      	b.n	800181e <crc16+0x3e>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	4053      	eors	r3, r2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	60bb      	str	r3, [r7, #8]
         crc_hi = crc_lo ^ table_crc_hi[i];
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <crc16+0x64>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	7bbb      	ldrb	r3, [r7, #14]
 8001810:	4053      	eors	r3, r2
 8001812:	73fb      	strb	r3, [r7, #15]
         crc_lo = table_crc_lo[i];
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <crc16+0x68>)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	73bb      	strb	r3, [r7, #14]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	807a      	strh	r2, [r7, #2]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e6      	bne.n	80017f6 <crc16+0x16>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
         crc_hi = crc_lo ^ table_crc_hi[i];
         crc_lo = table_crc_lo[i];
     }
 
     return (crc_hi << 8 | crc_lo);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b29a      	uxth	r2, r3
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	b29b      	uxth	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	b29b      	uxth	r3, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	08008754 	.word	0x08008754
 8001848:	08008854 	.word	0x08008854

0800184c <write_read_modbus>:


/* write to modbus */
void write_read_modbus( uint8_t * req, uint8_t * rsp, int write_len, int read_len )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
	int i; 

	// tell ISR we expect only specific amount of data
	rx_length = read_len + write_len - 1 ; 
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <write_read_modbus+0xac>)
 8001864:	601a      	str	r2, [r3, #0]

	// driver disable 
	DD();
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <write_read_modbus+0xb0>)
 8001868:	4a24      	ldr	r2, [pc, #144]	; (80018fc <write_read_modbus+0xb0>)
 800186a:	8b12      	ldrh	r2, [r2, #24]
 800186c:	b292      	uxth	r2, r2
 800186e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001872:	b292      	uxth	r2, r2
 8001874:	831a      	strh	r2, [r3, #24]
	for (i=0; i < 4000; i++) ;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e002      	b.n	8001882 <write_read_modbus+0x36>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001888:	dbf8      	blt.n	800187c <write_read_modbus+0x30>
	USART_puts(req,write_len);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	f7ff ff27 	bl	80016e0 <USART_puts>
	for (i = 0; i < 4000; i++);
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e002      	b.n	800189e <write_read_modbus+0x52>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80018a4:	dbf8      	blt.n	8001898 <write_read_modbus+0x4c>
	// driver enable 
	DE();
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <write_read_modbus+0xb0>)
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <write_read_modbus+0xb0>)
 80018aa:	8b52      	ldrh	r2, [r2, #26]
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b2:	b292      	uxth	r2, r2
 80018b4:	835a      	strh	r2, [r3, #26]

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <write_read_modbus+0xb4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c2:	2300      	movs	r3, #0
 80018c4:	f002 fd96 	bl	80043f4 <xQueueGenericReceive>
	
	for (i = 0; i < read_len; i++) 
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e00c      	b.n	80018e8 <write_read_modbus+0x9c>
		rsp[i] = received_string[i+write_len]; 
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	4413      	add	r3, r2
 80018d4:	6979      	ldr	r1, [r7, #20]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	440a      	add	r2, r1
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <write_read_modbus+0xb8>)
 80018dc:	5c8a      	ldrb	r2, [r1, r2]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
	// driver enable 
	DE();

	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
	
	for (i = 0; i < read_len; i++) 
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbee      	blt.n	80018ce <write_read_modbus+0x82>
		rsp[i] = received_string[i+write_len]; 

}
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200141d4 	.word	0x200141d4
 80018fc:	40021800 	.word	0x40021800
 8001900:	200141a8 	.word	0x200141a8
 8001904:	200141d8 	.word	0x200141d8

08001908 <modbus_WIB>:
}


/* modbus write input bits */
void modbus_WIB( uint16_t address, int nb, uint8_t *src )
{
 8001908:	b580      	push	{r7, lr}
 800190a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800190e:	af00      	add	r7, sp, #0
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	6019      	str	r1, [r3, #0]
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f107 030e 	add.w	r3, r7, #14
 800191e:	4602      	mov	r2, r0
 8001920:	801a      	strh	r2, [r3, #0]
	/* first send request */

	uint8_t req[REQ_MAX_LEN];
	int byte_count; 
	int req_length; 
	int bit_check = 0; 
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	int pos = 0; 
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	
	req[0] = 0x36; 
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2236      	movs	r2, #54	; 0x36
 8001934:	701a      	strb	r2, [r3, #0]
	req[1] = 0xF;
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	220f      	movs	r2, #15
 800193c:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 800193e:	f107 030e 	add.w	r3, r7, #14
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001950:	f107 030e 	add.w	r3, r7, #14
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	121b      	asrs	r3, r3, #8
 8001966:	b2da      	uxtb	r2, r3
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 800197c:	2306      	movs	r3, #6
 800197e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	da00      	bge.n	800198e <modbus_WIB+0x86>
 800198c:	3307      	adds	r3, #7
 800198e:	10db      	asrs	r3, r3, #3
 8001990:	461a      	mov	r2, r3
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2300      	moveq	r3, #0
 80019a2:	2301      	movne	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  	req[req_length++] = byte_count;
 80019ac:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 80019b6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80019ba:	b2d1      	uxtb	r1, r2
 80019bc:	f107 0214 	add.w	r2, r7, #20
 80019c0:	54d1      	strb	r1, [r2, r3]

	int i; 
    	for (i = 0; i < byte_count; i++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80019c8:	e05c      	b.n	8001a84 <modbus_WIB+0x17c>
        
		int bit;
		bit = 0x01;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        	req[req_length] = 0;
 80019d0:	f107 0214 	add.w	r2, r7, #20
 80019d4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80019d8:	4413      	add	r3, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 80019de:	e038      	b.n	8001a52 <modbus_WIB+0x14a>
            		if (src[pos++])
 80019e0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 80019ea:	1d3a      	adds	r2, r7, #4
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d013      	beq.n	8001a1e <modbus_WIB+0x116>
                		req[req_length] |= bit;
 80019f6:	f107 0214 	add.w	r2, r7, #20
 80019fa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	f107 0114 	add.w	r1, r7, #20
 8001a14:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a18:	440b      	add	r3, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e014      	b.n	8001a48 <modbus_WIB+0x140>
            		else
                		req[req_length] &=~ bit;
 8001a1e:	f107 0214 	add.w	r2, r7, #20
 8001a22:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4013      	ands	r3, r2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	f107 0114 	add.w	r1, r7, #20
 8001a40:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a44:	440b      	add	r3, r1
 8001a46:	701a      	strb	r2, [r3, #0]

            		bit = bit << 1;
 8001a48:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        
		int bit;
		bit = 0x01;
        	req[req_length] = 0;

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 8001a52:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <modbus_WIB+0x168>
 8001a5c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	f8c7 2228 	str.w	r2, [r7, #552]	; 0x228
 8001a66:	f107 0208 	add.w	r2, r7, #8
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	dbb7      	blt.n	80019e0 <modbus_WIB+0xd8>
                		req[req_length] &=~ bit;

            		bit = bit << 1;
        	}	
        	
		req_length++;
 8001a70:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a74:	3301      	adds	r3, #1
 8001a76:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
  	req[req_length++] = byte_count;

	int i; 
    	for (i = 0; i < byte_count; i++) {
 8001a7a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001a84:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001a88:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	db9c      	blt.n	80019ca <modbus_WIB+0xc2>
        	}	
        	
		req_length++;
	 }

	uint16_t crc = crc16(req, req_length);
 8001a90:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f107 0214 	add.w	r2, r7, #20
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff fe9f 	bl	80017e0 <crc16>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

	req[req_length++] = crc >> 8; 
 8001aa8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001ab2:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 8001ab6:	0a12      	lsrs	r2, r2, #8
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	b2d1      	uxtb	r1, r2
 8001abc:	f107 0214 	add.w	r2, r7, #20
 8001ac0:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001ac2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001acc:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 8001ad0:	b2d1      	uxtb	r1, r2
 8001ad2:	f107 0214 	add.w	r2, r7, #20
 8001ad6:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req,req, req_length ,8); 
 8001ad8:	f107 0214 	add.w	r2, r7, #20
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001ae8:	2308      	movs	r3, #8
 8001aea:	f7ff feaf 	bl	800184c <write_read_modbus>
	
}
 8001aee:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop

08001af8 <modbus_WR>:

/* Write the values from the array to the registers of the remote device */
void modbus_WR( int address, int nb, const uint16_t *src)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	6018      	str	r0, [r3, #0]
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	6019      	str	r1, [r3, #0]
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	601a      	str	r2, [r3, #0]
    	int req_length;
    	int byte_count;

    	uint8_t req[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	2236      	movs	r2, #54	; 0x36
 8001b16:	701a      	strb	r2, [r3, #0]
	req[1] = 0x10;
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	121b      	asrs	r3, r3, #8
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	121b      	asrs	r3, r3, #8
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	
   	byte_count = nb * 2;
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    	req[req_length++] = byte_count;
 8001b6e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001b78:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001b7c:	b2d1      	uxtb	r1, r2
 8001b7e:	f107 0210 	add.w	r2, r7, #16
 8001b82:	54d1      	strb	r1, [r2, r3]

    for (i = 0; i < nb; i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001b8a:	e026      	b.n	8001bda <modbus_WR+0xe2>
		req[req_length++] = src[i] >> 8;
 8001b8c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001b96:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	1d39      	adds	r1, r7, #4
 8001b9e:	6809      	ldr	r1, [r1, #0]
 8001ba0:	440a      	add	r2, r1
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	0a12      	lsrs	r2, r2, #8
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	b2d1      	uxtb	r1, r2
 8001baa:	f107 0210 	add.w	r2, r7, #16
 8001bae:	54d1      	strb	r1, [r2, r3]
        	req[req_length++] = src[i] & 0x00ff;
 8001bb0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001bba:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001bbe:	0052      	lsls	r2, r2, #1
 8001bc0:	1d39      	adds	r1, r7, #4
 8001bc2:	6809      	ldr	r1, [r1, #0]
 8001bc4:	440a      	add	r2, r1
 8001bc6:	8812      	ldrh	r2, [r2, #0]
 8001bc8:	b2d1      	uxtb	r1, r2
 8001bca:	f107 0210 	add.w	r2, r7, #16
 8001bce:	54d1      	strb	r1, [r2, r3]
	req_length = 6; 
	
   	byte_count = nb * 2;
    	req[req_length++] = byte_count;

    for (i = 0; i < nb; i++) {
 8001bd0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbd1      	blt.n	8001b8c <modbus_WR+0x94>
		req[req_length++] = src[i] >> 8;
        	req[req_length++] = src[i] & 0x00ff;
    	}

	uint16_t crc = crc16(req, req_length);
 8001be8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f107 0210 	add.w	r2, r7, #16
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7ff fdf3 	bl	80017e0 <crc16>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212

	req[req_length++] = crc >> 8; 
 8001c00:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001c0a:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8001c0e:	0a12      	lsrs	r2, r2, #8
 8001c10:	b292      	uxth	r2, r2
 8001c12:	b2d1      	uxtb	r1, r2
 8001c14:	f107 0210 	add.w	r2, r7, #16
 8001c18:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff;
 8001c1a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8001c24:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 8001c28:	b2d1      	uxtb	r1, r2
 8001c2a:	f107 0210 	add.w	r2, r7, #16
 8001c2e:	54d1      	strb	r1, [r2, r3]

	/* write request  to modbus line */
	write_read_modbus( req, req, req_length, 8); 
 8001c30:	f107 0210 	add.w	r2, r7, #16
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8001c40:	2308      	movs	r3, #8
 8001c42:	f7ff fe03 	bl	800184c <write_read_modbus>

}
 8001c46:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop

08001c50 <modbus_RR>:
}


/* Read the values from the array to the registers of the remote device */
void modbus_RR( int address, int nb, uint16_t *src)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	6018      	str	r0, [r3, #0]
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	6019      	str	r1, [r3, #0]
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	601a      	str	r2, [r3, #0]
    	int req_length;
	int byte_count;
    	uint8_t req[REQ_MAX_LEN];
  	uint8_t rsp[REQ_MAX_LEN];

	req[0] = 0x36; 
 8001c68:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c6c:	2236      	movs	r2, #54	; 0x36
 8001c6e:	701a      	strb	r2, [r3, #0]
	req[1] = 0x4;
 8001c70:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c74:	2204      	movs	r2, #4
 8001c76:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	121b      	asrs	r3, r3, #8
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c86:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c94:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	121b      	asrs	r3, r3, #8
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001ca4:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001cb2:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8001cb4:	2306      	movs	r3, #6
 8001cb6:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
   	
	byte_count = nb * 2;
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    	req[req_length++] = byte_count;
 8001cc6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001cd0:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001cd4:	b2d1      	uxtb	r1, r2
 8001cd6:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001cda:	54d1      	strb	r1, [r2, r3]
	
	
	uint16_t crc = crc16(req, req_length);
 8001cdc:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7ff fd79 	bl	80017e0 <crc16>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a

	req[req_length++] = crc >> 8; 
 8001cf4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001cfe:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001d02:	0a12      	lsrs	r2, r2, #8
 8001d04:	b292      	uxth	r2, r2
 8001d06:	b2d1      	uxtb	r1, r2
 8001d08:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001d0c:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8001d0e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8001d18:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8001d1c:	b2d1      	uxtb	r1, r2
 8001d1e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001d22:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	3305      	adds	r3, #5
 8001d2e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001d32:	f107 0214 	add.w	r2, r7, #20
 8001d36:	4608      	mov	r0, r1
 8001d38:	4611      	mov	r1, r2
 8001d3a:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001d3e:	f7ff fd85 	bl	800184c <write_read_modbus>
	
	int offset = 2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	
	for (i = 0; i < nb; i++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001d4e:	e024      	b.n	8001d9a <modbus_RR+0x14a>
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001d50:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	1d3a      	adds	r2, r7, #4
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001d60:	1c51      	adds	r1, r2, #1
 8001d62:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001d66:	0052      	lsls	r2, r2, #1
 8001d68:	440a      	add	r2, r1
 8001d6a:	f107 0114 	add.w	r1, r7, #20
 8001d6e:	5c8a      	ldrb	r2, [r1, r2]
 8001d70:	0212      	lsls	r2, r2, #8
 8001d72:	b291      	uxth	r1, r2
                rsp[offset + 2 + (i << 1)];
 8001d74:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001d78:	1c90      	adds	r0, r2, #2
 8001d7a:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001d7e:	0052      	lsls	r2, r2, #1
 8001d80:	4402      	add	r2, r0
 8001d82:	f107 0014 	add.w	r0, r7, #20
 8001d86:	5c82      	ldrb	r2, [r0, r2]
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	801a      	strh	r2, [r3, #0]
	/* write request  to modbus line */
	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
 8001d90:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001d94:	3301      	adds	r3, #1
 8001d96:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbd3      	blt.n	8001d50 <modbus_RR+0x100>
            src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
                rsp[offset + 2 + (i << 1)];
		
        }

	return 0;
 8001da8:	bf00      	nop
}
 8001daa:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop

08001db4 <motorHeartBeat_task>:
=====================================================================================
============    		TASKS SECTION			===================== 
=====================================================================================
====================================================================================*/
void motorHeartBeat_task(void * pvParameters)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	/*! sets speed of motor */

	
	uint16_t tab_reg[10];
	
	vTaskSuspend(NULL); 
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f001 fb2f 	bl	8003420 <vTaskSuspend>
	
	while(1)
	{

		
		modbus_RR(0,10,tab_reg);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	210a      	movs	r1, #10
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f7ff ff40 	bl	8001c50 <modbus_RR>

		vTaskDelay(1000/portTICK_RATE_MS);
 8001dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd4:	f001 fafc 	bl	80033d0 <vTaskDelay>

	}
 8001dd8:	e7f3      	b.n	8001dc2 <motorHeartBeat_task+0xe>
 8001dda:	bf00      	nop

08001ddc <motorControl_task>:


}

void motorControl_task(void * pvParameters)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b09c      	sub	sp, #112	; 0x70
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	uint8_t stop[4]; 
	uint16_t tab_reg[10];
	uint16_t spd[5]; 
	

	stop[0] = 0; stop[1] = 1; stop[2] = 1; stop[3] = 1; 
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	
	spd[0]=1500;spd[1]=0;spd[2]=2250;spd[3]=10;spd[4]=10;
 8001e14:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001e18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001e22:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001e26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001e30:	230a      	movs	r3, #10
 8001e32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	
	// create usart semaphore 
	xSmphrUSART = xSemaphoreCreateBinary();	
 8001e36:	2001      	movs	r0, #1
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	f002 f97e 	bl	800413c <xQueueGenericCreate>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <motorControl_task+0x1a8>)
 8001e44:	601a      	str	r2, [r3, #0]
	
	portTickType xDelay = 500 / portTICK_RATE_MS;	
 8001e46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
	QueueTelegram telegramR, telegramS; 
	
	while (1)
	{
	
		if (xQueueReceive(QSpd_handle, (void *)&telegramR, xDelay ) == pdPASS)
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <motorControl_task+0x1ac>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f002 faca 	bl	80043f4 <xQueueGenericReceive>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	f040 8086 	bne.w	8001f74 <motorControl_task+0x198>
		{
			switch ( telegramR.Qcmd )
 8001e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d874      	bhi.n	8001f5a <motorControl_task+0x17e>
 8001e70:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <motorControl_task+0x9c>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001ec9 	.word	0x08001ec9
 8001e80:	08001f5b 	.word	0x08001f5b
 8001e84:	08001f5b 	.word	0x08001f5b
 8001e88:	08001ef3 	.word	0x08001ef3
 8001e8c:	08001f33 	.word	0x08001f33
			{
				case SETDATA:
					
					// write to modbus 
					modbus_WIB ( 0 , 3, src);
 8001e90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e94:	2000      	movs	r0, #0
 8001e96:	2103      	movs	r1, #3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f7ff fd35 	bl	8001908 <modbus_WIB>
					modbus_WR(0, 5, telegramR.data);
 8001e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	f7ff fe25 	bl	8001af8 <modbus_WR>
					
					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001eae:	2306      	movs	r3, #6
 8001eb0:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <motorControl_task+0x1ac>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f002 f97d 	bl	80041c0 <xQueueGenericSend>

					break;
 8001ec6:	e055      	b.n	8001f74 <motorControl_task+0x198>
				       	
				
				case GETDATA:
					modbus_RR(0, 10, telegramS.data);
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	3308      	adds	r3, #8
 8001ece:	2000      	movs	r0, #0
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f7ff febc 	bl	8001c50 <modbus_RR>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001ed8:	2306      	movs	r3, #6
 8001eda:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <motorControl_task+0x1ac>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001eea:	2300      	movs	r3, #0
 8001eec:	f002 f968 	bl	80041c0 <xQueueGenericSend>

					break;
 8001ef0:	e040      	b.n	8001f74 <motorControl_task+0x198>

				
				case START: 
					
							// set motor speed to 10% 
					modbus_WIB( 0 , 3, src); 
 8001ef2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	2103      	movs	r1, #3
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7ff fd04 	bl	8001908 <modbus_WIB>
					modbus_WR( 0, 5, spd);
 8001f00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f04:	2000      	movs	r0, #0
 8001f06:	2105      	movs	r1, #5
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f7ff fdf5 	bl	8001af8 <modbus_WR>
					vTaskResume(motorHeartBeatHandle);
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <motorControl_task+0x1b0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 fafe 	bl	8003514 <vTaskResume>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001f18:	2306      	movs	r3, #6
 8001f1a:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <motorControl_task+0x1ac>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f002 f948 	bl	80041c0 <xQueueGenericSend>

					break;
 8001f30:	e020      	b.n	8001f74 <motorControl_task+0x198>
				
				case STOP:
					
					// send stop bits to motor 
					modbus_WIB ( 0 , 3 , stop);
 8001f32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f36:	2000      	movs	r0, #0
 8001f38:	2103      	movs	r1, #3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f7ff fce4 	bl	8001908 <modbus_WIB>

					// send response to CLI 
					telegramS.Qcmd = SUCCSESS;
 8001f40:	2306      	movs	r3, #6
 8001f42:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <motorControl_task+0x1ac>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f52:	2300      	movs	r3, #0
 8001f54:	f002 f934 	bl	80041c0 <xQueueGenericSend>

					break; 
 8001f58:	e00c      	b.n	8001f74 <motorControl_task+0x198>

				default:

					telegramS.Qcmd = ERROR_MODBUS;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	733b      	strb	r3, [r7, #12]
					xQueueSend(QSpd_handle, &telegramS, xDelay);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <motorControl_task+0x1ac>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f002 f927 	bl	80041c0 <xQueueGenericSend>
					break;
 8001f72:	bf00      	nop

					
			}
		}

		modbus_RR(0, 10, tab_reg);		
 8001f74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f78:	2000      	movs	r0, #0
 8001f7a:	210a      	movs	r1, #10
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f7ff fe67 	bl	8001c50 <modbus_RR>
	
	}
 8001f82:	e763      	b.n	8001e4c <motorControl_task+0x70>
 8001f84:	200141a8 	.word	0x200141a8
 8001f88:	200131f8 	.word	0x200131f8
 8001f8c:	200139d0 	.word	0x200139d0

08001f90 <handleVariable_set>:
				int xParamLength,
				xQueueHandle Qhandle,
				uint8_t * Value,
				int xValueLength,
				int socket )
{
 8001f90:	b084      	sub	sp, #16
 8001f92:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
 8001f96:	b0a3      	sub	sp, #140	; 0x8c
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	f107 0ca8 	add.w	ip, r7, #168	; 0xa8
 8001f9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 8001fa2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001fa6:	49a6      	ldr	r1, [pc, #664]	; (8002240 <handleVariable_set+0x2b0>)
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f005 ff8f 	bl	8007ecc <strncmp>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 80d8 	bne.w	8002166 <handleVariable_set+0x1d6>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 8001fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fba:	3b02      	subs	r3, #2
 8001fbc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 8001fc6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001fca:	f005 fea5 	bl	8007d18 <atoi>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8001fd4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	d903      	bls.n	8001fe4 <handleVariable_set+0x54>
 8001fdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d948      	bls.n	8002076 <handleVariable_set+0xe6>
 8001fe4:	466b      	mov	r3, sp
 8001fe6:	461c      	mov	r4, r3
		{
			// send error via TCP
			//
			int len = strlen ( Value ) + 11 ; 
 8001fe8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001fec:	f005 ff3e 	bl	8007e6c <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	330b      	adds	r3, #11
 8001ff4:	66bb      	str	r3, [r7, #104]	; 0x68
			uint8_t buf [len]; //= "Error: speed is out of range!\n\n";
 8001ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ff8:	1e4b      	subs	r3, r1, #1
 8001ffa:	667b      	str	r3, [r7, #100]	; 0x64
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	461a      	mov	r2, r3
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	00d8      	lsls	r0, r3, #3
 8002006:	61f8      	str	r0, [r7, #28]
 8002008:	f8d7 c01c 	ldr.w	ip, [r7, #28]
 800200c:	ea4c 7c52 	orr.w	ip, ip, r2, lsr #29
 8002010:	f8c7 c01c 	str.w	ip, [r7, #28]
 8002014:	00d0      	lsls	r0, r2, #3
 8002016:	460b      	mov	r3, r1
 8002018:	461a      	mov	r2, r3
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8002022:	f8c7 c014 	str.w	ip, [r7, #20]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800202c:	6178      	str	r0, [r7, #20]
 800202e:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8002032:	460b      	mov	r3, r1
 8002034:	3307      	adds	r3, #7
 8002036:	08db      	lsrs	r3, r3, #3
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	ebad 0d03 	sub.w	sp, sp, r3
 800203e:	466b      	mov	r3, sp
 8002040:	3300      	adds	r3, #0
 8002042:	663b      	str	r3, [r7, #96]	; 0x60
			sprintf(buf, "Errror : %d\n\n", s1);
 8002044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002046:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800204a:	4610      	mov	r0, r2
 800204c:	497d      	ldr	r1, [pc, #500]	; (8002244 <handleVariable_set+0x2b4>)
 800204e:	461a      	mov	r2, r3
 8002050:	f000 fe80 	bl	8002d54 <sprintf>
			buf[11+ 3] = "\0"; 
 8002054:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <handleVariable_set+0x2b8>)
 8002056:	b2da      	uxtb	r2, r3
 8002058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800205a:	739a      	strb	r2, [r3, #14]
			send( socket_0, buf, 11+3, 0);
 800205c:	4b7b      	ldr	r3, [pc, #492]	; (800224c <handleVariable_set+0x2bc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	220e      	movs	r2, #14
 800206a:	2300      	movs	r3, #0
 800206c:	f7ff f88e 	bl	800118c <send>

	       		return pdFALSE; 	
 8002070:	2300      	movs	r3, #0
 8002072:	46a5      	mov	sp, r4
 8002074:	e207      	b.n	8002486 <handleVariable_set+0x4f6>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8002076:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800207a:	461a      	mov	r2, r3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4413      	add	r3, r2
 8002080:	461a      	mov	r2, r3
 8002082:	0091      	lsls	r1, r2, #2
 8002084:	461a      	mov	r2, r3
 8002086:	460b      	mov	r3, r1
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		
		
		// setup telegram 
		
		telegram.data[0] = s1;
 8002090:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002094:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		telegram.data[1] = 0;	
 8002098:	2300      	movs	r3, #0
 800209a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
		telegram.data[2] = 2250;
 800209e:	f640 03ca 	movw	r3, #2250	; 0x8ca
 80020a2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		telegram.data[3] = 10;	
 80020a6:	230a      	movs	r3, #10
 80020a8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		telegram.data[4] = 10;	
 80020ac:	230a      	movs	r3, #10
 80020ae:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
		telegram.size = 5;
 80020b2:	2305      	movs	r3, #5
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		telegram.Qcmd = SETDATA;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80020be:	4b64      	ldr	r3, [pc, #400]	; (8002250 <handleVariable_set+0x2c0>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b64      	ldr	r3, [pc, #400]	; (8002254 <handleVariable_set+0x2c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4610      	mov	r0, r2
 80020c8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80020cc:	461a      	mov	r2, r3
 80020ce:	2300      	movs	r3, #0
 80020d0:	f002 f876 	bl	80041c0 <xQueueGenericSend>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d134      	bne.n	8002144 <handleVariable_set+0x1b4>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <handleVariable_set+0x2c0>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <handleVariable_set+0x2c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4610      	mov	r0, r2
 80020e4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80020e8:	461a      	mov	r2, r3
 80020ea:	2300      	movs	r3, #0
 80020ec:	f002 f982 	bl	80043f4 <xQueueGenericReceive>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d115      	bne.n	8002122 <handleVariable_set+0x192>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 80020f6:	2306      	movs	r3, #6
 80020f8:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
				{	
					uint8_t * buf = "Speed succsesfully set.\n\n";
 80020fc:	4b56      	ldr	r3, [pc, #344]	; (8002258 <handleVariable_set+0x2c8>)
 80020fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					int len = 25; 	
 8002102:	2319      	movs	r3, #25
 8002104:	67fb      	str	r3, [r7, #124]	; 0x7c
					send( socket, buf, len, 0);
 8002106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800210a:	b2da      	uxtb	r2, r3
 800210c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800210e:	b29b      	uxth	r3, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002116:	461a      	mov	r2, r3
 8002118:	2300      	movs	r3, #0
 800211a:	f7ff f837 	bl	800118c <send>


					return pdPASS;
 800211e:	2301      	movs	r3, #1
 8002120:	e1b1      	b.n	8002486 <handleVariable_set+0x4f6>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				uint8_t * buf = "Error recieving response!\n\n";
 8002122:	4b4e      	ldr	r3, [pc, #312]	; (800225c <handleVariable_set+0x2cc>)
 8002124:	67bb      	str	r3, [r7, #120]	; 0x78
	 			int len = 27; 	
 8002126:	231b      	movs	r3, #27
 8002128:	677b      	str	r3, [r7, #116]	; 0x74
				send( socket_0, buf, len, 0);
 800212a:	4b48      	ldr	r3, [pc, #288]	; (800224c <handleVariable_set+0x2bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002132:	b29b      	uxth	r3, r3
 8002134:	4610      	mov	r0, r2
 8002136:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002138:	461a      	mov	r2, r3
 800213a:	2300      	movs	r3, #0
 800213c:	f7ff f826 	bl	800118c <send>

				return pdFALSE; 	
 8002140:	2300      	movs	r3, #0
 8002142:	e1a0      	b.n	8002486 <handleVariable_set+0x4f6>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <handleVariable_set+0x2d0>)
 8002146:	673b      	str	r3, [r7, #112]	; 0x70
	 		int len = 22; 	
 8002148:	2316      	movs	r3, #22
 800214a:	66fb      	str	r3, [r7, #108]	; 0x6c
			send( socket, buf, len, 0);
 800214c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002150:	b2da      	uxtb	r2, r3
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	b29b      	uxth	r3, r3
 8002156:	4610      	mov	r0, r2
 8002158:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800215a:	461a      	mov	r2, r3
 800215c:	2300      	movs	r3, #0
 800215e:	f7ff f815 	bl	800118c <send>

			return pdFALSE; 	
 8002162:	2300      	movs	r3, #0
 8002164:	e18f      	b.n	8002486 <handleVariable_set+0x4f6>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 8002166:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800216a:	493e      	ldr	r1, [pc, #248]	; (8002264 <handleVariable_set+0x2d4>)
 800216c:	2206      	movs	r2, #6
 800216e:	f005 fead 	bl	8007ecc <strncmp>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 80cf 	bne.w	8002318 <handleVariable_set+0x388>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 800217a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800217e:	3b02      	subs	r3, #2
 8002180:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002184:	4413      	add	r3, r2
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 800218a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800218e:	f005 fdc3 	bl	8007d18 <atoi>
 8002192:	4603      	mov	r3, r0
 8002194:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8002198:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800219c:	2b09      	cmp	r3, #9
 800219e:	d903      	bls.n	80021a8 <handleVariable_set+0x218>
 80021a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d95f      	bls.n	8002268 <handleVariable_set+0x2d8>
 80021a8:	466b      	mov	r3, sp
 80021aa:	461c      	mov	r4, r3
		{
			// send error via TCP
			//
			int len = strlen ( Value ) + 11 ; 
 80021ac:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80021b0:	f005 fe5c 	bl	8007e6c <strlen>
 80021b4:	4603      	mov	r3, r0
 80021b6:	330b      	adds	r3, #11
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
			uint8_t buf [len]; //= "Error: speed is out of range!\n\n";
 80021ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021bc:	1e4b      	subs	r3, r1, #1
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
 80021c0:	460b      	mov	r3, r1
 80021c2:	461a      	mov	r2, r3
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	00d8      	lsls	r0, r3, #3
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80021d0:	ea4c 7c52 	orr.w	ip, ip, r2, lsr #29
 80021d4:	f8c7 c00c 	str.w	ip, [r7, #12]
 80021d8:	00d0      	lsls	r0, r2, #3
 80021da:	460b      	mov	r3, r1
 80021dc:	461a      	mov	r2, r3
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80021e6:	f8c7 c004 	str.w	ip, [r7, #4]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80021f6:	460b      	mov	r3, r1
 80021f8:	3307      	adds	r3, #7
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	ebad 0d03 	sub.w	sp, sp, r3
 8002202:	466b      	mov	r3, sp
 8002204:	3300      	adds	r3, #0
 8002206:	643b      	str	r3, [r7, #64]	; 0x40
			sprintf(buf, "Errror : %d\n\n", s1);
 8002208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800220a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800220e:	4610      	mov	r0, r2
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <handleVariable_set+0x2b4>)
 8002212:	461a      	mov	r2, r3
 8002214:	f000 fd9e 	bl	8002d54 <sprintf>
			buf[11+ 3] = "\0"; 
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <handleVariable_set+0x2b8>)
 800221a:	b2da      	uxtb	r2, r3
 800221c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221e:	739a      	strb	r2, [r3, #14]
			send( socket_0, buf, len, 0);
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <handleVariable_set+0x2bc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	b2d9      	uxtb	r1, r3
 8002226:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222a:	b29b      	uxth	r3, r3
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	2300      	movs	r3, #0
 8002234:	f7fe ffaa 	bl	800118c <send>

	       		return pdFALSE; 	
 8002238:	2300      	movs	r3, #0
 800223a:	46a5      	mov	sp, r4
 800223c:	e123      	b.n	8002486 <handleVariable_set+0x4f6>
 800223e:	bf00      	nop
 8002240:	08008270 	.word	0x08008270
 8002244:	08008278 	.word	0x08008278
 8002248:	08008288 	.word	0x08008288
 800224c:	200131f4 	.word	0x200131f4
 8002250:	200131f8 	.word	0x200131f8
 8002254:	20000000 	.word	0x20000000
 8002258:	0800828c 	.word	0x0800828c
 800225c:	080082a8 	.word	0x080082a8
 8002260:	080082c4 	.word	0x080082c4
 8002264:	080082dc 	.word	0x080082dc
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 8002268:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800226c:	461a      	mov	r2, r3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4413      	add	r3, r2
 8002272:	461a      	mov	r2, r3
 8002274:	0091      	lsls	r1, r2, #2
 8002276:	461a      	mov	r2, r3
 8002278:	460b      	mov	r3, r1
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		
		
		// setup telegram 
		
		telegram.data[0] = s1; 
 8002282:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002286:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		telegram.size = 1; 
 800228a:	2301      	movs	r3, #1
 800228c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		telegram.Qcmd = SETDATA;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8002296:	4b7f      	ldr	r3, [pc, #508]	; (8002494 <handleVariable_set+0x504>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <handleVariable_set+0x508>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4610      	mov	r0, r2
 80022a0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80022a4:	461a      	mov	r2, r3
 80022a6:	2300      	movs	r3, #0
 80022a8:	f001 ff8a 	bl	80041c0 <xQueueGenericSend>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d121      	bne.n	80022f6 <handleVariable_set+0x366>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <handleVariable_set+0x504>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b78      	ldr	r3, [pc, #480]	; (8002498 <handleVariable_set+0x508>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4610      	mov	r0, r2
 80022bc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80022c0:	461a      	mov	r2, r3
 80022c2:	2300      	movs	r3, #0
 80022c4:	f002 f896 	bl	80043f4 <xQueueGenericReceive>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <handleVariable_set+0x388>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 80022ce:	2306      	movs	r3, #6
 80022d0:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
				{	
					uint8_t * buf = "Speed succsesfully set.\n\n";
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <handleVariable_set+0x50c>)
 80022d6:	65bb      	str	r3, [r7, #88]	; 0x58
					int len = 25; 	
 80022d8:	2319      	movs	r3, #25
 80022da:	657b      	str	r3, [r7, #84]	; 0x54
					send( socket, buf, len, 0);
 80022dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80022ea:	461a      	mov	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	f7fe ff4d 	bl	800118c <send>


					return pdPASS;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0c7      	b.n	8002486 <handleVariable_set+0x4f6>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 80022f6:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <handleVariable_set+0x510>)
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50
	 		int len = 22; 	
 80022fa:	2316      	movs	r3, #22
 80022fc:	64fb      	str	r3, [r7, #76]	; 0x4c
			send( socket, buf, len, 0);
 80022fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002302:	b2da      	uxtb	r2, r3
 8002304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002306:	b29b      	uxth	r3, r3
 8002308:	4610      	mov	r0, r2
 800230a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800230c:	461a      	mov	r2, r3
 800230e:	2300      	movs	r3, #0
 8002310:	f7fe ff3c 	bl	800118c <send>

			return pdFALSE; 	
 8002314:	2300      	movs	r3, #0
 8002316:	e0b6      	b.n	8002486 <handleVariable_set+0x4f6>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 8002318:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800231c:	4961      	ldr	r1, [pc, #388]	; (80024a4 <handleVariable_set+0x514>)
 800231e:	2208      	movs	r2, #8
 8002320:	f005 fdd4 	bl	8007ecc <strncmp>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80ac 	bne.w	8002484 <handleVariable_set+0x4f4>
	{	
	
	
		
		// now convert parameter to proper value and check if it is in range 
        	Value[xValueLength-2] = '\0'; 	
 800232c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002330:	3b02      	subs	r3, #2
 8002332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002336:	4413      	add	r3, r2
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
		uint16_t s1 = atoi ( Value ); 
 800233c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002340:	f005 fcea 	bl	8007d18 <atoi>
 8002344:	4603      	mov	r3, r0
 8002346:	87fb      	strh	r3, [r7, #62]	; 0x3e
		// if speed is in range
		if(s1 < 10 ||  s1 > 100 )
 8002348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800234a:	2b09      	cmp	r3, #9
 800234c:	d902      	bls.n	8002354 <handleVariable_set+0x3c4>
 800234e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002350:	2b64      	cmp	r3, #100	; 0x64
 8002352:	d942      	bls.n	80023da <handleVariable_set+0x44a>
 8002354:	466b      	mov	r3, sp
 8002356:	461c      	mov	r4, r3
		{
			// send error via TCP
			//
			int len = strlen ( Value ) + 11 ; 
 8002358:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800235c:	f005 fd86 	bl	8007e6c <strlen>
 8002360:	4603      	mov	r3, r0
 8002362:	330b      	adds	r3, #11
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
			uint8_t buf [len]; //= "Error: speed is out of range!\n\n";
 8002366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002368:	1e4b      	subs	r3, r1, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	460b      	mov	r3, r1
 800236e:	461a      	mov	r2, r3
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8002378:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 800237c:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8002380:	460b      	mov	r3, r1
 8002382:	461a      	mov	r2, r3
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800238c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8002390:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8002394:	460b      	mov	r3, r1
 8002396:	3307      	adds	r3, #7
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	ebad 0d03 	sub.w	sp, sp, r3
 80023a0:	466b      	mov	r3, sp
 80023a2:	3300      	adds	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
			sprintf(buf, "Errror : %d\n\n", s1);
 80023a6:	6a3a      	ldr	r2, [r7, #32]
 80023a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023aa:	4610      	mov	r0, r2
 80023ac:	493e      	ldr	r1, [pc, #248]	; (80024a8 <handleVariable_set+0x518>)
 80023ae:	461a      	mov	r2, r3
 80023b0:	f000 fcd0 	bl	8002d54 <sprintf>
			buf[11+ 3] = "\0"; 
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <handleVariable_set+0x51c>)
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	739a      	strb	r2, [r3, #14]
			send( socket_0, buf, len, 0);
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <handleVariable_set+0x520>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2d9      	uxtb	r1, r3
 80023c2:	6a3a      	ldr	r2, [r7, #32]
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2300      	movs	r3, #0
 80023d0:	f7fe fedc 	bl	800118c <send>

	       		return pdFALSE; 	
 80023d4:	2300      	movs	r3, #0
 80023d6:	46a5      	mov	sp, r4
 80023d8:	e055      	b.n	8002486 <handleVariable_set+0x4f6>
		}	
	
		// convert to correct value ( * 100 ) 
		s1 *= 100; 
 80023da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023dc:	461a      	mov	r2, r3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	461a      	mov	r2, r3
 80023e4:	0091      	lsls	r1, r2, #2
 80023e6:	461a      	mov	r2, r3
 80023e8:	460b      	mov	r3, r1
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
		
		
		// setup telegram 
		
		telegram.data[0] = s1; 
 80023f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023f2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		telegram.size = 1; 
 80023f6:	2301      	movs	r3, #1
 80023f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		telegram.Qcmd = SETDATA;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <handleVariable_set+0x504>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <handleVariable_set+0x508>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4610      	mov	r0, r2
 800240c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002410:	461a      	mov	r2, r3
 8002412:	2300      	movs	r3, #0
 8002414:	f001 fed4 	bl	80041c0 <xQueueGenericSend>
 8002418:	4603      	mov	r3, r0
 800241a:	2b01      	cmp	r3, #1
 800241c:	d121      	bne.n	8002462 <handleVariable_set+0x4d2>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <handleVariable_set+0x504>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <handleVariable_set+0x508>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4610      	mov	r0, r2
 8002428:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800242c:	461a      	mov	r2, r3
 800242e:	2300      	movs	r3, #0
 8002430:	f001 ffe0 	bl	80043f4 <xQueueGenericReceive>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d024      	beq.n	8002484 <handleVariable_set+0x4f4>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 800243a:	2306      	movs	r3, #6
 800243c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
				{	
					uint8_t * buf = "Speed succsesfully set.\n\n";
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <handleVariable_set+0x50c>)
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
					int len = 25; 	
 8002444:	2319      	movs	r3, #25
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
					send( socket, buf, len, 0);
 8002448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800244c:	b2da      	uxtb	r2, r3
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	b29b      	uxth	r3, r3
 8002452:	4610      	mov	r0, r2
 8002454:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002456:	461a      	mov	r2, r3
 8002458:	2300      	movs	r3, #0
 800245a:	f7fe fe97 	bl	800118c <send>


					return pdPASS;
 800245e:	2301      	movs	r3, #1
 8002460:	e011      	b.n	8002486 <handleVariable_set+0x4f6>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <handleVariable_set+0x510>)
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
	 		int len = 22; 	
 8002466:	2316      	movs	r3, #22
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
			send( socket, buf, len, 0);
 800246a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800246e:	b2da      	uxtb	r2, r3
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	b29b      	uxth	r3, r3
 8002474:	4610      	mov	r0, r2
 8002476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002478:	461a      	mov	r2, r3
 800247a:	2300      	movs	r3, #0
 800247c:	f7fe fe86 	bl	800118c <send>

			return pdFALSE; 	
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <handleVariable_set+0x4f6>
		}
	}


			return 0; 
 8002484:	2300      	movs	r3, #0

}
 8002486:	4618      	mov	r0, r3
 8002488:	378c      	adds	r7, #140	; 0x8c
 800248a:	46bd      	mov	sp, r7
 800248c:	e8bd 4f90 	ldmia.w	sp!, {r4, r7, r8, r9, sl, fp, lr}
 8002490:	b004      	add	sp, #16
 8002492:	4770      	bx	lr
 8002494:	200131f8 	.word	0x200131f8
 8002498:	20000000 	.word	0x20000000
 800249c:	0800828c 	.word	0x0800828c
 80024a0:	080082c4 	.word	0x080082c4
 80024a4:	080082e4 	.word	0x080082e4
 80024a8:	08008278 	.word	0x08008278
 80024ac:	08008288 	.word	0x08008288
 80024b0:	200131f4 	.word	0x200131f4

080024b4 <handleVariable_get>:
int handleVariable_get (	QueueTelegram telegram,
				uint8_t * Param, 
				int xParamLength,
				xQueueHandle Qhandle,
				int socket )
{
 80024b4:	b084      	sub	sp, #16
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b09a      	sub	sp, #104	; 0x68
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	f107 0c70 	add.w	ip, r7, #112	; 0x70
 80024c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//================================================================================//
	//		CASE PARAMETER speed [value]
	//================================================================================//

	if ( !strncmp ( Param, "speed", 5))
 80024c4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80024c8:	4987      	ldr	r1, [pc, #540]	; (80026e8 <handleVariable_get+0x234>)
 80024ca:	2205      	movs	r2, #5
 80024cc:	f005 fcfe 	bl	8007ecc <strncmp>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d16b      	bne.n	80025ae <handleVariable_get+0xfa>
	{	
	
		telegram.Qcmd = GETDATA; 
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80024dc:	4b83      	ldr	r3, [pc, #524]	; (80026ec <handleVariable_get+0x238>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b83      	ldr	r3, [pc, #524]	; (80026f0 <handleVariable_get+0x23c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4610      	mov	r0, r2
 80024e6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80024ea:	461a      	mov	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	f001 fe67 	bl	80041c0 <xQueueGenericSend>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d149      	bne.n	800258c <handleVariable_get+0xd8>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
 80024f8:	4b7c      	ldr	r3, [pc, #496]	; (80026ec <handleVariable_get+0x238>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <handleVariable_get+0x23c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4610      	mov	r0, r2
 8002502:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002506:	461a      	mov	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	f001 ff73 	bl	80043f4 <xQueueGenericReceive>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d12a      	bne.n	800256a <handleVariable_get+0xb6>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8002514:	2306      	movs	r3, #6
 8002516:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
				{	
					uint8_t buf [50]; // = "speed succsesfully set.\n\n";
					sprintf(buf, "Speed is  %2d.%2dp \n\n", 
							telegram.data[3]/100,
 800251a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
			{
				if ( telegram.Qcmd = SUCCSESS) 
				{	
					uint8_t buf [50]; // = "speed succsesfully set.\n\n";
					sprintf(buf, "Speed is  %2d.%2dp \n\n", 
 800251e:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <handleVariable_get+0x240>)
 8002520:	fba3 0302 	umull	r0, r3, r3, r2
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
							telegram.data[3]/100,
							telegram.data[3] % 100);
 800252a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay)== pdPASS)
			{
				if ( telegram.Qcmd = SUCCSESS) 
				{	
					uint8_t buf [50]; // = "speed succsesfully set.\n\n";
					sprintf(buf, "Speed is  %2d.%2dp \n\n", 
 800252e:	4971      	ldr	r1, [pc, #452]	; (80026f4 <handleVariable_get+0x240>)
 8002530:	fba1 c103 	umull	ip, r1, r1, r3
 8002534:	0949      	lsrs	r1, r1, #5
 8002536:	2064      	movs	r0, #100	; 0x64
 8002538:	fb00 f101 	mul.w	r1, r0, r1
 800253c:	1a5b      	subs	r3, r3, r1
 800253e:	b29b      	uxth	r3, r3
 8002540:	4639      	mov	r1, r7
 8002542:	4608      	mov	r0, r1
 8002544:	496c      	ldr	r1, [pc, #432]	; (80026f8 <handleVariable_get+0x244>)
 8002546:	f000 fc05 	bl	8002d54 <sprintf>
							telegram.data[3]/100,
							telegram.data[3] % 100);
					int len = 19; 	
 800254a:	2313      	movs	r3, #19
 800254c:	667b      	str	r3, [r7, #100]	; 0x64
					send( socket, buf, len, 0);
 800254e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002552:	b2d9      	uxtb	r1, r3
 8002554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002556:	b29b      	uxth	r3, r3
 8002558:	463a      	mov	r2, r7
 800255a:	4608      	mov	r0, r1
 800255c:	4611      	mov	r1, r2
 800255e:	461a      	mov	r2, r3
 8002560:	2300      	movs	r3, #0
 8002562:	f7fe fe13 	bl	800118c <send>


					return pdPASS;
 8002566:	2301      	movs	r3, #1
 8002568:	e0b6      	b.n	80026d8 <handleVariable_get+0x224>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				uint8_t * buf = "Error recieving response!\n\n";
 800256a:	4b64      	ldr	r3, [pc, #400]	; (80026fc <handleVariable_get+0x248>)
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
	 			int len = 27; 	
 800256e:	231b      	movs	r3, #27
 8002570:	65fb      	str	r3, [r7, #92]	; 0x5c
				send( socket_0, buf, len, 0);
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <handleVariable_get+0x24c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257a:	b29b      	uxth	r3, r3
 800257c:	4610      	mov	r0, r2
 800257e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002580:	461a      	mov	r2, r3
 8002582:	2300      	movs	r3, #0
 8002584:	f7fe fe02 	bl	800118c <send>

				return pdFALSE; 	
 8002588:	2300      	movs	r3, #0
 800258a:	e0a5      	b.n	80026d8 <handleVariable_get+0x224>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 800258c:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <handleVariable_get+0x250>)
 800258e:	65bb      	str	r3, [r7, #88]	; 0x58
	 		int len = 22; 	
 8002590:	2316      	movs	r3, #22
 8002592:	657b      	str	r3, [r7, #84]	; 0x54
			send( socket, buf, len, 0);
 8002594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002598:	b2da      	uxtb	r2, r3
 800259a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259c:	b29b      	uxth	r3, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80025a2:	461a      	mov	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	f7fe fdf1 	bl	800118c <send>

			return pdFALSE; 	
 80025aa:	2300      	movs	r3, #0
 80025ac:	e094      	b.n	80026d8 <handleVariable_get+0x224>
	
	//================================================================================//
	//		CASE PARAMETER upramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "upramp", 6))
 80025ae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80025b2:	4955      	ldr	r1, [pc, #340]	; (8002708 <handleVariable_get+0x254>)
 80025b4:	2206      	movs	r2, #6
 80025b6:	f005 fc89 	bl	8007ecc <strncmp>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d140      	bne.n	8002642 <handleVariable_get+0x18e>
	
		
			
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80025c0:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <handleVariable_get+0x238>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <handleVariable_get+0x23c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4610      	mov	r0, r2
 80025ca:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80025ce:	461a      	mov	r2, r3
 80025d0:	2300      	movs	r3, #0
 80025d2:	f001 fdf5 	bl	80041c0 <xQueueGenericSend>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d121      	bne.n	8002620 <handleVariable_get+0x16c>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 80025dc:	4b43      	ldr	r3, [pc, #268]	; (80026ec <handleVariable_get+0x238>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <handleVariable_get+0x23c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4610      	mov	r0, r2
 80025e6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80025ea:	461a      	mov	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	f001 ff01 	bl	80043f4 <xQueueGenericReceive>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d024      	beq.n	8002642 <handleVariable_get+0x18e>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 80025f8:	2306      	movs	r3, #6
 80025fa:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
				{	
					uint8_t * buf = "Speed succsesfully set.\n\n";
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <handleVariable_get+0x258>)
 8002600:	653b      	str	r3, [r7, #80]	; 0x50
					int len = 25; 	
 8002602:	2319      	movs	r3, #25
 8002604:	64fb      	str	r3, [r7, #76]	; 0x4c
					send( socket, buf, len, 0);
 8002606:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800260a:	b2da      	uxtb	r2, r3
 800260c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260e:	b29b      	uxth	r3, r3
 8002610:	4610      	mov	r0, r2
 8002612:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002614:	461a      	mov	r2, r3
 8002616:	2300      	movs	r3, #0
 8002618:	f7fe fdb8 	bl	800118c <send>


					return pdPASS;
 800261c:	2301      	movs	r3, #1
 800261e:	e05b      	b.n	80026d8 <handleVariable_get+0x224>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <handleVariable_get+0x250>)
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
	 		int len = 22; 	
 8002624:	2316      	movs	r3, #22
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
			send( socket, buf, len, 0);
 8002628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262c:	b2da      	uxtb	r2, r3
 800262e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002630:	b29b      	uxth	r3, r3
 8002632:	4610      	mov	r0, r2
 8002634:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002636:	461a      	mov	r2, r3
 8002638:	2300      	movs	r3, #0
 800263a:	f7fe fda7 	bl	800118c <send>

			return pdFALSE; 	
 800263e:	2300      	movs	r3, #0
 8002640:	e04a      	b.n	80026d8 <handleVariable_get+0x224>

	//================================================================================//
	//		CASE PARAMETER downramp [value]
	//================================================================================//

	if ( !strncmp ( Param, "downramp", 8))
 8002642:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002646:	4932      	ldr	r1, [pc, #200]	; (8002710 <handleVariable_get+0x25c>)
 8002648:	2208      	movs	r2, #8
 800264a:	f005 fc3f 	bl	8007ecc <strncmp>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d140      	bne.n	80026d6 <handleVariable_get+0x222>
	
	
				
	
		// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <handleVariable_get+0x238>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <handleVariable_get+0x23c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4610      	mov	r0, r2
 800265e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002662:	461a      	mov	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	f001 fdab 	bl	80041c0 <xQueueGenericSend>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d121      	bne.n	80026b4 <handleVariable_get+0x200>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <handleVariable_get+0x238>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <handleVariable_get+0x23c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4610      	mov	r0, r2
 800267a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800267e:	461a      	mov	r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	f001 feb7 	bl	80043f4 <xQueueGenericReceive>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d024      	beq.n	80026d6 <handleVariable_get+0x222>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 800268c:	2306      	movs	r3, #6
 800268e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
				{	
					uint8_t * buf = "Speed succsesfully set.\n\n";
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <handleVariable_get+0x258>)
 8002694:	643b      	str	r3, [r7, #64]	; 0x40
					int len = 25; 	
 8002696:	2319      	movs	r3, #25
 8002698:	63fb      	str	r3, [r7, #60]	; 0x3c
					send( socket, buf, len, 0);
 800269a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4610      	mov	r0, r2
 80026a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026a8:	461a      	mov	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	f7fe fd6e 	bl	800118c <send>


					return pdPASS;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e011      	b.n	80026d8 <handleVariable_get+0x224>
		else
		{
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <handleVariable_get+0x250>)
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
	 		int len = 22; 	
 80026b8:	2316      	movs	r3, #22
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
			send( socket, buf, len, 0);
 80026bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026ca:	461a      	mov	r2, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	f7fe fd5d 	bl	800118c <send>

			return pdFALSE; 	
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <handleVariable_get+0x224>
		}
	}


			return 0; 
 80026d6:	2300      	movs	r3, #0

}
 80026d8:	4618      	mov	r0, r3
 80026da:	3768      	adds	r7, #104	; 0x68
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026e2:	b004      	add	sp, #16
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	08008270 	.word	0x08008270
 80026ec:	200131f8 	.word	0x200131f8
 80026f0:	20000000 	.word	0x20000000
 80026f4:	51eb851f 	.word	0x51eb851f
 80026f8:	080082f0 	.word	0x080082f0
 80026fc:	080082a8 	.word	0x080082a8
 8002700:	200131f4 	.word	0x200131f4
 8002704:	080082c4 	.word	0x080082c4
 8002708:	080082dc 	.word	0x080082dc
 800270c:	0800828c 	.word	0x0800828c
 8002710:	080082e4 	.word	0x080082e4

08002714 <prvMotorCommand>:
// prototypes of CLI functions 

portBASE_TYPE prvMotorCommand ( 	int8_t *pcWriteBuffer, 
						size_t xWriteBufferLen, 
						const int8_t *pcCommandString)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b0a9      	sub	sp, #164	; 0xa4
 8002718:	af0a      	add	r7, sp, #40	; 0x28
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	int xOptionLength, xParamLength, xValueLength; 
	QueueTelegram telegram; 
	
	// get option from command line 

	Option = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002720:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	2101      	movs	r1, #1
 8002728:	461a      	mov	r2, r3
 800272a:	f002 fdd3 	bl	80052d4 <FreeRTOS_CLIGetParameter>
 800272e:	6778      	str	r0, [r7, #116]	; 0x74

	//================================================================================//
	//		CASE COMMAND SET [parameter name] [value]
	//================================================================================//

	if( !strncmp( Option, "set", 3) ) 
 8002730:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002732:	4997      	ldr	r1, [pc, #604]	; (8002990 <prvMotorCommand+0x27c>)
 8002734:	2203      	movs	r2, #3
 8002736:	f005 fbc9 	bl	8007ecc <strncmp>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d134      	bne.n	80027aa <prvMotorCommand+0x96>
	{

		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002740:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	2102      	movs	r1, #2
 8002748:	461a      	mov	r2, r3
 800274a:	f002 fdc3 	bl	80052d4 <FreeRTOS_CLIGetParameter>
 800274e:	6738      	str	r0, [r7, #112]	; 0x70
					  2,  		   // 2nd parameter
				  	  &xParamLength // parameter string length
					  
					 );
		Value = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 8002750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	2103      	movs	r1, #3
 8002758:	461a      	mov	r2, r3
 800275a:	f002 fdbb 	bl	80052d4 <FreeRTOS_CLIGetParameter>
 800275e:	66f8      	str	r0, [r7, #108]	; 0x6c
					  
					 );
		
		// return pdFALSE if there is no 3rd parameter 

		if (Value == NULL) return pdFALSE; 
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <prvMotorCommand+0x56>
 8002766:	2300      	movs	r3, #0
 8002768:	e10e      	b.n	8002988 <prvMotorCommand+0x274>

		
		if ( handleVariable_set ( telegram, 
 800276a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800276c:	4b89      	ldr	r3, [pc, #548]	; (8002994 <prvMotorCommand+0x280>)
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	4b89      	ldr	r3, [pc, #548]	; (8002998 <prvMotorCommand+0x284>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002778:	9403      	str	r4, [sp, #12]
 800277a:	9004      	str	r0, [sp, #16]
 800277c:	9105      	str	r1, [sp, #20]
 800277e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002780:	9106      	str	r1, [sp, #24]
 8002782:	9207      	str	r2, [sp, #28]
 8002784:	9308      	str	r3, [sp, #32]
 8002786:	466b      	mov	r3, sp
 8002788:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800278c:	ca07      	ldmia	r2, {r0, r1, r2}
 800278e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002798:	f7ff fbfa 	bl	8001f90 <handleVariable_set>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <prvMotorCommand+0x92>
				           Param, 
					   xParamLength, 
					   QSpd_handle, 
					   Value,
					   xValueLength,  
					   socket_0)) return pdPASS;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0f0      	b.n	8002988 <prvMotorCommand+0x274>
		return pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e0ee      	b.n	8002988 <prvMotorCommand+0x274>
	//================================================================================//
	//		CASE COMMAND GET [parameter name] [value]
	//================================================================================//


	if (!strncmp ( Option, "get", 3))
 80027aa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80027ac:	497b      	ldr	r1, [pc, #492]	; (800299c <prvMotorCommand+0x288>)
 80027ae:	2203      	movs	r2, #3
 80027b0:	f005 fb8c 	bl	8007ecc <strncmp>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d128      	bne.n	800280c <prvMotorCommand+0xf8>
	{
		// get parameter from command line 
	
		Param = FreeRTOS_CLIGetParameter( pcCommandString, // command string 
 80027ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	2102      	movs	r1, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	f002 fd86 	bl	80052d4 <FreeRTOS_CLIGetParameter>
 80027c8:	6738      	str	r0, [r7, #112]	; 0x70
					  
					 );
			
		// return pdFALSE if there is no 3rd parameter 

		if (Param == NULL) return pdFALSE; 
 80027ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <prvMotorCommand+0xc0>
 80027d0:	2300      	movs	r3, #0
 80027d2:	e0d9      	b.n	8002988 <prvMotorCommand+0x274>

		
		if ( handleVariable_get ( telegram, 
 80027d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027d6:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <prvMotorCommand+0x280>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <prvMotorCommand+0x284>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80027e0:	9003      	str	r0, [sp, #12]
 80027e2:	9104      	str	r1, [sp, #16]
 80027e4:	9205      	str	r2, [sp, #20]
 80027e6:	9306      	str	r3, [sp, #24]
 80027e8:	466b      	mov	r3, sp
 80027ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80027f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fa:	f7ff fe5b 	bl	80024b4 <handleVariable_get>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <prvMotorCommand+0xf4>
				           Param, 
					   xParamLength, 
					   QSpd_handle, 
					   socket_0)) return pdPASS;
 8002804:	2301      	movs	r3, #1
 8002806:	e0bf      	b.n	8002988 <prvMotorCommand+0x274>
		return pdFALSE;
 8002808:	2300      	movs	r3, #0
 800280a:	e0bd      	b.n	8002988 <prvMotorCommand+0x274>
	}
		
	//================================================================================//
	//		CASE COMMAND STOP 
	//================================================================================//
	if (!strncmp ( Option, "stop", 4))
 800280c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800280e:	4964      	ldr	r1, [pc, #400]	; (80029a0 <prvMotorCommand+0x28c>)
 8002810:	2204      	movs	r2, #4
 8002812:	f005 fb5b 	bl	8007ecc <strncmp>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d155      	bne.n	80028c8 <prvMotorCommand+0x1b4>
	{

		telegram.Qcmd = STOP; 
 800281c:	2305      	movs	r3, #5
 800281e:	753b      	strb	r3, [r7, #20]
		telegram.size = 0; 
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) )
 8002824:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <prvMotorCommand+0x280>)
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <prvMotorCommand+0x290>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f107 0214 	add.w	r2, r7, #20
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	2300      	movs	r3, #0
 8002838:	f001 fcc2 	bl	80041c0 <xQueueGenericSend>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d032      	beq.n	80028a8 <prvMotorCommand+0x194>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay))
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <prvMotorCommand+0x280>)
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <prvMotorCommand+0x290>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f107 0214 	add.w	r2, r7, #20
 800284e:	4608      	mov	r0, r1
 8002850:	4611      	mov	r1, r2
 8002852:	461a      	mov	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	f001 fdcd 	bl	80043f4 <xQueueGenericReceive>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <prvMotorCommand+0x172>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 8002860:	2306      	movs	r3, #6
 8002862:	753b      	strb	r3, [r7, #20]
				{	
					uint8_t * buf = "Motor succsesfully stopped.\n\n";
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <prvMotorCommand+0x294>)
 8002866:	66bb      	str	r3, [r7, #104]	; 0x68
					int len = 29; 	
 8002868:	231d      	movs	r3, #29
 800286a:	667b      	str	r3, [r7, #100]	; 0x64
					send( socket_0, buf, len, 0);
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <prvMotorCommand+0x284>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002874:	b29b      	uxth	r3, r3
 8002876:	4610      	mov	r0, r2
 8002878:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800287a:	461a      	mov	r2, r3
 800287c:	2300      	movs	r3, #0
 800287e:	f7fe fc85 	bl	800118c <send>

					
					return pdPASS;
 8002882:	2301      	movs	r3, #1
 8002884:	e080      	b.n	8002988 <prvMotorCommand+0x274>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				uint8_t * buf = "Error recieving response!\n\n";
 8002886:	4b49      	ldr	r3, [pc, #292]	; (80029ac <prvMotorCommand+0x298>)
 8002888:	663b      	str	r3, [r7, #96]	; 0x60
	 			int len = 27; 	
 800288a:	231b      	movs	r3, #27
 800288c:	65fb      	str	r3, [r7, #92]	; 0x5c
				send( socket_0, buf, len, 0);
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <prvMotorCommand+0x284>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002896:	b29b      	uxth	r3, r3
 8002898:	4610      	mov	r0, r2
 800289a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800289c:	461a      	mov	r2, r3
 800289e:	2300      	movs	r3, #0
 80028a0:	f7fe fc74 	bl	800118c <send>

				return pdFALSE; 	
 80028a4:	2300      	movs	r3, #0
 80028a6:	e06f      	b.n	8002988 <prvMotorCommand+0x274>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 80028a8:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <prvMotorCommand+0x29c>)
 80028aa:	65bb      	str	r3, [r7, #88]	; 0x58
	 		int len = 22; 	
 80028ac:	2316      	movs	r3, #22
 80028ae:	657b      	str	r3, [r7, #84]	; 0x54
			send( socket, buf, len, 0);
 80028b0:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <prvMotorCommand+0x2a0>)
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028bc:	461a      	mov	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	f7fe fc64 	bl	800118c <send>

			return pdFALSE; 	
 80028c4:	2300      	movs	r3, #0
 80028c6:	e05f      	b.n	8002988 <prvMotorCommand+0x274>
	}
	//================================================================================//
	//		CASE COMMAND START
	//================================================================================//

	if (!strncmp ( Option, "start", 5))
 80028c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80028ca:	493b      	ldr	r1, [pc, #236]	; (80029b8 <prvMotorCommand+0x2a4>)
 80028cc:	2205      	movs	r2, #5
 80028ce:	f005 fafd 	bl	8007ecc <strncmp>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d156      	bne.n	8002986 <prvMotorCommand+0x272>
	{
		telegram.Qcmd = START; 
 80028d8:	2304      	movs	r3, #4
 80028da:	753b      	strb	r3, [r7, #20]
		telegram.size = 0; 
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
			// send value to setSpeed_task via Queue 
		if ( xQueueSend ( QSpd_handle, (void *)&telegram, xDelay ) == pdPASS )
 80028e0:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <prvMotorCommand+0x280>)
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <prvMotorCommand+0x290>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f107 0214 	add.w	r2, r7, #20
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	2300      	movs	r3, #0
 80028f4:	f001 fc64 	bl	80041c0 <xQueueGenericSend>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d132      	bne.n	8002964 <prvMotorCommand+0x250>
		{	
					
			if (  xQueueReceive ( QSpd_handle, &telegram, xDelay) == pdPASS)
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <prvMotorCommand+0x280>)
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <prvMotorCommand+0x290>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f107 0214 	add.w	r2, r7, #20
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	2300      	movs	r3, #0
 8002912:	f001 fd6f 	bl	80043f4 <xQueueGenericReceive>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d112      	bne.n	8002942 <prvMotorCommand+0x22e>
			{
				if ( telegram.Qcmd = SUCCSESS) 
 800291c:	2306      	movs	r3, #6
 800291e:	753b      	strb	r3, [r7, #20]
				{	
					uint8_t * buf = "Motor succsesfully started.\n\n";
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <prvMotorCommand+0x2a8>)
 8002922:	653b      	str	r3, [r7, #80]	; 0x50
					int len = 29; 	
 8002924:	231d      	movs	r3, #29
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
					send( socket_0, buf, len, 0);
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <prvMotorCommand+0x284>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002930:	b29b      	uxth	r3, r3
 8002932:	4610      	mov	r0, r2
 8002934:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002936:	461a      	mov	r2, r3
 8002938:	2300      	movs	r3, #0
 800293a:	f7fe fc27 	bl	800118c <send>

					
					return pdPASS;
 800293e:	2301      	movs	r3, #1
 8002940:	e022      	b.n	8002988 <prvMotorCommand+0x274>
			else
			{
					// send to Queue was unsuccsessful
				// send error via TCP 
		
				uint8_t * buf = "Error recieving response!\n\n";
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <prvMotorCommand+0x298>)
 8002944:	64bb      	str	r3, [r7, #72]	; 0x48
	 			int len = 27; 	
 8002946:	231b      	movs	r3, #27
 8002948:	647b      	str	r3, [r7, #68]	; 0x44
				send( socket_0, buf, len, 0);
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <prvMotorCommand+0x284>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	b29b      	uxth	r3, r3
 8002954:	4610      	mov	r0, r2
 8002956:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002958:	461a      	mov	r2, r3
 800295a:	2300      	movs	r3, #0
 800295c:	f7fe fc16 	bl	800118c <send>

				return pdFALSE; 	
 8002960:	2300      	movs	r3, #0
 8002962:	e011      	b.n	8002988 <prvMotorCommand+0x274>
		{
			
			// send to Queue was unsuccsessful
			// send error via TCP 
		
			uint8_t * buf = "Error sending Queue!\n\n";
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <prvMotorCommand+0x29c>)
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
	 		int len = 22; 	
 8002968:	2316      	movs	r3, #22
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
			send( socket_0, buf, len, 0);
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <prvMotorCommand+0x284>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002974:	b29b      	uxth	r3, r3
 8002976:	4610      	mov	r0, r2
 8002978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800297a:	461a      	mov	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	f7fe fc05 	bl	800118c <send>

			return pdFALSE; 	
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <prvMotorCommand+0x274>

	}



	return pdFALSE;
 8002986:	2300      	movs	r3, #0


}
 8002988:	4618      	mov	r0, r3
 800298a:	377c      	adds	r7, #124	; 0x7c
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	08008308 	.word	0x08008308
 8002994:	200131f8 	.word	0x200131f8
 8002998:	200131f4 	.word	0x200131f4
 800299c:	0800830c 	.word	0x0800830c
 80029a0:	08008310 	.word	0x08008310
 80029a4:	20000000 	.word	0x20000000
 80029a8:	08008318 	.word	0x08008318
 80029ac:	080082a8 	.word	0x080082a8
 80029b0:	080082c4 	.word	0x080082c4
 80029b4:	0800103d 	.word	0x0800103d
 80029b8:	08008338 	.word	0x08008338
 80029bc:	08008340 	.word	0x08008340

080029c0 <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <printchar+0x24>
		**str = (char)c;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
		++(*str);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <prints>:
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
//***********************************************************************************************************//
static int prints(char **out, const char *string, int width, int pad)
{
 80029f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8002a00:	2400      	movs	r4, #0
 8002a02:	2620      	movs	r6, #32

	if (width > 0) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	dd19      	ble.n	8002a3e <prints+0x4e>
		register int len = 0;
 8002a0a:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8002a0c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8002a10:	e002      	b.n	8002a18 <prints+0x28>
 8002a12:	3501      	adds	r5, #1
 8002a14:	f108 0801 	add.w	r8, r8, #1
 8002a18:	f898 3000 	ldrb.w	r3, [r8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f8      	bne.n	8002a12 <prints+0x22>
		if (len >= width) width = 0;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	429d      	cmp	r5, r3
 8002a24:	db02      	blt.n	8002a2c <prints+0x3c>
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	e002      	b.n	8002a32 <prints+0x42>
		else width -= len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1b5b      	subs	r3, r3, r5
 8002a30:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d000      	beq.n	8002a3e <prints+0x4e>
 8002a3c:	2630      	movs	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <prints+0x70>
		for ( ; width > 0; --width) {
 8002a48:	e007      	b.n	8002a5a <prints+0x6a>
			printchar (out, padchar);
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	4631      	mov	r1, r6
 8002a4e:	f7ff ffb7 	bl	80029c0 <printchar>
			++pc;
 8002a52:	3401      	adds	r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	dcf4      	bgt.n	8002a4a <prints+0x5a>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002a60:	e009      	b.n	8002a76 <prints+0x86>
		printchar (out, *string);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7ff ffa9 	bl	80029c0 <printchar>
		++pc;
 8002a6e:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f1      	bne.n	8002a62 <prints+0x72>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8002a7e:	e007      	b.n	8002a90 <prints+0xa0>
		printchar (out, padchar);
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	4631      	mov	r1, r6
 8002a84:	f7ff ff9c 	bl	80029c0 <printchar>
		++pc;
 8002a88:	3401      	adds	r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	dcf4      	bgt.n	8002a80 <prints+0x90>
		printchar (out, padchar);
		++pc;
	}

	return pc;
 8002a96:	4623      	mov	r3, r4
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aa2:	bf00      	nop

08002aa4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8002aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002aa8:	b089      	sub	sp, #36	; 0x24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8002ab4:	f04f 0900 	mov.w	r9, #0
 8002ab8:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
 8002abc:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10d      	bne.n	8002ae0 <printi+0x3c>
		print_buf[0] = '0';
 8002ac4:	2330      	movs	r3, #48	; 0x30
 8002ac6:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8002ac8:	2300      	movs	r3, #0
 8002aca:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad8:	f7ff ff8a 	bl	80029f0 <prints>
 8002adc:	4603      	mov	r3, r0
 8002ade:	e049      	b.n	8002b74 <printi+0xd0>
	}

	if (sg && b == 10 && i < 0) {
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <printi+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0a      	cmp	r3, #10
 8002aea:	d107      	bne.n	8002afc <printi+0x58>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da04      	bge.n	8002afc <printi+0x58>
		neg = 1;
 8002af2:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	425b      	negs	r3, r3
 8002afa:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8002afc:	f107 0414 	add.w	r4, r7, #20
 8002b00:	340b      	adds	r4, #11
	*s = '\0';
 8002b02:	2300      	movs	r3, #0
 8002b04:	7023      	strb	r3, [r4, #0]

	while (u) {
 8002b06:	e013      	b.n	8002b30 <printi+0x8c>
		t = (unsigned int)u % b;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	fbb5 f2f3 	udiv	r2, r5, r3
 8002b0e:	fb03 f302 	mul.w	r3, r3, r2
 8002b12:	1aeb      	subs	r3, r5, r3
 8002b14:	461e      	mov	r6, r3
		if( t >= 10 )
 8002b16:	2e09      	cmp	r6, #9
 8002b18:	dd02      	ble.n	8002b20 <printi+0x7c>
			t += letbase - '0' - 10;
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1c:	3b3a      	subs	r3, #58	; 0x3a
 8002b1e:	441e      	add	r6, r3
		*--s = (char)(t + '0');
 8002b20:	3c01      	subs	r4, #1
 8002b22:	b2f3      	uxtb	r3, r6
 8002b24:	3330      	adds	r3, #48	; 0x30
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	7023      	strb	r3, [r4, #0]
		u /= b;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	d1e9      	bne.n	8002b08 <printi+0x64>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
 8002b34:	f1b9 0f00 	cmp.w	r9, #0
 8002b38:	d014      	beq.n	8002b64 <printi+0xc0>
		if( width && (pad & PAD_ZERO) ) {
 8002b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <printi+0xba>
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <printi+0xba>
			printchar (out, '-');
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	212d      	movs	r1, #45	; 0x2d
 8002b4e:	f7ff ff37 	bl	80029c0 <printchar>
			++pc;
 8002b52:	f108 0801 	add.w	r8, r8, #1
			--width;
 8002b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b5c:	e002      	b.n	8002b64 <printi+0xc0>
		}
		else {
			*--s = '-';
 8002b5e:	3c01      	subs	r4, #1
 8002b60:	232d      	movs	r3, #45	; 0x2d
 8002b62:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	4621      	mov	r1, r4
 8002b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6c:	f7ff ff40 	bl	80029f0 <prints>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4443      	add	r3, r8
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3724      	adds	r7, #36	; 0x24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b7e:	bf00      	nop

08002b80 <print>:

static int print( char **out, const char *format, va_list args )
{
 8002b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b84:	b08a      	sub	sp, #40	; 0x28
 8002b86:	af04      	add	r7, sp, #16
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8002b8e:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8002b90:	e0cc      	b.n	8002d2c <print+0x1ac>
		if (*format == '%') {
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b25      	cmp	r3, #37	; 0x25
 8002b98:	f040 80be 	bne.w	8002d18 <print+0x198>
			++format;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d100      	bne.n	8002bb0 <print+0x30>
 8002bae:	e0c2      	b.n	8002d36 <print+0x1b6>
			if (*format == '%') goto out;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b25      	cmp	r3, #37	; 0x25
 8002bb6:	d100      	bne.n	8002bba <print+0x3a>
 8002bb8:	e0ae      	b.n	8002d18 <print+0x198>
			if (*format == '-') {
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b2d      	cmp	r3, #45	; 0x2d
 8002bc0:	d104      	bne.n	8002bcc <print+0x4c>
				++format;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8002bc8:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8002bca:	e005      	b.n	8002bd8 <print+0x58>
 8002bcc:	e004      	b.n	8002bd8 <print+0x58>
				++format;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8002bd4:	f046 0602 	orr.w	r6, r6, #2
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b30      	cmp	r3, #48	; 0x30
 8002bde:	d0f6      	beq.n	8002bce <print+0x4e>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002be0:	e00b      	b.n	8002bfa <print+0x7a>
				width *= 10;
 8002be2:	462b      	mov	r3, r5
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	442b      	add	r3, r5
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	461d      	mov	r5, r3
				width += *format - '0';
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3b30      	subs	r3, #48	; 0x30
 8002bf2:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b2f      	cmp	r3, #47	; 0x2f
 8002c00:	d903      	bls.n	8002c0a <print+0x8a>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b39      	cmp	r3, #57	; 0x39
 8002c08:	d9eb      	bls.n	8002be2 <print+0x62>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b73      	cmp	r3, #115	; 0x73
 8002c10:	d113      	bne.n	8002c3a <print+0xba>
				register char *s = (char *)va_arg( args, int );
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1d1a      	adds	r2, r3, #4
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8002c1c:	f1b8 0f00 	cmp.w	r8, #0
 8002c20:	d001      	beq.n	8002c26 <print+0xa6>
 8002c22:	4643      	mov	r3, r8
 8002c24:	e000      	b.n	8002c28 <print+0xa8>
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <print+0x1d0>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	4633      	mov	r3, r6
 8002c30:	f7ff fede 	bl	80029f0 <prints>
 8002c34:	4603      	mov	r3, r0
 8002c36:	441c      	add	r4, r3
				continue;
 8002c38:	e075      	b.n	8002d26 <print+0x1a6>
			}
			if( *format == 'd' || *format == 'i' ) {
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d003      	beq.n	8002c4a <print+0xca>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b69      	cmp	r3, #105	; 0x69
 8002c48:	d110      	bne.n	8002c6c <print+0xec>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1d1a      	adds	r2, r3, #4
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	9500      	str	r5, [sp, #0]
 8002c54:	9601      	str	r6, [sp, #4]
 8002c56:	2261      	movs	r2, #97	; 0x61
 8002c58:	9202      	str	r2, [sp, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	220a      	movs	r2, #10
 8002c60:	2301      	movs	r3, #1
 8002c62:	f7ff ff1f 	bl	8002aa4 <printi>
 8002c66:	4603      	mov	r3, r0
 8002c68:	441c      	add	r4, r3
				continue;
 8002c6a:	e05c      	b.n	8002d26 <print+0x1a6>
			}
			if( *format == 'x' ) {
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b78      	cmp	r3, #120	; 0x78
 8002c72:	d110      	bne.n	8002c96 <print+0x116>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	9500      	str	r5, [sp, #0]
 8002c7e:	9601      	str	r6, [sp, #4]
 8002c80:	2261      	movs	r2, #97	; 0x61
 8002c82:	9202      	str	r2, [sp, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	4619      	mov	r1, r3
 8002c88:	2210      	movs	r2, #16
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f7ff ff0a 	bl	8002aa4 <printi>
 8002c90:	4603      	mov	r3, r0
 8002c92:	441c      	add	r4, r3
				continue;
 8002c94:	e047      	b.n	8002d26 <print+0x1a6>
			}
			if( *format == 'X' ) {
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b58      	cmp	r3, #88	; 0x58
 8002c9c:	d110      	bne.n	8002cc0 <print+0x140>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	9500      	str	r5, [sp, #0]
 8002ca8:	9601      	str	r6, [sp, #4]
 8002caa:	2241      	movs	r2, #65	; 0x41
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f7ff fef5 	bl	8002aa4 <printi>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	441c      	add	r4, r3
				continue;
 8002cbe:	e032      	b.n	8002d26 <print+0x1a6>
			}
			if( *format == 'u' ) {
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b75      	cmp	r3, #117	; 0x75
 8002cc6:	d110      	bne.n	8002cea <print+0x16a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	1d1a      	adds	r2, r3, #4
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	9500      	str	r5, [sp, #0]
 8002cd2:	9601      	str	r6, [sp, #4]
 8002cd4:	2261      	movs	r2, #97	; 0x61
 8002cd6:	9202      	str	r2, [sp, #8]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	220a      	movs	r2, #10
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f7ff fee0 	bl	8002aa4 <printi>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	441c      	add	r4, r3
				continue;
 8002ce8:	e01d      	b.n	8002d26 <print+0x1a6>
			}
			if( *format == 'c' ) {
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b63      	cmp	r3, #99	; 0x63
 8002cf0:	d119      	bne.n	8002d26 <print+0x1a6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1d1a      	adds	r2, r3, #4
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8002cfe:	2300      	movs	r3, #0
 8002d00:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	462a      	mov	r2, r5
 8002d0c:	4633      	mov	r3, r6
 8002d0e:	f7ff fe6f 	bl	80029f0 <prints>
 8002d12:	4603      	mov	r3, r0
 8002d14:	441c      	add	r4, r3
				continue;
 8002d16:	e006      	b.n	8002d26 <print+0x1a6>
			}
		}
		else {
		out:
			printchar (out, *format);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7ff fe4e 	bl	80029c0 <printchar>
			++pc;
 8002d24:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f af2e 	bne.w	8002b92 <print+0x12>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <print+0x1c4>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8002d44:	4623      	mov	r3, r4
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d50:	08008360 	.word	0x08008360

08002d54 <sprintf>:
	va_start( args, format );
	return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8002d54:	b40e      	push	{r1, r2, r3}
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args, format );
 8002d5e:	f107 0320 	add.w	r3, r7, #32
 8002d62:	60fb      	str	r3, [r7, #12]
	return print( &out, format, args );
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	4618      	mov	r0, r3
 8002d68:	69f9      	ldr	r1, [r7, #28]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	f7ff ff08 	bl	8002b80 <print>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d7c:	b003      	add	sp, #12
 8002d7e:	4770      	bx	lr

08002d80 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <NVIC_SetPendingIRQ+0x30>)
 8002d8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002d90:	0952      	lsrs	r2, r2, #5
 8002d92:	79f9      	ldrb	r1, [r7, #7]
 8002d94:	f001 011f 	and.w	r1, r1, #31
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f101 	lsl.w	r1, r0, r1
 8002d9e:	3240      	adds	r2, #64	; 0x40
 8002da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af04      	add	r7, sp, #16
	/*<! Configure the hardware ready to run the test. */
	prvSetupHardware();;
 8002dba:	f000 f855 	bl	8002e68 <prvSetupHardware>
	
	// ============now register CLI commands ===================
	
	FreeRTOS_CLIRegisterCommand( &xMotorCommand );
 8002dbe:	481f      	ldr	r0, [pc, #124]	; (8002e3c <main+0x88>)
 8002dc0:	f002 f9ce 	bl	8005160 <FreeRTOS_CLIRegisterCommand>
       		

	// =============== register CLI commands ===================
	int sr = sizeof(QueueTelegram);
 8002dc4:	231c      	movs	r3, #28
 8002dc6:	607b      	str	r3, [r7, #4]
	sr = sizeof (QueueTelegram *);
 8002dc8:	2304      	movs	r3, #4
 8002dca:	607b      	str	r3, [r7, #4]
	// create queues 
	QSpd_handle = xQueueCreate(1, sizeof(QueueTelegram));
 8002dcc:	2001      	movs	r0, #1
 8002dce:	211c      	movs	r1, #28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f001 f9b3 	bl	800413c <xQueueGenericCreate>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <main+0x8c>)
 8002dda:	601a      	str	r2, [r3, #0]


/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/

	// echo server task 
	xTaskCreate(set_macTask, "SETMAC", configMINIMAL_STACK_SIZE*5, 
 8002ddc:	2301      	movs	r3, #1
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <main+0x90>)
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	2300      	movs	r3, #0
 8002de6:	9302      	str	r3, [sp, #8]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9303      	str	r3, [sp, #12]
 8002dec:	4816      	ldr	r0, [pc, #88]	; (8002e48 <main+0x94>)
 8002dee:	4917      	ldr	r1, [pc, #92]	; (8002e4c <main+0x98>)
 8002df0:	f240 228a 	movw	r2, #650	; 0x28a
 8002df4:	2300      	movs	r3, #0
 8002df6:	f000 f999 	bl	800312c <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY, &set_macTaskHandle);
	
	// run motor task 
	xTaskCreate(motorControl_task, "motorH", configMINIMAL_STACK_SIZE*20,
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <main+0x9c>)
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9302      	str	r3, [sp, #8]
 8002e06:	2300      	movs	r3, #0
 8002e08:	9303      	str	r3, [sp, #12]
 8002e0a:	4812      	ldr	r0, [pc, #72]	; (8002e54 <main+0xa0>)
 8002e0c:	4912      	ldr	r1, [pc, #72]	; (8002e58 <main+0xa4>)
 8002e0e:	f640 2228 	movw	r2, #2600	; 0xa28
 8002e12:	2300      	movs	r3, #0
 8002e14:	f000 f98a 	bl	800312c <xTaskGenericCreate>
		       	NULL, mainFLASH_TASK_PRIORITY, &motorHBHandle);

	// set motor task 
	xTaskCreate(motorHeartBeat_task, "mHeratBeat", configMINIMAL_STACK_SIZE,		       				
 8002e18:	2301      	movs	r3, #1
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <main+0xa8>)
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	2300      	movs	r3, #0
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	2300      	movs	r3, #0
 8002e26:	9303      	str	r3, [sp, #12]
 8002e28:	480d      	ldr	r0, [pc, #52]	; (8002e60 <main+0xac>)
 8002e2a:	490e      	ldr	r1, [pc, #56]	; (8002e64 <main+0xb0>)
 8002e2c:	2282      	movs	r2, #130	; 0x82
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f000 f97c 	bl	800312c <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8002e34:	f000 fbbc 	bl	80035b0 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8002e38:	e7fe      	b.n	8002e38 <main+0x84>
 8002e3a:	bf00      	nop
 8002e3c:	08008954 	.word	0x08008954
 8002e40:	200131f8 	.word	0x200131f8
 8002e44:	200141b8 	.word	0x200141b8
 8002e48:	0800158d 	.word	0x0800158d
 8002e4c:	080083bc 	.word	0x080083bc
 8002e50:	200131f0 	.word	0x200131f0
 8002e54:	08001ddd 	.word	0x08001ddd
 8002e58:	080083c4 	.word	0x080083c4
 8002e5c:	200139d0 	.word	0x200139d0
 8002e60:	08001db5 	.word	0x08001db5
 8002e64:	080083cc 	.word	0x080083cc

08002e68 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af04      	add	r7, sp, #16
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8002e6e:	f000 f8af 	bl	8002fd0 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002e72:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002e76:	f002 fc61 	bl	800573c <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 8002e7a:	f7fd fa49 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 8002e7e:	f7fe fbb7 	bl	80015f0 <init_USARTx>
	 * Function : 		init_W5200 from W5200.c file 
	 * Stack size :		5 times minimial stack size 
	 * Task priority :	main flash task priority + 1 
	 * Parameters 	 :	no parameters (NULL)
	 */  
	xTaskCreate(init_W5200, "init_W5200", configMINIMAL_STACK_SIZE*5, 
 8002e82:	2302      	movs	r3, #2
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9302      	str	r3, [sp, #8]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9303      	str	r3, [sp, #12]
 8002e92:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <prvSetupHardware+0x3c>)
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <prvSetupHardware+0x40>)
 8002e96:	f240 228a 	movw	r2, #650	; 0x28a
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f000 f946 	bl	800312c <xTaskGenericCreate>
			NULL, mainFLASH_TASK_PRIORITY + 1 , NULL);
	
	
}
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	08000ac5 	.word	0x08000ac5
 8002ea8:	080083d8 	.word	0x080083d8

08002eac <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <vApplicationTickHook+0x20>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <vApplicationTickHook+0x20>)
 8002eb8:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8002eba:	201c      	movs	r0, #28
 8002ebc:	f7ff ff60 	bl	8002d80 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <vApplicationTickHook+0x20>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1e5a      	subs	r2, r3, #1
 8002ec6:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <vApplicationTickHook+0x20>)
 8002ec8:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000490 	.word	0x20000490

08002ed0 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <TIM3_IRQHandler+0x34>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <TIM3_IRQHandler+0x34>)
 8002edc:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <TIM3_IRQHandler+0x34>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <TIM3_IRQHandler+0x38>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d903      	bls.n	8002ef2 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <TIM3_IRQHandler+0x34>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <TIM3_IRQHandler+0x38>)
 8002ef0:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <TIM3_IRQHandler+0x34>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	1e5a      	subs	r2, r3, #1
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <TIM3_IRQHandler+0x34>)
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	20000490 	.word	0x20000490
 8002f08:	20000494 	.word	0x20000494

08002f0c <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <TIM2_IRQHandler+0x20>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <TIM2_IRQHandler+0x20>)
 8002f18:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8002f1a:	201d      	movs	r0, #29
 8002f1c:	f7ff ff30 	bl	8002d80 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <TIM2_IRQHandler+0x20>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	1e5a      	subs	r2, r3, #1
 8002f26:	4b01      	ldr	r3, [pc, #4]	; (8002f2c <TIM2_IRQHandler+0x20>)
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000490 	.word	0x20000490

08002f30 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8002f34:	f001 fe04 	bl	8004b40 <ulPortSetInterruptMask>
	for( ;; );
 8002f38:	e7fe      	b.n	8002f38 <vApplicationMallocFailedHook+0x8>
 8002f3a:	bf00      	nop

08002f3c <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8002f52:	f001 fdf5 	bl	8004b40 <ulPortSetInterruptMask>
	for( ;; );
 8002f56:	e7fe      	b.n	8002f56 <vApplicationStackOverflowHook+0xe>

08002f58 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]

}
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <Reset_Handler>:
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f000 b804 	b.w	8002f7a <LoopCopyDataInit>

08002f72 <CopyDataInit>:
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <LoopFillZerobss+0x22>)
 8002f74:	585b      	ldr	r3, [r3, r1]
 8002f76:	5043      	str	r3, [r0, r1]
 8002f78:	3104      	adds	r1, #4

08002f7a <LoopCopyDataInit>:
 8002f7a:	480f      	ldr	r0, [pc, #60]	; (8002fb8 <LoopFillZerobss+0x26>)
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <LoopFillZerobss+0x2a>)
 8002f7e:	1842      	adds	r2, r0, r1
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f4ff aff6 	bcc.w	8002f72 <CopyDataInit>
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <LoopFillZerobss+0x2e>)
 8002f88:	f000 b803 	b.w	8002f92 <LoopFillZerobss>

08002f8c <FillZerobss>:
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f842 3b04 	str.w	r3, [r2], #4

08002f92 <LoopFillZerobss>:
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <LoopFillZerobss+0x32>)
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f4ff aff9 	bcc.w	8002f8c <FillZerobss>
 8002f9a:	480b      	ldr	r0, [pc, #44]	; (8002fc8 <LoopFillZerobss+0x36>)
 8002f9c:	6801      	ldr	r1, [r0, #0]
 8002f9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002fa2:	6001      	str	r1, [r0, #0]
 8002fa4:	f000 f814 	bl	8002fd0 <SystemInit>
 8002fa8:	f004 feba 	bl	8007d20 <__libc_init_array>
 8002fac:	f7ff ff02 	bl	8002db4 <main>
 8002fb0:	4770      	bx	lr
 8002fb2:	0000      	.short	0x0000
 8002fb4:	08008ab8 	.word	0x08008ab8
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000460 	.word	0x20000460
 8002fc0:	20000460 	.word	0x20000460
 8002fc4:	2001425c 	.word	0x2001425c
 8002fc8:	e000ed88 	.word	0xe000ed88

08002fcc <ADC_IRQHandler>:
 8002fcc:	f7ff bffe 	b.w	8002fcc <ADC_IRQHandler>

08002fd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <SystemInit+0x5c>)
 8002fd6:	4a15      	ldr	r2, [pc, #84]	; (800302c <SystemInit+0x5c>)
 8002fd8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002fdc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002fe4:	4b12      	ldr	r3, [pc, #72]	; (8003030 <SystemInit+0x60>)
 8002fe6:	4a12      	ldr	r2, [pc, #72]	; (8003030 <SystemInit+0x60>)
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <SystemInit+0x60>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <SystemInit+0x60>)
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <SystemInit+0x60>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <SystemInit+0x60>)
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <SystemInit+0x64>)
 800300a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <SystemInit+0x60>)
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <SystemInit+0x60>)
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003016:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <SystemInit+0x60>)
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800301e:	f000 f80b 	bl	8003038 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003022:	4b02      	ldr	r3, [pc, #8]	; (800302c <SystemInit+0x5c>)
 8003024:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003028:	609a      	str	r2, [r3, #8]
#endif
}
 800302a:	bd80      	pop	{r7, pc}
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	40023800 	.word	0x40023800
 8003034:	24003010 	.word	0x24003010

08003038 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003046:	4b35      	ldr	r3, [pc, #212]	; (800311c <SetSysClock+0xe4>)
 8003048:	4a34      	ldr	r2, [pc, #208]	; (800311c <SetSysClock+0xe4>)
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003050:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <SetSysClock+0xe4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3301      	adds	r3, #1
 8003060:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <SetSysClock+0x38>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800306e:	d1f0      	bne.n	8003052 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <SetSysClock+0xe4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800307c:	2301      	movs	r3, #1
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	e001      	b.n	8003086 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003082:	2300      	movs	r3, #0
 8003084:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d142      	bne.n	8003112 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <SetSysClock+0xe4>)
 800308e:	4a23      	ldr	r2, [pc, #140]	; (800311c <SetSysClock+0xe4>)
 8003090:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <SetSysClock+0xe8>)
 800309a:	4a21      	ldr	r2, [pc, #132]	; (8003120 <SetSysClock+0xe8>)
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a2:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <SetSysClock+0xe4>)
 80030a6:	4a1d      	ldr	r2, [pc, #116]	; (800311c <SetSysClock+0xe4>)
 80030a8:	6892      	ldr	r2, [r2, #8]
 80030aa:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <SetSysClock+0xe4>)
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <SetSysClock+0xe4>)
 80030b0:	6892      	ldr	r2, [r2, #8]
 80030b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b6:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <SetSysClock+0xe4>)
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <SetSysClock+0xe4>)
 80030bc:	6892      	ldr	r2, [r2, #8]
 80030be:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80030c2:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <SetSysClock+0xe4>)
 80030c6:	4a17      	ldr	r2, [pc, #92]	; (8003124 <SetSysClock+0xec>)
 80030c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <SetSysClock+0xe4>)
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <SetSysClock+0xe4>)
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80030d4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80030d6:	bf00      	nop
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <SetSysClock+0xe4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f9      	beq.n	80030d8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <SetSysClock+0xf0>)
 80030e6:	f240 6204 	movw	r2, #1540	; 0x604
 80030ea:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <SetSysClock+0xe4>)
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <SetSysClock+0xe4>)
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	f022 0203 	bic.w	r2, r2, #3
 80030f6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <SetSysClock+0xe4>)
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <SetSysClock+0xe4>)
 80030fc:	6892      	ldr	r2, [r2, #8]
 80030fe:	f042 0202 	orr.w	r2, r2, #2
 8003102:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003104:	bf00      	nop
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <SetSysClock+0xe4>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d1f9      	bne.n	8003106 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	07404b19 	.word	0x07404b19
 8003128:	40023c00 	.word	0x40023c00

0800312c <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <xTaskGenericCreate+0x1c>
 8003142:	f001 fcfd 	bl	8004b40 <ulPortSetInterruptMask>
 8003146:	e7fe      	b.n	8003146 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2b04      	cmp	r3, #4
 800314c:	d902      	bls.n	8003154 <xTaskGenericCreate+0x28>
 800314e:	f001 fcf7 	bl	8004b40 <ulPortSetInterruptMask>
 8003152:	e7fe      	b.n	8003152 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	4618      	mov	r0, r3
 8003158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800315a:	f000 fe8f 	bl	8003e7c <prvAllocateTCBAndStack>
 800315e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d072      	beq.n	800324c <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003170:	3b01      	subs	r3, #1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0307 	bic.w	r3, r3, #7
 800317e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <xTaskGenericCreate+0x64>
 800318a:	f001 fcd9 	bl	8004b40 <ulPortSetInterruptMask>
 800318e:	e7fe      	b.n	800318e <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	69b8      	ldr	r0, [r7, #24]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	f000 fd78 	bl	8003c90 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031a0:	6978      	ldr	r0, [r7, #20]
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	f001 fbd9 	bl	800495c <pxPortInitialiseStack>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80031bc:	f001 fc9e 	bl	8004afc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80031c0:	4b2e      	ldr	r3, [pc, #184]	; (800327c <xTaskGenericCreate+0x150>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <xTaskGenericCreate+0x150>)
 80031c8:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <xTaskGenericCreate+0x154>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80031d2:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <xTaskGenericCreate+0x154>)
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80031d8:	4b28      	ldr	r3, [pc, #160]	; (800327c <xTaskGenericCreate+0x150>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10f      	bne.n	8003200 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80031e0:	f000 fd9e 	bl	8003d20 <prvInitialiseTaskLists>
 80031e4:	e00c      	b.n	8003200 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80031e6:	4b27      	ldr	r3, [pc, #156]	; (8003284 <xTaskGenericCreate+0x158>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <xTaskGenericCreate+0x154>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d802      	bhi.n	8003200 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <xTaskGenericCreate+0x154>)
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <xTaskGenericCreate+0x15c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <xTaskGenericCreate+0x15c>)
 8003208:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800320a:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <xTaskGenericCreate+0x15c>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <xTaskGenericCreate+0x160>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d903      	bls.n	8003226 <xTaskGenericCreate+0xfa>
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <xTaskGenericCreate+0x160>)
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <xTaskGenericCreate+0x164>)
 8003234:	441a      	add	r2, r3
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	3304      	adds	r3, #4
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	f001 fb07 	bl	8004850 <vListInsertEnd>

			xReturn = pdPASS;
 8003242:	2301      	movs	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8003246:	f001 fc69 	bl	8004b1c <vPortExitCritical>
 800324a:	e002      	b.n	8003252 <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003250:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10b      	bne.n	8003270 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <xTaskGenericCreate+0x158>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <xTaskGenericCreate+0x154>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	429a      	cmp	r2, r3
 800326a:	d201      	bcs.n	8003270 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 800326c:	f001 fc36 	bl	8004adc <vPortYield>
			}
		}
	}

	return xReturn;
 8003270:	69fb      	ldr	r3, [r7, #28]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000570 	.word	0x20000570
 8003280:	20000498 	.word	0x20000498
 8003284:	2000057c 	.word	0x2000057c
 8003288:	20000590 	.word	0x20000590
 800328c:	20000578 	.word	0x20000578
 8003290:	2000049c 	.word	0x2000049c

08003294 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle xTaskToDelete )
	{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 800329c:	f001 fc2e 	bl	8004afc <vPortEnterCritical>
		{
			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <vTaskDelete+0x18>
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <vTaskDelete+0x78>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e000      	b.n	80032ae <vTaskDelete+0x1a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 fb27 	bl	8004908 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3318      	adds	r3, #24
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fb1e 	bl	8004908 <uxListRemove>
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3304      	adds	r3, #4
 80032d0:	480f      	ldr	r0, [pc, #60]	; (8003310 <vTaskDelete+0x7c>)
 80032d2:	4619      	mov	r1, r3
 80032d4:	f001 fabc 	bl	8004850 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <vTaskDelete+0x80>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <vTaskDelete+0x80>)
 80032e0:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <vTaskDelete+0x84>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <vTaskDelete+0x84>)
 80032ea:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80032ec:	f001 fc16 	bl	8004b1c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <vTaskDelete+0x88>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <vTaskDelete+0x72>
		{
			if( pxTCB == pxCurrentTCB )
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <vTaskDelete+0x78>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d101      	bne.n	8003306 <vTaskDelete+0x72>
			{
				portYIELD_WITHIN_API();
 8003302:	f001 fbeb 	bl	8004adc <vPortYield>
			}
		}
	}
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000498 	.word	0x20000498
 8003310:	20000544 	.word	0x20000544
 8003314:	20000558 	.word	0x20000558
 8003318:	20000590 	.word	0x20000590
 800331c:	2000057c 	.word	0x2000057c

08003320 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <vTaskDelayUntil+0x1a>
 8003334:	f001 fc04 	bl	8004b40 <ulPortSetInterruptMask>
 8003338:	e7fe      	b.n	8003338 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <vTaskDelayUntil+0x26>
 8003340:	f001 fbfe 	bl	8004b40 <ulPortSetInterruptMask>
 8003344:	e7fe      	b.n	8003344 <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 8003346:	f000 f96b 	bl	8003620 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 800334a:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <vTaskDelayUntil+0xa8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4413      	add	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d90b      	bls.n	800337c <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	429a      	cmp	r2, r3
 800336c:	d911      	bls.n	8003392 <vTaskDelayUntil+0x72>
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	429a      	cmp	r2, r3
 8003374:	d90d      	bls.n	8003392 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e00a      	b.n	8003392 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	429a      	cmp	r2, r3
 8003384:	d803      	bhi.n	800338e <vTaskDelayUntil+0x6e>
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d901      	bls.n	8003392 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 800338e:	2301      	movs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <vTaskDelayUntil+0xac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 faaf 	bl	8004908 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fd30 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80033b0:	f000 f944 	bl	800363c <xTaskResumeAll>
 80033b4:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 80033bc:	f001 fb8e 	bl	8004adc <vPortYield>
		}
	}
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000574 	.word	0x20000574
 80033cc:	20000498 	.word	0x20000498

080033d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 80033e2:	f000 f91d 	bl	8003620 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <vTaskDelay+0x48>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <vTaskDelay+0x4c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fa86 	bl	8004908 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80033fc:	68b8      	ldr	r0, [r7, #8]
 80033fe:	f000 fd07 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003402:	f000 f91b 	bl	800363c <xTaskResumeAll>
 8003406:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 800340e:	f001 fb65 	bl	8004adc <vPortYield>
		}
	}
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000574 	.word	0x20000574
 800341c:	20000498 	.word	0x20000498

08003420 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle xTaskToSuspend )
	{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8003428:	f001 fb68 	bl	8004afc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <vTaskSuspend+0x18>
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <vTaskSuspend+0x80>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	e000      	b.n	800343a <vTaskSuspend+0x1a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3304      	adds	r3, #4
 8003440:	4618      	mov	r0, r3
 8003442:	f001 fa61 	bl	8004908 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3318      	adds	r3, #24
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fa58 	bl	8004908 <uxListRemove>
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3304      	adds	r3, #4
 800345c:	4811      	ldr	r0, [pc, #68]	; (80034a4 <vTaskSuspend+0x84>)
 800345e:	4619      	mov	r1, r3
 8003460:	f001 f9f6 	bl	8004850 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8003464:	f001 fb5a 	bl	8004b1c <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <vTaskSuspend+0x80>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	429a      	cmp	r2, r3
 8003470:	d112      	bne.n	8003498 <vTaskSuspend+0x78>
		{
			if( xSchedulerRunning != pdFALSE )
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <vTaskSuspend+0x88>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <vTaskSuspend+0x60>
			{
				/* The current task has just been suspended. */
				portYIELD_WITHIN_API();
 800347a:	f001 fb2f 	bl	8004adc <vPortYield>
 800347e:	e00b      	b.n	8003498 <vTaskSuspend+0x78>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <vTaskSuspend+0x84>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <vTaskSuspend+0x8c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d103      	bne.n	8003494 <vTaskSuspend+0x74>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <vTaskSuspend+0x80>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e001      	b.n	8003498 <vTaskSuspend+0x78>
				}
				else
				{
					vTaskSwitchContext();
 8003494:	f000 fa40 	bl	8003918 <vTaskSwitchContext>
				}
			}
		}
	}
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000498 	.word	0x20000498
 80034a4:	2000055c 	.word	0x2000055c
 80034a8:	2000057c 	.word	0x2000057c
 80034ac:	20000570 	.word	0x20000570

080034b0 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <xTaskIsTaskSuspended+0x1c>
 80034c6:	f001 fb3b 	bl	8004b40 <ulPortSetInterruptMask>
 80034ca:	e7fe      	b.n	80034ca <xTaskIsTaskSuspended+0x1a>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <xTaskIsTaskSuspended+0x5c>)
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d101      	bne.n	80034da <xTaskIsTaskSuspended+0x2a>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <xTaskIsTaskSuspended+0x2c>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00f      	beq.n	8003500 <xTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <xTaskIsTaskSuspended+0x60>)
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d00a      	beq.n	8003500 <xTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <xTaskIsTaskSuspended+0x46>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xTaskIsTaskSuspended+0x48>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <xTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
 8003500:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000055c 	.word	0x2000055c
 8003510:	20000530 	.word	0x20000530

08003514 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle xTaskToResume )
	{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <vTaskResume+0x18>
 8003526:	f001 fb0b 	bl	8004b40 <ulPortSetInterruptMask>
 800352a:	e7fe      	b.n	800352a <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d034      	beq.n	800359c <vTaskResume+0x88>
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <vTaskResume+0x90>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d02f      	beq.n	800359c <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 800353c:	f001 fade 	bl	8004afc <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff ffb5 	bl	80034b0 <xTaskIsTaskSuspended>
 8003546:	4603      	mov	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d125      	bne.n	8003598 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f001 f9d9 	bl	8004908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <vTaskResume+0x94>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d903      	bls.n	800356a <vTaskResume+0x56>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <vTaskResume+0x94>)
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <vTaskResume+0x98>)
 8003578:	441a      	add	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3304      	adds	r3, #4
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f001 f965 	bl	8004850 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <vTaskResume+0x90>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	429a      	cmp	r2, r3
 8003592:	d301      	bcc.n	8003598 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 8003594:	f001 faa2 	bl	8004adc <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
 8003598:	f001 fac0 	bl	8004b1c <vPortExitCritical>
		}
	}
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000498 	.word	0x20000498
 80035a8:	20000578 	.word	0x20000578
 80035ac:	2000049c 	.word	0x2000049c

080035b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80035b6:	2300      	movs	r3, #0
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	2300      	movs	r3, #0
 80035c0:	9302      	str	r3, [sp, #8]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9303      	str	r3, [sp, #12]
 80035c6:	4812      	ldr	r0, [pc, #72]	; (8003610 <vTaskStartScheduler+0x60>)
 80035c8:	4912      	ldr	r1, [pc, #72]	; (8003614 <vTaskStartScheduler+0x64>)
 80035ca:	2282      	movs	r2, #130	; 0x82
 80035cc:	2300      	movs	r3, #0
 80035ce:	f7ff fdad 	bl	800312c <xTaskGenericCreate>
 80035d2:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 80035da:	f001 fb4b 	bl	8004c74 <xTimerCreateTimerTask>
 80035de:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10a      	bne.n	80035fc <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80035e6:	f001 faab 	bl	8004b40 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <vTaskStartScheduler+0x68>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <vTaskStartScheduler+0x6c>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035f6:	f001 fa0b 	bl	8004a10 <xPortStartScheduler>
 80035fa:	e005      	b.n	8003608 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <vTaskStartScheduler+0x58>
 8003602:	f001 fa9d 	bl	8004b40 <ulPortSetInterruptMask>
 8003606:	e7fe      	b.n	8003606 <vTaskStartScheduler+0x56>
	}
}
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	08003c6d 	.word	0x08003c6d
 8003614:	080083e4 	.word	0x080083e4
 8003618:	2000057c 	.word	0x2000057c
 800361c:	20000574 	.word	0x20000574

08003620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <vTaskSuspendAll+0x18>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	4b03      	ldr	r3, [pc, #12]	; (8003638 <vTaskSuspendAll+0x18>)
 800362c:	601a      	str	r2, [r3, #0]
}
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000580 	.word	0x20000580

0800363c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <xTaskResumeAll+0xec>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <xTaskResumeAll+0x18>
 800364e:	f001 fa77 	bl	8004b40 <ulPortSetInterruptMask>
 8003652:	e7fe      	b.n	8003652 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003654:	f001 fa52 	bl	8004afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <xTaskResumeAll+0xec>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	4b32      	ldr	r3, [pc, #200]	; (8003728 <xTaskResumeAll+0xec>)
 8003660:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003662:	4b31      	ldr	r3, [pc, #196]	; (8003728 <xTaskResumeAll+0xec>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d156      	bne.n	8003718 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 800366a:	4b30      	ldr	r3, [pc, #192]	; (800372c <xTaskResumeAll+0xf0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d052      	beq.n	8003718 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003672:	e02f      	b.n	80036d4 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <xTaskResumeAll+0xf4>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	3318      	adds	r3, #24
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f941 	bl	8004908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	3304      	adds	r3, #4
 800368a:	4618      	mov	r0, r3
 800368c:	f001 f93c 	bl	8004908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <xTaskResumeAll+0xf8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d903      	bls.n	80036a4 <xTaskResumeAll+0x68>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <xTaskResumeAll+0xf8>)
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4a21      	ldr	r2, [pc, #132]	; (8003738 <xTaskResumeAll+0xfc>)
 80036b2:	441a      	add	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f001 f8c8 	bl	8004850 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <xTaskResumeAll+0x100>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <xTaskResumeAll+0x104>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <xTaskResumeAll+0xf4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1cb      	bne.n	8003674 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <xTaskResumeAll+0x108>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d011      	beq.n	8003708 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80036e4:	e00c      	b.n	8003700 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80036e6:	f000 f841 	bl	800376c <xTaskIncrementTick>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <xTaskResumeAll+0x104>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <xTaskResumeAll+0x108>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <xTaskResumeAll+0x108>)
 80036fe:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <xTaskResumeAll+0x108>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <xTaskResumeAll+0x104>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d103      	bne.n	8003718 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8003714:	f001 f9e2 	bl	8004adc <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8003718:	f001 fa00 	bl	8004b1c <vPortExitCritical>

	return xAlreadyYielded;
 800371c:	687b      	ldr	r3, [r7, #4]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000580 	.word	0x20000580
 800372c:	20000570 	.word	0x20000570
 8003730:	20000530 	.word	0x20000530
 8003734:	20000578 	.word	0x20000578
 8003738:	2000049c 	.word	0x2000049c
 800373c:	20000498 	.word	0x20000498
 8003740:	20000588 	.word	0x20000588
 8003744:	20000584 	.word	0x20000584

08003748 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800374e:	f001 f9d5 	bl	8004afc <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <xTaskGetTickCount+0x20>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8003758:	f001 f9e0 	bl	8004b1c <vPortExitCritical>

	return xTicks;
 800375c:	687b      	ldr	r3, [r7, #4]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000574 	.word	0x20000574

0800376c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003776:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <xTaskIncrementTick+0x180>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 80a4 	bne.w	80038c8 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8003780:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <xTaskIncrementTick+0x184>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <xTaskIncrementTick+0x184>)
 8003788:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 800378a:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <xTaskIncrementTick+0x184>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d12e      	bne.n	80037f4 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8003796:	4b57      	ldr	r3, [pc, #348]	; (80038f4 <xTaskIncrementTick+0x188>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <xTaskIncrementTick+0x3a>
 80037a0:	f001 f9ce 	bl	8004b40 <ulPortSetInterruptMask>
 80037a4:	e7fe      	b.n	80037a4 <xTaskIncrementTick+0x38>
 80037a6:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <xTaskIncrementTick+0x188>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <xTaskIncrementTick+0x18c>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <xTaskIncrementTick+0x188>)
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	4b50      	ldr	r3, [pc, #320]	; (80038f8 <xTaskIncrementTick+0x18c>)
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	4b50      	ldr	r3, [pc, #320]	; (80038fc <xTaskIncrementTick+0x190>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	4b4e      	ldr	r3, [pc, #312]	; (80038fc <xTaskIncrementTick+0x190>)
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <xTaskIncrementTick+0x188>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <xTaskIncrementTick+0x66>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xTaskIncrementTick+0x68>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <xTaskIncrementTick+0x76>
 80037d8:	4b49      	ldr	r3, [pc, #292]	; (8003900 <xTaskIncrementTick+0x194>)
 80037da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e008      	b.n	80037f4 <xTaskIncrementTick+0x88>
 80037e2:	4b44      	ldr	r3, [pc, #272]	; (80038f4 <xTaskIncrementTick+0x188>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <xTaskIncrementTick+0x194>)
 80037f2:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <xTaskIncrementTick+0x194>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d34f      	bcc.n	800389e <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <xTaskIncrementTick+0x188>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <xTaskIncrementTick+0xa0>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <xTaskIncrementTick+0xa2>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <xTaskIncrementTick+0x194>)
 8003814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003818:	601a      	str	r2, [r3, #0]
						break;
 800381a:	e040      	b.n	800389e <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <xTaskIncrementTick+0x188>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d203      	bcs.n	800383c <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8003834:	4b32      	ldr	r3, [pc, #200]	; (8003900 <xTaskIncrementTick+0x194>)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
							break;
 800383a:	e030      	b.n	800389e <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	3304      	adds	r3, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f861 	bl	8004908 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3318      	adds	r3, #24
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f858 	bl	8004908 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <xTaskIncrementTick+0x198>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d903      	bls.n	800386c <xTaskIncrementTick+0x100>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <xTaskIncrementTick+0x198>)
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4a23      	ldr	r2, [pc, #140]	; (8003908 <xTaskIncrementTick+0x19c>)
 800387a:	441a      	add	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	3304      	adds	r3, #4
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	f000 ffe4 	bl	8004850 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <xTaskIncrementTick+0x1a0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8003896:	2301      	movs	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 800389a:	e7b0      	b.n	80037fe <xTaskIncrementTick+0x92>
 800389c:	e7af      	b.n	80037fe <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xTaskIncrementTick+0x1a0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	4918      	ldr	r1, [pc, #96]	; (8003908 <xTaskIncrementTick+0x19c>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d901      	bls.n	80038ba <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <xTaskIncrementTick+0x1a4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 80038c2:	f7ff faf3 	bl	8002eac <vApplicationTickHook>
 80038c6:	e006      	b.n	80038d6 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTaskIncrementTick+0x1a4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <xTaskIncrementTick+0x1a4>)
 80038d0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80038d2:	f7ff faeb 	bl	8002eac <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <xTaskIncrementTick+0x1a8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 80038de:	2301      	movs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038e2:	697b      	ldr	r3, [r7, #20]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000580 	.word	0x20000580
 80038f0:	20000574 	.word	0x20000574
 80038f4:	20000528 	.word	0x20000528
 80038f8:	2000052c 	.word	0x2000052c
 80038fc:	2000058c 	.word	0x2000058c
 8003900:	20000008 	.word	0x20000008
 8003904:	20000578 	.word	0x20000578
 8003908:	2000049c 	.word	0x2000049c
 800390c:	20000498 	.word	0x20000498
 8003910:	20000584 	.word	0x20000584
 8003914:	20000588 	.word	0x20000588

08003918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800391e:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <vTaskSwitchContext+0xdc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <vTaskSwitchContext+0xe0>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e05e      	b.n	80039ec <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 800392e:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <vTaskSwitchContext+0xe0>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8003934:	4b31      	ldr	r3, [pc, #196]	; (80039fc <vTaskSwitchContext+0xe4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b30      	ldr	r3, [pc, #192]	; (80039fc <vTaskSwitchContext+0xe4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	429a      	cmp	r2, r3
 8003942:	d808      	bhi.n	8003956 <vTaskSwitchContext+0x3e>
 8003944:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <vTaskSwitchContext+0xe4>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <vTaskSwitchContext+0xe4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3334      	adds	r3, #52	; 0x34
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	f7ff faf9 	bl	8002f48 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <vTaskSwitchContext+0xe4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4618      	mov	r0, r3
 800395e:	4928      	ldr	r1, [pc, #160]	; (8003a00 <vTaskSwitchContext+0xe8>)
 8003960:	2214      	movs	r2, #20
 8003962:	f004 fa05 	bl	8007d70 <memcmp>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <vTaskSwitchContext+0x68>
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <vTaskSwitchContext+0xe4>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b22      	ldr	r3, [pc, #136]	; (80039fc <vTaskSwitchContext+0xe4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3334      	adds	r3, #52	; 0x34
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7ff fae5 	bl	8002f48 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800397e:	e00c      	b.n	800399a <vTaskSwitchContext+0x82>
 8003980:	e00b      	b.n	800399a <vTaskSwitchContext+0x82>
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <vTaskSwitchContext+0xec>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <vTaskSwitchContext+0x78>
 800398a:	f001 f8d9 	bl	8004b40 <ulPortSetInterruptMask>
 800398e:	e7fe      	b.n	800398e <vTaskSwitchContext+0x76>
 8003990:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <vTaskSwitchContext+0xec>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1e5a      	subs	r2, r3, #1
 8003996:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <vTaskSwitchContext+0xec>)
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <vTaskSwitchContext+0xec>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	491a      	ldr	r1, [pc, #104]	; (8003a08 <vTaskSwitchContext+0xf0>)
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0e8      	beq.n	8003982 <vTaskSwitchContext+0x6a>
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <vTaskSwitchContext+0xec>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <vTaskSwitchContext+0xf0>)
 80039be:	4413      	add	r3, r2
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3308      	adds	r3, #8
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d104      	bne.n	80039e2 <vTaskSwitchContext+0xca>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <vTaskSwitchContext+0xe4>)
 80039ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000580 	.word	0x20000580
 80039f8:	20000588 	.word	0x20000588
 80039fc:	20000498 	.word	0x20000498
 8003a00:	08008964 	.word	0x08008964
 8003a04:	20000578 	.word	0x20000578
 8003a08:	2000049c 	.word	0x2000049c

08003a0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <vTaskPlaceOnEventList+0x16>
 8003a1c:	f001 f890 	bl	8004b40 <ulPortSetInterruptMask>
 8003a20:	e7fe      	b.n	8003a20 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <vTaskPlaceOnEventList+0x60>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3318      	adds	r3, #24
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f000 ff34 	bl	8004898 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <vTaskPlaceOnEventList+0x60>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 ff66 	bl	8004908 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a42:	d107      	bne.n	8003a54 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <vTaskPlaceOnEventList+0x60>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4809      	ldr	r0, [pc, #36]	; (8003a70 <vTaskPlaceOnEventList+0x64>)
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f000 feff 	bl	8004850 <vListInsertEnd>
 8003a52:	e007      	b.n	8003a64 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <vTaskPlaceOnEventList+0x68>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f9d6 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000498 	.word	0x20000498
 8003a70:	2000055c 	.word	0x2000055c
 8003a74:	20000574 	.word	0x20000574

08003a78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <vTaskPlaceOnEventListRestricted+0x16>
 8003a88:	f001 f85a 	bl	8004b40 <ulPortSetInterruptMask>
 8003a8c:	e7fe      	b.n	8003a8c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <vTaskPlaceOnEventListRestricted+0x48>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3318      	adds	r3, #24
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4619      	mov	r1, r3
 8003a98:	f000 feda 	bl	8004850 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <vTaskPlaceOnEventListRestricted+0x48>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 ff30 	bl	8004908 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <vTaskPlaceOnEventListRestricted+0x4c>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f9ac 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
	}
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000498 	.word	0x20000498
 8003ac4:	20000574 	.word	0x20000574

08003ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <xTaskRemoveFromEventList+0x1c>
 8003ade:	f001 f82f 	bl	8004b40 <ulPortSetInterruptMask>
 8003ae2:	e7fe      	b.n	8003ae2 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 ff0d 	bl	8004908 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <xTaskRemoveFromEventList+0xa0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11d      	bne.n	8003b32 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 ff04 	bl	8004908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <xTaskRemoveFromEventList+0xa4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d903      	bls.n	8003b14 <xTaskRemoveFromEventList+0x4c>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <xTaskRemoveFromEventList+0xa4>)
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <xTaskRemoveFromEventList+0xa8>)
 8003b22:	441a      	add	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f000 fe90 	bl	8004850 <vListInsertEnd>
 8003b30:	e005      	b.n	8003b3e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3318      	adds	r3, #24
 8003b36:	480f      	ldr	r0, [pc, #60]	; (8003b74 <xTaskRemoveFromEventList+0xac>)
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f000 fe89 	bl	8004850 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <xTaskRemoveFromEventList+0xb0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d305      	bcc.n	8003b58 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <xTaskRemoveFromEventList+0xb4>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e001      	b.n	8003b5c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000580 	.word	0x20000580
 8003b6c:	20000578 	.word	0x20000578
 8003b70:	2000049c 	.word	0x2000049c
 8003b74:	20000530 	.word	0x20000530
 8003b78:	20000498 	.word	0x20000498
 8003b7c:	20000588 	.word	0x20000588

08003b80 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <vTaskSetTimeOutState+0x14>
 8003b8e:	f000 ffd7 	bl	8004b40 <ulPortSetInterruptMask>
 8003b92:	e7fe      	b.n	8003b92 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <vTaskSetTimeOutState+0x2c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <vTaskSetTimeOutState+0x30>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]
}
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000058c 	.word	0x2000058c
 8003bb0:	20000574 	.word	0x20000574

08003bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <xTaskCheckForTimeOut+0x16>
 8003bc4:	f000 ffbc 	bl	8004b40 <ulPortSetInterruptMask>
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <xTaskCheckForTimeOut+0x22>
 8003bd0:	f000 ffb6 	bl	8004b40 <ulPortSetInterruptMask>
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8003bd6:	f000 ff91 	bl	8004afc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <xTaskCheckForTimeOut+0x98>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be8:	d102      	bne.n	8003bf0 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	e026      	b.n	8003c3e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <xTaskCheckForTimeOut+0x9c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d007      	beq.n	8003c0c <xTaskCheckForTimeOut+0x58>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d802      	bhi.n	8003c0c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8003c06:	2301      	movs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e018      	b.n	8003c3e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d20e      	bcs.n	8003c3a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1acb      	subs	r3, r1, r3
 8003c28:	441a      	add	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ffa6 	bl	8003b80 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e001      	b.n	8003c3e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c3e:	f000 ff6d 	bl	8004b1c <vPortExitCritical>

	return xReturn;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000574 	.word	0x20000574
 8003c50:	2000058c 	.word	0x2000058c

08003c54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <vTaskMissedYield+0x14>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000588 	.word	0x20000588

08003c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8003c74:	f000 f892 	bl	8003d9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <prvIdleTask+0x20>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d901      	bls.n	8003c84 <prvIdleTask+0x18>
			{
				taskYIELD();
 8003c80:	f000 ff2c 	bl	8004adc <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003c84:	f7ff f95a 	bl	8002f3c <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003c88:	e7f4      	b.n	8003c74 <prvIdleTask+0x8>
 8003c8a:	bf00      	nop
 8003c8c:	2000049c 	.word	0x2000049c

08003c90 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e012      	b.n	8003cca <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4413      	add	r3, r2
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3330      	adds	r3, #48	; 0x30
 8003cb4:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d100      	bne.n	8003cc4 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8003cc2:	e005      	b.n	8003cd0 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b09      	cmp	r3, #9
 8003cce:	d9e9      	bls.n	8003ca4 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d901      	bls.n	8003ce2 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fda0 	bl	8004838 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fd9b 	bl	8004838 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1c3 0205 	rsb	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop

08003d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	e00c      	b.n	8003d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <prvInitialiseTaskLists+0x5c>)
 8003d38:	4413      	add	r3, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fd5c 	bl	80047f8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3301      	adds	r3, #1
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d9ef      	bls.n	8003d2c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d4c:	480c      	ldr	r0, [pc, #48]	; (8003d80 <prvInitialiseTaskLists+0x60>)
 8003d4e:	f000 fd53 	bl	80047f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d52:	480c      	ldr	r0, [pc, #48]	; (8003d84 <prvInitialiseTaskLists+0x64>)
 8003d54:	f000 fd50 	bl	80047f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d58:	480b      	ldr	r0, [pc, #44]	; (8003d88 <prvInitialiseTaskLists+0x68>)
 8003d5a:	f000 fd4d 	bl	80047f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d5e:	480b      	ldr	r0, [pc, #44]	; (8003d8c <prvInitialiseTaskLists+0x6c>)
 8003d60:	f000 fd4a 	bl	80047f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d64:	480a      	ldr	r0, [pc, #40]	; (8003d90 <prvInitialiseTaskLists+0x70>)
 8003d66:	f000 fd47 	bl	80047f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <prvInitialiseTaskLists+0x74>)
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <prvInitialiseTaskLists+0x60>)
 8003d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <prvInitialiseTaskLists+0x78>)
 8003d72:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <prvInitialiseTaskLists+0x64>)
 8003d74:	601a      	str	r2, [r3, #0]
}
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	2000049c 	.word	0x2000049c
 8003d80:	20000500 	.word	0x20000500
 8003d84:	20000514 	.word	0x20000514
 8003d88:	20000530 	.word	0x20000530
 8003d8c:	20000544 	.word	0x20000544
 8003d90:	2000055c 	.word	0x2000055c
 8003d94:	20000528 	.word	0x20000528
 8003d98:	2000052c 	.word	0x2000052c

08003d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003da2:	e028      	b.n	8003df6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003da4:	f7ff fc3c 	bl	8003620 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003da8:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <prvCheckTasksWaitingTermination+0x68>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2300      	movne	r3, #0
 8003db2:	2301      	moveq	r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8003db8:	f7ff fc40 	bl	800363c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d119      	bne.n	8003df6 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8003dc2:	f000 fe9b 	bl	8004afc <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <prvCheckTasksWaitingTermination+0x68>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fd98 	bl	8004908 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <prvCheckTasksWaitingTermination+0x6c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1e5a      	subs	r2, r3, #1
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <prvCheckTasksWaitingTermination+0x6c>)
 8003de0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <prvCheckTasksWaitingTermination+0x70>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <prvCheckTasksWaitingTermination+0x70>)
 8003dea:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8003dec:	f000 fe96 	bl	8004b1c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	f000 f875 	bl	8003ee0 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <prvCheckTasksWaitingTermination+0x70>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1d2      	bne.n	8003da4 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000544 	.word	0x20000544
 8003e08:	20000570 	.word	0x20000570
 8003e0c:	20000558 	.word	0x20000558

08003e10 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <prvAddCurrentTaskToDelayedList+0x58>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8003e20:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <prvAddCurrentTaskToDelayedList+0x5c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d209      	bcs.n	8003e3e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <prvAddCurrentTaskToDelayedList+0x60>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <prvAddCurrentTaskToDelayedList+0x58>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4610      	mov	r0, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	f000 fd2e 	bl	8004898 <vListInsert>
 8003e3c:	e010      	b.n	8003e60 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x64>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <prvAddCurrentTaskToDelayedList+0x58>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	f000 fd24 	bl	8004898 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <prvAddCurrentTaskToDelayedList+0x68>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d202      	bcs.n	8003e60 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <prvAddCurrentTaskToDelayedList+0x68>)
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000498 	.word	0x20000498
 8003e6c:	20000574 	.word	0x20000574
 8003e70:	2000052c 	.word	0x2000052c
 8003e74:	20000528 	.word	0x20000528
 8003e78:	20000008 	.word	0x20000008

08003e7c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8003e88:	204c      	movs	r0, #76	; 0x4c
 8003e8a:	f001 fadb 	bl	8005444 <pvPortMalloc>
 8003e8e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01f      	beq.n	8003ed6 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <prvAllocateTCBAndStack+0x2e>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 facf 	bl	8005444 <pvPortMalloc>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	e000      	b.n	8003eac <prvAllocateTCBAndStack+0x30>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f001 fb4f 	bl	800555c <vPortFree>
			pxNewTCB = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e008      	b.n	8003ed6 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4610      	mov	r0, r2
 8003ece:	21a5      	movs	r1, #165	; 0xa5
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f003 ff81 	bl	8007dd8 <memset>
		}
	}

	return pxNewTCB;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fb35 	bl	800555c <vPortFree>
		vPortFree( pxTCB );
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f001 fb32 	bl	800555c <vPortFree>
	}
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop

08003f00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <xTaskGetCurrentTaskHandle+0x1c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003f0c:	687b      	ldr	r3, [r7, #4]
	}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000498 	.word	0x20000498

08003f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <xTaskGetSchedulerState+0x34>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	e008      	b.n	8003f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003f34:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <xTaskGetSchedulerState+0x38>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	e001      	b.n	8003f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f42:	2302      	movs	r3, #2
 8003f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f46:	687b      	ldr	r3, [r7, #4]
	}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	2000057c 	.word	0x2000057c
 8003f58:	20000580 	.word	0x20000580

08003f5c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d046      	beq.n	8003ffc <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <vTaskPriorityInherit+0xa8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d23f      	bcs.n	8003ffc <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <vTaskPriorityInherit+0xa8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f1c3 0205 	rsb	r2, r3, #5
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6959      	ldr	r1, [r3, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <vTaskPriorityInherit+0xac>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4299      	cmp	r1, r3
 8003fa0:	d101      	bne.n	8003fa6 <vTaskPriorityInherit+0x4a>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <vTaskPriorityInherit+0x4c>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d022      	beq.n	8003ff2 <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fca9 	bl	8004908 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <vTaskPriorityInherit+0xa8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <vTaskPriorityInherit+0xb0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d903      	bls.n	8003fd4 <vTaskPriorityInherit+0x78>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <vTaskPriorityInherit+0xb0>)
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4a09      	ldr	r2, [pc, #36]	; (8004008 <vTaskPriorityInherit+0xac>)
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	f000 fc30 	bl	8004850 <vListInsertEnd>
 8003ff0:	e004      	b.n	8003ffc <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <vTaskPriorityInherit+0xa8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000498 	.word	0x20000498
 8004008:	2000049c 	.word	0x2000049c
 800400c:	20000578 	.word	0x20000578

08004010 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d02c      	beq.n	800407c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402a:	429a      	cmp	r2, r3
 800402c:	d026      	beq.n	800407c <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3304      	adds	r3, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fc68 	bl	8004908 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	f1c3 0205 	rsb	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <vTaskPriorityDisinherit+0x74>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d903      	bls.n	8004060 <vTaskPriorityDisinherit+0x50>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <vTaskPriorityDisinherit+0x74>)
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4a06      	ldr	r2, [pc, #24]	; (8004088 <vTaskPriorityDisinherit+0x78>)
 800406e:	441a      	add	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3304      	adds	r3, #4
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	f000 fbea 	bl	8004850 <vListInsertEnd>
			}
		}
	}
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000578 	.word	0x20000578
 8004088:	2000049c 	.word	0x2000049c

0800408c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <xQueueGenericReset+0x1a>
 80040a0:	f000 fd4e 	bl	8004b40 <ulPortSetInterruptMask>
 80040a4:	e7fe      	b.n	80040a4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80040a6:	f000 fd29 	bl	8004afc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	3b01      	subs	r3, #1
 80040d8:	68f9      	ldr	r1, [r7, #12]
 80040da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	441a      	add	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f4:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d014      	beq.n	800412e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3310      	adds	r3, #16
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fcdd 	bl	8003ac8 <xTaskRemoveFromEventList>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10c      	bne.n	800412e <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8004114:	f000 fce2 	bl	8004adc <vPortYield>
 8004118:	e009      	b.n	800412e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3310      	adds	r3, #16
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fb6a 	bl	80047f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3324      	adds	r3, #36	; 0x24
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fb65 	bl	80047f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800412e:	f000 fcf5 	bl	8004b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004132:	2301      	movs	r3, #1
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02a      	beq.n	80041aa <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8004154:	2050      	movs	r0, #80	; 0x50
 8004156:	f001 f975 	bl	8005444 <pvPortMalloc>
 800415a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d023      	beq.n	80041aa <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	3301      	adds	r3, #1
 800416c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f001 f968 	bl	8005444 <pvPortMalloc>
 8004174:	4602      	mov	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d010      	beq.n	80041a4 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800418e:	69b8      	ldr	r0, [r7, #24]
 8004190:	2101      	movs	r1, #1
 8004192:	f7ff ff7b 	bl	800408c <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	79fa      	ldrb	r2, [r7, #7]
 800419a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e002      	b.n	80041aa <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80041a4:	69b8      	ldr	r0, [r7, #24]
 80041a6:	f001 f9d9 	bl	800555c <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <xQueueGenericCreate+0x7a>
 80041b0:	f000 fcc6 	bl	8004b40 <ulPortSetInterruptMask>
 80041b4:	e7fe      	b.n	80041b4 <xQueueGenericCreate+0x78>

	return xReturn;
 80041b6:	69fb      	ldr	r3, [r7, #28]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <xQueueGenericSend+0x22>
 80041dc:	f000 fcb0 	bl	8004b40 <ulPortSetInterruptMask>
 80041e0:	e7fe      	b.n	80041e0 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <xQueueGenericSend+0x30>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <xQueueGenericSend+0x34>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <xQueueGenericSend+0x36>
 80041f4:	2300      	movs	r3, #0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <xQueueGenericSend+0x40>
 80041fa:	f000 fca1 	bl	8004b40 <ulPortSetInterruptMask>
 80041fe:	e7fe      	b.n	80041fe <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d103      	bne.n	800420e <xQueueGenericSend+0x4e>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <xQueueGenericSend+0x52>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <xQueueGenericSend+0x54>
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <xQueueGenericSend+0x5e>
 8004218:	f000 fc92 	bl	8004b40 <ulPortSetInterruptMask>
 800421c:	e7fe      	b.n	800421c <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800421e:	f000 fc6d 	bl	8004afc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <xQueueGenericSend+0x74>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d116      	bne.n	8004262 <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004234:	69b8      	ldr	r0, [r7, #24]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	f000 f9a9 	bl	8004590 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3324      	adds	r3, #36	; 0x24
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fc3c 	bl	8003ac8 <xTaskRemoveFromEventList>
 8004250:	4603      	mov	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8004256:	f000 fc41 	bl	8004adc <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800425a:	f000 fc5f 	bl	8004b1c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800425e:	2301      	movs	r3, #1
 8004260:	e059      	b.n	8004316 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004268:	f000 fc58 	bl	8004b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800426c:	2300      	movs	r3, #0
 800426e:	e052      	b.n	8004316 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004276:	f107 0310 	add.w	r3, r7, #16
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fc80 	bl	8003b80 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8004284:	f000 fc4a 	bl	8004b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004288:	f7ff f9ca 	bl	8003620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800428c:	f000 fc36 	bl	8004afc <vPortEnterCritical>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004298:	d102      	bne.n	80042a0 <xQueueGenericSend+0xe0>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2200      	movs	r2, #0
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a8:	d102      	bne.n	80042b0 <xQueueGenericSend+0xf0>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2200      	movs	r2, #0
 80042ae:	649a      	str	r2, [r3, #72]	; 0x48
 80042b0:	f000 fc34 	bl	8004b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b4:	f107 0210 	add.w	r2, r7, #16
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f7ff fc79 	bl	8003bb4 <xTaskCheckForTimeOut>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11e      	bne.n	8004306 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042c8:	69b8      	ldr	r0, [r7, #24]
 80042ca:	f000 fa51 	bl	8004770 <prvIsQueueFull>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f103 0210 	add.w	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	f7ff fb94 	bl	8003a0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042e4:	69b8      	ldr	r0, [r7, #24]
 80042e6:	f000 f9e1 	bl	80046ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ea:	f7ff f9a7 	bl	800363c <xTaskResumeAll>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10f      	bne.n	8004314 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 80042f4:	f000 fbf2 	bl	8004adc <vPortYield>
 80042f8:	e00c      	b.n	8004314 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042fa:	69b8      	ldr	r0, [r7, #24]
 80042fc:	f000 f9d6 	bl	80046ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004300:	f7ff f99c 	bl	800363c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8004304:	e78b      	b.n	800421e <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004306:	69b8      	ldr	r0, [r7, #24]
 8004308:	f000 f9d0 	bl	80046ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800430c:	f7ff f996 	bl	800363c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <xQueueGenericSend+0x156>
		}
	}
 8004314:	e783      	b.n	800421e <xQueueGenericSend+0x5e>
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop

08004320 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <xQueueGenericSendFromISR+0x1e>
 8004338:	f000 fc02 	bl	8004b40 <ulPortSetInterruptMask>
 800433c:	e7fe      	b.n	800433c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <xQueueGenericSendFromISR+0x2c>
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <xQueueGenericSendFromISR+0x30>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <xQueueGenericSendFromISR+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <xQueueGenericSendFromISR+0x3c>
 8004356:	f000 fbf3 	bl	8004b40 <ulPortSetInterruptMask>
 800435a:	e7fe      	b.n	800435a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d103      	bne.n	800436a <xQueueGenericSendFromISR+0x4a>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <xQueueGenericSendFromISR+0x4e>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <xQueueGenericSendFromISR+0x50>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <xQueueGenericSendFromISR+0x5a>
 8004374:	f000 fbe4 	bl	8004b40 <ulPortSetInterruptMask>
 8004378:	e7fe      	b.n	8004378 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800437a:	f000 fc4f 	bl	8004c1c <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800437e:	f000 fbdf 	bl	8004b40 <ulPortSetInterruptMask>
 8004382:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <xQueueGenericSendFromISR+0x76>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d124      	bne.n	80043e0 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004396:	69b8      	ldr	r0, [r7, #24]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	f000 f8f8 	bl	8004590 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a8:	d112      	bne.n	80043d0 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fb86 	bl	8003ac8 <xTaskRemoveFromEventList>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e004      	b.n	80043da <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80043da:	2301      	movs	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e001      	b.n	80043e4 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80043e4:	6978      	ldr	r0, [r7, #20]
 80043e6:	f000 fbb5 	bl	8004b54 <vPortClearInterruptMask>

	return xReturn;
 80043ea:	69fb      	ldr	r3, [r7, #28]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <xQueueGenericReceive+0x22>
 8004410:	f000 fb96 	bl	8004b40 <ulPortSetInterruptMask>
 8004414:	e7fe      	b.n	8004414 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <xQueueGenericReceive+0x30>
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <xQueueGenericReceive+0x34>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <xQueueGenericReceive+0x36>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <xQueueGenericReceive+0x40>
 800442e:	f000 fb87 	bl	8004b40 <ulPortSetInterruptMask>
 8004432:	e7fe      	b.n	8004432 <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004434:	f000 fb62 	bl	8004afc <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	2b00      	cmp	r3, #0
 800443e:	d03b      	beq.n	80044b8 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004446:	6a38      	ldr	r0, [r7, #32]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	f000 f909 	bl	8004660 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11c      	bne.n	800448e <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8004466:	f7ff fd4b 	bl	8003f00 <xTaskGetCurrentTaskHandle>
 800446a:	4602      	mov	r2, r0
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	3310      	adds	r3, #16
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fb23 	bl	8003ac8 <xTaskRemoveFromEventList>
 8004482:	4603      	mov	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	d113      	bne.n	80044b0 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8004488:	f000 fb28 	bl	8004adc <vPortYield>
 800448c:	e010      	b.n	80044b0 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	3324      	adds	r3, #36	; 0x24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fb11 	bl	8003ac8 <xTaskRemoveFromEventList>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80044ac:	f000 fb16 	bl	8004adc <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 80044b0:	f000 fb34 	bl	8004b1c <vPortExitCritical>
				return pdPASS;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e066      	b.n	8004586 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044be:	f000 fb2d 	bl	8004b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e05f      	b.n	8004586 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fb55 	bl	8003b80 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 80044da:	f000 fb1f 	bl	8004b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044de:	f7ff f89f 	bl	8003620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044e2:	f000 fb0b 	bl	8004afc <vPortEnterCritical>
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ee:	d102      	bne.n	80044f6 <xQueueGenericReceive+0x102>
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2200      	movs	r2, #0
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fe:	d102      	bne.n	8004506 <xQueueGenericReceive+0x112>
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2200      	movs	r2, #0
 8004504:	649a      	str	r2, [r3, #72]	; 0x48
 8004506:	f000 fb09 	bl	8004b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800450a:	f107 0214 	add.w	r2, r7, #20
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	f7ff fb4e 	bl	8003bb4 <xTaskCheckForTimeOut>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d12b      	bne.n	8004576 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800451e:	6a38      	ldr	r0, [r7, #32]
 8004520:	f000 f910 	bl	8004744 <prvIsQueueEmpty>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01f      	beq.n	800456a <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 8004532:	f000 fae3 	bl	8004afc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fd0e 	bl	8003f5c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8004540:	f000 faec 	bl	8004b1c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	f7ff fa5c 	bl	8003a0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004554:	6a38      	ldr	r0, [r7, #32]
 8004556:	f000 f8a9 	bl	80046ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800455a:	f7ff f86f 	bl	800363c <xTaskResumeAll>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10f      	bne.n	8004584 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8004564:	f000 faba 	bl	8004adc <vPortYield>
 8004568:	e00c      	b.n	8004584 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800456a:	6a38      	ldr	r0, [r7, #32]
 800456c:	f000 f89e 	bl	80046ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004570:	f7ff f864 	bl	800363c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8004574:	e75e      	b.n	8004434 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8004576:	6a38      	ldr	r0, [r7, #32]
 8004578:	f000 f898 	bl	80046ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800457c:	f7ff f85e 	bl	800363c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <xQueueGenericReceive+0x192>
		}
	}
 8004584:	e756      	b.n	8004434 <xQueueGenericReceive+0x40>
}
 8004586:	4618      	mov	r0, r3
 8004588:	3728      	adds	r7, #40	; 0x28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop

08004590 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10c      	bne.n	80045be <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d151      	bne.n	8004650 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fd2d 	bl	8004010 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	e048      	b.n	8004650 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d11a      	bne.n	80045fa <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	4610      	mov	r0, r2
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f7fb fe03 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	441a      	add	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d32f      	bcc.n	8004650 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	e02a      	b.n	8004650 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	4610      	mov	r0, r2
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	461a      	mov	r2, r3
 8004608:	f7fb fde8 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	425b      	negs	r3, r3
 8004616:	441a      	add	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d207      	bcs.n	8004638 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	425b      	negs	r3, r3
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d108      	bne.n	8004650 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
}
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d019      	beq.n	80046a6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	441a      	add	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d303      	bcc.n	8004694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	6838      	ldr	r0, [r7, #0]
 800469e:	4611      	mov	r1, r2
 80046a0:	461a      	mov	r2, r3
 80046a2:	f7fb fd9b 	bl	80001dc <memcpy>
	}
}
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046b4:	f000 fa22 	bl	8004afc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80046b8:	e014      	b.n	80046e4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3324      	adds	r3, #36	; 0x24
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff f9fe 	bl	8003ac8 <xTaskRemoveFromEventList>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80046d2:	f7ff fabf 	bl	8003c54 <vTaskMissedYield>
 80046d6:	e000      	b.n	80046da <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 80046d8:	e008      	b.n	80046ec <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dce6      	bgt.n	80046ba <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80046f4:	f000 fa12 	bl	8004b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046f8:	f000 fa00 	bl	8004afc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80046fc:	e014      	b.n	8004728 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00f      	beq.n	8004726 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3310      	adds	r3, #16
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff f9dc 	bl	8003ac8 <xTaskRemoveFromEventList>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8004716:	f7ff fa9d 	bl	8003c54 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	1e5a      	subs	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	645a      	str	r2, [r3, #68]	; 0x44
 8004724:	e000      	b.n	8004728 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8004726:	e003      	b.n	8004730 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	2b00      	cmp	r3, #0
 800472e:	dce6      	bgt.n	80046fe <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004736:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004738:	f000 f9f0 	bl	8004b1c <vPortExitCritical>
}
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop

08004744 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 800474c:	f000 f9d6 	bl	8004afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e001      	b.n	8004762 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004762:	f000 f9db 	bl	8004b1c <vPortExitCritical>

	return xReturn;
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8004778:	f000 f9c0 	bl	8004afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	429a      	cmp	r2, r3
 8004786:	d102      	bne.n	800478e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004788:	2301      	movs	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e001      	b.n	8004792 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004792:	f000 f9c3 	bl	8004b1c <vPortExitCritical>

	return xReturn;
 8004796:	68fb      	ldr	r3, [r7, #12]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047ae:	f000 f9a5 	bl	8004afc <vPortEnterCritical>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ba:	d102      	bne.n	80047c2 <vQueueWaitForMessageRestricted+0x22>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ca:	d102      	bne.n	80047d2 <vQueueWaitForMessageRestricted+0x32>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	649a      	str	r2, [r3, #72]	; 0x48
 80047d2:	f000 f9a3 	bl	8004b1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3324      	adds	r3, #36	; 0x24
 80047e2:	4618      	mov	r0, r3
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	f7ff f947 	bl	8003a78 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff5e 	bl	80046ac <prvUnlockQueue>
	}
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop

080047f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f103 0208 	add.w	r2, r3, #8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f103 0208 	add.w	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f103 0208 	add.w	r2, r3, #8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
}
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ae:	d103      	bne.n	80048b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e00c      	b.n	80048d2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3308      	adds	r3, #8
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e002      	b.n	80048c6 <vListInsert+0x2e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d9f6      	bls.n	80048c0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
}
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6852      	ldr	r2, [r2, #4]
 8004922:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d103      	bne.n	800493c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3b04      	subs	r3, #4
 800496c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b04      	subs	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3b04      	subs	r3, #4
 8004986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8004988:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <pxPortInitialiseStack+0x60>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3b14      	subs	r3, #20
 8004992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3b04      	subs	r3, #4
 800499e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f06f 0202 	mvn.w	r2, #2
 80049a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3b20      	subs	r3, #32
 80049ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049ae:	68fb      	ldr	r3, [r7, #12]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	080049c1 	.word	0x080049c1

080049c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <prvTaskExitError+0x1c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049cc:	d002      	beq.n	80049d4 <prvTaskExitError+0x14>
 80049ce:	f000 f8b7 	bl	8004b40 <ulPortSetInterruptMask>
 80049d2:	e7fe      	b.n	80049d2 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 80049d4:	f000 f8b4 	bl	8004b40 <ulPortSetInterruptMask>
	for( ;; );
 80049d8:	e7fe      	b.n	80049d8 <prvTaskExitError+0x18>
 80049da:	bf00      	nop
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <pxCurrentTCBConst2>)
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	6808      	ldr	r0, [r1, #0]
 80049e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ea:	f380 8809 	msr	PSP, r0
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f380 8811 	msr	BASEPRI, r0
 80049f6:	4770      	bx	lr

080049f8 <pxCurrentTCBConst2>:
 80049f8:	20000498 	.word	0x20000498

080049fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80049fc:	4803      	ldr	r0, [pc, #12]	; (8004a0c <prvPortStartFirstTask+0x10>)
 80049fe:	6800      	ldr	r0, [r0, #0]
 8004a00:	6800      	ldr	r0, [r0, #0]
 8004a02:	f380 8808 	msr	MSP, r0
 8004a06:	b662      	cpsie	i
 8004a08:	df00      	svc	0
 8004a0a:	bf00      	nop
 8004a0c:	e000ed08 	.word	0xe000ed08

08004a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <xPortStartScheduler+0xb4>)
 8004a18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <xPortStartScheduler+0xb8>)
 8004a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a3e:	4b23      	ldr	r3, [pc, #140]	; (8004acc <xPortStartScheduler+0xbc>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a44:	e009      	b.n	8004a5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a46:	4b21      	ldr	r3, [pc, #132]	; (8004acc <xPortStartScheduler+0xbc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1e5a      	subs	r2, r3, #1
 8004a4c:	4b1f      	ldr	r3, [pc, #124]	; (8004acc <xPortStartScheduler+0xbc>)
 8004a4e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	dbef      	blt.n	8004a46 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a66:	4b19      	ldr	r3, [pc, #100]	; (8004acc <xPortStartScheduler+0xbc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	4b17      	ldr	r3, [pc, #92]	; (8004acc <xPortStartScheduler+0xbc>)
 8004a6e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a70:	4b16      	ldr	r3, [pc, #88]	; (8004acc <xPortStartScheduler+0xbc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <xPortStartScheduler+0xbc>)
 8004a7a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <xPortStartScheduler+0xc0>)
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <xPortStartScheduler+0xc0>)
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004a8e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <xPortStartScheduler+0xc0>)
 8004a92:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <xPortStartScheduler+0xc0>)
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004a9a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a9c:	f000 f89a 	bl	8004bd4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <xPortStartScheduler+0xc4>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004aa6:	f000 f8af 	bl	8004c08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <xPortStartScheduler+0xc8>)
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <xPortStartScheduler+0xc8>)
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004ab4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ab6:	f7ff ffa1 	bl	80049fc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	e000e400 	.word	0xe000e400
 8004ac8:	20000594 	.word	0x20000594
 8004acc:	20000598 	.word	0x20000598
 8004ad0:	e000ed20 	.word	0xe000ed20
 8004ad4:	2000000c 	.word	0x2000000c
 8004ad8:	e000ef34 	.word	0xe000ef34

08004adc <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <vPortYield+0x1c>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8004ae8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004aec:	f3bf 8f6f 	isb	sy
}
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8004b00:	f000 f81e 	bl	8004b40 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8004b04:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <vPortEnterCritical+0x1c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <vPortEnterCritical+0x1c>)
 8004b0c:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8004b0e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004b12:	f3bf 8f6f 	isb	sy
}
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	2000000c 	.word	0x2000000c

08004b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <vPortExitCritical+0x20>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	1e5a      	subs	r2, r3, #1
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <vPortExitCritical+0x20>)
 8004b28:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <vPortExitCritical+0x20>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 8004b32:	2000      	movs	r0, #0
 8004b34:	f000 f80e 	bl	8004b54 <vPortClearInterruptMask>
	}
}
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	2000000c 	.word	0x2000000c

08004b40 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8004b40:	f3ef 8011 	mrs	r0, BASEPRI
 8004b44:	f04f 0150 	mov.w	r1, #80	; 0x50
 8004b48:	f381 8811 	msr	BASEPRI, r1
 8004b4c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bf00      	nop

08004b54 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8004b54:	f380 8811 	msr	BASEPRI, r0
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop

08004b5c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b5c:	f3ef 8009 	mrs	r0, PSP
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <pxCurrentTCBConst>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	f01e 0f10 	tst.w	lr, #16
 8004b68:	bf08      	it	eq
 8004b6a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b6e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b72:	6010      	str	r0, [r2, #0]
 8004b74:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b78:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b7c:	f380 8811 	msr	BASEPRI, r0
 8004b80:	f7fe feca 	bl	8003918 <vTaskSwitchContext>
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f380 8811 	msr	BASEPRI, r0
 8004b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	6808      	ldr	r0, [r1, #0]
 8004b94:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	f01e 0f10 	tst.w	lr, #16
 8004b9c:	bf08      	it	eq
 8004b9e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ba2:	f380 8809 	msr	PSP, r0
 8004ba6:	4770      	bx	lr

08004ba8 <pxCurrentTCBConst>:
 8004ba8:	20000498 	.word	0x20000498

08004bac <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8004bb0:	f7ff ffc6 	bl	8004b40 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bb4:	f7fe fdda 	bl	800376c <xTaskIncrementTick>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <SysTick_Handler+0x24>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f7ff ffc4 	bl	8004b54 <vPortClearInterruptMask>
}
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <vPortSetupTimerInterrupt+0x24>)
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <vPortSetupTimerInterrupt+0x28>)
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <vPortSetupTimerInterrupt+0x2c>)
 8004be0:	fba2 0201 	umull	r0, r2, r2, r1
 8004be4:	0992      	lsrs	r2, r2, #6
 8004be6:	3a01      	subs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <vPortSetupTimerInterrupt+0x30>)
 8004bec:	2207      	movs	r2, #7
 8004bee:	601a      	str	r2, [r3, #0]
}
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000e014 	.word	0xe000e014
 8004bfc:	20000004 	.word	0x20000004
 8004c00:	10624dd3 	.word	0x10624dd3
 8004c04:	e000e010 	.word	0xe000e010

08004c08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c18 <vPortEnableVFP+0x10>
 8004c0c:	6801      	ldr	r1, [r0, #0]
 8004c0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c12:	6001      	str	r1, [r0, #0]
 8004c14:	4770      	bx	lr
 8004c16:	0000      	.short	0x0000
 8004c18:	e000ed88 	.word	0xe000ed88

08004c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004c22:	f3ef 8305 	mrs	r3, IPSR
 8004c26:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	d90c      	bls.n	8004c48 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c2e:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <vPortValidateInterruptPriority+0x48>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4413      	add	r3, r2
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <vPortValidateInterruptPriority+0x4c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d202      	bcs.n	8004c48 <vPortValidateInterruptPriority+0x2c>
 8004c42:	f7ff ff7d 	bl	8004b40 <ulPortSetInterruptMask>
 8004c46:	e7fe      	b.n	8004c46 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c48:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <vPortValidateInterruptPriority+0x50>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <vPortValidateInterruptPriority+0x54>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d902      	bls.n	8004c5e <vPortValidateInterruptPriority+0x42>
 8004c58:	f7ff ff72 	bl	8004b40 <ulPortSetInterruptMask>
 8004c5c:	e7fe      	b.n	8004c5c <vPortValidateInterruptPriority+0x40>
	}
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	e000e3f0 	.word	0xe000e3f0
 8004c68:	20000594 	.word	0x20000594
 8004c6c:	e000ed0c 	.word	0xe000ed0c
 8004c70:	20000598 	.word	0x20000598

08004c74 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c7e:	f000 fa45 	bl	800510c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c82:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <xTimerCreateTimerTask+0x4c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00f      	beq.n	8004caa <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	2300      	movs	r3, #0
 8004c94:	9302      	str	r3, [sp, #8]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	480a      	ldr	r0, [pc, #40]	; (8004cc4 <xTimerCreateTimerTask+0x50>)
 8004c9c:	490a      	ldr	r1, [pc, #40]	; (8004cc8 <xTimerCreateTimerTask+0x54>)
 8004c9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f7fe fa42 	bl	800312c <xTaskGenericCreate>
 8004ca8:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <xTimerCreateTimerTask+0x42>
 8004cb0:	f7ff ff46 	bl	8004b40 <ulPortSetInterruptMask>
 8004cb4:	e7fe      	b.n	8004cb4 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8004cb6:	687b      	ldr	r3, [r7, #4]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	200005cc 	.word	0x200005cc
 8004cc4:	08004dc9 	.word	0x08004dc9
 8004cc8:	080083ec 	.word	0x080083ec

08004ccc <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <xTimerGenericCommand+0x88>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d030      	beq.n	8004d48 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11c      	bne.n	8004d32 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cf8:	f7ff f912 	bl	8003f20 <xTaskGetSchedulerState>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10b      	bne.n	8004d1a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <xTimerGenericCommand+0x88>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	f107 0310 	add.w	r3, r7, #16
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d10:	2300      	movs	r3, #0
 8004d12:	f7ff fa55 	bl	80041c0 <xQueueGenericSend>
 8004d16:	61f8      	str	r0, [r7, #28]
 8004d18:	e016      	b.n	8004d48 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d1a:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <xTimerGenericCommand+0x88>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	2200      	movs	r2, #0
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f7ff fa49 	bl	80041c0 <xQueueGenericSend>
 8004d2e:	61f8      	str	r0, [r7, #28]
 8004d30:	e00a      	b.n	8004d48 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <xTimerGenericCommand+0x88>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	f107 0310 	add.w	r3, r7, #16
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	2300      	movs	r3, #0
 8004d42:	f7ff faed 	bl	8004320 <xQueueGenericSendFromISR>
 8004d46:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8004d48:	69fb      	ldr	r3, [r7, #28]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200005cc 	.word	0x200005cc

08004d58 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <prvProcessExpiredTimer+0x6c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fdc9 	bl	8004908 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d11b      	bne.n	8004db6 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4413      	add	r3, r2
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f000 f8a9 	bl	8004ee4 <prvInsertTimerInActiveList>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10e      	bne.n	8004db6 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	2100      	movs	r1, #0
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	2300      	movs	r3, #0
 8004da4:	f7ff ff92 	bl	8004ccc <xTimerGenericCommand>
 8004da8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <prvProcessExpiredTimer+0x5e>
 8004db0:	f7ff fec6 	bl	8004b40 <ulPortSetInterruptMask>
 8004db4:	e7fe      	b.n	8004db4 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	4798      	blx	r3
}
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200005c4 	.word	0x200005c4

08004dc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f83f 	bl	8004e58 <prvGetNextExpireTime>
 8004dda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	4619      	mov	r1, r3
 8004de2:	f000 f803 	bl	8004dec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004de6:	f000 f8bf 	bl	8004f68 <prvProcessReceivedCommands>
	}
 8004dea:	e7f1      	b.n	8004dd0 <prvTimerTask+0x8>

08004dec <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004df6:	f7fe fc13 	bl	8003620 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f84e 	bl	8004ea0 <prvSampleTimeNow>
 8004e04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d11e      	bne.n	8004e4a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <prvProcessTimerOrBlockTask+0x3c>
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d806      	bhi.n	8004e28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e1a:	f7fe fc0f 	bl	800363c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	68f9      	ldr	r1, [r7, #12]
 8004e22:	f7ff ff99 	bl	8004d58 <prvProcessExpiredTimer>
 8004e26:	e012      	b.n	8004e4e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <prvProcessTimerOrBlockTask+0x68>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1acb      	subs	r3, r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	f7ff fcb3 	bl	80047a0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004e3a:	f7fe fbff 	bl	800363c <xTaskResumeAll>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8004e44:	f7ff fe4a 	bl	8004adc <vPortYield>
 8004e48:	e001      	b.n	8004e4e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004e4a:	f7fe fbf7 	bl	800363c <xTaskResumeAll>
		}
	}
}
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	200005cc 	.word	0x200005cc

08004e58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <prvGetNextExpireTime+0x44>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d105      	bne.n	8004e8a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <prvGetNextExpireTime+0x44>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e001      	b.n	8004e8e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	200005c4 	.word	0x200005c4

08004ea0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ea8:	f7fe fc4e 	bl	8003748 <xTaskGetTickCount>
 8004eac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <prvSampleTimeNow+0x40>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d208      	bcs.n	8004eca <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <prvSampleTimeNow+0x40>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f8cb 	bl	8005058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e002      	b.n	8004ed0 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <prvSampleTimeNow+0x40>)
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	200005d0 	.word	0x200005d0

08004ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d812      	bhi.n	8004f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e01b      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <prvInsertTimerInActiveList+0x7c>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7ff fcb5 	bl	8004898 <vListInsert>
 8004f2e:	e012      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d206      	bcs.n	8004f46 <prvInsertTimerInActiveList+0x62>
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e007      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvInsertTimerInActiveList+0x80>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f7ff fca1 	bl	8004898 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200005c8 	.word	0x200005c8
 8004f64:	200005c4 	.word	0x200005c4

08004f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f6e:	e060      	b.n	8005032 <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff fcc1 	bl	8004908 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff89 	bl	8004ea0 <prvSampleTimeNow>
 8004f8e:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d84c      	bhi.n	8005030 <prvProcessReceivedCommands+0xc8>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <prvProcessReceivedCommands+0x34>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08005031 	.word	0x08005031
 8004fa4:	08004fff 	.word	0x08004fff
 8004fa8:	08005029 	.word	0x08005029
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	69f8      	ldr	r0, [r7, #28]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	f7ff ff92 	bl	8004ee4 <prvInsertTimerInActiveList>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d11a      	bne.n	8004ffc <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	69f8      	ldr	r0, [r7, #28]
 8004fcc:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d112      	bne.n	8004ffc <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	4413      	add	r3, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	9200      	str	r2, [sp, #0]
 8004fe2:	69f8      	ldr	r0, [r7, #28]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f7ff fe6f 	bl	8004ccc <xTimerGenericCommand>
 8004fee:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <prvProcessReceivedCommands+0x94>
 8004ff6:	f7ff fda3 	bl	8004b40 <ulPortSetInterruptMask>
 8004ffa:	e7fe      	b.n	8004ffa <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 8004ffc:	e019      	b.n	8005032 <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <prvProcessReceivedCommands+0xaa>
 800500c:	f7ff fd98 	bl	8004b40 <ulPortSetInterruptMask>
 8005010:	e7fe      	b.n	8005010 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4413      	add	r3, r2
 800501a:	69f8      	ldr	r0, [r7, #28]
 800501c:	4619      	mov	r1, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f7ff ff5f 	bl	8004ee4 <prvInsertTimerInActiveList>
				break;
 8005026:	e004      	b.n	8005032 <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8005028:	69f8      	ldr	r0, [r7, #28]
 800502a:	f000 fa97 	bl	800555c <vPortFree>
				break;
 800502e:	e000      	b.n	8005032 <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 8005030:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <prvProcessReceivedCommands+0xec>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	f107 0308 	add.w	r3, r7, #8
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	2200      	movs	r2, #0
 8005040:	2300      	movs	r3, #0
 8005042:	f7ff f9d7 	bl	80043f4 <xQueueGenericReceive>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d191      	bne.n	8004f70 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200005cc 	.word	0x200005cc

08005058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af02      	add	r7, sp, #8
 800505e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005060:	e03d      	b.n	80050de <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005062:	4b28      	ldr	r3, [pc, #160]	; (8005104 <prvSwitchTimerLists+0xac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800506c:	4b25      	ldr	r3, [pc, #148]	; (8005104 <prvSwitchTimerLists+0xac>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	3304      	adds	r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fc44 	bl	8004908 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	69b8      	ldr	r0, [r7, #24]
 8005086:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d126      	bne.n	80050de <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d90e      	bls.n	80050c0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <prvSwitchTimerLists+0xac>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	f7ff fbed 	bl	8004898 <vListInsert>
 80050be:	e00e      	b.n	80050de <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80050c0:	2300      	movs	r3, #0
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	69b8      	ldr	r0, [r7, #24]
 80050c6:	2100      	movs	r1, #0
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	2300      	movs	r3, #0
 80050cc:	f7ff fdfe 	bl	8004ccc <xTimerGenericCommand>
 80050d0:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <prvSwitchTimerLists+0x86>
 80050d8:	f7ff fd32 	bl	8004b40 <ulPortSetInterruptMask>
 80050dc:	e7fe      	b.n	80050dc <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <prvSwitchTimerLists+0xac>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1bc      	bne.n	8005062 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <prvSwitchTimerLists+0xac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <prvSwitchTimerLists+0xb0>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b04      	ldr	r3, [pc, #16]	; (8005104 <prvSwitchTimerLists+0xac>)
 80050f4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <prvSwitchTimerLists+0xb0>)
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]
}
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200005c4 	.word	0x200005c4
 8005108:	200005c8 	.word	0x200005c8

0800510c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005110:	f7ff fcf4 	bl	8004afc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005114:	4b0d      	ldr	r3, [pc, #52]	; (800514c <prvCheckForValidListAndQueue+0x40>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d113      	bne.n	8005144 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 800511c:	480c      	ldr	r0, [pc, #48]	; (8005150 <prvCheckForValidListAndQueue+0x44>)
 800511e:	f7ff fb6b 	bl	80047f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005122:	480c      	ldr	r0, [pc, #48]	; (8005154 <prvCheckForValidListAndQueue+0x48>)
 8005124:	f7ff fb68 	bl	80047f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <prvCheckForValidListAndQueue+0x4c>)
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <prvCheckForValidListAndQueue+0x44>)
 800512c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <prvCheckForValidListAndQueue+0x50>)
 8005130:	4a08      	ldr	r2, [pc, #32]	; (8005154 <prvCheckForValidListAndQueue+0x48>)
 8005132:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8005134:	200a      	movs	r0, #10
 8005136:	210c      	movs	r1, #12
 8005138:	2200      	movs	r2, #0
 800513a:	f7fe ffff 	bl	800413c <xQueueGenericCreate>
 800513e:	4602      	mov	r2, r0
 8005140:	4b02      	ldr	r3, [pc, #8]	; (800514c <prvCheckForValidListAndQueue+0x40>)
 8005142:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8005144:	f7ff fcea 	bl	8004b1c <vPortExitCritical>
}
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200005cc 	.word	0x200005cc
 8005150:	2000059c 	.word	0x2000059c
 8005154:	200005b0 	.word	0x200005b0
 8005158:	200005c4 	.word	0x200005c4
 800515c:	200005c8 	.word	0x200005c8

08005160 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <FreeRTOS_CLIRegisterCommand+0x18>
 8005172:	f7ff fce5 	bl	8004b40 <ulPortSetInterruptMask>
 8005176:	e7fe      	b.n	8005176 <FreeRTOS_CLIRegisterCommand+0x16>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8005178:	2008      	movs	r0, #8
 800517a:	f000 f963 	bl	8005444 <pvPortMalloc>
 800517e:	60b8      	str	r0, [r7, #8]
	configASSERT( pxNewListItem );
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <FreeRTOS_CLIRegisterCommand+0x2c>
 8005186:	f7ff fcdb 	bl	8004b40 <ulPortSetInterruptMask>
 800518a:	e7fe      	b.n	800518a <FreeRTOS_CLIRegisterCommand+0x2a>

	if( pxNewListItem != NULL )
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d012      	beq.n	80051b8 <FreeRTOS_CLIRegisterCommand+0x58>
	{
		taskENTER_CRITICAL();
 8005192:	f7ff fcb3 	bl	8004afc <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2200      	movs	r2, #0
 80051a0:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <FreeRTOS_CLIRegisterCommand+0x64>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <FreeRTOS_CLIRegisterCommand+0x64>)
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 80051b0:	f7ff fcb4 	bl	8004b1c <vPortExitCritical>

		xReturn = pdPASS;
 80051b4:	2301      	movs	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000018 	.word	0x20000018

080051c8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
portBASE_TYPE xReturn = pdTRUE;
 80051d4:	2301      	movs	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80051d8:	4b3a      	ldr	r3, [pc, #232]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d141      	bne.n	8005264 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80051e0:	4b38      	ldr	r3, [pc, #224]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 80051e2:	4a39      	ldr	r2, [pc, #228]	; (80052c8 <FreeRTOS_CLIProcessCommand+0x100>)
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e039      	b.n	800525c <FreeRTOS_CLIProcessCommand+0x94>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80051f2:	69b8      	ldr	r0, [r7, #24]
 80051f4:	f002 fe3a 	bl	8007e6c <strlen>
 80051f8:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b25b      	sxtb	r3, r3
 8005204:	2b20      	cmp	r3, #32
 8005206:	d005      	beq.n	8005214 <FreeRTOS_CLIProcessCommand+0x4c>
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	4413      	add	r3, r2
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d11e      	bne.n	8005252 <FreeRTOS_CLIProcessCommand+0x8a>
			{
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	69b9      	ldr	r1, [r7, #24]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	f002 fe57 	bl	8007ecc <strncmp>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d116      	bne.n	8005252 <FreeRTOS_CLIProcessCommand+0x8a>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8005224:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	7b1b      	ldrb	r3, [r3, #12]
 800522c:	b25b      	sxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	db0e      	blt.n	8005250 <FreeRTOS_CLIProcessCommand+0x88>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f8d8 	bl	80053e8 <prvGetNumberOfParameters>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	4b21      	ldr	r3, [pc, #132]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	7b1b      	ldrb	r3, [r3, #12]
 8005244:	b25b      	sxtb	r3, r3
 8005246:	429a      	cmp	r2, r3
 8005248:	d002      	beq.n	8005250 <FreeRTOS_CLIProcessCommand+0x88>
						{
							xReturn = pdFALSE;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 800524e:	e009      	b.n	8005264 <FreeRTOS_CLIProcessCommand+0x9c>
 8005250:	e008      	b.n	8005264 <FreeRTOS_CLIProcessCommand+0x9c>
	thank one task. */

	if( pxCommand == NULL )
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1c1      	bne.n	80051e8 <FreeRTOS_CLIProcessCommand+0x20>
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8005264:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <FreeRTOS_CLIProcessCommand+0xbc>
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8005272:	68b8      	ldr	r0, [r7, #8]
 8005274:	4915      	ldr	r1, [pc, #84]	; (80052cc <FreeRTOS_CLIProcessCommand+0x104>)
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	f002 fe82 	bl	8007f80 <strncpy>
		pxCommand = NULL;
 800527c:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e01a      	b.n	80052ba <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8005284:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00f      	beq.n	80052ac <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800528c:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4798      	blx	r3
 800529c:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80052a4:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <FreeRTOS_CLIProcessCommand+0xfc>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e006      	b.n	80052ba <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( ( char * ) pcWriteBuffer, ( const char * const ) "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80052ac:	68b8      	ldr	r0, [r7, #8]
 80052ae:	4908      	ldr	r1, [pc, #32]	; (80052d0 <FreeRTOS_CLIProcessCommand+0x108>)
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	f002 fe65 	bl	8007f80 <strncpy>
		xReturn = pdFALSE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80052ba:	69fb      	ldr	r3, [r7, #28]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	200005d4 	.word	0x200005d4
 80052c8:	20000010 	.word	0x20000010
 80052cc:	0800842c 	.word	0x0800842c
 80052d0:	08008484 	.word	0x08008484

080052d4 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const int8_t *FreeRTOS_CLIGetParameter( const int8_t *pcCommandString, unsigned portBASE_TYPE uxWantedParameter, portBASE_TYPE *pxParameterStringLength )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
unsigned portBASE_TYPE uxParametersFound = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
const int8_t *pcReturn = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 80052ee:	e041      	b.n	8005374 <FreeRTOS_CLIGetParameter+0xa0>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80052f0:	e002      	b.n	80052f8 <FreeRTOS_CLIGetParameter+0x24>
		{
			pcCommandString++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]

	while( uxParametersFound < uxWantedParameter )
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <FreeRTOS_CLIGetParameter+0x36>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b25b      	sxtb	r3, r3
 8005306:	2b20      	cmp	r3, #32
 8005308:	d1f3      	bne.n	80052f2 <FreeRTOS_CLIGetParameter+0x1e>
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800530a:	e002      	b.n	8005312 <FreeRTOS_CLIGetParameter+0x3e>
		{
			pcCommandString++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
		{
			pcCommandString++;
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <FreeRTOS_CLIGetParameter+0x50>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b25b      	sxtb	r3, r3
 8005320:	2b20      	cmp	r3, #32
 8005322:	d0f3      	beq.n	800530c <FreeRTOS_CLIGetParameter+0x38>
		{
			pcCommandString++;
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d022      	beq.n	8005372 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	3301      	adds	r3, #1
 8005330:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	d11c      	bne.n	8005374 <FreeRTOS_CLIGetParameter+0xa0>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800533e:	e007      	b.n	8005350 <FreeRTOS_CLIGetParameter+0x7c>
				{
					( *pxParameterStringLength )++;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]

			if( uxParametersFound == uxWantedParameter )
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <FreeRTOS_CLIGetParameter+0x8e>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b25b      	sxtb	r3, r3
 800535e:	2b20      	cmp	r3, #32
 8005360:	d1ee      	bne.n	8005340 <FreeRTOS_CLIGetParameter+0x6c>
				{
					( *pxParameterStringLength )++;
					pcCommandString++;
				}

				if( *pxParameterStringLength == 0 )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <FreeRTOS_CLIGetParameter+0x9c>
				{
					pcReturn = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	613b      	str	r3, [r7, #16]
				}

				break;
 800536e:	e005      	b.n	800537c <FreeRTOS_CLIGetParameter+0xa8>
 8005370:	e004      	b.n	800537c <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 8005372:	e003      	b.n	800537c <FreeRTOS_CLIGetParameter+0xa8>
unsigned portBASE_TYPE uxParametersFound = 0;
const int8_t *pcReturn = NULL;

	*pxParameterStringLength = 0;

	while( uxParametersFound < uxWantedParameter )
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d3b9      	bcc.n	80052f0 <FreeRTOS_CLIGetParameter+0x1c>
		{
			break;
		}
	}

	return pcReturn;
 800537c:	693b      	ldr	r3, [r7, #16]
}
 800537e:	4618      	mov	r0, r3
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop

0800538c <prvHelpCommand>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
signed portBASE_TYPE xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <prvHelpCommand+0x54>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <prvHelpCommand+0x54>)
 80053a2:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <prvHelpCommand+0x58>)
 80053a4:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <prvHelpCommand+0x54>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	4619      	mov	r1, r3
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	f002 fde4 	bl	8007f80 <strncpy>
	pxCommand = pxCommand->pxNext;
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <prvHelpCommand+0x54>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <prvHelpCommand+0x54>)
 80053c0:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <prvHelpCommand+0x54>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e001      	b.n	80053d4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053d4:	697b      	ldr	r3, [r7, #20]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200005d8 	.word	0x200005d8
 80053e4:	20000010 	.word	0x20000010

080053e8 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	73fb      	strb	r3, [r7, #15]
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 80053f8:	e012      	b.n	8005420 <prvGetNumberOfParameters+0x38>
	{
		if( ( *pcCommandString ) == ' ' )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	b25b      	sxtb	r3, r3
 8005400:	2b20      	cmp	r3, #32
 8005402:	d108      	bne.n	8005416 <prvGetNumberOfParameters+0x2e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d007      	beq.n	800541a <prvGetNumberOfParameters+0x32>
			{
				cParameters++;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3301      	adds	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8005410:	2301      	movs	r3, #1
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	e001      	b.n	800541a <prvGetNumberOfParameters+0x32>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8005416:	2300      	movs	r3, #0
 8005418:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3301      	adds	r3, #1
 800541e:	607b      	str	r3, [r7, #4]
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e8      	bne.n	80053fa <prvGetNumberOfParameters+0x12>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d102      	bne.n	8005434 <prvGetNumberOfParameters+0x4c>
	{
		cParameters--;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3b01      	subs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	b25b      	sxtb	r3, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005450:	f7fe f8e6 	bl	8003620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005454:	4b3d      	ldr	r3, [pc, #244]	; (800554c <pvPortMalloc+0x108>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800545c:	f000 f8c8 	bl	80055f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005460:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <pvPortMalloc+0x10c>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d163      	bne.n	8005534 <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 8005472:	2308      	movs	r3, #8
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	3308      	adds	r3, #8
 800548c:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d04f      	beq.n	8005534 <pvPortMalloc+0xf0>
 8005494:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <pvPortMalloc+0x110>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d84a      	bhi.n	8005534 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800549e:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <pvPortMalloc+0x114>)
 80054a0:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80054a2:	4b2d      	ldr	r3, [pc, #180]	; (8005558 <pvPortMalloc+0x114>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a8:	e004      	b.n	80054b4 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d203      	bcs.n	80054c6 <pvPortMalloc+0x82>
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f1      	bne.n	80054aa <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <pvPortMalloc+0x108>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d031      	beq.n	8005534 <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2308      	movs	r3, #8
 80054d6:	4413      	add	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	1ad2      	subs	r2, r2, r3
 80054ea:	2308      	movs	r3, #8
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d90f      	bls.n	8005512 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4413      	add	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	1ad2      	subs	r2, r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800550c:	68b8      	ldr	r0, [r7, #8]
 800550e:	f000 f8bd 	bl	800568c <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005512:	4b10      	ldr	r3, [pc, #64]	; (8005554 <pvPortMalloc+0x110>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	1ad2      	subs	r2, r2, r3
 800551c:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <pvPortMalloc+0x110>)
 800551e:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <pvPortMalloc+0x10c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	431a      	orrs	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 8005534:	f7fe f882 	bl	800363c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800553e:	f7fd fcf7 	bl	8002f30 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	200131e4 	.word	0x200131e4
 8005550:	200131e8 	.word	0x200131e8
 8005554:	2000001c 	.word	0x2000001c
 8005558:	200131dc 	.word	0x200131dc

0800555c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d038      	beq.n	80055e0 <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800556e:	2308      	movs	r3, #8
 8005570:	425b      	negs	r3, r3
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <vPortFree+0x8c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <vPortFree+0x34>
 800558a:	f7ff fad9 	bl	8004b40 <ulPortSetInterruptMask>
 800558e:	e7fe      	b.n	800558e <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <vPortFree+0x42>
 8005598:	f7ff fad2 	bl	8004b40 <ulPortSetInterruptMask>
 800559c:	e7fe      	b.n	800559c <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <vPortFree+0x8c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d019      	beq.n	80055e0 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d115      	bne.n	80055e0 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <vPortFree+0x8c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	43db      	mvns	r3, r3
 80055be:	401a      	ands	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055c4:	f7fe f82c 	bl	8003620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <vPortFree+0x90>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	441a      	add	r2, r3
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <vPortFree+0x90>)
 80055d4:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 80055d6:	68b8      	ldr	r0, [r7, #8]
 80055d8:	f000 f858 	bl	800568c <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 80055dc:	f7fe f82e 	bl	800363c <xTaskResumeAll>
			}
		}
	}
}
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200131e8 	.word	0x200131e8
 80055ec:	2000001c 	.word	0x2000001c

080055f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 80055f6:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <prvHeapInit+0x84>)
 80055f8:	f023 0307 	bic.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055fe:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <prvHeapInit+0x88>)
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005604:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <prvHeapInit+0x88>)
 8005606:	2200      	movs	r2, #0
 8005608:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <prvHeapInit+0x8c>)
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 8005612:	2308      	movs	r3, #8
 8005614:	425b      	negs	r3, r3
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 800561c:	4b18      	ldr	r3, [pc, #96]	; (8005680 <prvHeapInit+0x90>)
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <prvHeapInit+0x90>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <prvHeapInit+0x44>
 800562e:	f7ff fa87 	bl	8004b40 <ulPortSetInterruptMask>
 8005632:	e7fe      	b.n	8005632 <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <prvHeapInit+0x90>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <prvHeapInit+0x90>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 8005648:	4a0c      	ldr	r2, [pc, #48]	; (800567c <prvHeapInit+0x8c>)
 800564a:	2308      	movs	r3, #8
 800564c:	1ad2      	subs	r2, r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005652:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <prvHeapInit+0x90>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <prvHeapInit+0x94>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	2308      	movs	r3, #8
 8005660:	1ad2      	subs	r2, r2, r3
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <prvHeapInit+0x94>)
 8005664:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <prvHeapInit+0x98>)
 8005668:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800566c:	601a      	str	r2, [r3, #0]
}
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	200005e4 	.word	0x200005e4
 8005678:	200131dc 	.word	0x200131dc
 800567c:	00012bf8 	.word	0x00012bf8
 8005680:	200131e4 	.word	0x200131e4
 8005684:	2000001c 	.word	0x2000001c
 8005688:	200131e8 	.word	0x200131e8

0800568c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005694:	4b27      	ldr	r3, [pc, #156]	; (8005734 <prvInsertBlockIntoFreeList+0xa8>)
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e002      	b.n	80056a0 <prvInsertBlockIntoFreeList+0x14>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3f7      	bcc.n	800569a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	441a      	add	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d108      	bne.n	80056ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	441a      	add	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d118      	bne.n	8005714 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <prvInsertBlockIntoFreeList+0xac>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d00d      	beq.n	800570a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	441a      	add	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e008      	b.n	800571c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <prvInsertBlockIntoFreeList+0xac>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e003      	b.n	800571c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d002      	beq.n	800572a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
	}
}
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	200131dc 	.word	0x200131dc
 8005738:	200131e4 	.word	0x200131e4

0800573c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800574a:	d013      	beq.n	8005774 <NVIC_PriorityGroupConfig+0x38>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005752:	d00f      	beq.n	8005774 <NVIC_PriorityGroupConfig+0x38>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800575a:	d00b      	beq.n	8005774 <NVIC_PriorityGroupConfig+0x38>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005762:	d007      	beq.n	8005774 <NVIC_PriorityGroupConfig+0x38>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576a:	d003      	beq.n	8005774 <NVIC_PriorityGroupConfig+0x38>
 800576c:	4806      	ldr	r0, [pc, #24]	; (8005788 <NVIC_PriorityGroupConfig+0x4c>)
 800576e:	2173      	movs	r1, #115	; 0x73
 8005770:	f7fd fbf2 	bl	8002f58 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005774:	4a05      	ldr	r2, [pc, #20]	; (800578c <NVIC_PriorityGroupConfig+0x50>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800577c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005780:	60d3      	str	r3, [r2, #12]
}
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	080084d4 	.word	0x080084d4
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005798:	2300      	movs	r3, #0
 800579a:	73fb      	strb	r3, [r7, #15]
 800579c:	2300      	movs	r3, #0
 800579e:	73bb      	strb	r3, [r7, #14]
 80057a0:	230f      	movs	r3, #15
 80057a2:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	78db      	ldrb	r3, [r3, #3]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <NVIC_Init+0x2c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	78db      	ldrb	r3, [r3, #3]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d003      	beq.n	80057bc <NVIC_Init+0x2c>
 80057b4:	4830      	ldr	r0, [pc, #192]	; (8005878 <NVIC_Init+0xe8>)
 80057b6:	2187      	movs	r1, #135	; 0x87
 80057b8:	f7fd fbce 	bl	8002f58 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b0f      	cmp	r3, #15
 80057c2:	d903      	bls.n	80057cc <NVIC_Init+0x3c>
 80057c4:	482c      	ldr	r0, [pc, #176]	; (8005878 <NVIC_Init+0xe8>)
 80057c6:	2188      	movs	r1, #136	; 0x88
 80057c8:	f7fd fbc6 	bl	8002f58 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	789b      	ldrb	r3, [r3, #2]
 80057d0:	2b0f      	cmp	r3, #15
 80057d2:	d903      	bls.n	80057dc <NVIC_Init+0x4c>
 80057d4:	4828      	ldr	r0, [pc, #160]	; (8005878 <NVIC_Init+0xe8>)
 80057d6:	2189      	movs	r1, #137	; 0x89
 80057d8:	f7fd fbbe 	bl	8002f58 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d037      	beq.n	8005854 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80057e4:	4b25      	ldr	r3, [pc, #148]	; (800587c <NVIC_Init+0xec>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	f1c3 0304 	rsb	r3, r3, #4
 80057f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80057fa:	7b7a      	ldrb	r2, [r7, #13]
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	fa42 f303 	asr.w	r3, r2, r3
 8005802:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	461a      	mov	r2, r3
 800580a:	7bbb      	ldrb	r3, [r7, #14]
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	789a      	ldrb	r2, [r3, #2]
 8005816:	7b7b      	ldrb	r3, [r7, #13]
 8005818:	4013      	ands	r3, r2
 800581a:	b2da      	uxtb	r2, r3
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	4313      	orrs	r3, r2
 8005820:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <NVIC_Init+0xf0>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	4413      	add	r3, r2
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <NVIC_Init+0xf0>)
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	7812      	ldrb	r2, [r2, #0]
 800583c:	0952      	lsrs	r2, r2, #5
 800583e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	7809      	ldrb	r1, [r1, #0]
 8005844:	f001 011f 	and.w	r1, r1, #31
 8005848:	2001      	movs	r0, #1
 800584a:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800584e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005852:	e00e      	b.n	8005872 <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <NVIC_Init+0xf0>)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	7812      	ldrb	r2, [r2, #0]
 800585a:	0952      	lsrs	r2, r2, #5
 800585c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	7809      	ldrb	r1, [r1, #0]
 8005862:	f001 011f 	and.w	r1, r1, #31
 8005866:	2001      	movs	r0, #1
 8005868:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800586c:	3220      	adds	r2, #32
 800586e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	080084d4 	.word	0x080084d4
 800587c:	e000ed00 	.word	0xe000ed00
 8005880:	e000e100 	.word	0xe000e100

08005884 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4b72      	ldr	r3, [pc, #456]	; (8005a58 <DMA_DeInit+0x1d4>)
 8005890:	429a      	cmp	r2, r3
 8005892:	d03f      	beq.n	8005914 <DMA_DeInit+0x90>
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4b71      	ldr	r3, [pc, #452]	; (8005a5c <DMA_DeInit+0x1d8>)
 8005898:	429a      	cmp	r2, r3
 800589a:	d03b      	beq.n	8005914 <DMA_DeInit+0x90>
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4b70      	ldr	r3, [pc, #448]	; (8005a60 <DMA_DeInit+0x1dc>)
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d037      	beq.n	8005914 <DMA_DeInit+0x90>
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <DMA_DeInit+0x1e0>)
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d033      	beq.n	8005914 <DMA_DeInit+0x90>
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	4b6e      	ldr	r3, [pc, #440]	; (8005a68 <DMA_DeInit+0x1e4>)
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d02f      	beq.n	8005914 <DMA_DeInit+0x90>
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4b6d      	ldr	r3, [pc, #436]	; (8005a6c <DMA_DeInit+0x1e8>)
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d02b      	beq.n	8005914 <DMA_DeInit+0x90>
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <DMA_DeInit+0x1ec>)
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d027      	beq.n	8005914 <DMA_DeInit+0x90>
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	4b6b      	ldr	r3, [pc, #428]	; (8005a74 <DMA_DeInit+0x1f0>)
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d023      	beq.n	8005914 <DMA_DeInit+0x90>
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4b6a      	ldr	r3, [pc, #424]	; (8005a78 <DMA_DeInit+0x1f4>)
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d01f      	beq.n	8005914 <DMA_DeInit+0x90>
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4b69      	ldr	r3, [pc, #420]	; (8005a7c <DMA_DeInit+0x1f8>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	d01b      	beq.n	8005914 <DMA_DeInit+0x90>
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4b68      	ldr	r3, [pc, #416]	; (8005a80 <DMA_DeInit+0x1fc>)
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d017      	beq.n	8005914 <DMA_DeInit+0x90>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4b67      	ldr	r3, [pc, #412]	; (8005a84 <DMA_DeInit+0x200>)
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d013      	beq.n	8005914 <DMA_DeInit+0x90>
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4b66      	ldr	r3, [pc, #408]	; (8005a88 <DMA_DeInit+0x204>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d00f      	beq.n	8005914 <DMA_DeInit+0x90>
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <DMA_DeInit+0x208>)
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d00b      	beq.n	8005914 <DMA_DeInit+0x90>
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4b64      	ldr	r3, [pc, #400]	; (8005a90 <DMA_DeInit+0x20c>)
 8005900:	429a      	cmp	r2, r3
 8005902:	d007      	beq.n	8005914 <DMA_DeInit+0x90>
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4b63      	ldr	r3, [pc, #396]	; (8005a94 <DMA_DeInit+0x210>)
 8005908:	429a      	cmp	r2, r3
 800590a:	d003      	beq.n	8005914 <DMA_DeInit+0x90>
 800590c:	4862      	ldr	r0, [pc, #392]	; (8005a98 <DMA_DeInit+0x214>)
 800590e:	21bf      	movs	r1, #191	; 0xbf
 8005910:	f7fd fb22 	bl	8002f58 <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 0201 	bic.w	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2221      	movs	r2, #33	; 0x21
 8005942:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4b44      	ldr	r3, [pc, #272]	; (8005a58 <DMA_DeInit+0x1d4>)
 8005948:	429a      	cmp	r2, r3
 800594a:	d103      	bne.n	8005954 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <DMA_DeInit+0x218>)
 800594e:	223d      	movs	r2, #61	; 0x3d
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	e07e      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	4b41      	ldr	r3, [pc, #260]	; (8005a5c <DMA_DeInit+0x1d8>)
 8005958:	429a      	cmp	r2, r3
 800595a:	d104      	bne.n	8005966 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800595c:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <DMA_DeInit+0x218>)
 800595e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	e075      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4b3d      	ldr	r3, [pc, #244]	; (8005a60 <DMA_DeInit+0x1dc>)
 800596a:	429a      	cmp	r2, r3
 800596c:	d104      	bne.n	8005978 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800596e:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <DMA_DeInit+0x218>)
 8005970:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005974:	609a      	str	r2, [r3, #8]
 8005976:	e06c      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4b3a      	ldr	r3, [pc, #232]	; (8005a64 <DMA_DeInit+0x1e0>)
 800597c:	429a      	cmp	r2, r3
 800597e:	d104      	bne.n	800598a <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005980:	4b46      	ldr	r3, [pc, #280]	; (8005a9c <DMA_DeInit+0x218>)
 8005982:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	e063      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <DMA_DeInit+0x1e4>)
 800598e:	429a      	cmp	r2, r3
 8005990:	d103      	bne.n	800599a <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005992:	4b42      	ldr	r3, [pc, #264]	; (8005a9c <DMA_DeInit+0x218>)
 8005994:	4a42      	ldr	r2, [pc, #264]	; (8005aa0 <DMA_DeInit+0x21c>)
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	e05b      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <DMA_DeInit+0x1e8>)
 800599e:	429a      	cmp	r2, r3
 80059a0:	d103      	bne.n	80059aa <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80059a2:	4b3e      	ldr	r3, [pc, #248]	; (8005a9c <DMA_DeInit+0x218>)
 80059a4:	4a3f      	ldr	r2, [pc, #252]	; (8005aa4 <DMA_DeInit+0x220>)
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e053      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <DMA_DeInit+0x1ec>)
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d103      	bne.n	80059ba <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80059b2:	4b3a      	ldr	r3, [pc, #232]	; (8005a9c <DMA_DeInit+0x218>)
 80059b4:	4a3c      	ldr	r2, [pc, #240]	; (8005aa8 <DMA_DeInit+0x224>)
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	e04b      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <DMA_DeInit+0x1f0>)
 80059be:	429a      	cmp	r2, r3
 80059c0:	d104      	bne.n	80059cc <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80059c2:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <DMA_DeInit+0x218>)
 80059c4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	e042      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <DMA_DeInit+0x1f4>)
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d103      	bne.n	80059dc <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80059d4:	4b35      	ldr	r3, [pc, #212]	; (8005aac <DMA_DeInit+0x228>)
 80059d6:	223d      	movs	r2, #61	; 0x3d
 80059d8:	609a      	str	r2, [r3, #8]
 80059da:	e03a      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4b27      	ldr	r3, [pc, #156]	; (8005a7c <DMA_DeInit+0x1f8>)
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d104      	bne.n	80059ee <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80059e4:	4b31      	ldr	r3, [pc, #196]	; (8005aac <DMA_DeInit+0x228>)
 80059e6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	e031      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <DMA_DeInit+0x1fc>)
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d104      	bne.n	8005a00 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80059f6:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <DMA_DeInit+0x228>)
 80059f8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	e028      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <DMA_DeInit+0x200>)
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d104      	bne.n	8005a12 <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8005a08:	4b28      	ldr	r3, [pc, #160]	; (8005aac <DMA_DeInit+0x228>)
 8005a0a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	e01f      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <DMA_DeInit+0x204>)
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d103      	bne.n	8005a22 <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <DMA_DeInit+0x228>)
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <DMA_DeInit+0x21c>)
 8005a1e:	60da      	str	r2, [r3, #12]
 8005a20:	e017      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <DMA_DeInit+0x208>)
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d103      	bne.n	8005a32 <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8005a2a:	4b20      	ldr	r3, [pc, #128]	; (8005aac <DMA_DeInit+0x228>)
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <DMA_DeInit+0x220>)
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	e00f      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <DMA_DeInit+0x20c>)
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d103      	bne.n	8005a42 <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <DMA_DeInit+0x228>)
 8005a3c:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <DMA_DeInit+0x224>)
 8005a3e:	60da      	str	r2, [r3, #12]
 8005a40:	e007      	b.n	8005a52 <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <DMA_DeInit+0x210>)
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d103      	bne.n	8005a52 <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <DMA_DeInit+0x228>)
 8005a4c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005a50:	60da      	str	r2, [r3, #12]
    }
  }
}
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40026010 	.word	0x40026010
 8005a5c:	40026028 	.word	0x40026028
 8005a60:	40026040 	.word	0x40026040
 8005a64:	40026058 	.word	0x40026058
 8005a68:	40026070 	.word	0x40026070
 8005a6c:	40026088 	.word	0x40026088
 8005a70:	400260a0 	.word	0x400260a0
 8005a74:	400260b8 	.word	0x400260b8
 8005a78:	40026410 	.word	0x40026410
 8005a7c:	40026428 	.word	0x40026428
 8005a80:	40026440 	.word	0x40026440
 8005a84:	40026458 	.word	0x40026458
 8005a88:	40026470 	.word	0x40026470
 8005a8c:	40026488 	.word	0x40026488
 8005a90:	400264a0 	.word	0x400264a0
 8005a94:	400264b8 	.word	0x400264b8
 8005a98:	0800851c 	.word	0x0800851c
 8005a9c:	40026000 	.word	0x40026000
 8005aa0:	2000003d 	.word	0x2000003d
 8005aa4:	20000f40 	.word	0x20000f40
 8005aa8:	203d0000 	.word	0x203d0000
 8005aac:	40026400 	.word	0x40026400

08005ab0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4b98      	ldr	r3, [pc, #608]	; (8005d24 <DMA_Init+0x274>)
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d040      	beq.n	8005b48 <DMA_Init+0x98>
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4b97      	ldr	r3, [pc, #604]	; (8005d28 <DMA_Init+0x278>)
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d03c      	beq.n	8005b48 <DMA_Init+0x98>
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4b96      	ldr	r3, [pc, #600]	; (8005d2c <DMA_Init+0x27c>)
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d038      	beq.n	8005b48 <DMA_Init+0x98>
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4b95      	ldr	r3, [pc, #596]	; (8005d30 <DMA_Init+0x280>)
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d034      	beq.n	8005b48 <DMA_Init+0x98>
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4b94      	ldr	r3, [pc, #592]	; (8005d34 <DMA_Init+0x284>)
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d030      	beq.n	8005b48 <DMA_Init+0x98>
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4b93      	ldr	r3, [pc, #588]	; (8005d38 <DMA_Init+0x288>)
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d02c      	beq.n	8005b48 <DMA_Init+0x98>
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4b92      	ldr	r3, [pc, #584]	; (8005d3c <DMA_Init+0x28c>)
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d028      	beq.n	8005b48 <DMA_Init+0x98>
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4b91      	ldr	r3, [pc, #580]	; (8005d40 <DMA_Init+0x290>)
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d024      	beq.n	8005b48 <DMA_Init+0x98>
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4b90      	ldr	r3, [pc, #576]	; (8005d44 <DMA_Init+0x294>)
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d020      	beq.n	8005b48 <DMA_Init+0x98>
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4b8f      	ldr	r3, [pc, #572]	; (8005d48 <DMA_Init+0x298>)
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d01c      	beq.n	8005b48 <DMA_Init+0x98>
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4b8e      	ldr	r3, [pc, #568]	; (8005d4c <DMA_Init+0x29c>)
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d018      	beq.n	8005b48 <DMA_Init+0x98>
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4b8d      	ldr	r3, [pc, #564]	; (8005d50 <DMA_Init+0x2a0>)
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d014      	beq.n	8005b48 <DMA_Init+0x98>
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4b8c      	ldr	r3, [pc, #560]	; (8005d54 <DMA_Init+0x2a4>)
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d010      	beq.n	8005b48 <DMA_Init+0x98>
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4b8b      	ldr	r3, [pc, #556]	; (8005d58 <DMA_Init+0x2a8>)
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d00c      	beq.n	8005b48 <DMA_Init+0x98>
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4b8a      	ldr	r3, [pc, #552]	; (8005d5c <DMA_Init+0x2ac>)
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d008      	beq.n	8005b48 <DMA_Init+0x98>
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4b89      	ldr	r3, [pc, #548]	; (8005d60 <DMA_Init+0x2b0>)
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d004      	beq.n	8005b48 <DMA_Init+0x98>
 8005b3e:	4889      	ldr	r0, [pc, #548]	; (8005d64 <DMA_Init+0x2b4>)
 8005b40:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8005b44:	f7fd fa08 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d027      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b58:	d022      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b62:	d01d      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005b6c:	d018      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b76:	d013      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005b80:	d00e      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b8a:	d009      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005b94:	d004      	beq.n	8005ba0 <DMA_Init+0xf0>
 8005b96:	4873      	ldr	r0, [pc, #460]	; (8005d64 <DMA_Init+0x2b4>)
 8005b98:	f240 113d 	movw	r1, #317	; 0x13d
 8005b9c:	f7fd f9dc 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00c      	beq.n	8005bc2 <DMA_Init+0x112>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d008      	beq.n	8005bc2 <DMA_Init+0x112>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d004      	beq.n	8005bc2 <DMA_Init+0x112>
 8005bb8:	486a      	ldr	r0, [pc, #424]	; (8005d64 <DMA_Init+0x2b4>)
 8005bba:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005bbe:	f7fd f9cb 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <DMA_Init+0x124>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd2:	d304      	bcc.n	8005bde <DMA_Init+0x12e>
 8005bd4:	4863      	ldr	r0, [pc, #396]	; (8005d64 <DMA_Init+0x2b4>)
 8005bd6:	f240 113f 	movw	r1, #319	; 0x13f
 8005bda:	f7fd f9bd 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be6:	d008      	beq.n	8005bfa <DMA_Init+0x14a>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <DMA_Init+0x14a>
 8005bf0:	485c      	ldr	r0, [pc, #368]	; (8005d64 <DMA_Init+0x2b4>)
 8005bf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bf6:	f7fd f9af 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d008      	beq.n	8005c16 <DMA_Init+0x166>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <DMA_Init+0x166>
 8005c0c:	4855      	ldr	r0, [pc, #340]	; (8005d64 <DMA_Init+0x2b4>)
 8005c0e:	f240 1141 	movw	r1, #321	; 0x141
 8005c12:	f7fd f9a1 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <DMA_Init+0x18c>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c26:	d009      	beq.n	8005c3c <DMA_Init+0x18c>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c30:	d004      	beq.n	8005c3c <DMA_Init+0x18c>
 8005c32:	484c      	ldr	r0, [pc, #304]	; (8005d64 <DMA_Init+0x2b4>)
 8005c34:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005c38:	f7fd f98e 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00e      	beq.n	8005c62 <DMA_Init+0x1b2>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4c:	d009      	beq.n	8005c62 <DMA_Init+0x1b2>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c56:	d004      	beq.n	8005c62 <DMA_Init+0x1b2>
 8005c58:	4842      	ldr	r0, [pc, #264]	; (8005d64 <DMA_Init+0x2b4>)
 8005c5a:	f240 1143 	movw	r1, #323	; 0x143
 8005c5e:	f7fd f97b 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <DMA_Init+0x1ce>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c72:	d004      	beq.n	8005c7e <DMA_Init+0x1ce>
 8005c74:	483b      	ldr	r0, [pc, #236]	; (8005d64 <DMA_Init+0x2b4>)
 8005c76:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005c7a:	f7fd f96d 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d013      	beq.n	8005cae <DMA_Init+0x1fe>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8e:	d00e      	beq.n	8005cae <DMA_Init+0x1fe>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c98:	d009      	beq.n	8005cae <DMA_Init+0x1fe>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ca2:	d004      	beq.n	8005cae <DMA_Init+0x1fe>
 8005ca4:	482f      	ldr	r0, [pc, #188]	; (8005d64 <DMA_Init+0x2b4>)
 8005ca6:	f240 1145 	movw	r1, #325	; 0x145
 8005caa:	f7fd f955 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <DMA_Init+0x218>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d004      	beq.n	8005cc8 <DMA_Init+0x218>
 8005cbe:	4829      	ldr	r0, [pc, #164]	; (8005d64 <DMA_Init+0x2b4>)
 8005cc0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005cc4:	f7fd f948 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <DMA_Init+0x242>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d00c      	beq.n	8005cf2 <DMA_Init+0x242>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d008      	beq.n	8005cf2 <DMA_Init+0x242>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d004      	beq.n	8005cf2 <DMA_Init+0x242>
 8005ce8:	481e      	ldr	r0, [pc, #120]	; (8005d64 <DMA_Init+0x2b4>)
 8005cea:	f240 1147 	movw	r1, #327	; 0x147
 8005cee:	f7fd f933 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d036      	beq.n	8005d68 <DMA_Init+0x2b8>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d02:	d031      	beq.n	8005d68 <DMA_Init+0x2b8>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d0c:	d02c      	beq.n	8005d68 <DMA_Init+0x2b8>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d16:	d027      	beq.n	8005d68 <DMA_Init+0x2b8>
 8005d18:	4812      	ldr	r0, [pc, #72]	; (8005d64 <DMA_Init+0x2b4>)
 8005d1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d1e:	f7fd f91b 	bl	8002f58 <assert_failed>
 8005d22:	e021      	b.n	8005d68 <DMA_Init+0x2b8>
 8005d24:	40026010 	.word	0x40026010
 8005d28:	40026028 	.word	0x40026028
 8005d2c:	40026040 	.word	0x40026040
 8005d30:	40026058 	.word	0x40026058
 8005d34:	40026070 	.word	0x40026070
 8005d38:	40026088 	.word	0x40026088
 8005d3c:	400260a0 	.word	0x400260a0
 8005d40:	400260b8 	.word	0x400260b8
 8005d44:	40026410 	.word	0x40026410
 8005d48:	40026428 	.word	0x40026428
 8005d4c:	40026440 	.word	0x40026440
 8005d50:	40026458 	.word	0x40026458
 8005d54:	40026470 	.word	0x40026470
 8005d58:	40026488 	.word	0x40026488
 8005d5c:	400264a0 	.word	0x400264a0
 8005d60:	400264b8 	.word	0x400264b8
 8005d64:	0800851c 	.word	0x0800851c
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d013      	beq.n	8005d98 <DMA_Init+0x2e8>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d78:	d00e      	beq.n	8005d98 <DMA_Init+0x2e8>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d82:	d009      	beq.n	8005d98 <DMA_Init+0x2e8>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d8c:	d004      	beq.n	8005d98 <DMA_Init+0x2e8>
 8005d8e:	4828      	ldr	r0, [pc, #160]	; (8005e30 <DMA_Init+0x380>)
 8005d90:	f240 1149 	movw	r1, #329	; 0x149
 8005d94:	f7fd f8e0 	bl	8002f58 <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4b24      	ldr	r3, [pc, #144]	; (8005e34 <DMA_Init+0x384>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005db4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005dc0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005dcc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005dd8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f023 0307 	bic.w	r3, r3, #7
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	4313      	orrs	r3, r2
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60da      	str	r2, [r3, #12]
}
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	0800851c 	.word	0x0800851c
 8005e34:	f01c803f 	.word	0xf01c803f

08005e38 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <DMA_Cmd+0xd4>)
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d040      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <DMA_Cmd+0xd8>)
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d03c      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	; (8005f80 <DMA_Cmd+0xdc>)
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d038      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <DMA_Cmd+0xe0>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d034      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <DMA_Cmd+0xe4>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d030      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4b2c      	ldr	r3, [pc, #176]	; (8005f8c <DMA_Cmd+0xe8>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d02c      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	4b2b      	ldr	r3, [pc, #172]	; (8005f90 <DMA_Cmd+0xec>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d028      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4b2a      	ldr	r3, [pc, #168]	; (8005f94 <DMA_Cmd+0xf0>)
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d024      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4b29      	ldr	r3, [pc, #164]	; (8005f98 <DMA_Cmd+0xf4>)
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d020      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	4b28      	ldr	r3, [pc, #160]	; (8005f9c <DMA_Cmd+0xf8>)
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d01c      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <DMA_Cmd+0xfc>)
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d018      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <DMA_Cmd+0x100>)
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d014      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <DMA_Cmd+0x104>)
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d010      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4b24      	ldr	r3, [pc, #144]	; (8005fac <DMA_Cmd+0x108>)
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d00c      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <DMA_Cmd+0x10c>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d008      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <DMA_Cmd+0x110>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d004      	beq.n	8005f3a <DMA_Cmd+0x96>
 8005f30:	4821      	ldr	r0, [pc, #132]	; (8005fb8 <DMA_Cmd+0x114>)
 8005f32:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f36:	f7fd f80f 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <DMA_Cmd+0xac>
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d004      	beq.n	8005f50 <DMA_Cmd+0xac>
 8005f46:	481c      	ldr	r0, [pc, #112]	; (8005fb8 <DMA_Cmd+0x114>)
 8005f48:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005f4c:	f7fd f804 	bl	8002f58 <assert_failed>

  if (NewState != DISABLE)
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f043 0201 	orr.w	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e005      	b.n	8005f70 <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f023 0201 	bic.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
  }
}
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40026010 	.word	0x40026010
 8005f7c:	40026028 	.word	0x40026028
 8005f80:	40026040 	.word	0x40026040
 8005f84:	40026058 	.word	0x40026058
 8005f88:	40026070 	.word	0x40026070
 8005f8c:	40026088 	.word	0x40026088
 8005f90:	400260a0 	.word	0x400260a0
 8005f94:	400260b8 	.word	0x400260b8
 8005f98:	40026410 	.word	0x40026410
 8005f9c:	40026428 	.word	0x40026428
 8005fa0:	40026440 	.word	0x40026440
 8005fa4:	40026458 	.word	0x40026458
 8005fa8:	40026470 	.word	0x40026470
 8005fac:	40026488 	.word	0x40026488
 8005fb0:	400264a0 	.word	0x400264a0
 8005fb4:	400264b8 	.word	0x400264b8
 8005fb8:	0800851c 	.word	0x0800851c

08005fbc <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4b25      	ldr	r3, [pc, #148]	; (8006060 <DMA_SetCurrDataCounter+0xa4>)
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d040      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4b24      	ldr	r3, [pc, #144]	; (8006064 <DMA_SetCurrDataCounter+0xa8>)
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d03c      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4b23      	ldr	r3, [pc, #140]	; (8006068 <DMA_SetCurrDataCounter+0xac>)
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d038      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <DMA_SetCurrDataCounter+0xb0>)
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d034      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4b21      	ldr	r3, [pc, #132]	; (8006070 <DMA_SetCurrDataCounter+0xb4>)
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d030      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <DMA_SetCurrDataCounter+0xb8>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d02c      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	; (8006078 <DMA_SetCurrDataCounter+0xbc>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d028      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4b1e      	ldr	r3, [pc, #120]	; (800607c <DMA_SetCurrDataCounter+0xc0>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d024      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <DMA_SetCurrDataCounter+0xc4>)
 800600c:	429a      	cmp	r2, r3
 800600e:	d020      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <DMA_SetCurrDataCounter+0xc8>)
 8006014:	429a      	cmp	r2, r3
 8006016:	d01c      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <DMA_SetCurrDataCounter+0xcc>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d018      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4b1a      	ldr	r3, [pc, #104]	; (800608c <DMA_SetCurrDataCounter+0xd0>)
 8006024:	429a      	cmp	r2, r3
 8006026:	d014      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4b19      	ldr	r3, [pc, #100]	; (8006090 <DMA_SetCurrDataCounter+0xd4>)
 800602c:	429a      	cmp	r2, r3
 800602e:	d010      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4b18      	ldr	r3, [pc, #96]	; (8006094 <DMA_SetCurrDataCounter+0xd8>)
 8006034:	429a      	cmp	r2, r3
 8006036:	d00c      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	4b17      	ldr	r3, [pc, #92]	; (8006098 <DMA_SetCurrDataCounter+0xdc>)
 800603c:	429a      	cmp	r2, r3
 800603e:	d008      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4b16      	ldr	r3, [pc, #88]	; (800609c <DMA_SetCurrDataCounter+0xe0>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d004      	beq.n	8006052 <DMA_SetCurrDataCounter+0x96>
 8006048:	4815      	ldr	r0, [pc, #84]	; (80060a0 <DMA_SetCurrDataCounter+0xe4>)
 800604a:	f240 2175 	movw	r1, #629	; 0x275
 800604e:	f7fc ff83 	bl	8002f58 <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8006052:	887a      	ldrh	r2, [r7, #2]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	605a      	str	r2, [r3, #4]
}
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40026010 	.word	0x40026010
 8006064:	40026028 	.word	0x40026028
 8006068:	40026040 	.word	0x40026040
 800606c:	40026058 	.word	0x40026058
 8006070:	40026070 	.word	0x40026070
 8006074:	40026088 	.word	0x40026088
 8006078:	400260a0 	.word	0x400260a0
 800607c:	400260b8 	.word	0x400260b8
 8006080:	40026410 	.word	0x40026410
 8006084:	40026428 	.word	0x40026428
 8006088:	40026440 	.word	0x40026440
 800608c:	40026458 	.word	0x40026458
 8006090:	40026470 	.word	0x40026470
 8006094:	40026488 	.word	0x40026488
 8006098:	400264a0 	.word	0x400264a0
 800609c:	400264b8 	.word	0x400264b8
 80060a0:	0800851c 	.word	0x0800851c

080060a4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4b2a      	ldr	r3, [pc, #168]	; (800615c <DMA_GetCmdStatus+0xb8>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d040      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	4b29      	ldr	r3, [pc, #164]	; (8006160 <DMA_GetCmdStatus+0xbc>)
 80060bc:	429a      	cmp	r2, r3
 80060be:	d03c      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4b28      	ldr	r3, [pc, #160]	; (8006164 <DMA_GetCmdStatus+0xc0>)
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d038      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4b27      	ldr	r3, [pc, #156]	; (8006168 <DMA_GetCmdStatus+0xc4>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d034      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4b26      	ldr	r3, [pc, #152]	; (800616c <DMA_GetCmdStatus+0xc8>)
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d030      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	4b25      	ldr	r3, [pc, #148]	; (8006170 <DMA_GetCmdStatus+0xcc>)
 80060dc:	429a      	cmp	r2, r3
 80060de:	d02c      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <DMA_GetCmdStatus+0xd0>)
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d028      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4b23      	ldr	r3, [pc, #140]	; (8006178 <DMA_GetCmdStatus+0xd4>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d024      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	4b22      	ldr	r3, [pc, #136]	; (800617c <DMA_GetCmdStatus+0xd8>)
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d020      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4b21      	ldr	r3, [pc, #132]	; (8006180 <DMA_GetCmdStatus+0xdc>)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d01c      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <DMA_GetCmdStatus+0xe0>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d018      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4b1f      	ldr	r3, [pc, #124]	; (8006188 <DMA_GetCmdStatus+0xe4>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d014      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4b1e      	ldr	r3, [pc, #120]	; (800618c <DMA_GetCmdStatus+0xe8>)
 8006114:	429a      	cmp	r2, r3
 8006116:	d010      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4b1d      	ldr	r3, [pc, #116]	; (8006190 <DMA_GetCmdStatus+0xec>)
 800611c:	429a      	cmp	r2, r3
 800611e:	d00c      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <DMA_GetCmdStatus+0xf0>)
 8006124:	429a      	cmp	r2, r3
 8006126:	d008      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <DMA_GetCmdStatus+0xf4>)
 800612c:	429a      	cmp	r2, r3
 800612e:	d004      	beq.n	800613a <DMA_GetCmdStatus+0x96>
 8006130:	481a      	ldr	r0, [pc, #104]	; (800619c <DMA_GetCmdStatus+0xf8>)
 8006132:	f240 31a2 	movw	r1, #930	; 0x3a2
 8006136:	f7fc ff0f 	bl	8002f58 <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8006146:	2301      	movs	r3, #1
 8006148:	73fb      	strb	r3, [r7, #15]
 800614a:	e001      	b.n	8006150 <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800614c:	2300      	movs	r3, #0
 800614e:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40026010 	.word	0x40026010
 8006160:	40026028 	.word	0x40026028
 8006164:	40026040 	.word	0x40026040
 8006168:	40026058 	.word	0x40026058
 800616c:	40026070 	.word	0x40026070
 8006170:	40026088 	.word	0x40026088
 8006174:	400260a0 	.word	0x400260a0
 8006178:	400260b8 	.word	0x400260b8
 800617c:	40026410 	.word	0x40026410
 8006180:	40026428 	.word	0x40026428
 8006184:	40026440 	.word	0x40026440
 8006188:	40026458 	.word	0x40026458
 800618c:	40026470 	.word	0x40026470
 8006190:	40026488 	.word	0x40026488
 8006194:	400264a0 	.word	0x400264a0
 8006198:	400264b8 	.word	0x400264b8
 800619c:	0800851c 	.word	0x0800851c

080061a0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4b45      	ldr	r3, [pc, #276]	; (80062c8 <DMA_ITConfig+0x128>)
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d040      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4b44      	ldr	r3, [pc, #272]	; (80062cc <DMA_ITConfig+0x12c>)
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d03c      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4b43      	ldr	r3, [pc, #268]	; (80062d0 <DMA_ITConfig+0x130>)
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d038      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4b42      	ldr	r3, [pc, #264]	; (80062d4 <DMA_ITConfig+0x134>)
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d034      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <DMA_ITConfig+0x138>)
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d030      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4b40      	ldr	r3, [pc, #256]	; (80062dc <DMA_ITConfig+0x13c>)
 80061da:	429a      	cmp	r2, r3
 80061dc:	d02c      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <DMA_ITConfig+0x140>)
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d028      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4b3e      	ldr	r3, [pc, #248]	; (80062e4 <DMA_ITConfig+0x144>)
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d024      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <DMA_ITConfig+0x148>)
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d020      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4b3c      	ldr	r3, [pc, #240]	; (80062ec <DMA_ITConfig+0x14c>)
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d01c      	beq.n	8006238 <DMA_ITConfig+0x98>
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4b3b      	ldr	r3, [pc, #236]	; (80062f0 <DMA_ITConfig+0x150>)
 8006202:	429a      	cmp	r2, r3
 8006204:	d018      	beq.n	8006238 <DMA_ITConfig+0x98>
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4b3a      	ldr	r3, [pc, #232]	; (80062f4 <DMA_ITConfig+0x154>)
 800620a:	429a      	cmp	r2, r3
 800620c:	d014      	beq.n	8006238 <DMA_ITConfig+0x98>
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4b39      	ldr	r3, [pc, #228]	; (80062f8 <DMA_ITConfig+0x158>)
 8006212:	429a      	cmp	r2, r3
 8006214:	d010      	beq.n	8006238 <DMA_ITConfig+0x98>
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4b38      	ldr	r3, [pc, #224]	; (80062fc <DMA_ITConfig+0x15c>)
 800621a:	429a      	cmp	r2, r3
 800621c:	d00c      	beq.n	8006238 <DMA_ITConfig+0x98>
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4b37      	ldr	r3, [pc, #220]	; (8006300 <DMA_ITConfig+0x160>)
 8006222:	429a      	cmp	r2, r3
 8006224:	d008      	beq.n	8006238 <DMA_ITConfig+0x98>
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4b36      	ldr	r3, [pc, #216]	; (8006304 <DMA_ITConfig+0x164>)
 800622a:	429a      	cmp	r2, r3
 800622c:	d004      	beq.n	8006238 <DMA_ITConfig+0x98>
 800622e:	4836      	ldr	r0, [pc, #216]	; (8006308 <DMA_ITConfig+0x168>)
 8006230:	f240 414f 	movw	r1, #1103	; 0x44f
 8006234:	f7fc fe90 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <DMA_ITConfig+0xa8>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <DMA_ITConfig+0xb2>
 8006248:	482f      	ldr	r0, [pc, #188]	; (8006308 <DMA_ITConfig+0x168>)
 800624a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800624e:	f7fc fe83 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <DMA_ITConfig+0xc8>
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d004      	beq.n	8006268 <DMA_ITConfig+0xc8>
 800625e:	482a      	ldr	r0, [pc, #168]	; (8006308 <DMA_ITConfig+0x168>)
 8006260:	f240 4151 	movw	r1, #1105	; 0x451
 8006264:	f7fc fe78 	bl	8002f58 <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00f      	beq.n	8006292 <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	615a      	str	r2, [r3, #20]
 8006284:	e005      	b.n	8006292 <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d014      	beq.n	80062c2 <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f003 031e 	and.w	r3, r3, #30
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e008      	b.n	80062c2 <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 031e 	and.w	r3, r3, #30
 80062ba:	43db      	mvns	r3, r3
 80062bc:	401a      	ands	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40026010 	.word	0x40026010
 80062cc:	40026028 	.word	0x40026028
 80062d0:	40026040 	.word	0x40026040
 80062d4:	40026058 	.word	0x40026058
 80062d8:	40026070 	.word	0x40026070
 80062dc:	40026088 	.word	0x40026088
 80062e0:	400260a0 	.word	0x400260a0
 80062e4:	400260b8 	.word	0x400260b8
 80062e8:	40026410 	.word	0x40026410
 80062ec:	40026428 	.word	0x40026428
 80062f0:	40026440 	.word	0x40026440
 80062f4:	40026458 	.word	0x40026458
 80062f8:	40026470 	.word	0x40026470
 80062fc:	40026488 	.word	0x40026488
 8006300:	400264a0 	.word	0x400264a0
 8006304:	400264b8 	.word	0x400264b8
 8006308:	0800851c 	.word	0x0800851c

0800630c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8006316:	2300      	movs	r3, #0
 8006318:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4b97      	ldr	r3, [pc, #604]	; (8006584 <DMA_GetITStatus+0x278>)
 8006326:	429a      	cmp	r2, r3
 8006328:	d040      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	4b96      	ldr	r3, [pc, #600]	; (8006588 <DMA_GetITStatus+0x27c>)
 800632e:	429a      	cmp	r2, r3
 8006330:	d03c      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4b95      	ldr	r3, [pc, #596]	; (800658c <DMA_GetITStatus+0x280>)
 8006336:	429a      	cmp	r2, r3
 8006338:	d038      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4b94      	ldr	r3, [pc, #592]	; (8006590 <DMA_GetITStatus+0x284>)
 800633e:	429a      	cmp	r2, r3
 8006340:	d034      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4b93      	ldr	r3, [pc, #588]	; (8006594 <DMA_GetITStatus+0x288>)
 8006346:	429a      	cmp	r2, r3
 8006348:	d030      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4b92      	ldr	r3, [pc, #584]	; (8006598 <DMA_GetITStatus+0x28c>)
 800634e:	429a      	cmp	r2, r3
 8006350:	d02c      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	4b91      	ldr	r3, [pc, #580]	; (800659c <DMA_GetITStatus+0x290>)
 8006356:	429a      	cmp	r2, r3
 8006358:	d028      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4b90      	ldr	r3, [pc, #576]	; (80065a0 <DMA_GetITStatus+0x294>)
 800635e:	429a      	cmp	r2, r3
 8006360:	d024      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4b8f      	ldr	r3, [pc, #572]	; (80065a4 <DMA_GetITStatus+0x298>)
 8006366:	429a      	cmp	r2, r3
 8006368:	d020      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4b8e      	ldr	r3, [pc, #568]	; (80065a8 <DMA_GetITStatus+0x29c>)
 800636e:	429a      	cmp	r2, r3
 8006370:	d01c      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <DMA_GetITStatus+0x2a0>)
 8006376:	429a      	cmp	r2, r3
 8006378:	d018      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4b8c      	ldr	r3, [pc, #560]	; (80065b0 <DMA_GetITStatus+0x2a4>)
 800637e:	429a      	cmp	r2, r3
 8006380:	d014      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4b8b      	ldr	r3, [pc, #556]	; (80065b4 <DMA_GetITStatus+0x2a8>)
 8006386:	429a      	cmp	r2, r3
 8006388:	d010      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4b8a      	ldr	r3, [pc, #552]	; (80065b8 <DMA_GetITStatus+0x2ac>)
 800638e:	429a      	cmp	r2, r3
 8006390:	d00c      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4b89      	ldr	r3, [pc, #548]	; (80065bc <DMA_GetITStatus+0x2b0>)
 8006396:	429a      	cmp	r2, r3
 8006398:	d008      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4b88      	ldr	r3, [pc, #544]	; (80065c0 <DMA_GetITStatus+0x2b4>)
 800639e:	429a      	cmp	r2, r3
 80063a0:	d004      	beq.n	80063ac <DMA_GetITStatus+0xa0>
 80063a2:	4888      	ldr	r0, [pc, #544]	; (80065c4 <DMA_GetITStatus+0x2b8>)
 80063a4:	f240 4187 	movw	r1, #1159	; 0x487
 80063a8:	f7fc fdd6 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	4b86      	ldr	r3, [pc, #536]	; (80065c8 <DMA_GetITStatus+0x2bc>)
 80063b0:	429a      	cmp	r2, r3
 80063b2:	f000 80a9 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	4b84      	ldr	r3, [pc, #528]	; (80065cc <DMA_GetITStatus+0x2c0>)
 80063ba:	429a      	cmp	r2, r3
 80063bc:	f000 80a4 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	4b83      	ldr	r3, [pc, #524]	; (80065d0 <DMA_GetITStatus+0x2c4>)
 80063c4:	429a      	cmp	r2, r3
 80063c6:	f000 809f 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4b81      	ldr	r3, [pc, #516]	; (80065d4 <DMA_GetITStatus+0x2c8>)
 80063ce:	429a      	cmp	r2, r3
 80063d0:	f000 809a 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	4b80      	ldr	r3, [pc, #512]	; (80065d8 <DMA_GetITStatus+0x2cc>)
 80063d8:	429a      	cmp	r2, r3
 80063da:	f000 8095 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	4b7e      	ldr	r3, [pc, #504]	; (80065dc <DMA_GetITStatus+0x2d0>)
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f000 8090 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	4b7d      	ldr	r3, [pc, #500]	; (80065e0 <DMA_GetITStatus+0x2d4>)
 80063ec:	429a      	cmp	r2, r3
 80063ee:	f000 808b 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	4b7b      	ldr	r3, [pc, #492]	; (80065e4 <DMA_GetITStatus+0x2d8>)
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f000 8086 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	4b7a      	ldr	r3, [pc, #488]	; (80065e8 <DMA_GetITStatus+0x2dc>)
 8006400:	429a      	cmp	r2, r3
 8006402:	f000 8081 	beq.w	8006508 <DMA_GetITStatus+0x1fc>
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4b78      	ldr	r3, [pc, #480]	; (80065ec <DMA_GetITStatus+0x2e0>)
 800640a:	429a      	cmp	r2, r3
 800640c:	d07c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4b77      	ldr	r3, [pc, #476]	; (80065f0 <DMA_GetITStatus+0x2e4>)
 8006412:	429a      	cmp	r2, r3
 8006414:	d078      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	4b76      	ldr	r3, [pc, #472]	; (80065f4 <DMA_GetITStatus+0x2e8>)
 800641a:	429a      	cmp	r2, r3
 800641c:	d074      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	4b75      	ldr	r3, [pc, #468]	; (80065f8 <DMA_GetITStatus+0x2ec>)
 8006422:	429a      	cmp	r2, r3
 8006424:	d070      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	4b74      	ldr	r3, [pc, #464]	; (80065fc <DMA_GetITStatus+0x2f0>)
 800642a:	429a      	cmp	r2, r3
 800642c:	d06c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	4b73      	ldr	r3, [pc, #460]	; (8006600 <DMA_GetITStatus+0x2f4>)
 8006432:	429a      	cmp	r2, r3
 8006434:	d068      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	4b72      	ldr	r3, [pc, #456]	; (8006604 <DMA_GetITStatus+0x2f8>)
 800643a:	429a      	cmp	r2, r3
 800643c:	d064      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	4b71      	ldr	r3, [pc, #452]	; (8006608 <DMA_GetITStatus+0x2fc>)
 8006442:	429a      	cmp	r2, r3
 8006444:	d060      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	4b70      	ldr	r3, [pc, #448]	; (800660c <DMA_GetITStatus+0x300>)
 800644a:	429a      	cmp	r2, r3
 800644c:	d05c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4b6f      	ldr	r3, [pc, #444]	; (8006610 <DMA_GetITStatus+0x304>)
 8006452:	429a      	cmp	r2, r3
 8006454:	d058      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	4b6e      	ldr	r3, [pc, #440]	; (8006614 <DMA_GetITStatus+0x308>)
 800645a:	429a      	cmp	r2, r3
 800645c:	d054      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	4b6d      	ldr	r3, [pc, #436]	; (8006618 <DMA_GetITStatus+0x30c>)
 8006462:	429a      	cmp	r2, r3
 8006464:	d050      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	4b6c      	ldr	r3, [pc, #432]	; (800661c <DMA_GetITStatus+0x310>)
 800646a:	429a      	cmp	r2, r3
 800646c:	d04c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	4b6b      	ldr	r3, [pc, #428]	; (8006620 <DMA_GetITStatus+0x314>)
 8006472:	429a      	cmp	r2, r3
 8006474:	d048      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <DMA_GetITStatus+0x318>)
 800647a:	429a      	cmp	r2, r3
 800647c:	d044      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	4b69      	ldr	r3, [pc, #420]	; (8006628 <DMA_GetITStatus+0x31c>)
 8006482:	429a      	cmp	r2, r3
 8006484:	d040      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	4b68      	ldr	r3, [pc, #416]	; (800662c <DMA_GetITStatus+0x320>)
 800648a:	429a      	cmp	r2, r3
 800648c:	d03c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	4b67      	ldr	r3, [pc, #412]	; (8006630 <DMA_GetITStatus+0x324>)
 8006492:	429a      	cmp	r2, r3
 8006494:	d038      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	4b66      	ldr	r3, [pc, #408]	; (8006634 <DMA_GetITStatus+0x328>)
 800649a:	429a      	cmp	r2, r3
 800649c:	d034      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4b65      	ldr	r3, [pc, #404]	; (8006638 <DMA_GetITStatus+0x32c>)
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d030      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	4b64      	ldr	r3, [pc, #400]	; (800663c <DMA_GetITStatus+0x330>)
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d02c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	4b63      	ldr	r3, [pc, #396]	; (8006640 <DMA_GetITStatus+0x334>)
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d028      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	4b62      	ldr	r3, [pc, #392]	; (8006644 <DMA_GetITStatus+0x338>)
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d024      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	4b61      	ldr	r3, [pc, #388]	; (8006648 <DMA_GetITStatus+0x33c>)
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d020      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	4b60      	ldr	r3, [pc, #384]	; (800664c <DMA_GetITStatus+0x340>)
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d01c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4b5f      	ldr	r3, [pc, #380]	; (8006650 <DMA_GetITStatus+0x344>)
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d018      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4b5e      	ldr	r3, [pc, #376]	; (8006654 <DMA_GetITStatus+0x348>)
 80064da:	429a      	cmp	r2, r3
 80064dc:	d014      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4b5d      	ldr	r3, [pc, #372]	; (8006658 <DMA_GetITStatus+0x34c>)
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d010      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	4b5c      	ldr	r3, [pc, #368]	; (800665c <DMA_GetITStatus+0x350>)
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d00c      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	4b5b      	ldr	r3, [pc, #364]	; (8006660 <DMA_GetITStatus+0x354>)
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d008      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	4b5a      	ldr	r3, [pc, #360]	; (8006664 <DMA_GetITStatus+0x358>)
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d004      	beq.n	8006508 <DMA_GetITStatus+0x1fc>
 80064fe:	4831      	ldr	r0, [pc, #196]	; (80065c4 <DMA_GetITStatus+0x2b8>)
 8006500:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8006504:	f7fc fd28 	bl	8002f58 <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	4b57      	ldr	r3, [pc, #348]	; (8006668 <DMA_GetITStatus+0x35c>)
 800650c:	429a      	cmp	r2, r3
 800650e:	d802      	bhi.n	8006516 <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006510:	4b56      	ldr	r3, [pc, #344]	; (800666c <DMA_GetITStatus+0x360>)
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e001      	b.n	800651a <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006516:	4b56      	ldr	r3, [pc, #344]	; (8006670 <DMA_GetITStatus+0x364>)
 8006518:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006520:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	0adb      	lsrs	r3, r3, #11
 800652c:	f003 031e 	and.w	r3, r3, #30
 8006530:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4013      	ands	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	e004      	b.n	8006548 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e002      	b.n	8006560 <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006566:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800656a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d07e      	beq.n	8006674 <DMA_GetITStatus+0x368>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d07b      	beq.n	8006674 <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
 8006580:	e07a      	b.n	8006678 <DMA_GetITStatus+0x36c>
 8006582:	bf00      	nop
 8006584:	40026010 	.word	0x40026010
 8006588:	40026028 	.word	0x40026028
 800658c:	40026040 	.word	0x40026040
 8006590:	40026058 	.word	0x40026058
 8006594:	40026070 	.word	0x40026070
 8006598:	40026088 	.word	0x40026088
 800659c:	400260a0 	.word	0x400260a0
 80065a0:	400260b8 	.word	0x400260b8
 80065a4:	40026410 	.word	0x40026410
 80065a8:	40026428 	.word	0x40026428
 80065ac:	40026440 	.word	0x40026440
 80065b0:	40026458 	.word	0x40026458
 80065b4:	40026470 	.word	0x40026470
 80065b8:	40026488 	.word	0x40026488
 80065bc:	400264a0 	.word	0x400264a0
 80065c0:	400264b8 	.word	0x400264b8
 80065c4:	0800851c 	.word	0x0800851c
 80065c8:	10008020 	.word	0x10008020
 80065cc:	10004010 	.word	0x10004010
 80065d0:	10002008 	.word	0x10002008
 80065d4:	10001004 	.word	0x10001004
 80065d8:	90000001 	.word	0x90000001
 80065dc:	10008800 	.word	0x10008800
 80065e0:	10004400 	.word	0x10004400
 80065e4:	10002200 	.word	0x10002200
 80065e8:	10001100 	.word	0x10001100
 80065ec:	90000040 	.word	0x90000040
 80065f0:	10208000 	.word	0x10208000
 80065f4:	10104000 	.word	0x10104000
 80065f8:	10082000 	.word	0x10082000
 80065fc:	10041000 	.word	0x10041000
 8006600:	90010000 	.word	0x90010000
 8006604:	18008000 	.word	0x18008000
 8006608:	14004000 	.word	0x14004000
 800660c:	12002000 	.word	0x12002000
 8006610:	11001000 	.word	0x11001000
 8006614:	90400000 	.word	0x90400000
 8006618:	20008020 	.word	0x20008020
 800661c:	20004010 	.word	0x20004010
 8006620:	20002008 	.word	0x20002008
 8006624:	20001004 	.word	0x20001004
 8006628:	a0000001 	.word	0xa0000001
 800662c:	20008800 	.word	0x20008800
 8006630:	20004400 	.word	0x20004400
 8006634:	20002200 	.word	0x20002200
 8006638:	20001100 	.word	0x20001100
 800663c:	a0000040 	.word	0xa0000040
 8006640:	20208000 	.word	0x20208000
 8006644:	20104000 	.word	0x20104000
 8006648:	20082000 	.word	0x20082000
 800664c:	20041000 	.word	0x20041000
 8006650:	a0010000 	.word	0xa0010000
 8006654:	28008000 	.word	0x28008000
 8006658:	24004000 	.word	0x24004000
 800665c:	22002000 	.word	0x22002000
 8006660:	21001000 	.word	0x21001000
 8006664:	a0400000 	.word	0xa0400000
 8006668:	4002640f 	.word	0x4002640f
 800666c:	40026000 	.word	0x40026000
 8006670:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8006674:	2300      	movs	r3, #0
 8006676:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop

08006684 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4b3d      	ldr	r3, [pc, #244]	; (8006788 <DMA_ClearITPendingBit+0x104>)
 8006692:	429a      	cmp	r2, r3
 8006694:	d040      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4b3c      	ldr	r3, [pc, #240]	; (800678c <DMA_ClearITPendingBit+0x108>)
 800669a:	429a      	cmp	r2, r3
 800669c:	d03c      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4b3b      	ldr	r3, [pc, #236]	; (8006790 <DMA_ClearITPendingBit+0x10c>)
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d038      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4b3a      	ldr	r3, [pc, #232]	; (8006794 <DMA_ClearITPendingBit+0x110>)
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d034      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	4b39      	ldr	r3, [pc, #228]	; (8006798 <DMA_ClearITPendingBit+0x114>)
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d030      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4b38      	ldr	r3, [pc, #224]	; (800679c <DMA_ClearITPendingBit+0x118>)
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d02c      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4b37      	ldr	r3, [pc, #220]	; (80067a0 <DMA_ClearITPendingBit+0x11c>)
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d028      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	4b36      	ldr	r3, [pc, #216]	; (80067a4 <DMA_ClearITPendingBit+0x120>)
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d024      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4b35      	ldr	r3, [pc, #212]	; (80067a8 <DMA_ClearITPendingBit+0x124>)
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d020      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	4b34      	ldr	r3, [pc, #208]	; (80067ac <DMA_ClearITPendingBit+0x128>)
 80066da:	429a      	cmp	r2, r3
 80066dc:	d01c      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4b33      	ldr	r3, [pc, #204]	; (80067b0 <DMA_ClearITPendingBit+0x12c>)
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d018      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	4b32      	ldr	r3, [pc, #200]	; (80067b4 <DMA_ClearITPendingBit+0x130>)
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d014      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <DMA_ClearITPendingBit+0x134>)
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d010      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4b30      	ldr	r3, [pc, #192]	; (80067bc <DMA_ClearITPendingBit+0x138>)
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d00c      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <DMA_ClearITPendingBit+0x13c>)
 8006702:	429a      	cmp	r2, r3
 8006704:	d008      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4b2e      	ldr	r3, [pc, #184]	; (80067c4 <DMA_ClearITPendingBit+0x140>)
 800670a:	429a      	cmp	r2, r3
 800670c:	d004      	beq.n	8006718 <DMA_ClearITPendingBit+0x94>
 800670e:	482e      	ldr	r0, [pc, #184]	; (80067c8 <DMA_ClearITPendingBit+0x144>)
 8006710:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8006714:	f7fc fc20 	bl	8002f58 <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800671e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006722:	d00c      	beq.n	800673e <DMA_ClearITPendingBit+0xba>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <DMA_ClearITPendingBit+0xba>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <DMA_ClearITPendingBit+0xba>
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	4b25      	ldr	r3, [pc, #148]	; (80067cc <DMA_ClearITPendingBit+0x148>)
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <DMA_ClearITPendingBit+0xc4>
 800673e:	4822      	ldr	r0, [pc, #136]	; (80067c8 <DMA_ClearITPendingBit+0x144>)
 8006740:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8006744:	f7fc fc08 	bl	8002f58 <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <DMA_ClearITPendingBit+0x14c>)
 800674c:	429a      	cmp	r2, r3
 800674e:	d802      	bhi.n	8006756 <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <DMA_ClearITPendingBit+0x150>)
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e001      	b.n	800675a <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006756:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <DMA_ClearITPendingBit+0x154>)
 8006758:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800676a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	60d3      	str	r3, [r2, #12]
 8006772:	e006      	b.n	8006782 <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800677a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	6093      	str	r3, [r2, #8]
  }   
}
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40026010 	.word	0x40026010
 800678c:	40026028 	.word	0x40026028
 8006790:	40026040 	.word	0x40026040
 8006794:	40026058 	.word	0x40026058
 8006798:	40026070 	.word	0x40026070
 800679c:	40026088 	.word	0x40026088
 80067a0:	400260a0 	.word	0x400260a0
 80067a4:	400260b8 	.word	0x400260b8
 80067a8:	40026410 	.word	0x40026410
 80067ac:	40026428 	.word	0x40026428
 80067b0:	40026440 	.word	0x40026440
 80067b4:	40026458 	.word	0x40026458
 80067b8:	40026470 	.word	0x40026470
 80067bc:	40026488 	.word	0x40026488
 80067c0:	400264a0 	.word	0x400264a0
 80067c4:	400264b8 	.word	0x400264b8
 80067c8:	0800851c 	.word	0x0800851c
 80067cc:	40820082 	.word	0x40820082
 80067d0:	4002640f 	.word	0x4002640f
 80067d4:	40026000 	.word	0x40026000
 80067d8:	40026400 	.word	0x40026400

080067dc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	791b      	ldrb	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <EXTI_Init+0x24>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	791b      	ldrb	r3, [r3, #4]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d003      	beq.n	8006800 <EXTI_Init+0x24>
 80067f8:	4848      	ldr	r0, [pc, #288]	; (800691c <EXTI_Init+0x140>)
 80067fa:	217c      	movs	r1, #124	; 0x7c
 80067fc:	f7fc fbac 	bl	8002f58 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	795b      	ldrb	r3, [r3, #5]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d00b      	beq.n	8006820 <EXTI_Init+0x44>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	795b      	ldrb	r3, [r3, #5]
 800680c:	2b0c      	cmp	r3, #12
 800680e:	d007      	beq.n	8006820 <EXTI_Init+0x44>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	795b      	ldrb	r3, [r3, #5]
 8006814:	2b10      	cmp	r3, #16
 8006816:	d003      	beq.n	8006820 <EXTI_Init+0x44>
 8006818:	4840      	ldr	r0, [pc, #256]	; (800691c <EXTI_Init+0x140>)
 800681a:	217d      	movs	r1, #125	; 0x7d
 800681c:	f7fc fb9c 	bl	8002f58 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	0ddb      	lsrs	r3, r3, #23
 8006826:	05db      	lsls	r3, r3, #23
 8006828:	2b00      	cmp	r3, #0
 800682a:	d103      	bne.n	8006834 <EXTI_Init+0x58>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d103      	bne.n	800683c <EXTI_Init+0x60>
 8006834:	4839      	ldr	r0, [pc, #228]	; (800691c <EXTI_Init+0x140>)
 8006836:	217e      	movs	r1, #126	; 0x7e
 8006838:	f7fc fb8e 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	799b      	ldrb	r3, [r3, #6]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <EXTI_Init+0x78>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	799b      	ldrb	r3, [r3, #6]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d003      	beq.n	8006854 <EXTI_Init+0x78>
 800684c:	4833      	ldr	r0, [pc, #204]	; (800691c <EXTI_Init+0x140>)
 800684e:	217f      	movs	r1, #127	; 0x7f
 8006850:	f7fc fb82 	bl	8002f58 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 8006854:	4b32      	ldr	r3, [pc, #200]	; (8006920 <EXTI_Init+0x144>)
 8006856:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	799b      	ldrb	r3, [r3, #6]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d04d      	beq.n	80068fc <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8006860:	4b2f      	ldr	r3, [pc, #188]	; (8006920 <EXTI_Init+0x144>)
 8006862:	4a2f      	ldr	r2, [pc, #188]	; (8006920 <EXTI_Init+0x144>)
 8006864:	6811      	ldr	r1, [r2, #0]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	43d2      	mvns	r2, r2
 800686c:	400a      	ands	r2, r1
 800686e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8006870:	4b2b      	ldr	r3, [pc, #172]	; (8006920 <EXTI_Init+0x144>)
 8006872:	4a2b      	ldr	r2, [pc, #172]	; (8006920 <EXTI_Init+0x144>)
 8006874:	6851      	ldr	r1, [r2, #4]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	43d2      	mvns	r2, r2
 800687c:	400a      	ands	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	6811      	ldr	r1, [r2, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006898:	4b21      	ldr	r3, [pc, #132]	; (8006920 <EXTI_Init+0x144>)
 800689a:	4a21      	ldr	r2, [pc, #132]	; (8006920 <EXTI_Init+0x144>)
 800689c:	6891      	ldr	r1, [r2, #8]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	43d2      	mvns	r2, r2
 80068a4:	400a      	ands	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80068a8:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <EXTI_Init+0x144>)
 80068aa:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <EXTI_Init+0x144>)
 80068ac:	68d1      	ldr	r1, [r2, #12]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	43d2      	mvns	r2, r2
 80068b4:	400a      	ands	r2, r1
 80068b6:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	795b      	ldrb	r3, [r3, #5]
 80068bc:	2b10      	cmp	r3, #16
 80068be:	d10e      	bne.n	80068de <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80068c0:	4b17      	ldr	r3, [pc, #92]	; (8006920 <EXTI_Init+0x144>)
 80068c2:	4a17      	ldr	r2, [pc, #92]	; (8006920 <EXTI_Init+0x144>)
 80068c4:	6891      	ldr	r1, [r2, #8]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <EXTI_Init+0x144>)
 80068d0:	4a13      	ldr	r2, [pc, #76]	; (8006920 <EXTI_Init+0x144>)
 80068d2:	68d1      	ldr	r1, [r2, #12]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	60da      	str	r2, [r3, #12]
 80068dc:	e01b      	b.n	8006916 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <EXTI_Init+0x144>)
 80068e0:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	795b      	ldrb	r3, [r3, #5]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6811      	ldr	r1, [r2, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e00c      	b.n	8006916 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	791b      	ldrb	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	6811      	ldr	r1, [r2, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	43d2      	mvns	r2, r2
 8006912:	400a      	ands	r2, r1
 8006914:	601a      	str	r2, [r3, #0]
  }
}
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	0800856c 	.word	0x0800856c
 8006920:	40013c00 	.word	0x40013c00

08006924 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0ddb      	lsrs	r3, r3, #23
 8006930:	05db      	lsls	r3, r3, #23
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <EXTI_ClearFlag+0x18>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d103      	bne.n	8006944 <EXTI_ClearFlag+0x20>
 800693c:	4804      	ldr	r0, [pc, #16]	; (8006950 <EXTI_ClearFlag+0x2c>)
 800693e:	21f6      	movs	r1, #246	; 0xf6
 8006940:	f7fc fb0a 	bl	8002f58 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <EXTI_ClearFlag+0x30>)
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	615a      	str	r2, [r3, #20]
}
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	0800856c 	.word	0x0800856c
 8006954:	40013c00 	.word	0x40013c00

08006958 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d055      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d052      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b04      	cmp	r3, #4
 8006978:	d04f      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b08      	cmp	r3, #8
 800697e:	d04c      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b10      	cmp	r3, #16
 8006984:	d049      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b20      	cmp	r3, #32
 800698a:	d046      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d043      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d040      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d03c      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a6:	d038      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ae:	d034      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b6:	d030      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069be:	d02c      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c6:	d028      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ce:	d024      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d6:	d020      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069de:	d01c      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e6:	d018      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069ee:	d014      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069f6:	d010      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069fe:	d00c      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a06:	d008      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a0e:	d004      	beq.n	8006a1a <EXTI_GetITStatus+0xc2>
 8006a10:	480e      	ldr	r0, [pc, #56]	; (8006a4c <EXTI_GetITStatus+0xf4>)
 8006a12:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006a16:	f7fc fa9f 	bl	8002f58 <assert_failed>
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <EXTI_GetITStatus+0xf8>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4013      	ands	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <EXTI_GetITStatus+0xf8>)
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <EXTI_GetITStatus+0xe4>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <EXTI_GetITStatus+0xe4>
  {
    bitstatus = SET;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
 8006a3a:	e001      	b.n	8006a40 <EXTI_GetITStatus+0xe8>
  }
  else
  {
    bitstatus = RESET;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0800856c 	.word	0x0800856c
 8006a50:	40013c00 	.word	0x40013c00

08006a54 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	2300      	movs	r3, #0
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4b7a      	ldr	r3, [pc, #488]	; (8006c58 <GPIO_Init+0x204>)
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d023      	beq.n	8006aba <GPIO_Init+0x66>
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4b79      	ldr	r3, [pc, #484]	; (8006c5c <GPIO_Init+0x208>)
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d01f      	beq.n	8006aba <GPIO_Init+0x66>
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4b78      	ldr	r3, [pc, #480]	; (8006c60 <GPIO_Init+0x20c>)
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d01b      	beq.n	8006aba <GPIO_Init+0x66>
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4b77      	ldr	r3, [pc, #476]	; (8006c64 <GPIO_Init+0x210>)
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d017      	beq.n	8006aba <GPIO_Init+0x66>
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4b76      	ldr	r3, [pc, #472]	; (8006c68 <GPIO_Init+0x214>)
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d013      	beq.n	8006aba <GPIO_Init+0x66>
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4b75      	ldr	r3, [pc, #468]	; (8006c6c <GPIO_Init+0x218>)
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d00f      	beq.n	8006aba <GPIO_Init+0x66>
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4b74      	ldr	r3, [pc, #464]	; (8006c70 <GPIO_Init+0x21c>)
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d00b      	beq.n	8006aba <GPIO_Init+0x66>
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4b73      	ldr	r3, [pc, #460]	; (8006c74 <GPIO_Init+0x220>)
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d007      	beq.n	8006aba <GPIO_Init+0x66>
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4b72      	ldr	r3, [pc, #456]	; (8006c78 <GPIO_Init+0x224>)
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d003      	beq.n	8006aba <GPIO_Init+0x66>
 8006ab2:	4872      	ldr	r0, [pc, #456]	; (8006c7c <GPIO_Init+0x228>)
 8006ab4:	21bb      	movs	r1, #187	; 0xbb
 8006ab6:	f7fc fa4f 	bl	8002f58 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <GPIO_Init+0x76>
 8006ac2:	486e      	ldr	r0, [pc, #440]	; (8006c7c <GPIO_Init+0x228>)
 8006ac4:	21bc      	movs	r1, #188	; 0xbc
 8006ac6:	f7fc fa47 	bl	8002f58 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	791b      	ldrb	r3, [r3, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00f      	beq.n	8006af2 <GPIO_Init+0x9e>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	791b      	ldrb	r3, [r3, #4]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d00b      	beq.n	8006af2 <GPIO_Init+0x9e>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	791b      	ldrb	r3, [r3, #4]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d007      	beq.n	8006af2 <GPIO_Init+0x9e>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	791b      	ldrb	r3, [r3, #4]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d003      	beq.n	8006af2 <GPIO_Init+0x9e>
 8006aea:	4864      	ldr	r0, [pc, #400]	; (8006c7c <GPIO_Init+0x228>)
 8006aec:	21bd      	movs	r1, #189	; 0xbd
 8006aee:	f7fc fa33 	bl	8002f58 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	79db      	ldrb	r3, [r3, #7]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <GPIO_Init+0xbe>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	79db      	ldrb	r3, [r3, #7]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d007      	beq.n	8006b12 <GPIO_Init+0xbe>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	79db      	ldrb	r3, [r3, #7]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d003      	beq.n	8006b12 <GPIO_Init+0xbe>
 8006b0a:	485c      	ldr	r0, [pc, #368]	; (8006c7c <GPIO_Init+0x228>)
 8006b0c:	21be      	movs	r1, #190	; 0xbe
 8006b0e:	f7fc fa23 	bl	8002f58 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e097      	b.n	8006c48 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	f040 8086 	bne.w	8006c42 <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	2103      	movs	r1, #3
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	43db      	mvns	r3, r3
 8006b46:	401a      	ands	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	791b      	ldrb	r3, [r3, #4]
 8006b54:	4619      	mov	r1, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	791b      	ldrb	r3, [r3, #4]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d003      	beq.n	8006b74 <GPIO_Init+0x120>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	791b      	ldrb	r3, [r3, #4]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d14e      	bne.n	8006c12 <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	795b      	ldrb	r3, [r3, #5]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00f      	beq.n	8006b9c <GPIO_Init+0x148>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	795b      	ldrb	r3, [r3, #5]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d00b      	beq.n	8006b9c <GPIO_Init+0x148>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	795b      	ldrb	r3, [r3, #5]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d007      	beq.n	8006b9c <GPIO_Init+0x148>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	795b      	ldrb	r3, [r3, #5]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d003      	beq.n	8006b9c <GPIO_Init+0x148>
 8006b94:	4839      	ldr	r0, [pc, #228]	; (8006c7c <GPIO_Init+0x228>)
 8006b96:	21d0      	movs	r1, #208	; 0xd0
 8006b98:	f7fc f9de 	bl	8002f58 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	2103      	movs	r1, #3
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	43db      	mvns	r3, r3
 8006bac:	401a      	ands	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	795b      	ldrb	r3, [r3, #5]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	799b      	ldrb	r3, [r3, #6]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <GPIO_Init+0x18e>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	799b      	ldrb	r3, [r3, #6]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d003      	beq.n	8006be2 <GPIO_Init+0x18e>
 8006bda:	4828      	ldr	r0, [pc, #160]	; (8006c7c <GPIO_Init+0x228>)
 8006bdc:	21d7      	movs	r1, #215	; 0xd7
 8006bde:	f7fc f9bb 	bl	8002f58 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2101      	movs	r1, #1
 8006bec:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	799b      	ldrb	r3, [r3, #6]
 8006c00:	4619      	mov	r1, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	2103      	movs	r1, #3
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	43db      	mvns	r3, r3
 8006c24:	401a      	ands	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	79db      	ldrb	r3, [r3, #7]
 8006c32:	4619      	mov	r1, r3
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	3301      	adds	r3, #1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b0f      	cmp	r3, #15
 8006c4c:	f67f af64 	bls.w	8006b18 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	40020000 	.word	0x40020000
 8006c5c:	40020400 	.word	0x40020400
 8006c60:	40020800 	.word	0x40020800
 8006c64:	40020c00 	.word	0x40020c00
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	40021400 	.word	0x40021400
 8006c70:	40021800 	.word	0x40021800
 8006c74:	40021c00 	.word	0x40021c00
 8006c78:	40022000 	.word	0x40022000
 8006c7c:	080085bc 	.word	0x080085bc

08006c80 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	807a      	strh	r2, [r7, #2]
 8006c8e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	4b83      	ldr	r3, [pc, #524]	; (8006ea8 <GPIO_PinAFConfig+0x228>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d024      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4b82      	ldr	r3, [pc, #520]	; (8006eac <GPIO_PinAFConfig+0x22c>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d020      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4b81      	ldr	r3, [pc, #516]	; (8006eb0 <GPIO_PinAFConfig+0x230>)
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d01c      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4b80      	ldr	r3, [pc, #512]	; (8006eb4 <GPIO_PinAFConfig+0x234>)
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d018      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4b7f      	ldr	r3, [pc, #508]	; (8006eb8 <GPIO_PinAFConfig+0x238>)
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d014      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	4b7e      	ldr	r3, [pc, #504]	; (8006ebc <GPIO_PinAFConfig+0x23c>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d010      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	4b7d      	ldr	r3, [pc, #500]	; (8006ec0 <GPIO_PinAFConfig+0x240>)
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d00c      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4b7c      	ldr	r3, [pc, #496]	; (8006ec4 <GPIO_PinAFConfig+0x244>)
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d008      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4b7b      	ldr	r3, [pc, #492]	; (8006ec8 <GPIO_PinAFConfig+0x248>)
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d004      	beq.n	8006cea <GPIO_PinAFConfig+0x6a>
 8006ce0:	487a      	ldr	r0, [pc, #488]	; (8006ecc <GPIO_PinAFConfig+0x24c>)
 8006ce2:	f240 2117 	movw	r1, #535	; 0x217
 8006ce6:	f7fc f937 	bl	8002f58 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8006cea:	887b      	ldrh	r3, [r7, #2]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d031      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006cf0:	887b      	ldrh	r3, [r7, #2]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d02e      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d02b      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d028      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d02:	887b      	ldrh	r3, [r7, #2]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d025      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d08:	887b      	ldrh	r3, [r7, #2]
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	d022      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d0e:	887b      	ldrh	r3, [r7, #2]
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d01f      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d14:	887b      	ldrh	r3, [r7, #2]
 8006d16:	2b07      	cmp	r3, #7
 8006d18:	d01c      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d1a:	887b      	ldrh	r3, [r7, #2]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d019      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d20:	887b      	ldrh	r3, [r7, #2]
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d016      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	2b0a      	cmp	r3, #10
 8006d2a:	d013      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d2c:	887b      	ldrh	r3, [r7, #2]
 8006d2e:	2b0b      	cmp	r3, #11
 8006d30:	d010      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d32:	887b      	ldrh	r3, [r7, #2]
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	d00d      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d38:	887b      	ldrh	r3, [r7, #2]
 8006d3a:	2b0d      	cmp	r3, #13
 8006d3c:	d00a      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	2b0e      	cmp	r3, #14
 8006d42:	d007      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d44:	887b      	ldrh	r3, [r7, #2]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d004      	beq.n	8006d54 <GPIO_PinAFConfig+0xd4>
 8006d4a:	4860      	ldr	r0, [pc, #384]	; (8006ecc <GPIO_PinAFConfig+0x24c>)
 8006d4c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8006d50:	f7fc f902 	bl	8002f58 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8006d54:	787b      	ldrb	r3, [r7, #1]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d06d      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d5a:	787b      	ldrb	r3, [r7, #1]
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	d06a      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d60:	787b      	ldrb	r3, [r7, #1]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d067      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d66:	787b      	ldrb	r3, [r7, #1]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d064      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d6c:	787b      	ldrb	r3, [r7, #1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d061      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d72:	787b      	ldrb	r3, [r7, #1]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d05e      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d78:	787b      	ldrb	r3, [r7, #1]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d05b      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d7e:	787b      	ldrb	r3, [r7, #1]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d058      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d84:	787b      	ldrb	r3, [r7, #1]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d055      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d8a:	787b      	ldrb	r3, [r7, #1]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d052      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d90:	787b      	ldrb	r3, [r7, #1]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d04f      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d96:	787b      	ldrb	r3, [r7, #1]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d04c      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006d9c:	787b      	ldrb	r3, [r7, #1]
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d049      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006da2:	787b      	ldrb	r3, [r7, #1]
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d046      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006da8:	787b      	ldrb	r3, [r7, #1]
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d043      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dae:	787b      	ldrb	r3, [r7, #1]
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d040      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006db4:	787b      	ldrb	r3, [r7, #1]
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	d03d      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dba:	787b      	ldrb	r3, [r7, #1]
 8006dbc:	2b09      	cmp	r3, #9
 8006dbe:	d03a      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dc0:	787b      	ldrb	r3, [r7, #1]
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d037      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dc6:	787b      	ldrb	r3, [r7, #1]
 8006dc8:	2b09      	cmp	r3, #9
 8006dca:	d034      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dcc:	787b      	ldrb	r3, [r7, #1]
 8006dce:	2b07      	cmp	r3, #7
 8006dd0:	d031      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dd2:	787b      	ldrb	r3, [r7, #1]
 8006dd4:	2b07      	cmp	r3, #7
 8006dd6:	d02e      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dd8:	787b      	ldrb	r3, [r7, #1]
 8006dda:	2b07      	cmp	r3, #7
 8006ddc:	d02b      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dde:	787b      	ldrb	r3, [r7, #1]
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d028      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006de4:	787b      	ldrb	r3, [r7, #1]
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d025      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dea:	787b      	ldrb	r3, [r7, #1]
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d022      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006df0:	787b      	ldrb	r3, [r7, #1]
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d01f      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006df6:	787b      	ldrb	r3, [r7, #1]
 8006df8:	2b09      	cmp	r3, #9
 8006dfa:	d01c      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006dfc:	787b      	ldrb	r3, [r7, #1]
 8006dfe:	2b0a      	cmp	r3, #10
 8006e00:	d019      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e02:	787b      	ldrb	r3, [r7, #1]
 8006e04:	2b0a      	cmp	r3, #10
 8006e06:	d016      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e08:	787b      	ldrb	r3, [r7, #1]
 8006e0a:	2b0b      	cmp	r3, #11
 8006e0c:	d013      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e0e:	787b      	ldrb	r3, [r7, #1]
 8006e10:	2b0c      	cmp	r3, #12
 8006e12:	d010      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e14:	787b      	ldrb	r3, [r7, #1]
 8006e16:	2b0c      	cmp	r3, #12
 8006e18:	d00d      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e1a:	787b      	ldrb	r3, [r7, #1]
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d00a      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e20:	787b      	ldrb	r3, [r7, #1]
 8006e22:	2b0d      	cmp	r3, #13
 8006e24:	d007      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e26:	787b      	ldrb	r3, [r7, #1]
 8006e28:	2b0f      	cmp	r3, #15
 8006e2a:	d004      	beq.n	8006e36 <GPIO_PinAFConfig+0x1b6>
 8006e2c:	4827      	ldr	r0, [pc, #156]	; (8006ecc <GPIO_PinAFConfig+0x24c>)
 8006e2e:	f240 2119 	movw	r1, #537	; 0x219
 8006e32:	f7fc f891 	bl	8002f58 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006e36:	787a      	ldrb	r2, [r7, #1]
 8006e38:	887b      	ldrh	r3, [r7, #2]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006e46:	887b      	ldrh	r3, [r7, #2]
 8006e48:	08db      	lsrs	r3, r3, #3
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	887b      	ldrh	r3, [r7, #2]
 8006e50:	08db      	lsrs	r3, r3, #3
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3108      	adds	r1, #8
 8006e5a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006e5e:	887b      	ldrh	r3, [r7, #2]
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	200f      	movs	r0, #15
 8006e68:	fa00 f303 	lsl.w	r3, r0, r3
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	4019      	ands	r1, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3208      	adds	r2, #8
 8006e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8006e78:	887b      	ldrh	r3, [r7, #2]
 8006e7a:	08db      	lsrs	r3, r3, #3
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3208      	adds	r2, #8
 8006e84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8006e8e:	887b      	ldrh	r3, [r7, #2]
 8006e90:	08db      	lsrs	r3, r3, #3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3208      	adds	r2, #8
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40020000 	.word	0x40020000
 8006eac:	40020400 	.word	0x40020400
 8006eb0:	40020800 	.word	0x40020800
 8006eb4:	40020c00 	.word	0x40020c00
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	40021400 	.word	0x40021400
 8006ec0:	40021800 	.word	0x40021800
 8006ec4:	40021c00 	.word	0x40021c00
 8006ec8:	40022000 	.word	0x40022000
 8006ecc:	080085bc 	.word	0x080085bc

08006ed0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	; 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	2302      	movs	r3, #2
 8006eee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006ef0:	4b48      	ldr	r3, [pc, #288]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 030c 	and.w	r3, r3, #12
 8006ef8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d007      	beq.n	8006f10 <RCC_GetClocksFreq+0x40>
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d009      	beq.n	8006f18 <RCC_GetClocksFreq+0x48>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d13f      	bne.n	8006f88 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a43      	ldr	r2, [pc, #268]	; (8007018 <RCC_GetClocksFreq+0x148>)
 8006f0c:	601a      	str	r2, [r3, #0]
      break;
 8006f0e:	e03f      	b.n	8006f90 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a42      	ldr	r2, [pc, #264]	; (800701c <RCC_GetClocksFreq+0x14c>)
 8006f14:	601a      	str	r2, [r3, #0]
      break;
 8006f16:	e03b      	b.n	8006f90 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006f18:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f20:	0d9b      	lsrs	r3, r3, #22
 8006f22:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f24:	4b3b      	ldr	r3, [pc, #236]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f2c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00d      	beq.n	8006f50 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006f34:	4a39      	ldr	r2, [pc, #228]	; (800701c <RCC_GetClocksFreq+0x14c>)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f3c:	4b35      	ldr	r3, [pc, #212]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006f3e:	6859      	ldr	r1, [r3, #4]
 8006f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f44:	400b      	ands	r3, r1
 8006f46:	099b      	lsrs	r3, r3, #6
 8006f48:	fb03 f302 	mul.w	r3, r3, r2
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	e00c      	b.n	8006f6a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8006f50:	4a31      	ldr	r2, [pc, #196]	; (8007018 <RCC_GetClocksFreq+0x148>)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f58:	4b2e      	ldr	r3, [pc, #184]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f60:	400b      	ands	r3, r1
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	fb03 f302 	mul.w	r3, r3, r2
 8006f68:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006f6a:	4b2a      	ldr	r3, [pc, #168]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f72:	0c1b      	lsrs	r3, r3, #16
 8006f74:	3301      	adds	r3, #1
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
      break;
 8006f86:	e003      	b.n	8006f90 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a23      	ldr	r2, [pc, #140]	; (8007018 <RCC_GetClocksFreq+0x148>)
 8006f8c:	601a      	str	r2, [r3, #0]
      break;
 8006f8e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8006f90:	4b20      	ldr	r3, [pc, #128]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f98:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	091b      	lsrs	r3, r3, #4
 8006f9e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006fa0:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <RCC_GetClocksFreq+0x150>)
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	40da      	lsrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8006fb8:	4b16      	ldr	r3, [pc, #88]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006fc0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	0a9b      	lsrs	r3, r3, #10
 8006fc6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006fc8:	4a15      	ldr	r2, [pc, #84]	; (8007020 <RCC_GetClocksFreq+0x150>)
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	4413      	add	r3, r2
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	40da      	lsrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <RCC_GetClocksFreq+0x144>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006fe8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	0b5b      	lsrs	r3, r3, #13
 8006fee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006ff0:	4a0b      	ldr	r2, [pc, #44]	; (8007020 <RCC_GetClocksFreq+0x150>)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	40da      	lsrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60da      	str	r2, [r3, #12]
}
 8007008:	3724      	adds	r7, #36	; 0x24
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40023800 	.word	0x40023800
 8007018:	00f42400 	.word	0x00f42400
 800701c:	017d7840 	.word	0x017d7840
 8007020:	20000020 	.word	0x20000020

08007024 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <RCC_AHB1PeriphClockCmd+0x64>)
 8007034:	4013      	ands	r3, r2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <RCC_AHB1PeriphClockCmd+0x1c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <RCC_AHB1PeriphClockCmd+0x26>
 8007040:	4812      	ldr	r0, [pc, #72]	; (800708c <RCC_AHB1PeriphClockCmd+0x68>)
 8007042:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8007046:	f7fb ff87 	bl	8002f58 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <RCC_AHB1PeriphClockCmd+0x3c>
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d004      	beq.n	8007060 <RCC_AHB1PeriphClockCmd+0x3c>
 8007056:	480d      	ldr	r0, [pc, #52]	; (800708c <RCC_AHB1PeriphClockCmd+0x68>)
 8007058:	f240 4142 	movw	r1, #1090	; 0x442
 800705c:	f7fb ff7c 	bl	8002f58 <assert_failed>
  if (NewState != DISABLE)
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d006      	beq.n	8007074 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8007066:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <RCC_AHB1PeriphClockCmd+0x6c>)
 8007068:	4a09      	ldr	r2, [pc, #36]	; (8007090 <RCC_AHB1PeriphClockCmd+0x6c>)
 800706a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	430a      	orrs	r2, r1
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
 8007072:	e006      	b.n	8007082 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8007074:	4b06      	ldr	r3, [pc, #24]	; (8007090 <RCC_AHB1PeriphClockCmd+0x6c>)
 8007076:	4a06      	ldr	r2, [pc, #24]	; (8007090 <RCC_AHB1PeriphClockCmd+0x6c>)
 8007078:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	43d2      	mvns	r2, r2
 800707e:	400a      	ands	r2, r1
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	818bee00 	.word	0x818bee00
 800708c:	0800860c 	.word	0x0800860c
 8007090:	40023800 	.word	0x40023800

08007094 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <RCC_APB2PeriphClockCmd+0x64>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <RCC_APB2PeriphClockCmd+0x1c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <RCC_APB2PeriphClockCmd+0x26>
 80070b0:	4812      	ldr	r0, [pc, #72]	; (80070fc <RCC_APB2PeriphClockCmd+0x68>)
 80070b2:	f240 41d5 	movw	r1, #1237	; 0x4d5
 80070b6:	f7fb ff4f 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <RCC_APB2PeriphClockCmd+0x3c>
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d004      	beq.n	80070d0 <RCC_APB2PeriphClockCmd+0x3c>
 80070c6:	480d      	ldr	r0, [pc, #52]	; (80070fc <RCC_APB2PeriphClockCmd+0x68>)
 80070c8:	f240 41d6 	movw	r1, #1238	; 0x4d6
 80070cc:	f7fb ff44 	bl	8002f58 <assert_failed>

  if (NewState != DISABLE)
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d006      	beq.n	80070e4 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80070d6:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <RCC_APB2PeriphClockCmd+0x6c>)
 80070d8:	4a09      	ldr	r2, [pc, #36]	; (8007100 <RCC_APB2PeriphClockCmd+0x6c>)
 80070da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	430a      	orrs	r2, r1
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44
 80070e2:	e006      	b.n	80070f2 <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <RCC_APB2PeriphClockCmd+0x6c>)
 80070e6:	4a06      	ldr	r2, [pc, #24]	; (8007100 <RCC_APB2PeriphClockCmd+0x6c>)
 80070e8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	43d2      	mvns	r2, r2
 80070ee:	400a      	ands	r2, r1
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	fff8a0cc 	.word	0xfff8a0cc
 80070fc:	0800860c 	.word	0x0800860c
 8007100:	40023800 	.word	0x40023800

08007104 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4b70      	ldr	r3, [pc, #448]	; (80072d8 <SPI_Init+0x1d4>)
 8007116:	429a      	cmp	r2, r3
 8007118:	d00c      	beq.n	8007134 <SPI_Init+0x30>
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	4b6f      	ldr	r3, [pc, #444]	; (80072dc <SPI_Init+0x1d8>)
 800711e:	429a      	cmp	r2, r3
 8007120:	d008      	beq.n	8007134 <SPI_Init+0x30>
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4b6e      	ldr	r3, [pc, #440]	; (80072e0 <SPI_Init+0x1dc>)
 8007126:	429a      	cmp	r2, r3
 8007128:	d004      	beq.n	8007134 <SPI_Init+0x30>
 800712a:	486e      	ldr	r0, [pc, #440]	; (80072e4 <SPI_Init+0x1e0>)
 800712c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007130:	f7fb ff12 	bl	8002f58 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d013      	beq.n	8007164 <SPI_Init+0x60>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007144:	d00e      	beq.n	8007164 <SPI_Init+0x60>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714e:	d009      	beq.n	8007164 <SPI_Init+0x60>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007158:	d004      	beq.n	8007164 <SPI_Init+0x60>
 800715a:	4862      	ldr	r0, [pc, #392]	; (80072e4 <SPI_Init+0x1e0>)
 800715c:	f240 1109 	movw	r1, #265	; 0x109
 8007160:	f7fb fefa 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	885b      	ldrh	r3, [r3, #2]
 8007168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800716c:	d008      	beq.n	8007180 <SPI_Init+0x7c>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	885b      	ldrh	r3, [r3, #2]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <SPI_Init+0x7c>
 8007176:	485b      	ldr	r0, [pc, #364]	; (80072e4 <SPI_Init+0x1e0>)
 8007178:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800717c:	f7fb feec 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	889b      	ldrh	r3, [r3, #4]
 8007184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007188:	d008      	beq.n	800719c <SPI_Init+0x98>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	889b      	ldrh	r3, [r3, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <SPI_Init+0x98>
 8007192:	4854      	ldr	r0, [pc, #336]	; (80072e4 <SPI_Init+0x1e0>)
 8007194:	f240 110b 	movw	r1, #267	; 0x10b
 8007198:	f7fb fede 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	88db      	ldrh	r3, [r3, #6]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <SPI_Init+0xb2>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	88db      	ldrh	r3, [r3, #6]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d004      	beq.n	80071b6 <SPI_Init+0xb2>
 80071ac:	484d      	ldr	r0, [pc, #308]	; (80072e4 <SPI_Init+0x1e0>)
 80071ae:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80071b2:	f7fb fed1 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	891b      	ldrh	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <SPI_Init+0xcc>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	891b      	ldrh	r3, [r3, #8]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d004      	beq.n	80071d0 <SPI_Init+0xcc>
 80071c6:	4847      	ldr	r0, [pc, #284]	; (80072e4 <SPI_Init+0x1e0>)
 80071c8:	f240 110d 	movw	r1, #269	; 0x10d
 80071cc:	f7fb fec4 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	895b      	ldrh	r3, [r3, #10]
 80071d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071d8:	d008      	beq.n	80071ec <SPI_Init+0xe8>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	895b      	ldrh	r3, [r3, #10]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <SPI_Init+0xe8>
 80071e2:	4840      	ldr	r0, [pc, #256]	; (80072e4 <SPI_Init+0x1e0>)
 80071e4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80071e8:	f7fb feb6 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	899b      	ldrh	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d020      	beq.n	8007236 <SPI_Init+0x132>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	899b      	ldrh	r3, [r3, #12]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d01c      	beq.n	8007236 <SPI_Init+0x132>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	899b      	ldrh	r3, [r3, #12]
 8007200:	2b10      	cmp	r3, #16
 8007202:	d018      	beq.n	8007236 <SPI_Init+0x132>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	899b      	ldrh	r3, [r3, #12]
 8007208:	2b18      	cmp	r3, #24
 800720a:	d014      	beq.n	8007236 <SPI_Init+0x132>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	899b      	ldrh	r3, [r3, #12]
 8007210:	2b20      	cmp	r3, #32
 8007212:	d010      	beq.n	8007236 <SPI_Init+0x132>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	899b      	ldrh	r3, [r3, #12]
 8007218:	2b28      	cmp	r3, #40	; 0x28
 800721a:	d00c      	beq.n	8007236 <SPI_Init+0x132>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	899b      	ldrh	r3, [r3, #12]
 8007220:	2b30      	cmp	r3, #48	; 0x30
 8007222:	d008      	beq.n	8007236 <SPI_Init+0x132>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	899b      	ldrh	r3, [r3, #12]
 8007228:	2b38      	cmp	r3, #56	; 0x38
 800722a:	d004      	beq.n	8007236 <SPI_Init+0x132>
 800722c:	482d      	ldr	r0, [pc, #180]	; (80072e4 <SPI_Init+0x1e0>)
 800722e:	f240 110f 	movw	r1, #271	; 0x10f
 8007232:	f7fb fe91 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	89db      	ldrh	r3, [r3, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <SPI_Init+0x14c>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	89db      	ldrh	r3, [r3, #14]
 8007242:	2b80      	cmp	r3, #128	; 0x80
 8007244:	d004      	beq.n	8007250 <SPI_Init+0x14c>
 8007246:	4827      	ldr	r0, [pc, #156]	; (80072e4 <SPI_Init+0x1e0>)
 8007248:	f44f 7188 	mov.w	r1, #272	; 0x110
 800724c:	f7fb fe84 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	8a1b      	ldrh	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <SPI_Init+0x15e>
 8007258:	4822      	ldr	r0, [pc, #136]	; (80072e4 <SPI_Init+0x1e0>)
 800725a:	f240 1111 	movw	r1, #273	; 0x111
 800725e:	f7fb fe7b 	bl	8002f58 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800726e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	881a      	ldrh	r2, [r3, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	885b      	ldrh	r3, [r3, #2]
 8007278:	4313      	orrs	r3, r2
 800727a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007280:	4313      	orrs	r3, r2
 8007282:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007288:	4313      	orrs	r3, r2
 800728a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007290:	4313      	orrs	r3, r2
 8007292:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8007298:	4313      	orrs	r3, r2
 800729a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	89fb      	ldrh	r3, [r7, #14]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	89fa      	ldrh	r2, [r7, #14]
 80072b6:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8b9b      	ldrh	r3, [r3, #28]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	8a1a      	ldrh	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	821a      	strh	r2, [r3, #16]
}
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	40013000 	.word	0x40013000
 80072dc:	40003800 	.word	0x40003800
 80072e0:	40003c00 	.word	0x40003c00
 80072e4:	0800865c 	.word	0x0800865c

080072e8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	4b19      	ldr	r3, [pc, #100]	; (800735c <SPI_Cmd+0x74>)
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d00c      	beq.n	8007316 <SPI_Cmd+0x2e>
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4b18      	ldr	r3, [pc, #96]	; (8007360 <SPI_Cmd+0x78>)
 8007300:	429a      	cmp	r2, r3
 8007302:	d008      	beq.n	8007316 <SPI_Cmd+0x2e>
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4b17      	ldr	r3, [pc, #92]	; (8007364 <SPI_Cmd+0x7c>)
 8007308:	429a      	cmp	r2, r3
 800730a:	d004      	beq.n	8007316 <SPI_Cmd+0x2e>
 800730c:	4816      	ldr	r0, [pc, #88]	; (8007368 <SPI_Cmd+0x80>)
 800730e:	f240 2101 	movw	r1, #513	; 0x201
 8007312:	f7fb fe21 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <SPI_Cmd+0x44>
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d004      	beq.n	800732c <SPI_Cmd+0x44>
 8007322:	4811      	ldr	r0, [pc, #68]	; (8007368 <SPI_Cmd+0x80>)
 8007324:	f240 2102 	movw	r1, #514	; 0x202
 8007328:	f7fb fe16 	bl	8002f58 <assert_failed>
  if (NewState != DISABLE)
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733c:	b29a      	uxth	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e007      	b.n	8007354 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	801a      	strh	r2, [r3, #0]
  }
}
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40013000 	.word	0x40013000
 8007360:	40003800 	.word	0x40003800
 8007364:	40003c00 	.word	0x40003c00
 8007368:	0800865c 	.word	0x0800865c

0800736c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	460a      	mov	r2, r1
 8007378:	807a      	strh	r2, [r7, #2]
 800737a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	4b25      	ldr	r3, [pc, #148]	; (8007414 <SPI_I2S_DMACmd+0xa8>)
 8007380:	429a      	cmp	r2, r3
 8007382:	d014      	beq.n	80073ae <SPI_I2S_DMACmd+0x42>
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4b24      	ldr	r3, [pc, #144]	; (8007418 <SPI_I2S_DMACmd+0xac>)
 8007388:	429a      	cmp	r2, r3
 800738a:	d010      	beq.n	80073ae <SPI_I2S_DMACmd+0x42>
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4b23      	ldr	r3, [pc, #140]	; (800741c <SPI_I2S_DMACmd+0xb0>)
 8007390:	429a      	cmp	r2, r3
 8007392:	d00c      	beq.n	80073ae <SPI_I2S_DMACmd+0x42>
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	4b22      	ldr	r3, [pc, #136]	; (8007420 <SPI_I2S_DMACmd+0xb4>)
 8007398:	429a      	cmp	r2, r3
 800739a:	d008      	beq.n	80073ae <SPI_I2S_DMACmd+0x42>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80073a2:	d004      	beq.n	80073ae <SPI_I2S_DMACmd+0x42>
 80073a4:	481f      	ldr	r0, [pc, #124]	; (8007424 <SPI_I2S_DMACmd+0xb8>)
 80073a6:	f240 31d9 	movw	r1, #985	; 0x3d9
 80073aa:	f7fb fdd5 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80073ae:	787b      	ldrb	r3, [r7, #1]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <SPI_I2S_DMACmd+0x58>
 80073b4:	787b      	ldrb	r3, [r7, #1]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d004      	beq.n	80073c4 <SPI_I2S_DMACmd+0x58>
 80073ba:	481a      	ldr	r0, [pc, #104]	; (8007424 <SPI_I2S_DMACmd+0xb8>)
 80073bc:	f240 31da 	movw	r1, #986	; 0x3da
 80073c0:	f7fb fdca 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 80073c4:	887a      	ldrh	r2, [r7, #2]
 80073c6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <SPI_I2S_DMACmd+0x6a>
 80073d0:	887b      	ldrh	r3, [r7, #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <SPI_I2S_DMACmd+0x74>
 80073d6:	4813      	ldr	r0, [pc, #76]	; (8007424 <SPI_I2S_DMACmd+0xb8>)
 80073d8:	f240 31db 	movw	r1, #987	; 0x3db
 80073dc:	f7fb fdbc 	bl	8002f58 <assert_failed>

  if (NewState != DISABLE)
 80073e0:	787b      	ldrb	r3, [r7, #1]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d008      	beq.n	80073f8 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	889b      	ldrh	r3, [r3, #4]
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	887b      	ldrh	r3, [r7, #2]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	809a      	strh	r2, [r3, #4]
 80073f6:	e009      	b.n	800740c <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	889b      	ldrh	r3, [r3, #4]
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	887b      	ldrh	r3, [r7, #2]
 8007400:	43db      	mvns	r3, r3
 8007402:	b29b      	uxth	r3, r3
 8007404:	4013      	ands	r3, r2
 8007406:	b29a      	uxth	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	809a      	strh	r2, [r3, #4]
  }
}
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40013000 	.word	0x40013000
 8007418:	40003800 	.word	0x40003800
 800741c:	40003c00 	.word	0x40003c00
 8007420:	40003400 	.word	0x40003400
 8007424:	0800865c 	.word	0x0800865c

08007428 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	4b25      	ldr	r3, [pc, #148]	; (80074d0 <SPI_I2S_GetFlagStatus+0xa8>)
 800743c:	429a      	cmp	r2, r3
 800743e:	d014      	beq.n	800746a <SPI_I2S_GetFlagStatus+0x42>
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <SPI_I2S_GetFlagStatus+0xac>)
 8007444:	429a      	cmp	r2, r3
 8007446:	d010      	beq.n	800746a <SPI_I2S_GetFlagStatus+0x42>
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4b23      	ldr	r3, [pc, #140]	; (80074d8 <SPI_I2S_GetFlagStatus+0xb0>)
 800744c:	429a      	cmp	r2, r3
 800744e:	d00c      	beq.n	800746a <SPI_I2S_GetFlagStatus+0x42>
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4b22      	ldr	r3, [pc, #136]	; (80074dc <SPI_I2S_GetFlagStatus+0xb4>)
 8007454:	429a      	cmp	r2, r3
 8007456:	d008      	beq.n	800746a <SPI_I2S_GetFlagStatus+0x42>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800745e:	d004      	beq.n	800746a <SPI_I2S_GetFlagStatus+0x42>
 8007460:	481f      	ldr	r0, [pc, #124]	; (80074e0 <SPI_I2S_GetFlagStatus+0xb8>)
 8007462:	f240 4173 	movw	r1, #1139	; 0x473
 8007466:	f7fb fd77 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 800746a:	887b      	ldrh	r3, [r7, #2]
 800746c:	2b80      	cmp	r3, #128	; 0x80
 800746e:	d01d      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 8007470:	887b      	ldrh	r3, [r7, #2]
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d01a      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 8007476:	887b      	ldrh	r3, [r7, #2]
 8007478:	2b20      	cmp	r3, #32
 800747a:	d017      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 800747c:	887b      	ldrh	r3, [r7, #2]
 800747e:	2b10      	cmp	r3, #16
 8007480:	d014      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 8007482:	887b      	ldrh	r3, [r7, #2]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d011      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	2b04      	cmp	r3, #4
 800748c:	d00e      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 800748e:	887b      	ldrh	r3, [r7, #2]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d00b      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 8007494:	887b      	ldrh	r3, [r7, #2]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d008      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 800749a:	887b      	ldrh	r3, [r7, #2]
 800749c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a0:	d004      	beq.n	80074ac <SPI_I2S_GetFlagStatus+0x84>
 80074a2:	480f      	ldr	r0, [pc, #60]	; (80074e0 <SPI_I2S_GetFlagStatus+0xb8>)
 80074a4:	f240 4174 	movw	r1, #1140	; 0x474
 80074a8:	f7fb fd56 	bl	8002f58 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	891b      	ldrh	r3, [r3, #8]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	887b      	ldrh	r3, [r7, #2]
 80074b4:	4013      	ands	r3, r2
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80074bc:	2301      	movs	r3, #1
 80074be:	73fb      	strb	r3, [r7, #15]
 80074c0:	e001      	b.n	80074c6 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40013000 	.word	0x40013000
 80074d4:	40003800 	.word	0x40003800
 80074d8:	40003c00 	.word	0x40003c00
 80074dc:	40003400 	.word	0x40003400
 80074e0:	0800865c 	.word	0x0800865c

080074e4 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <SPI_I2S_ClearFlag+0x60>)
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d014      	beq.n	8007522 <SPI_I2S_ClearFlag+0x3e>
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4b13      	ldr	r3, [pc, #76]	; (8007548 <SPI_I2S_ClearFlag+0x64>)
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d010      	beq.n	8007522 <SPI_I2S_ClearFlag+0x3e>
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <SPI_I2S_ClearFlag+0x68>)
 8007504:	429a      	cmp	r2, r3
 8007506:	d00c      	beq.n	8007522 <SPI_I2S_ClearFlag+0x3e>
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <SPI_I2S_ClearFlag+0x6c>)
 800750c:	429a      	cmp	r2, r3
 800750e:	d008      	beq.n	8007522 <SPI_I2S_ClearFlag+0x3e>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8007516:	d004      	beq.n	8007522 <SPI_I2S_ClearFlag+0x3e>
 8007518:	480e      	ldr	r0, [pc, #56]	; (8007554 <SPI_I2S_ClearFlag+0x70>)
 800751a:	f240 419b 	movw	r1, #1179	; 0x49b
 800751e:	f7fb fd1b 	bl	8002f58 <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 8007522:	887b      	ldrh	r3, [r7, #2]
 8007524:	2b10      	cmp	r3, #16
 8007526:	d004      	beq.n	8007532 <SPI_I2S_ClearFlag+0x4e>
 8007528:	480a      	ldr	r0, [pc, #40]	; (8007554 <SPI_I2S_ClearFlag+0x70>)
 800752a:	f240 419c 	movw	r1, #1180	; 0x49c
 800752e:	f7fb fd13 	bl	8002f58 <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8007532:	887b      	ldrh	r3, [r7, #2]
 8007534:	43db      	mvns	r3, r3
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	811a      	strh	r2, [r3, #8]
}
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40013000 	.word	0x40013000
 8007548:	40003800 	.word	0x40003800
 800754c:	40003c00 	.word	0x40003c00
 8007550:	40003400 	.word	0x40003400
 8007554:	0800865c 	.word	0x0800865c

08007558 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	71fa      	strb	r2, [r7, #7]
 8007564:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01b      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d018      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d015      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	2b03      	cmp	r3, #3
 8007580:	d012      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	2b04      	cmp	r3, #4
 8007586:	d00f      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	2b05      	cmp	r3, #5
 800758c:	d00c      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	2b06      	cmp	r3, #6
 8007592:	d009      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	2b07      	cmp	r3, #7
 8007598:	d006      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d003      	beq.n	80075a8 <SYSCFG_EXTILineConfig+0x50>
 80075a0:	4834      	ldr	r0, [pc, #208]	; (8007674 <SYSCFG_EXTILineConfig+0x11c>)
 80075a2:	217c      	movs	r1, #124	; 0x7c
 80075a4:	f7fb fcd8 	bl	8002f58 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 80075a8:	79bb      	ldrb	r3, [r7, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d030      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075ae:	79bb      	ldrb	r3, [r7, #6]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d02d      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075b4:	79bb      	ldrb	r3, [r7, #6]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d02a      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075ba:	79bb      	ldrb	r3, [r7, #6]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d027      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075c0:	79bb      	ldrb	r3, [r7, #6]
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d024      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075c6:	79bb      	ldrb	r3, [r7, #6]
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	d021      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075cc:	79bb      	ldrb	r3, [r7, #6]
 80075ce:	2b06      	cmp	r3, #6
 80075d0:	d01e      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075d2:	79bb      	ldrb	r3, [r7, #6]
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	d01b      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075d8:	79bb      	ldrb	r3, [r7, #6]
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d018      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075de:	79bb      	ldrb	r3, [r7, #6]
 80075e0:	2b09      	cmp	r3, #9
 80075e2:	d015      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075e4:	79bb      	ldrb	r3, [r7, #6]
 80075e6:	2b0a      	cmp	r3, #10
 80075e8:	d012      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075ea:	79bb      	ldrb	r3, [r7, #6]
 80075ec:	2b0b      	cmp	r3, #11
 80075ee:	d00f      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075f0:	79bb      	ldrb	r3, [r7, #6]
 80075f2:	2b0c      	cmp	r3, #12
 80075f4:	d00c      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075f6:	79bb      	ldrb	r3, [r7, #6]
 80075f8:	2b0d      	cmp	r3, #13
 80075fa:	d009      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 80075fc:	79bb      	ldrb	r3, [r7, #6]
 80075fe:	2b0e      	cmp	r3, #14
 8007600:	d006      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 8007602:	79bb      	ldrb	r3, [r7, #6]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d003      	beq.n	8007610 <SYSCFG_EXTILineConfig+0xb8>
 8007608:	481a      	ldr	r0, [pc, #104]	; (8007674 <SYSCFG_EXTILineConfig+0x11c>)
 800760a:	217d      	movs	r1, #125	; 0x7d
 800760c:	f7fb fca4 	bl	8002f58 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8007610:	79bb      	ldrb	r3, [r7, #6]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	220f      	movs	r2, #15
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8007620:	4b15      	ldr	r3, [pc, #84]	; (8007678 <SYSCFG_EXTILineConfig+0x120>)
 8007622:	79ba      	ldrb	r2, [r7, #6]
 8007624:	0892      	lsrs	r2, r2, #2
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	4913      	ldr	r1, [pc, #76]	; (8007678 <SYSCFG_EXTILineConfig+0x120>)
 800762a:	79b8      	ldrb	r0, [r7, #6]
 800762c:	0880      	lsrs	r0, r0, #2
 800762e:	b2c0      	uxtb	r0, r0
 8007630:	3002      	adds	r0, #2
 8007632:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	43c9      	mvns	r1, r1
 800763a:	4001      	ands	r1, r0
 800763c:	3202      	adds	r2, #2
 800763e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8007642:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <SYSCFG_EXTILineConfig+0x120>)
 8007644:	79ba      	ldrb	r2, [r7, #6]
 8007646:	0892      	lsrs	r2, r2, #2
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	490b      	ldr	r1, [pc, #44]	; (8007678 <SYSCFG_EXTILineConfig+0x120>)
 800764c:	79b8      	ldrb	r0, [r7, #6]
 800764e:	0880      	lsrs	r0, r0, #2
 8007650:	b2c0      	uxtb	r0, r0
 8007652:	3002      	adds	r0, #2
 8007654:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8007658:	79fc      	ldrb	r4, [r7, #7]
 800765a:	79b9      	ldrb	r1, [r7, #6]
 800765c:	f001 0103 	and.w	r1, r1, #3
 8007660:	0089      	lsls	r1, r1, #2
 8007662:	fa04 f101 	lsl.w	r1, r4, r1
 8007666:	4301      	orrs	r1, r0
 8007668:	3202      	adds	r2, #2
 800766a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	bd90      	pop	{r4, r7, pc}
 8007674:	080086ac 	.word	0x080086ac
 8007678:	40013800 	.word	0x40013800

0800767c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8007686:	2300      	movs	r3, #0
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
 800768a:	2300      	movs	r3, #0
 800768c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800768e:	2300      	movs	r3, #0
 8007690:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8007692:	2300      	movs	r3, #0
 8007694:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	4b97      	ldr	r3, [pc, #604]	; (80078f8 <USART_Init+0x27c>)
 800769a:	429a      	cmp	r2, r3
 800769c:	d017      	beq.n	80076ce <USART_Init+0x52>
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	4b96      	ldr	r3, [pc, #600]	; (80078fc <USART_Init+0x280>)
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d013      	beq.n	80076ce <USART_Init+0x52>
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4b95      	ldr	r3, [pc, #596]	; (8007900 <USART_Init+0x284>)
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d00f      	beq.n	80076ce <USART_Init+0x52>
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	4b94      	ldr	r3, [pc, #592]	; (8007904 <USART_Init+0x288>)
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d00b      	beq.n	80076ce <USART_Init+0x52>
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4b93      	ldr	r3, [pc, #588]	; (8007908 <USART_Init+0x28c>)
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d007      	beq.n	80076ce <USART_Init+0x52>
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	4b92      	ldr	r3, [pc, #584]	; (800790c <USART_Init+0x290>)
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d003      	beq.n	80076ce <USART_Init+0x52>
 80076c6:	4892      	ldr	r0, [pc, #584]	; (8007910 <USART_Init+0x294>)
 80076c8:	21eb      	movs	r1, #235	; 0xeb
 80076ca:	f7fb fc45 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <USART_Init+0x64>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b8e      	ldr	r3, [pc, #568]	; (8007914 <USART_Init+0x298>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d903      	bls.n	80076e8 <USART_Init+0x6c>
 80076e0:	488b      	ldr	r0, [pc, #556]	; (8007910 <USART_Init+0x294>)
 80076e2:	21ec      	movs	r1, #236	; 0xec
 80076e4:	f7fb fc38 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	889b      	ldrh	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <USART_Init+0x86>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	889b      	ldrh	r3, [r3, #4]
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f8:	d003      	beq.n	8007702 <USART_Init+0x86>
 80076fa:	4885      	ldr	r0, [pc, #532]	; (8007910 <USART_Init+0x294>)
 80076fc:	21ed      	movs	r1, #237	; 0xed
 80076fe:	f7fb fc2b 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88db      	ldrh	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d012      	beq.n	8007730 <USART_Init+0xb4>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	88db      	ldrh	r3, [r3, #6]
 800770e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007712:	d00d      	beq.n	8007730 <USART_Init+0xb4>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	88db      	ldrh	r3, [r3, #6]
 8007718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771c:	d008      	beq.n	8007730 <USART_Init+0xb4>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	88db      	ldrh	r3, [r3, #6]
 8007722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007726:	d003      	beq.n	8007730 <USART_Init+0xb4>
 8007728:	4879      	ldr	r0, [pc, #484]	; (8007910 <USART_Init+0x294>)
 800772a:	21ee      	movs	r1, #238	; 0xee
 800772c:	f7fb fc14 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	891b      	ldrh	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00d      	beq.n	8007754 <USART_Init+0xd8>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	891b      	ldrh	r3, [r3, #8]
 800773c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007740:	d008      	beq.n	8007754 <USART_Init+0xd8>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	891b      	ldrh	r3, [r3, #8]
 8007746:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800774a:	d003      	beq.n	8007754 <USART_Init+0xd8>
 800774c:	4870      	ldr	r0, [pc, #448]	; (8007910 <USART_Init+0x294>)
 800774e:	21ef      	movs	r1, #239	; 0xef
 8007750:	f7fb fc02 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	895b      	ldrh	r3, [r3, #10]
 8007758:	461a      	mov	r2, r3
 800775a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d103      	bne.n	800776c <USART_Init+0xf0>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	895b      	ldrh	r3, [r3, #10]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <USART_Init+0xf8>
 800776c:	4868      	ldr	r0, [pc, #416]	; (8007910 <USART_Init+0x294>)
 800776e:	21f0      	movs	r1, #240	; 0xf0
 8007770:	f7fb fbf2 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	899b      	ldrh	r3, [r3, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d012      	beq.n	80077a2 <USART_Init+0x126>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	899b      	ldrh	r3, [r3, #12]
 8007780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007784:	d00d      	beq.n	80077a2 <USART_Init+0x126>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	899b      	ldrh	r3, [r3, #12]
 800778a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778e:	d008      	beq.n	80077a2 <USART_Init+0x126>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	899b      	ldrh	r3, [r3, #12]
 8007794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007798:	d003      	beq.n	80077a2 <USART_Init+0x126>
 800779a:	485d      	ldr	r0, [pc, #372]	; (8007910 <USART_Init+0x294>)
 800779c:	21f1      	movs	r1, #241	; 0xf1
 800779e:	f7fb fbdb 	bl	8002f58 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	899b      	ldrh	r3, [r3, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d013      	beq.n	80077d2 <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4b52      	ldr	r3, [pc, #328]	; (80078f8 <USART_Init+0x27c>)
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d00f      	beq.n	80077d2 <USART_Init+0x156>
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4b51      	ldr	r3, [pc, #324]	; (80078fc <USART_Init+0x280>)
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d00b      	beq.n	80077d2 <USART_Init+0x156>
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4b50      	ldr	r3, [pc, #320]	; (8007900 <USART_Init+0x284>)
 80077be:	429a      	cmp	r2, r3
 80077c0:	d007      	beq.n	80077d2 <USART_Init+0x156>
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4b51      	ldr	r3, [pc, #324]	; (800790c <USART_Init+0x290>)
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d003      	beq.n	80077d2 <USART_Init+0x156>
 80077ca:	4851      	ldr	r0, [pc, #324]	; (8007910 <USART_Init+0x294>)
 80077cc:	21f6      	movs	r1, #246	; 0xf6
 80077ce:	f7fb fbc3 	bl	8002f58 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8a1b      	ldrh	r3, [r3, #16]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e8:	4313      	orrs	r3, r2
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	899b      	ldrh	r3, [r3, #12]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007802:	f023 030c 	bic.w	r3, r3, #12
 8007806:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	889a      	ldrh	r2, [r3, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	891b      	ldrh	r3, [r3, #8]
 8007810:	4313      	orrs	r3, r2
 8007812:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007818:	4313      	orrs	r3, r2
 800781a:	b29b      	uxth	r3, r3
 800781c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781e:	4313      	orrs	r3, r2
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	b29a      	uxth	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8a9b      	ldrh	r3, [r3, #20]
 800782e:	b29b      	uxth	r3, r3
 8007830:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007838:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	899b      	ldrh	r3, [r3, #12]
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	4313      	orrs	r3, r2
 8007842:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	b29a      	uxth	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff fb3d 	bl	8006ed0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4b27      	ldr	r3, [pc, #156]	; (80078f8 <USART_Init+0x27c>)
 800785a:	429a      	cmp	r2, r3
 800785c:	d003      	beq.n	8007866 <USART_Init+0x1ea>
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4b2a      	ldr	r3, [pc, #168]	; (800790c <USART_Init+0x290>)
 8007862:	429a      	cmp	r2, r3
 8007864:	d102      	bne.n	800786c <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	623b      	str	r3, [r7, #32]
 800786a:	e001      	b.n	8007870 <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	899b      	ldrh	r3, [r3, #12]
 8007874:	b29b      	uxth	r3, r3
 8007876:	b29b      	uxth	r3, r3
 8007878:	b21b      	sxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	da0c      	bge.n	8007898 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800787e:	6a3a      	ldr	r2, [r7, #32]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009a      	lsls	r2, r3, #2
 8007888:	441a      	add	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	fbb2 f3f3 	udiv	r3, r2, r3
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	e00b      	b.n	80078b0 <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8007898:	6a3a      	ldr	r2, [r7, #32]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009a      	lsls	r2, r3, #2
 80078a2:	441a      	add	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	4b19      	ldr	r3, [pc, #100]	; (8007918 <USART_Init+0x29c>)
 80078b4:	fba3 1302 	umull	r1, r3, r3, r2
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	2264      	movs	r2, #100	; 0x64
 80078c4:	fb02 f303 	mul.w	r3, r2, r3
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	899b      	ldrh	r3, [r3, #12]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	b21b      	sxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	da1f      	bge.n	800791c <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <USART_Init+0x29c>)
 80078e6:	fba3 1302 	umull	r1, r3, r3, r2
 80078ea:	095b      	lsrs	r3, r3, #5
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	4313      	orrs	r3, r2
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	e01e      	b.n	8007936 <USART_Init+0x2ba>
 80078f8:	40011000 	.word	0x40011000
 80078fc:	40004400 	.word	0x40004400
 8007900:	40004800 	.word	0x40004800
 8007904:	40004c00 	.word	0x40004c00
 8007908:	40005000 	.word	0x40005000
 800790c:	40011400 	.word	0x40011400
 8007910:	08008700 	.word	0x08008700
 8007914:	007270e0 	.word	0x007270e0
 8007918:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007924:	4b07      	ldr	r3, [pc, #28]	; (8007944 <USART_Init+0x2c8>)
 8007926:	fba3 1302 	umull	r1, r3, r3, r2
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	4313      	orrs	r3, r2
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	811a      	strh	r2, [r3, #8]
}
 800793e:	3728      	adds	r7, #40	; 0x28
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	51eb851f 	.word	0x51eb851f

08007948 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	4b1f      	ldr	r3, [pc, #124]	; (80079d4 <USART_Cmd+0x8c>)
 8007958:	429a      	cmp	r2, r3
 800795a:	d018      	beq.n	800798e <USART_Cmd+0x46>
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4b1e      	ldr	r3, [pc, #120]	; (80079d8 <USART_Cmd+0x90>)
 8007960:	429a      	cmp	r2, r3
 8007962:	d014      	beq.n	800798e <USART_Cmd+0x46>
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <USART_Cmd+0x94>)
 8007968:	429a      	cmp	r2, r3
 800796a:	d010      	beq.n	800798e <USART_Cmd+0x46>
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4b1c      	ldr	r3, [pc, #112]	; (80079e0 <USART_Cmd+0x98>)
 8007970:	429a      	cmp	r2, r3
 8007972:	d00c      	beq.n	800798e <USART_Cmd+0x46>
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <USART_Cmd+0x9c>)
 8007978:	429a      	cmp	r2, r3
 800797a:	d008      	beq.n	800798e <USART_Cmd+0x46>
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4b1a      	ldr	r3, [pc, #104]	; (80079e8 <USART_Cmd+0xa0>)
 8007980:	429a      	cmp	r2, r3
 8007982:	d004      	beq.n	800798e <USART_Cmd+0x46>
 8007984:	4819      	ldr	r0, [pc, #100]	; (80079ec <USART_Cmd+0xa4>)
 8007986:	f240 119b 	movw	r1, #411	; 0x19b
 800798a:	f7fb fae5 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800798e:	78fb      	ldrb	r3, [r7, #3]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <USART_Cmd+0x5c>
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d004      	beq.n	80079a4 <USART_Cmd+0x5c>
 800799a:	4814      	ldr	r0, [pc, #80]	; (80079ec <USART_Cmd+0xa4>)
 800799c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80079a0:	f7fb fada 	bl	8002f58 <assert_failed>
  
  if (NewState != DISABLE)
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	899b      	ldrh	r3, [r3, #12]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	819a      	strh	r2, [r3, #12]
 80079ba:	e007      	b.n	80079cc <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	899b      	ldrh	r3, [r3, #12]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	819a      	strh	r2, [r3, #12]
  }
}
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40011000 	.word	0x40011000
 80079d8:	40004400 	.word	0x40004400
 80079dc:	40004800 	.word	0x40004800
 80079e0:	40004c00 	.word	0x40004c00
 80079e4:	40005000 	.word	0x40005000
 80079e8:	40011400 	.word	0x40011400
 80079ec:	08008700 	.word	0x08008700

080079f0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	4613      	mov	r3, r2
 80079fa:	460a      	mov	r2, r1
 80079fc:	807a      	strh	r2, [r7, #2]
 80079fe:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	4b4f      	ldr	r3, [pc, #316]	; (8007b50 <USART_ITConfig+0x160>)
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d018      	beq.n	8007a4a <USART_ITConfig+0x5a>
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	4b4e      	ldr	r3, [pc, #312]	; (8007b54 <USART_ITConfig+0x164>)
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d014      	beq.n	8007a4a <USART_ITConfig+0x5a>
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	4b4d      	ldr	r3, [pc, #308]	; (8007b58 <USART_ITConfig+0x168>)
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d010      	beq.n	8007a4a <USART_ITConfig+0x5a>
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	4b4c      	ldr	r3, [pc, #304]	; (8007b5c <USART_ITConfig+0x16c>)
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d00c      	beq.n	8007a4a <USART_ITConfig+0x5a>
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	4b4b      	ldr	r3, [pc, #300]	; (8007b60 <USART_ITConfig+0x170>)
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d008      	beq.n	8007a4a <USART_ITConfig+0x5a>
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4b4a      	ldr	r3, [pc, #296]	; (8007b64 <USART_ITConfig+0x174>)
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d004      	beq.n	8007a4a <USART_ITConfig+0x5a>
 8007a40:	4849      	ldr	r0, [pc, #292]	; (8007b68 <USART_ITConfig+0x178>)
 8007a42:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8007a46:	f7fb fa87 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 8007a4a:	887b      	ldrh	r3, [r7, #2]
 8007a4c:	2b28      	cmp	r3, #40	; 0x28
 8007a4e:	d025      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a50:	887a      	ldrh	r2, [r7, #2]
 8007a52:	f240 7327 	movw	r3, #1831	; 0x727
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d020      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a5a:	887a      	ldrh	r2, [r7, #2]
 8007a5c:	f240 6326 	movw	r3, #1574	; 0x626
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d01b      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a64:	887a      	ldrh	r2, [r7, #2]
 8007a66:	f240 5325 	movw	r3, #1317	; 0x525
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d016      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a6e:	887a      	ldrh	r2, [r7, #2]
 8007a70:	f240 4324 	movw	r3, #1060	; 0x424
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d011      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a78:	887a      	ldrh	r2, [r7, #2]
 8007a7a:	f640 0346 	movw	r3, #2118	; 0x846
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d00c      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a82:	887a      	ldrh	r2, [r7, #2]
 8007a84:	f640 136a 	movw	r3, #2410	; 0x96a
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d007      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a8c:	887b      	ldrh	r3, [r7, #2]
 8007a8e:	2b60      	cmp	r3, #96	; 0x60
 8007a90:	d004      	beq.n	8007a9c <USART_ITConfig+0xac>
 8007a92:	4835      	ldr	r0, [pc, #212]	; (8007b68 <USART_ITConfig+0x178>)
 8007a94:	f240 41be 	movw	r1, #1214	; 0x4be
 8007a98:	f7fb fa5e 	bl	8002f58 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8007a9c:	787b      	ldrb	r3, [r7, #1]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d007      	beq.n	8007ab2 <USART_ITConfig+0xc2>
 8007aa2:	787b      	ldrb	r3, [r7, #1]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d004      	beq.n	8007ab2 <USART_ITConfig+0xc2>
 8007aa8:	482f      	ldr	r0, [pc, #188]	; (8007b68 <USART_ITConfig+0x178>)
 8007aaa:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8007aae:	f7fb fa53 	bl	8002f58 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 8007ab2:	887a      	ldrh	r2, [r7, #2]
 8007ab4:	f640 136a 	movw	r3, #2410	; 0x96a
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d114      	bne.n	8007ae6 <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <USART_ITConfig+0x160>)
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d010      	beq.n	8007ae6 <USART_ITConfig+0xf6>
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	4b23      	ldr	r3, [pc, #140]	; (8007b54 <USART_ITConfig+0x164>)
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d00c      	beq.n	8007ae6 <USART_ITConfig+0xf6>
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4b22      	ldr	r3, [pc, #136]	; (8007b58 <USART_ITConfig+0x168>)
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d008      	beq.n	8007ae6 <USART_ITConfig+0xf6>
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4b23      	ldr	r3, [pc, #140]	; (8007b64 <USART_ITConfig+0x174>)
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d004      	beq.n	8007ae6 <USART_ITConfig+0xf6>
 8007adc:	4822      	ldr	r0, [pc, #136]	; (8007b68 <USART_ITConfig+0x178>)
 8007ade:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007ae2:	f7fb fa39 	bl	8002f58 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007aea:	887b      	ldrh	r3, [r7, #2]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8007af4:	887b      	ldrh	r3, [r7, #2]
 8007af6:	f003 031f 	and.w	r3, r3, #31
 8007afa:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d103      	bne.n	8007b14 <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	e009      	b.n	8007b28 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d103      	bne.n	8007b22 <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	e002      	b.n	8007b28 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	3314      	adds	r3, #20
 8007b26:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8007b28:	787b      	ldrb	r3, [r7, #1]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	6811      	ldr	r1, [r2, #0]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e006      	b.n	8007b4a <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	6811      	ldr	r1, [r2, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	43d2      	mvns	r2, r2
 8007b46:	400a      	ands	r2, r1
 8007b48:	601a      	str	r2, [r3, #0]
  }
}
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40011000 	.word	0x40011000
 8007b54:	40004400 	.word	0x40004400
 8007b58:	40004800 	.word	0x40004800
 8007b5c:	40004c00 	.word	0x40004c00
 8007b60:	40005000 	.word	0x40005000
 8007b64:	40011400 	.word	0x40011400
 8007b68:	08008700 	.word	0x08008700

08007b6c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	2300      	movs	r3, #0
 8007b82:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8007b84:	2300      	movs	r3, #0
 8007b86:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4b5c      	ldr	r3, [pc, #368]	; (8007cfc <USART_GetITStatus+0x190>)
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d018      	beq.n	8007bc2 <USART_GetITStatus+0x56>
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	4b5b      	ldr	r3, [pc, #364]	; (8007d00 <USART_GetITStatus+0x194>)
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d014      	beq.n	8007bc2 <USART_GetITStatus+0x56>
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	4b5a      	ldr	r3, [pc, #360]	; (8007d04 <USART_GetITStatus+0x198>)
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d010      	beq.n	8007bc2 <USART_GetITStatus+0x56>
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <USART_GetITStatus+0x19c>)
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d00c      	beq.n	8007bc2 <USART_GetITStatus+0x56>
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	4b58      	ldr	r3, [pc, #352]	; (8007d0c <USART_GetITStatus+0x1a0>)
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d008      	beq.n	8007bc2 <USART_GetITStatus+0x56>
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4b57      	ldr	r3, [pc, #348]	; (8007d10 <USART_GetITStatus+0x1a4>)
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d004      	beq.n	8007bc2 <USART_GetITStatus+0x56>
 8007bb8:	4856      	ldr	r0, [pc, #344]	; (8007d14 <USART_GetITStatus+0x1a8>)
 8007bba:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8007bbe:	f7fb f9cb 	bl	8002f58 <assert_failed>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8007bc2:	887b      	ldrh	r3, [r7, #2]
 8007bc4:	2b28      	cmp	r3, #40	; 0x28
 8007bc6:	d037      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007bc8:	887a      	ldrh	r2, [r7, #2]
 8007bca:	f240 7327 	movw	r3, #1831	; 0x727
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d032      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007bd2:	887a      	ldrh	r2, [r7, #2]
 8007bd4:	f240 6326 	movw	r3, #1574	; 0x626
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d02d      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007bdc:	887a      	ldrh	r2, [r7, #2]
 8007bde:	f240 5325 	movw	r3, #1317	; 0x525
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d028      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007be6:	887a      	ldrh	r2, [r7, #2]
 8007be8:	f240 4324 	movw	r3, #1060	; 0x424
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d023      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007bf0:	887a      	ldrh	r2, [r7, #2]
 8007bf2:	f640 0346 	movw	r3, #2118	; 0x846
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d01e      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007bfa:	887a      	ldrh	r2, [r7, #2]
 8007bfc:	f640 136a 	movw	r3, #2410	; 0x96a
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d019      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007c04:	887b      	ldrh	r3, [r7, #2]
 8007c06:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007c0a:	d015      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007c0c:	887a      	ldrh	r2, [r7, #2]
 8007c0e:	f240 3325 	movw	r3, #805	; 0x325
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d010      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8007c1c:	d00c      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007c1e:	887b      	ldrh	r3, [r7, #2]
 8007c20:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8007c24:	d008      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007c26:	887b      	ldrh	r3, [r7, #2]
 8007c28:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8007c2c:	d004      	beq.n	8007c38 <USART_GetITStatus+0xcc>
 8007c2e:	4839      	ldr	r0, [pc, #228]	; (8007d14 <USART_GetITStatus+0x1a8>)
 8007c30:	f240 5151 	movw	r1, #1361	; 0x551
 8007c34:	f7fb f990 	bl	8002f58 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 8007c38:	887a      	ldrh	r2, [r7, #2]
 8007c3a:	f640 136a 	movw	r3, #2410	; 0x96a
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d114      	bne.n	8007c6c <USART_GetITStatus+0x100>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	4b2d      	ldr	r3, [pc, #180]	; (8007cfc <USART_GetITStatus+0x190>)
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d010      	beq.n	8007c6c <USART_GetITStatus+0x100>
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	4b2c      	ldr	r3, [pc, #176]	; (8007d00 <USART_GetITStatus+0x194>)
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d00c      	beq.n	8007c6c <USART_GetITStatus+0x100>
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4b2b      	ldr	r3, [pc, #172]	; (8007d04 <USART_GetITStatus+0x198>)
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d008      	beq.n	8007c6c <USART_GetITStatus+0x100>
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	4b2c      	ldr	r3, [pc, #176]	; (8007d10 <USART_GetITStatus+0x1a4>)
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d004      	beq.n	8007c6c <USART_GetITStatus+0x100>
 8007c62:	482c      	ldr	r0, [pc, #176]	; (8007d14 <USART_GetITStatus+0x1a8>)
 8007c64:	f240 5156 	movw	r1, #1366	; 0x556
 8007c68:	f7fb f976 	bl	8002f58 <assert_failed>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007c6c:	887b      	ldrh	r3, [r7, #2]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	095b      	lsrs	r3, r3, #5
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8007c76:	887b      	ldrh	r3, [r7, #2]
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2201      	movs	r2, #1
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d106      	bne.n	8007c9c <USART_GetITStatus+0x130>
  {
    itmask &= USARTx->CR1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	899b      	ldrh	r3, [r3, #12]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4013      	ands	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
 8007c9a:	e00f      	b.n	8007cbc <USART_GetITStatus+0x150>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d106      	bne.n	8007cb0 <USART_GetITStatus+0x144>
  {
    itmask &= USARTx->CR2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8a1b      	ldrh	r3, [r3, #16]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4013      	ands	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e005      	b.n	8007cbc <USART_GetITStatus+0x150>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8a9b      	ldrh	r3, [r3, #20]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8007cbc:	887b      	ldrh	r3, [r7, #2]
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <USART_GetITStatus+0x180>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <USART_GetITStatus+0x180>
  {
    bitstatus = SET;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	74fb      	strb	r3, [r7, #19]
 8007cea:	e001      	b.n	8007cf0 <USART_GetITStatus+0x184>
  }
  else
  {
    bitstatus = RESET;
 8007cec:	2300      	movs	r3, #0
 8007cee:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8007cf0:	7cfb      	ldrb	r3, [r7, #19]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40011000 	.word	0x40011000
 8007d00:	40004400 	.word	0x40004400
 8007d04:	40004800 	.word	0x40004800
 8007d08:	40004c00 	.word	0x40004c00
 8007d0c:	40005000 	.word	0x40005000
 8007d10:	40011400 	.word	0x40011400
 8007d14:	08008700 	.word	0x08008700

08007d18 <atoi>:
 8007d18:	2100      	movs	r1, #0
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	f000 b9ec 	b.w	80080f8 <strtol>

08007d20 <__libc_init_array>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	4e0f      	ldr	r6, [pc, #60]	; (8007d60 <__libc_init_array+0x40>)
 8007d24:	4d0f      	ldr	r5, [pc, #60]	; (8007d64 <__libc_init_array+0x44>)
 8007d26:	1b76      	subs	r6, r6, r5
 8007d28:	10b6      	asrs	r6, r6, #2
 8007d2a:	d007      	beq.n	8007d3c <__libc_init_array+0x1c>
 8007d2c:	3d04      	subs	r5, #4
 8007d2e:	2400      	movs	r4, #0
 8007d30:	3401      	adds	r4, #1
 8007d32:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007d36:	4798      	blx	r3
 8007d38:	42a6      	cmp	r6, r4
 8007d3a:	d1f9      	bne.n	8007d30 <__libc_init_array+0x10>
 8007d3c:	4e0a      	ldr	r6, [pc, #40]	; (8007d68 <__libc_init_array+0x48>)
 8007d3e:	4d0b      	ldr	r5, [pc, #44]	; (8007d6c <__libc_init_array+0x4c>)
 8007d40:	1b76      	subs	r6, r6, r5
 8007d42:	f000 fea7 	bl	8008a94 <_init>
 8007d46:	10b6      	asrs	r6, r6, #2
 8007d48:	d008      	beq.n	8007d5c <__libc_init_array+0x3c>
 8007d4a:	3d04      	subs	r5, #4
 8007d4c:	2400      	movs	r4, #0
 8007d4e:	3401      	adds	r4, #1
 8007d50:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007d54:	4798      	blx	r3
 8007d56:	42a6      	cmp	r6, r4
 8007d58:	d1f9      	bne.n	8007d4e <__libc_init_array+0x2e>
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	bf00      	nop
 8007d60:	08008aac 	.word	0x08008aac
 8007d64:	08008aac 	.word	0x08008aac
 8007d68:	08008ab4 	.word	0x08008ab4
 8007d6c:	08008aac 	.word	0x08008aac

08007d70 <memcmp>:
 8007d70:	2a03      	cmp	r2, #3
 8007d72:	b470      	push	{r4, r5, r6}
 8007d74:	d928      	bls.n	8007dc8 <memcmp+0x58>
 8007d76:	ea40 0301 	orr.w	r3, r0, r1
 8007d7a:	079b      	lsls	r3, r3, #30
 8007d7c:	d013      	beq.n	8007da6 <memcmp+0x36>
 8007d7e:	7805      	ldrb	r5, [r0, #0]
 8007d80:	780c      	ldrb	r4, [r1, #0]
 8007d82:	42a5      	cmp	r5, r4
 8007d84:	d124      	bne.n	8007dd0 <memcmp+0x60>
 8007d86:	3a01      	subs	r2, #1
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e005      	b.n	8007d98 <memcmp+0x28>
 8007d8c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007d90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d94:	42a5      	cmp	r5, r4
 8007d96:	d11b      	bne.n	8007dd0 <memcmp+0x60>
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	f103 0301 	add.w	r3, r3, #1
 8007d9e:	d1f5      	bne.n	8007d8c <memcmp+0x1c>
 8007da0:	2000      	movs	r0, #0
 8007da2:	bc70      	pop	{r4, r5, r6}
 8007da4:	4770      	bx	lr
 8007da6:	460c      	mov	r4, r1
 8007da8:	4603      	mov	r3, r0
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	681e      	ldr	r6, [r3, #0]
 8007dae:	42ae      	cmp	r6, r5
 8007db0:	4621      	mov	r1, r4
 8007db2:	4618      	mov	r0, r3
 8007db4:	f104 0404 	add.w	r4, r4, #4
 8007db8:	f103 0304 	add.w	r3, r3, #4
 8007dbc:	d104      	bne.n	8007dc8 <memcmp+0x58>
 8007dbe:	3a04      	subs	r2, #4
 8007dc0:	2a03      	cmp	r2, #3
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	d8f0      	bhi.n	8007daa <memcmp+0x3a>
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d1d8      	bne.n	8007d7e <memcmp+0xe>
 8007dcc:	4610      	mov	r0, r2
 8007dce:	e7e8      	b.n	8007da2 <memcmp+0x32>
 8007dd0:	1b28      	subs	r0, r5, r4
 8007dd2:	bc70      	pop	{r4, r5, r6}
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop

08007dd8 <memset>:
 8007dd8:	b4f0      	push	{r4, r5, r6, r7}
 8007dda:	0784      	lsls	r4, r0, #30
 8007ddc:	d043      	beq.n	8007e66 <memset+0x8e>
 8007dde:	1e54      	subs	r4, r2, #1
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d03e      	beq.n	8007e62 <memset+0x8a>
 8007de4:	b2cd      	uxtb	r5, r1
 8007de6:	4603      	mov	r3, r0
 8007de8:	e003      	b.n	8007df2 <memset+0x1a>
 8007dea:	1e62      	subs	r2, r4, #1
 8007dec:	2c00      	cmp	r4, #0
 8007dee:	d038      	beq.n	8007e62 <memset+0x8a>
 8007df0:	4614      	mov	r4, r2
 8007df2:	f803 5b01 	strb.w	r5, [r3], #1
 8007df6:	079a      	lsls	r2, r3, #30
 8007df8:	d1f7      	bne.n	8007dea <memset+0x12>
 8007dfa:	2c03      	cmp	r4, #3
 8007dfc:	d92a      	bls.n	8007e54 <memset+0x7c>
 8007dfe:	b2cd      	uxtb	r5, r1
 8007e00:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007e04:	2c0f      	cmp	r4, #15
 8007e06:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007e0a:	d915      	bls.n	8007e38 <memset+0x60>
 8007e0c:	f1a4 0710 	sub.w	r7, r4, #16
 8007e10:	093f      	lsrs	r7, r7, #4
 8007e12:	f103 0610 	add.w	r6, r3, #16
 8007e16:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6015      	str	r5, [r2, #0]
 8007e1e:	6055      	str	r5, [r2, #4]
 8007e20:	6095      	str	r5, [r2, #8]
 8007e22:	60d5      	str	r5, [r2, #12]
 8007e24:	3210      	adds	r2, #16
 8007e26:	42b2      	cmp	r2, r6
 8007e28:	d1f8      	bne.n	8007e1c <memset+0x44>
 8007e2a:	f004 040f 	and.w	r4, r4, #15
 8007e2e:	3701      	adds	r7, #1
 8007e30:	2c03      	cmp	r4, #3
 8007e32:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8007e36:	d90d      	bls.n	8007e54 <memset+0x7c>
 8007e38:	461e      	mov	r6, r3
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	3a04      	subs	r2, #4
 8007e3e:	2a03      	cmp	r2, #3
 8007e40:	f846 5b04 	str.w	r5, [r6], #4
 8007e44:	d8fa      	bhi.n	8007e3c <memset+0x64>
 8007e46:	1f22      	subs	r2, r4, #4
 8007e48:	f022 0203 	bic.w	r2, r2, #3
 8007e4c:	3204      	adds	r2, #4
 8007e4e:	4413      	add	r3, r2
 8007e50:	f004 0403 	and.w	r4, r4, #3
 8007e54:	b12c      	cbz	r4, 8007e62 <memset+0x8a>
 8007e56:	b2c9      	uxtb	r1, r1
 8007e58:	441c      	add	r4, r3
 8007e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	d1fb      	bne.n	8007e5a <memset+0x82>
 8007e62:	bcf0      	pop	{r4, r5, r6, r7}
 8007e64:	4770      	bx	lr
 8007e66:	4614      	mov	r4, r2
 8007e68:	4603      	mov	r3, r0
 8007e6a:	e7c6      	b.n	8007dfa <memset+0x22>

08007e6c <strlen>:
 8007e6c:	f020 0103 	bic.w	r1, r0, #3
 8007e70:	f010 0003 	ands.w	r0, r0, #3
 8007e74:	f1c0 0000 	rsb	r0, r0, #0
 8007e78:	f851 3b04 	ldr.w	r3, [r1], #4
 8007e7c:	f100 0c04 	add.w	ip, r0, #4
 8007e80:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8007e84:	f06f 0200 	mvn.w	r2, #0
 8007e88:	bf1c      	itt	ne
 8007e8a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8007e8e:	4313      	orrne	r3, r2
 8007e90:	f04f 0c01 	mov.w	ip, #1
 8007e94:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007e98:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007e9c:	eba3 020c 	sub.w	r2, r3, ip
 8007ea0:	ea22 0203 	bic.w	r2, r2, r3
 8007ea4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007ea8:	bf04      	itt	eq
 8007eaa:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007eae:	3004      	addeq	r0, #4
 8007eb0:	d0f4      	beq.n	8007e9c <strlen+0x30>
 8007eb2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007eb6:	bf1f      	itttt	ne
 8007eb8:	3001      	addne	r0, #1
 8007eba:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007ebe:	3001      	addne	r0, #1
 8007ec0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8007ec4:	bf18      	it	ne
 8007ec6:	3001      	addne	r0, #1
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop

08007ecc <strncmp>:
 8007ecc:	b430      	push	{r4, r5}
 8007ece:	2a00      	cmp	r2, #0
 8007ed0:	d04a      	beq.n	8007f68 <strncmp+0x9c>
 8007ed2:	ea40 0301 	orr.w	r3, r0, r1
 8007ed6:	f013 0303 	ands.w	r3, r3, #3
 8007eda:	d12d      	bne.n	8007f38 <strncmp+0x6c>
 8007edc:	2a03      	cmp	r2, #3
 8007ede:	d92b      	bls.n	8007f38 <strncmp+0x6c>
 8007ee0:	6804      	ldr	r4, [r0, #0]
 8007ee2:	680d      	ldr	r5, [r1, #0]
 8007ee4:	42ac      	cmp	r4, r5
 8007ee6:	d127      	bne.n	8007f38 <strncmp+0x6c>
 8007ee8:	3a04      	subs	r2, #4
 8007eea:	d03d      	beq.n	8007f68 <strncmp+0x9c>
 8007eec:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8007ef0:	ea25 0404 	bic.w	r4, r5, r4
 8007ef4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8007ef8:	d13c      	bne.n	8007f74 <strncmp+0xa8>
 8007efa:	460c      	mov	r4, r1
 8007efc:	4603      	mov	r3, r0
 8007efe:	e00e      	b.n	8007f1e <strncmp+0x52>
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	6864      	ldr	r4, [r4, #4]
 8007f04:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	ea25 0503 	bic.w	r5, r5, r3
 8007f0e:	d113      	bne.n	8007f38 <strncmp+0x6c>
 8007f10:	3a04      	subs	r2, #4
 8007f12:	d029      	beq.n	8007f68 <strncmp+0x9c>
 8007f14:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8007f18:	d129      	bne.n	8007f6e <strncmp+0xa2>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	2a03      	cmp	r2, #3
 8007f20:	f100 0004 	add.w	r0, r0, #4
 8007f24:	f101 0104 	add.w	r1, r1, #4
 8007f28:	d8ea      	bhi.n	8007f00 <strncmp+0x34>
 8007f2a:	1e55      	subs	r5, r2, #1
 8007f2c:	b92a      	cbnz	r2, 8007f3a <strncmp+0x6e>
 8007f2e:	7918      	ldrb	r0, [r3, #4]
 8007f30:	7922      	ldrb	r2, [r4, #4]
 8007f32:	1a80      	subs	r0, r0, r2
 8007f34:	bc30      	pop	{r4, r5}
 8007f36:	4770      	bx	lr
 8007f38:	1e55      	subs	r5, r2, #1
 8007f3a:	7803      	ldrb	r3, [r0, #0]
 8007f3c:	780a      	ldrb	r2, [r1, #0]
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d11a      	bne.n	8007f78 <strncmp+0xac>
 8007f42:	b1dd      	cbz	r5, 8007f7c <strncmp+0xb0>
 8007f44:	b1b3      	cbz	r3, 8007f74 <strncmp+0xa8>
 8007f46:	1c6c      	adds	r4, r5, #1
 8007f48:	440c      	add	r4, r1
 8007f4a:	1c8b      	adds	r3, r1, #2
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	e004      	b.n	8007f5a <strncmp+0x8e>
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	d00c      	beq.n	8007f6e <strncmp+0xa2>
 8007f54:	3301      	adds	r3, #1
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d0ec      	beq.n	8007f34 <strncmp+0x68>
 8007f5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f5e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8007f62:	4290      	cmp	r0, r2
 8007f64:	d0f4      	beq.n	8007f50 <strncmp+0x84>
 8007f66:	e7e4      	b.n	8007f32 <strncmp+0x66>
 8007f68:	4610      	mov	r0, r2
 8007f6a:	bc30      	pop	{r4, r5}
 8007f6c:	4770      	bx	lr
 8007f6e:	2000      	movs	r0, #0
 8007f70:	bc30      	pop	{r4, r5}
 8007f72:	4770      	bx	lr
 8007f74:	4618      	mov	r0, r3
 8007f76:	e7dd      	b.n	8007f34 <strncmp+0x68>
 8007f78:	4618      	mov	r0, r3
 8007f7a:	e7da      	b.n	8007f32 <strncmp+0x66>
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	e7d9      	b.n	8007f34 <strncmp+0x68>

08007f80 <strncpy>:
 8007f80:	ea40 0301 	orr.w	r3, r0, r1
 8007f84:	079b      	lsls	r3, r3, #30
 8007f86:	b470      	push	{r4, r5, r6}
 8007f88:	d12a      	bne.n	8007fe0 <strncpy+0x60>
 8007f8a:	2a03      	cmp	r2, #3
 8007f8c:	d928      	bls.n	8007fe0 <strncpy+0x60>
 8007f8e:	460c      	mov	r4, r1
 8007f90:	4603      	mov	r3, r0
 8007f92:	4621      	mov	r1, r4
 8007f94:	f854 5b04 	ldr.w	r5, [r4], #4
 8007f98:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8007f9c:	ea26 0605 	bic.w	r6, r6, r5
 8007fa0:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8007fa4:	d105      	bne.n	8007fb2 <strncpy+0x32>
 8007fa6:	3a04      	subs	r2, #4
 8007fa8:	2a03      	cmp	r2, #3
 8007faa:	f843 5b04 	str.w	r5, [r3], #4
 8007fae:	4621      	mov	r1, r4
 8007fb0:	d8ef      	bhi.n	8007f92 <strncpy+0x12>
 8007fb2:	b19a      	cbz	r2, 8007fdc <strncpy+0x5c>
 8007fb4:	780c      	ldrb	r4, [r1, #0]
 8007fb6:	701c      	strb	r4, [r3, #0]
 8007fb8:	3a01      	subs	r2, #1
 8007fba:	3301      	adds	r3, #1
 8007fbc:	b13c      	cbz	r4, 8007fce <strncpy+0x4e>
 8007fbe:	b16a      	cbz	r2, 8007fdc <strncpy+0x5c>
 8007fc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fc4:	f803 4b01 	strb.w	r4, [r3], #1
 8007fc8:	3a01      	subs	r2, #1
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d1f7      	bne.n	8007fbe <strncpy+0x3e>
 8007fce:	b12a      	cbz	r2, 8007fdc <strncpy+0x5c>
 8007fd0:	441a      	add	r2, r3
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d1fb      	bne.n	8007fd4 <strncpy+0x54>
 8007fdc:	bc70      	pop	{r4, r5, r6}
 8007fde:	4770      	bx	lr
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	e7e6      	b.n	8007fb2 <strncpy+0x32>

08007fe4 <_strtol_r>:
 8007fe4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fe8:	4c42      	ldr	r4, [pc, #264]	; (80080f4 <_strtol_r+0x110>)
 8007fea:	b082      	sub	sp, #8
 8007fec:	f8d4 c000 	ldr.w	ip, [r4]
 8007ff0:	9001      	str	r0, [sp, #4]
 8007ff2:	460e      	mov	r6, r1
 8007ff4:	e000      	b.n	8007ff8 <_strtol_r+0x14>
 8007ff6:	4626      	mov	r6, r4
 8007ff8:	4634      	mov	r4, r6
 8007ffa:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007ffe:	eb0c 0005 	add.w	r0, ip, r5
 8008002:	7840      	ldrb	r0, [r0, #1]
 8008004:	f000 0008 	and.w	r0, r0, #8
 8008008:	f000 0aff 	and.w	sl, r0, #255	; 0xff
 800800c:	2800      	cmp	r0, #0
 800800e:	d1f2      	bne.n	8007ff6 <_strtol_r+0x12>
 8008010:	2d2d      	cmp	r5, #45	; 0x2d
 8008012:	d05b      	beq.n	80080cc <_strtol_r+0xe8>
 8008014:	2d2b      	cmp	r5, #43	; 0x2b
 8008016:	bf04      	itt	eq
 8008018:	7875      	ldrbeq	r5, [r6, #1]
 800801a:	1cb4      	addeq	r4, r6, #2
 800801c:	f033 0010 	bics.w	r0, r3, #16
 8008020:	d03c      	beq.n	800809c <_strtol_r+0xb8>
 8008022:	4699      	mov	r9, r3
 8008024:	f1ba 0f00 	cmp.w	sl, #0
 8008028:	bf0c      	ite	eq
 800802a:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
 800802e:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
 8008032:	fbbb f8f9 	udiv	r8, fp, r9
 8008036:	2700      	movs	r7, #0
 8008038:	fb09 bb18 	mls	fp, r9, r8, fp
 800803c:	4638      	mov	r0, r7
 800803e:	e00c      	b.n	800805a <_strtol_r+0x76>
 8008040:	3d30      	subs	r5, #48	; 0x30
 8008042:	42ab      	cmp	r3, r5
 8008044:	dd19      	ble.n	800807a <_strtol_r+0x96>
 8008046:	1c7e      	adds	r6, r7, #1
 8008048:	d005      	beq.n	8008056 <_strtol_r+0x72>
 800804a:	4540      	cmp	r0, r8
 800804c:	d823      	bhi.n	8008096 <_strtol_r+0xb2>
 800804e:	d020      	beq.n	8008092 <_strtol_r+0xae>
 8008050:	fb09 5000 	mla	r0, r9, r0, r5
 8008054:	2701      	movs	r7, #1
 8008056:	f814 5b01 	ldrb.w	r5, [r4], #1
 800805a:	eb0c 0605 	add.w	r6, ip, r5
 800805e:	7876      	ldrb	r6, [r6, #1]
 8008060:	f016 0f04 	tst.w	r6, #4
 8008064:	d1ec      	bne.n	8008040 <_strtol_r+0x5c>
 8008066:	f016 0603 	ands.w	r6, r6, #3
 800806a:	d006      	beq.n	800807a <_strtol_r+0x96>
 800806c:	2e01      	cmp	r6, #1
 800806e:	bf14      	ite	ne
 8008070:	2657      	movne	r6, #87	; 0x57
 8008072:	2637      	moveq	r6, #55	; 0x37
 8008074:	1bad      	subs	r5, r5, r6
 8008076:	42ab      	cmp	r3, r5
 8008078:	dce5      	bgt.n	8008046 <_strtol_r+0x62>
 800807a:	1c7b      	adds	r3, r7, #1
 800807c:	d015      	beq.n	80080aa <_strtol_r+0xc6>
 800807e:	f1ba 0f00 	cmp.w	sl, #0
 8008082:	d121      	bne.n	80080c8 <_strtol_r+0xe4>
 8008084:	b10a      	cbz	r2, 800808a <_strtol_r+0xa6>
 8008086:	b9ef      	cbnz	r7, 80080c4 <_strtol_r+0xe0>
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	b002      	add	sp, #8
 800808c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008090:	4770      	bx	lr
 8008092:	455d      	cmp	r5, fp
 8008094:	dddc      	ble.n	8008050 <_strtol_r+0x6c>
 8008096:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800809a:	e7dc      	b.n	8008056 <_strtol_r+0x72>
 800809c:	2d30      	cmp	r5, #48	; 0x30
 800809e:	d01a      	beq.n	80080d6 <_strtol_r+0xf2>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1be      	bne.n	8008022 <_strtol_r+0x3e>
 80080a4:	230a      	movs	r3, #10
 80080a6:	4699      	mov	r9, r3
 80080a8:	e7bc      	b.n	8008024 <_strtol_r+0x40>
 80080aa:	9901      	ldr	r1, [sp, #4]
 80080ac:	f1ba 0f00 	cmp.w	sl, #0
 80080b0:	f04f 0322 	mov.w	r3, #34	; 0x22
 80080b4:	bf0c      	ite	eq
 80080b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80080ba:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80080be:	600b      	str	r3, [r1, #0]
 80080c0:	2a00      	cmp	r2, #0
 80080c2:	d0e2      	beq.n	800808a <_strtol_r+0xa6>
 80080c4:	1e61      	subs	r1, r4, #1
 80080c6:	e7df      	b.n	8008088 <_strtol_r+0xa4>
 80080c8:	4240      	negs	r0, r0
 80080ca:	e7db      	b.n	8008084 <_strtol_r+0xa0>
 80080cc:	1cb4      	adds	r4, r6, #2
 80080ce:	7875      	ldrb	r5, [r6, #1]
 80080d0:	f04f 0a01 	mov.w	sl, #1
 80080d4:	e7a2      	b.n	800801c <_strtol_r+0x38>
 80080d6:	7820      	ldrb	r0, [r4, #0]
 80080d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80080dc:	2858      	cmp	r0, #88	; 0x58
 80080de:	d003      	beq.n	80080e8 <_strtol_r+0x104>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d19e      	bne.n	8008022 <_strtol_r+0x3e>
 80080e4:	2308      	movs	r3, #8
 80080e6:	e79c      	b.n	8008022 <_strtol_r+0x3e>
 80080e8:	2310      	movs	r3, #16
 80080ea:	7865      	ldrb	r5, [r4, #1]
 80080ec:	4699      	mov	r9, r3
 80080ee:	3402      	adds	r4, #2
 80080f0:	e798      	b.n	8008024 <_strtol_r+0x40>
 80080f2:	bf00      	nop
 80080f4:	2000045c 	.word	0x2000045c

080080f8 <strtol>:
 80080f8:	b430      	push	{r4, r5}
 80080fa:	4c04      	ldr	r4, [pc, #16]	; (800810c <strtol+0x14>)
 80080fc:	460d      	mov	r5, r1
 80080fe:	4613      	mov	r3, r2
 8008100:	4601      	mov	r1, r0
 8008102:	462a      	mov	r2, r5
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	bc30      	pop	{r4, r5}
 8008108:	f7ff bf6c 	b.w	8007fe4 <_strtol_r>
 800810c:	20000458 	.word	0x20000458

08008110 <register_fini>:
 8008110:	4b02      	ldr	r3, [pc, #8]	; (800811c <register_fini+0xc>)
 8008112:	b113      	cbz	r3, 800811a <register_fini+0xa>
 8008114:	4802      	ldr	r0, [pc, #8]	; (8008120 <register_fini+0x10>)
 8008116:	f000 b805 	b.w	8008124 <atexit>
 800811a:	4770      	bx	lr
 800811c:	00000000 	.word	0x00000000
 8008120:	08008131 	.word	0x08008131

08008124 <atexit>:
 8008124:	4601      	mov	r1, r0
 8008126:	2000      	movs	r0, #0
 8008128:	4602      	mov	r2, r0
 800812a:	4603      	mov	r3, r0
 800812c:	f000 b818 	b.w	8008160 <__register_exitproc>

08008130 <__libc_fini_array>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d09      	ldr	r5, [pc, #36]	; (8008158 <__libc_fini_array+0x28>)
 8008134:	4c09      	ldr	r4, [pc, #36]	; (800815c <__libc_fini_array+0x2c>)
 8008136:	1b64      	subs	r4, r4, r5
 8008138:	10a4      	asrs	r4, r4, #2
 800813a:	bf18      	it	ne
 800813c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8008140:	d005      	beq.n	800814e <__libc_fini_array+0x1e>
 8008142:	3c01      	subs	r4, #1
 8008144:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008148:	4798      	blx	r3
 800814a:	2c00      	cmp	r4, #0
 800814c:	d1f9      	bne.n	8008142 <__libc_fini_array+0x12>
 800814e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008152:	f000 bca5 	b.w	8008aa0 <_fini>
 8008156:	bf00      	nop
 8008158:	08008ab4 	.word	0x08008ab4
 800815c:	08008ab8 	.word	0x08008ab8

08008160 <__register_exitproc>:
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	4c27      	ldr	r4, [pc, #156]	; (8008200 <__register_exitproc+0xa0>)
 8008164:	6826      	ldr	r6, [r4, #0]
 8008166:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 800816a:	b085      	sub	sp, #20
 800816c:	4607      	mov	r7, r0
 800816e:	2c00      	cmp	r4, #0
 8008170:	d041      	beq.n	80081f6 <__register_exitproc+0x96>
 8008172:	6865      	ldr	r5, [r4, #4]
 8008174:	2d1f      	cmp	r5, #31
 8008176:	dd1e      	ble.n	80081b6 <__register_exitproc+0x56>
 8008178:	4822      	ldr	r0, [pc, #136]	; (8008204 <__register_exitproc+0xa4>)
 800817a:	b918      	cbnz	r0, 8008184 <__register_exitproc+0x24>
 800817c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008180:	b005      	add	sp, #20
 8008182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008184:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008188:	9103      	str	r1, [sp, #12]
 800818a:	9202      	str	r2, [sp, #8]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	f3af 8000 	nop.w
 8008192:	9903      	ldr	r1, [sp, #12]
 8008194:	9a02      	ldr	r2, [sp, #8]
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	4604      	mov	r4, r0
 800819a:	2800      	cmp	r0, #0
 800819c:	d0ee      	beq.n	800817c <__register_exitproc+0x1c>
 800819e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 80081a2:	6025      	str	r5, [r4, #0]
 80081a4:	2000      	movs	r0, #0
 80081a6:	6060      	str	r0, [r4, #4]
 80081a8:	4605      	mov	r5, r0
 80081aa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 80081ae:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 80081b2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 80081b6:	b93f      	cbnz	r7, 80081c8 <__register_exitproc+0x68>
 80081b8:	1cab      	adds	r3, r5, #2
 80081ba:	2000      	movs	r0, #0
 80081bc:	3501      	adds	r5, #1
 80081be:	6065      	str	r5, [r4, #4]
 80081c0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80081c4:	b005      	add	sp, #20
 80081c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 80081cc:	f04f 0c01 	mov.w	ip, #1
 80081d0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80081d4:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80081d8:	fa0c f205 	lsl.w	r2, ip, r5
 80081dc:	4316      	orrs	r6, r2
 80081de:	2f02      	cmp	r7, #2
 80081e0:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80081e4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80081e8:	d1e6      	bne.n	80081b8 <__register_exitproc+0x58>
 80081ea:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80081ee:	431a      	orrs	r2, r3
 80081f0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80081f4:	e7e0      	b.n	80081b8 <__register_exitproc+0x58>
 80081f6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 80081fa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 80081fe:	e7b8      	b.n	8008172 <__register_exitproc+0x12>
 8008200:	0800898c 	.word	0x0800898c
 8008204:	00000000 	.word	0x00000000
 8008208:	ccbbaadd 	.word	0xccbbaadd
 800820c:	00002211 	.word	0x00002211
 8008210:	0800a8c0 	.word	0x0800a8c0
 8008214:	00ffffff 	.word	0x00ffffff
 8008218:	0100a8c0 	.word	0x0100a8c0
 800821c:	6f746f6d 	.word	0x6f746f6d
 8008220:	00000072 	.word	0x00000072
 8008224:	6f746f6d 	.word	0x6f746f6d
 8008228:	5b202072 	.word	0x5b202072
 800822c:	6974706f 	.word	0x6974706f
 8008230:	5d736e6f 	.word	0x5d736e6f
 8008234:	705ba0c2 	.word	0x705ba0c2
 8008238:	6d617261 	.word	0x6d617261
 800823c:	72657465 	.word	0x72657465
 8008240:	a0c25d73 	.word	0xa0c25d73
 8008244:	6f43203a 	.word	0x6f43203a
 8008248:	6f72746e 	.word	0x6f72746e
 800824c:	6d20736c 	.word	0x6d20736c
 8008250:	726f746f 	.word	0x726f746f
 8008254:	65707320 	.word	0x65707320
 8008258:	202c6465 	.word	0x202c6465
 800825c:	2c6d7072 	.word	0x2c6d7072
 8008260:	63746520 	.word	0x63746520
 8008264:	2e202c2e 	.word	0x2e202c2e
 8008268:	0a0d202e 	.word	0x0a0d202e
 800826c:	00000000 	.word	0x00000000
 8008270:	65657073 	.word	0x65657073
 8008274:	00000064 	.word	0x00000064
 8008278:	72727245 	.word	0x72727245
 800827c:	3a20726f 	.word	0x3a20726f
 8008280:	0a642520 	.word	0x0a642520
 8008284:	0000000a 	.word	0x0000000a
 8008288:	00000000 	.word	0x00000000
 800828c:	65657053 	.word	0x65657053
 8008290:	75732064 	.word	0x75732064
 8008294:	65736363 	.word	0x65736363
 8008298:	6c756673 	.word	0x6c756673
 800829c:	7320796c 	.word	0x7320796c
 80082a0:	0a2e7465 	.word	0x0a2e7465
 80082a4:	0000000a 	.word	0x0000000a
 80082a8:	6f727245 	.word	0x6f727245
 80082ac:	65722072 	.word	0x65722072
 80082b0:	76656963 	.word	0x76656963
 80082b4:	20676e69 	.word	0x20676e69
 80082b8:	70736572 	.word	0x70736572
 80082bc:	65736e6f 	.word	0x65736e6f
 80082c0:	000a0a21 	.word	0x000a0a21
 80082c4:	6f727245 	.word	0x6f727245
 80082c8:	65732072 	.word	0x65732072
 80082cc:	6e69646e 	.word	0x6e69646e
 80082d0:	75512067 	.word	0x75512067
 80082d4:	21657565 	.word	0x21657565
 80082d8:	00000a0a 	.word	0x00000a0a
 80082dc:	61727075 	.word	0x61727075
 80082e0:	0000706d 	.word	0x0000706d
 80082e4:	6e776f64 	.word	0x6e776f64
 80082e8:	706d6172 	.word	0x706d6172
 80082ec:	00000000 	.word	0x00000000
 80082f0:	65657053 	.word	0x65657053
 80082f4:	73692064 	.word	0x73692064
 80082f8:	32252020 	.word	0x32252020
 80082fc:	32252e64 	.word	0x32252e64
 8008300:	0a207064 	.word	0x0a207064
 8008304:	0000000a 	.word	0x0000000a
 8008308:	00746573 	.word	0x00746573
 800830c:	00746567 	.word	0x00746567
 8008310:	706f7473 	.word	0x706f7473
 8008314:	00000000 	.word	0x00000000
 8008318:	6f746f4d 	.word	0x6f746f4d
 800831c:	75732072 	.word	0x75732072
 8008320:	65736363 	.word	0x65736363
 8008324:	6c756673 	.word	0x6c756673
 8008328:	7320796c 	.word	0x7320796c
 800832c:	70706f74 	.word	0x70706f74
 8008330:	0a2e6465 	.word	0x0a2e6465
 8008334:	0000000a 	.word	0x0000000a
 8008338:	72617473 	.word	0x72617473
 800833c:	00000074 	.word	0x00000074
 8008340:	6f746f4d 	.word	0x6f746f4d
 8008344:	75732072 	.word	0x75732072
 8008348:	65736363 	.word	0x65736363
 800834c:	6c756673 	.word	0x6c756673
 8008350:	7320796c 	.word	0x7320796c
 8008354:	74726174 	.word	0x74726174
 8008358:	0a2e6465 	.word	0x0a2e6465
 800835c:	0000000a 	.word	0x0000000a
 8008360:	6c756e28 	.word	0x6c756e28
 8008364:	0000296c 	.word	0x0000296c
 8008368:	6f746f6d 	.word	0x6f746f6d
 800836c:	00000072 	.word	0x00000072
 8008370:	6f746f6d 	.word	0x6f746f6d
 8008374:	5b202072 	.word	0x5b202072
 8008378:	6974706f 	.word	0x6974706f
 800837c:	5d736e6f 	.word	0x5d736e6f
 8008380:	705ba0c2 	.word	0x705ba0c2
 8008384:	6d617261 	.word	0x6d617261
 8008388:	72657465 	.word	0x72657465
 800838c:	a0c25d73 	.word	0xa0c25d73
 8008390:	6f43203a 	.word	0x6f43203a
 8008394:	6f72746e 	.word	0x6f72746e
 8008398:	6d20736c 	.word	0x6d20736c
 800839c:	726f746f 	.word	0x726f746f
 80083a0:	65707320 	.word	0x65707320
 80083a4:	202c6465 	.word	0x202c6465
 80083a8:	2c6d7072 	.word	0x2c6d7072
 80083ac:	63746520 	.word	0x63746520
 80083b0:	2e202c2e 	.word	0x2e202c2e
 80083b4:	0a0d202e 	.word	0x0a0d202e
 80083b8:	00000000 	.word	0x00000000
 80083bc:	4d544553 	.word	0x4d544553
 80083c0:	00004341 	.word	0x00004341
 80083c4:	6f746f6d 	.word	0x6f746f6d
 80083c8:	00004872 	.word	0x00004872
 80083cc:	7265486d 	.word	0x7265486d
 80083d0:	65427461 	.word	0x65427461
 80083d4:	00007461 	.word	0x00007461
 80083d8:	74696e69 	.word	0x74696e69
 80083dc:	3235575f 	.word	0x3235575f
 80083e0:	00003030 	.word	0x00003030
 80083e4:	454c4449 	.word	0x454c4449
 80083e8:	00000000 	.word	0x00000000
 80083ec:	20726d54 	.word	0x20726d54
 80083f0:	00637653 	.word	0x00637653
 80083f4:	706c6568 	.word	0x706c6568
 80083f8:	00000000 	.word	0x00000000
 80083fc:	65680a0d 	.word	0x65680a0d
 8008400:	0d3a706c 	.word	0x0d3a706c
 8008404:	694c200a 	.word	0x694c200a
 8008408:	20737473 	.word	0x20737473
 800840c:	206c6c61 	.word	0x206c6c61
 8008410:	20656874 	.word	0x20656874
 8008414:	69676572 	.word	0x69676572
 8008418:	72657473 	.word	0x72657473
 800841c:	63206465 	.word	0x63206465
 8008420:	616d6d6f 	.word	0x616d6d6f
 8008424:	0d73646e 	.word	0x0d73646e
 8008428:	000a0d0a 	.word	0x000a0d0a
 800842c:	6f636e49 	.word	0x6f636e49
 8008430:	63657272 	.word	0x63657272
 8008434:	6f632074 	.word	0x6f632074
 8008438:	6e616d6d 	.word	0x6e616d6d
 800843c:	61702064 	.word	0x61702064
 8008440:	656d6172 	.word	0x656d6172
 8008444:	28726574 	.word	0x28726574
 8008448:	202e2973 	.word	0x202e2973
 800844c:	746e4520 	.word	0x746e4520
 8008450:	22207265 	.word	0x22207265
 8008454:	706c6568 	.word	0x706c6568
 8008458:	6f742022 	.word	0x6f742022
 800845c:	65697620 	.word	0x65697620
 8008460:	20612077 	.word	0x20612077
 8008464:	7473696c 	.word	0x7473696c
 8008468:	20666f20 	.word	0x20666f20
 800846c:	69617661 	.word	0x69617661
 8008470:	6c62616c 	.word	0x6c62616c
 8008474:	6f632065 	.word	0x6f632065
 8008478:	6e616d6d 	.word	0x6e616d6d
 800847c:	0d2e7364 	.word	0x0d2e7364
 8008480:	000a0d0a 	.word	0x000a0d0a
 8008484:	6d6d6f43 	.word	0x6d6d6f43
 8008488:	20646e61 	.word	0x20646e61
 800848c:	20746f6e 	.word	0x20746f6e
 8008490:	6f636572 	.word	0x6f636572
 8008494:	73696e67 	.word	0x73696e67
 8008498:	202e6465 	.word	0x202e6465
 800849c:	746e4520 	.word	0x746e4520
 80084a0:	27207265 	.word	0x27207265
 80084a4:	706c6568 	.word	0x706c6568
 80084a8:	6f742027 	.word	0x6f742027
 80084ac:	65697620 	.word	0x65697620
 80084b0:	20612077 	.word	0x20612077
 80084b4:	7473696c 	.word	0x7473696c
 80084b8:	20666f20 	.word	0x20666f20
 80084bc:	69617661 	.word	0x69617661
 80084c0:	6c62616c 	.word	0x6c62616c
 80084c4:	6f632065 	.word	0x6f632065
 80084c8:	6e616d6d 	.word	0x6e616d6d
 80084cc:	0d2e7364 	.word	0x0d2e7364
 80084d0:	000a0d0a 	.word	0x000a0d0a
 80084d4:	2f707041 	.word	0x2f707041
 80084d8:	334d5453 	.word	0x334d5453
 80084dc:	2d344632 	.word	0x2d344632
 80084e0:	63736944 	.word	0x63736944
 80084e4:	7265766f 	.word	0x7265766f
 80084e8:	694c2f79 	.word	0x694c2f79
 80084ec:	72617262 	.word	0x72617262
 80084f0:	2f736569 	.word	0x2f736569
 80084f4:	334d5453 	.word	0x334d5453
 80084f8:	78344632 	.word	0x78344632
 80084fc:	74535f78 	.word	0x74535f78
 8008500:	72655064 	.word	0x72655064
 8008504:	5f687069 	.word	0x5f687069
 8008508:	76697244 	.word	0x76697244
 800850c:	732f7265 	.word	0x732f7265
 8008510:	6d2f6372 	.word	0x6d2f6372
 8008514:	2e637369 	.word	0x2e637369
 8008518:	00000063 	.word	0x00000063
 800851c:	2f707041 	.word	0x2f707041
 8008520:	334d5453 	.word	0x334d5453
 8008524:	2d344632 	.word	0x2d344632
 8008528:	63736944 	.word	0x63736944
 800852c:	7265766f 	.word	0x7265766f
 8008530:	694c2f79 	.word	0x694c2f79
 8008534:	72617262 	.word	0x72617262
 8008538:	2f736569 	.word	0x2f736569
 800853c:	334d5453 	.word	0x334d5453
 8008540:	78344632 	.word	0x78344632
 8008544:	74535f78 	.word	0x74535f78
 8008548:	72655064 	.word	0x72655064
 800854c:	5f687069 	.word	0x5f687069
 8008550:	76697244 	.word	0x76697244
 8008554:	732f7265 	.word	0x732f7265
 8008558:	732f6372 	.word	0x732f6372
 800855c:	32336d74 	.word	0x32336d74
 8008560:	78783466 	.word	0x78783466
 8008564:	616d645f 	.word	0x616d645f
 8008568:	0000632e 	.word	0x0000632e
 800856c:	2f707041 	.word	0x2f707041
 8008570:	334d5453 	.word	0x334d5453
 8008574:	2d344632 	.word	0x2d344632
 8008578:	63736944 	.word	0x63736944
 800857c:	7265766f 	.word	0x7265766f
 8008580:	694c2f79 	.word	0x694c2f79
 8008584:	72617262 	.word	0x72617262
 8008588:	2f736569 	.word	0x2f736569
 800858c:	334d5453 	.word	0x334d5453
 8008590:	78344632 	.word	0x78344632
 8008594:	74535f78 	.word	0x74535f78
 8008598:	72655064 	.word	0x72655064
 800859c:	5f687069 	.word	0x5f687069
 80085a0:	76697244 	.word	0x76697244
 80085a4:	732f7265 	.word	0x732f7265
 80085a8:	732f6372 	.word	0x732f6372
 80085ac:	32336d74 	.word	0x32336d74
 80085b0:	78783466 	.word	0x78783466
 80085b4:	7478655f 	.word	0x7478655f
 80085b8:	00632e69 	.word	0x00632e69
 80085bc:	2f707041 	.word	0x2f707041
 80085c0:	334d5453 	.word	0x334d5453
 80085c4:	2d344632 	.word	0x2d344632
 80085c8:	63736944 	.word	0x63736944
 80085cc:	7265766f 	.word	0x7265766f
 80085d0:	694c2f79 	.word	0x694c2f79
 80085d4:	72617262 	.word	0x72617262
 80085d8:	2f736569 	.word	0x2f736569
 80085dc:	334d5453 	.word	0x334d5453
 80085e0:	78344632 	.word	0x78344632
 80085e4:	74535f78 	.word	0x74535f78
 80085e8:	72655064 	.word	0x72655064
 80085ec:	5f687069 	.word	0x5f687069
 80085f0:	76697244 	.word	0x76697244
 80085f4:	732f7265 	.word	0x732f7265
 80085f8:	732f6372 	.word	0x732f6372
 80085fc:	32336d74 	.word	0x32336d74
 8008600:	78783466 	.word	0x78783466
 8008604:	6970675f 	.word	0x6970675f
 8008608:	00632e6f 	.word	0x00632e6f
 800860c:	2f707041 	.word	0x2f707041
 8008610:	334d5453 	.word	0x334d5453
 8008614:	2d344632 	.word	0x2d344632
 8008618:	63736944 	.word	0x63736944
 800861c:	7265766f 	.word	0x7265766f
 8008620:	694c2f79 	.word	0x694c2f79
 8008624:	72617262 	.word	0x72617262
 8008628:	2f736569 	.word	0x2f736569
 800862c:	334d5453 	.word	0x334d5453
 8008630:	78344632 	.word	0x78344632
 8008634:	74535f78 	.word	0x74535f78
 8008638:	72655064 	.word	0x72655064
 800863c:	5f687069 	.word	0x5f687069
 8008640:	76697244 	.word	0x76697244
 8008644:	732f7265 	.word	0x732f7265
 8008648:	732f6372 	.word	0x732f6372
 800864c:	32336d74 	.word	0x32336d74
 8008650:	78783466 	.word	0x78783466
 8008654:	6363725f 	.word	0x6363725f
 8008658:	0000632e 	.word	0x0000632e
 800865c:	2f707041 	.word	0x2f707041
 8008660:	334d5453 	.word	0x334d5453
 8008664:	2d344632 	.word	0x2d344632
 8008668:	63736944 	.word	0x63736944
 800866c:	7265766f 	.word	0x7265766f
 8008670:	694c2f79 	.word	0x694c2f79
 8008674:	72617262 	.word	0x72617262
 8008678:	2f736569 	.word	0x2f736569
 800867c:	334d5453 	.word	0x334d5453
 8008680:	78344632 	.word	0x78344632
 8008684:	74535f78 	.word	0x74535f78
 8008688:	72655064 	.word	0x72655064
 800868c:	5f687069 	.word	0x5f687069
 8008690:	76697244 	.word	0x76697244
 8008694:	732f7265 	.word	0x732f7265
 8008698:	732f6372 	.word	0x732f6372
 800869c:	32336d74 	.word	0x32336d74
 80086a0:	78783466 	.word	0x78783466
 80086a4:	6970735f 	.word	0x6970735f
 80086a8:	0000632e 	.word	0x0000632e
 80086ac:	2f707041 	.word	0x2f707041
 80086b0:	334d5453 	.word	0x334d5453
 80086b4:	2d344632 	.word	0x2d344632
 80086b8:	63736944 	.word	0x63736944
 80086bc:	7265766f 	.word	0x7265766f
 80086c0:	694c2f79 	.word	0x694c2f79
 80086c4:	72617262 	.word	0x72617262
 80086c8:	2f736569 	.word	0x2f736569
 80086cc:	334d5453 	.word	0x334d5453
 80086d0:	78344632 	.word	0x78344632
 80086d4:	74535f78 	.word	0x74535f78
 80086d8:	72655064 	.word	0x72655064
 80086dc:	5f687069 	.word	0x5f687069
 80086e0:	76697244 	.word	0x76697244
 80086e4:	732f7265 	.word	0x732f7265
 80086e8:	732f6372 	.word	0x732f6372
 80086ec:	32336d74 	.word	0x32336d74
 80086f0:	78783466 	.word	0x78783466
 80086f4:	7379735f 	.word	0x7379735f
 80086f8:	2e676663 	.word	0x2e676663
 80086fc:	00000063 	.word	0x00000063
 8008700:	2f707041 	.word	0x2f707041
 8008704:	334d5453 	.word	0x334d5453
 8008708:	2d344632 	.word	0x2d344632
 800870c:	63736944 	.word	0x63736944
 8008710:	7265766f 	.word	0x7265766f
 8008714:	694c2f79 	.word	0x694c2f79
 8008718:	72617262 	.word	0x72617262
 800871c:	2f736569 	.word	0x2f736569
 8008720:	334d5453 	.word	0x334d5453
 8008724:	78344632 	.word	0x78344632
 8008728:	74535f78 	.word	0x74535f78
 800872c:	72655064 	.word	0x72655064
 8008730:	5f687069 	.word	0x5f687069
 8008734:	76697244 	.word	0x76697244
 8008738:	732f7265 	.word	0x732f7265
 800873c:	732f6372 	.word	0x732f6372
 8008740:	32336d74 	.word	0x32336d74
 8008744:	78783466 	.word	0x78783466
 8008748:	6173755f 	.word	0x6173755f
 800874c:	632e7472 	.word	0x632e7472
 8008750:	00000000 	.word	0x00000000

08008754 <table_crc_hi>:
 8008754:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008764:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008774:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008784:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008794:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80087a4:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80087b4:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80087c4:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80087d4:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80087e4:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80087f4:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008804:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008814:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 8008824:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008834:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 8008844:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@

08008854 <table_crc_lo>:
 8008854:	01c1c000 c20203c3 c70706c6 04c4c505     ................
 8008864:	cd0d0ccc 0ececf0f 0bcbca0a c80809c9     ................
 8008874:	d91918d8 1adadb1b 1fdfde1e dc1c1ddd     ................
 8008884:	15d5d414 d61617d7 d31312d2 10d0d111     ................
 8008894:	f13130f0 32f2f333 37f7f636 f43435f5     .01.3..26..7.54.
 80088a4:	3dfdfc3c fe3e3fff fb3b3afa 38f8f939     <..=.?>..:;.9..8
 80088b4:	29e9e828 ea2a2beb ef2f2eee 2ceced2d     (..).+*.../.-..,
 80088c4:	e52524e4 26e6e727 23e3e222 e02021e1     .$%.'..&"..#.! .
 80088d4:	a16160a0 62a2a363 67a7a666 a46465a5     .`a.c..bf..g.ed.
 80088e4:	6dadac6c ae6e6faf ab6b6aaa 68a8a969     l..m.on..jk.i..h
 80088f4:	79b9b878 ba7a7bbb bf7f7ebe 7cbcbd7d     x..y.{z..~..}..|
 8008904:	b57574b4 76b6b777 73b3b272 b07071b1     .tu.w..vr..s.qp.
 8008914:	51919050 92525393 97575696 54949555     P..Q.SR..VW.U..T
 8008924:	9d5d5c9c 5e9e9f5f 5b9b9a5a 98585999     .\]._..^Z..[.YX.
 8008934:	89494888 4a8a8b4b 4f8f8e4e 8c4c4d8d     .HI.K..JN..O.ML.
 8008944:	45858444 86464787 83434282 40808141     D..E.GF..BC.A..@

08008954 <xMotorCommand>:
 8008954:	08008368 08008370 08002715 000000ff     h...p....'......

08008964 <ucExpectedStackBytes.8478>:
 8008964:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8008974:	a5a5a5a5                                ....

08008978 <xHelpCommand>:
 8008978:	080083f4 080083fc 0800538d 00000000     .........S......
 8008988:	00000043                                C...

0800898c <_global_impure_ptr>:
 800898c:	20000030                                0.. 

08008990 <_ctype_>:
 8008990:	20202000 20202020 28282020 20282828     .         ((((( 
 80089a0:	20202020 20202020 20202020 20202020                     
 80089b0:	10108820 10101010 10101010 10101010      ...............
 80089c0:	04040410 04040404 10040404 10101010     ................
 80089d0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80089e0:	01010101 01010101 01010101 10101010     ................
 80089f0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8008a00:	02020202 02020202 02020202 10101010     ................
 8008a10:	00000020 00000000 00000000 00000000      ...............
 8008a20:	00000000 00000000 00000000 00000000     ................
 8008a30:	00000000 00000000 00000000 00000000     ................
 8008a40:	00000000 00000000 00000000 00000000     ................
 8008a50:	00000000 00000000 00000000 00000000     ................
 8008a60:	00000000 00000000 00000000 00000000     ................
 8008a70:	00000000 00000000 00000000 00000000     ................
 8008a80:	00000000 00000000 00000000 00000000     ................
 8008a90:	00000000                                ....

08008a94 <_init>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr

08008aa0 <_fini>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr
