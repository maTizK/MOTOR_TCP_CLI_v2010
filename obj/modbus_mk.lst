   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"modbus_mk.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	xSemaphoreDMASPI,4,4
  20              		.section	.bss.xHigherPriorityTaskWoken,"aw",%nobits
  21              		.align	2
  24              	xHigherPriorityTaskWoken:
  25 0000 00000000 		.space	4
  26              		.comm	xSmphrUSART,4,4
  27              		.comm	motorHeartBeatHandle,4,4
  28              		.comm	motorHBHandle,4,4
  29              		.comm	QSpd_handle,4,4
  30              		.comm	QStatus_handle,4,4
  31              		.comm	socket_0,4,4
  32              		.comm	bufferTX,2000,4
  33              		.comm	bufferRX,2000,4
  34              		.comm	bufferRXidx,4,4
  35              		.comm	bufferTXidx,4,4
  36              		.comm	dat_lengthRX,4,4
  37              		.comm	dat_lengthTX,4,4
  38              		.comm	set_macTaskHandle,4,4
  39              		.section	.rodata
  40              		.align	2
  41              	.LC0:
  42 0000 6D6F746F 		.ascii	"motor\000"
  42      7200
  43 0006 0000     		.align	2
  44              	.LC1:
  45 0008 6D6F746F 		.ascii	"motor  [options]\302\240[parameters]\302\240- Type "
  45      7220205B 
  45      6F707469 
  45      6F6E735D 
  45      C2A05B70 
  46 002f 6D6F746F 		.ascii	"motor help for more help\015\012\012\000\000"
  46      72206865 
  46      6C702066 
  46      6F72206D 
  46      6F726520 
  47              		.section	.rodata.xMotorCommand,"a",%progbits
  48              		.align	2
  51              	xMotorCommand:
  52 0000 00000000 		.word	.LC0
  53 0004 08000000 		.word	.LC1
  54 0008 00000000 		.word	prvMotorCommand
  55 000c FF       		.byte	-1
  56 000d 000000   		.space	3
  57              		.section	.rodata
  58              		.align	2
  59              	.LC2:
  60 004c 7461736B 		.ascii	"task\000"
  60      00
  61 0051 000000   		.align	2
  62              	.LC3:
  63 0054 7461736B 		.ascii	"task - return tasks list\015\012\012\000\000"
  63      202D2072 
  63      65747572 
  63      6E207461 
  63      736B7320 
  64 0071 000000   		.section	.rodata.xTaskStatsCommand,"a",%progbits
  65              		.align	2
  68              	xTaskStatsCommand:
  69 0000 4C000000 		.word	.LC2
  70 0004 54000000 		.word	.LC3
  71 0008 00000000 		.word	prvTaskStatsCommand
  72 000c 00       		.byte	0
  73 000d 000000   		.space	3
  74              		.section	.rodata.table_crc_hi,"a",%progbits
  75              		.align	2
  78              	table_crc_hi:
  79 0000 00       		.byte	0
  80 0001 C1       		.byte	-63
  81 0002 81       		.byte	-127
  82 0003 40       		.byte	64
  83 0004 01       		.byte	1
  84 0005 C0       		.byte	-64
  85 0006 80       		.byte	-128
  86 0007 41       		.byte	65
  87 0008 01       		.byte	1
  88 0009 C0       		.byte	-64
  89 000a 80       		.byte	-128
  90 000b 41       		.byte	65
  91 000c 00       		.byte	0
  92 000d C1       		.byte	-63
  93 000e 81       		.byte	-127
  94 000f 40       		.byte	64
  95 0010 01       		.byte	1
  96 0011 C0       		.byte	-64
  97 0012 80       		.byte	-128
  98 0013 41       		.byte	65
  99 0014 00       		.byte	0
 100 0015 C1       		.byte	-63
 101 0016 81       		.byte	-127
 102 0017 40       		.byte	64
 103 0018 00       		.byte	0
 104 0019 C1       		.byte	-63
 105 001a 81       		.byte	-127
 106 001b 40       		.byte	64
 107 001c 01       		.byte	1
 108 001d C0       		.byte	-64
 109 001e 80       		.byte	-128
 110 001f 41       		.byte	65
 111 0020 01       		.byte	1
 112 0021 C0       		.byte	-64
 113 0022 80       		.byte	-128
 114 0023 41       		.byte	65
 115 0024 00       		.byte	0
 116 0025 C1       		.byte	-63
 117 0026 81       		.byte	-127
 118 0027 40       		.byte	64
 119 0028 00       		.byte	0
 120 0029 C1       		.byte	-63
 121 002a 81       		.byte	-127
 122 002b 40       		.byte	64
 123 002c 01       		.byte	1
 124 002d C0       		.byte	-64
 125 002e 80       		.byte	-128
 126 002f 41       		.byte	65
 127 0030 00       		.byte	0
 128 0031 C1       		.byte	-63
 129 0032 81       		.byte	-127
 130 0033 40       		.byte	64
 131 0034 01       		.byte	1
 132 0035 C0       		.byte	-64
 133 0036 80       		.byte	-128
 134 0037 41       		.byte	65
 135 0038 01       		.byte	1
 136 0039 C0       		.byte	-64
 137 003a 80       		.byte	-128
 138 003b 41       		.byte	65
 139 003c 00       		.byte	0
 140 003d C1       		.byte	-63
 141 003e 81       		.byte	-127
 142 003f 40       		.byte	64
 143 0040 01       		.byte	1
 144 0041 C0       		.byte	-64
 145 0042 80       		.byte	-128
 146 0043 41       		.byte	65
 147 0044 00       		.byte	0
 148 0045 C1       		.byte	-63
 149 0046 81       		.byte	-127
 150 0047 40       		.byte	64
 151 0048 00       		.byte	0
 152 0049 C1       		.byte	-63
 153 004a 81       		.byte	-127
 154 004b 40       		.byte	64
 155 004c 01       		.byte	1
 156 004d C0       		.byte	-64
 157 004e 80       		.byte	-128
 158 004f 41       		.byte	65
 159 0050 00       		.byte	0
 160 0051 C1       		.byte	-63
 161 0052 81       		.byte	-127
 162 0053 40       		.byte	64
 163 0054 01       		.byte	1
 164 0055 C0       		.byte	-64
 165 0056 80       		.byte	-128
 166 0057 41       		.byte	65
 167 0058 01       		.byte	1
 168 0059 C0       		.byte	-64
 169 005a 80       		.byte	-128
 170 005b 41       		.byte	65
 171 005c 00       		.byte	0
 172 005d C1       		.byte	-63
 173 005e 81       		.byte	-127
 174 005f 40       		.byte	64
 175 0060 00       		.byte	0
 176 0061 C1       		.byte	-63
 177 0062 81       		.byte	-127
 178 0063 40       		.byte	64
 179 0064 01       		.byte	1
 180 0065 C0       		.byte	-64
 181 0066 80       		.byte	-128
 182 0067 41       		.byte	65
 183 0068 01       		.byte	1
 184 0069 C0       		.byte	-64
 185 006a 80       		.byte	-128
 186 006b 41       		.byte	65
 187 006c 00       		.byte	0
 188 006d C1       		.byte	-63
 189 006e 81       		.byte	-127
 190 006f 40       		.byte	64
 191 0070 01       		.byte	1
 192 0071 C0       		.byte	-64
 193 0072 80       		.byte	-128
 194 0073 41       		.byte	65
 195 0074 00       		.byte	0
 196 0075 C1       		.byte	-63
 197 0076 81       		.byte	-127
 198 0077 40       		.byte	64
 199 0078 00       		.byte	0
 200 0079 C1       		.byte	-63
 201 007a 81       		.byte	-127
 202 007b 40       		.byte	64
 203 007c 01       		.byte	1
 204 007d C0       		.byte	-64
 205 007e 80       		.byte	-128
 206 007f 41       		.byte	65
 207 0080 01       		.byte	1
 208 0081 C0       		.byte	-64
 209 0082 80       		.byte	-128
 210 0083 41       		.byte	65
 211 0084 00       		.byte	0
 212 0085 C1       		.byte	-63
 213 0086 81       		.byte	-127
 214 0087 40       		.byte	64
 215 0088 00       		.byte	0
 216 0089 C1       		.byte	-63
 217 008a 81       		.byte	-127
 218 008b 40       		.byte	64
 219 008c 01       		.byte	1
 220 008d C0       		.byte	-64
 221 008e 80       		.byte	-128
 222 008f 41       		.byte	65
 223 0090 00       		.byte	0
 224 0091 C1       		.byte	-63
 225 0092 81       		.byte	-127
 226 0093 40       		.byte	64
 227 0094 01       		.byte	1
 228 0095 C0       		.byte	-64
 229 0096 80       		.byte	-128
 230 0097 41       		.byte	65
 231 0098 01       		.byte	1
 232 0099 C0       		.byte	-64
 233 009a 80       		.byte	-128
 234 009b 41       		.byte	65
 235 009c 00       		.byte	0
 236 009d C1       		.byte	-63
 237 009e 81       		.byte	-127
 238 009f 40       		.byte	64
 239 00a0 00       		.byte	0
 240 00a1 C1       		.byte	-63
 241 00a2 81       		.byte	-127
 242 00a3 40       		.byte	64
 243 00a4 01       		.byte	1
 244 00a5 C0       		.byte	-64
 245 00a6 80       		.byte	-128
 246 00a7 41       		.byte	65
 247 00a8 01       		.byte	1
 248 00a9 C0       		.byte	-64
 249 00aa 80       		.byte	-128
 250 00ab 41       		.byte	65
 251 00ac 00       		.byte	0
 252 00ad C1       		.byte	-63
 253 00ae 81       		.byte	-127
 254 00af 40       		.byte	64
 255 00b0 01       		.byte	1
 256 00b1 C0       		.byte	-64
 257 00b2 80       		.byte	-128
 258 00b3 41       		.byte	65
 259 00b4 00       		.byte	0
 260 00b5 C1       		.byte	-63
 261 00b6 81       		.byte	-127
 262 00b7 40       		.byte	64
 263 00b8 00       		.byte	0
 264 00b9 C1       		.byte	-63
 265 00ba 81       		.byte	-127
 266 00bb 40       		.byte	64
 267 00bc 01       		.byte	1
 268 00bd C0       		.byte	-64
 269 00be 80       		.byte	-128
 270 00bf 41       		.byte	65
 271 00c0 00       		.byte	0
 272 00c1 C1       		.byte	-63
 273 00c2 81       		.byte	-127
 274 00c3 40       		.byte	64
 275 00c4 01       		.byte	1
 276 00c5 C0       		.byte	-64
 277 00c6 80       		.byte	-128
 278 00c7 41       		.byte	65
 279 00c8 01       		.byte	1
 280 00c9 C0       		.byte	-64
 281 00ca 80       		.byte	-128
 282 00cb 41       		.byte	65
 283 00cc 00       		.byte	0
 284 00cd C1       		.byte	-63
 285 00ce 81       		.byte	-127
 286 00cf 40       		.byte	64
 287 00d0 01       		.byte	1
 288 00d1 C0       		.byte	-64
 289 00d2 80       		.byte	-128
 290 00d3 41       		.byte	65
 291 00d4 00       		.byte	0
 292 00d5 C1       		.byte	-63
 293 00d6 81       		.byte	-127
 294 00d7 40       		.byte	64
 295 00d8 00       		.byte	0
 296 00d9 C1       		.byte	-63
 297 00da 81       		.byte	-127
 298 00db 40       		.byte	64
 299 00dc 01       		.byte	1
 300 00dd C0       		.byte	-64
 301 00de 80       		.byte	-128
 302 00df 41       		.byte	65
 303 00e0 01       		.byte	1
 304 00e1 C0       		.byte	-64
 305 00e2 80       		.byte	-128
 306 00e3 41       		.byte	65
 307 00e4 00       		.byte	0
 308 00e5 C1       		.byte	-63
 309 00e6 81       		.byte	-127
 310 00e7 40       		.byte	64
 311 00e8 00       		.byte	0
 312 00e9 C1       		.byte	-63
 313 00ea 81       		.byte	-127
 314 00eb 40       		.byte	64
 315 00ec 01       		.byte	1
 316 00ed C0       		.byte	-64
 317 00ee 80       		.byte	-128
 318 00ef 41       		.byte	65
 319 00f0 00       		.byte	0
 320 00f1 C1       		.byte	-63
 321 00f2 81       		.byte	-127
 322 00f3 40       		.byte	64
 323 00f4 01       		.byte	1
 324 00f5 C0       		.byte	-64
 325 00f6 80       		.byte	-128
 326 00f7 41       		.byte	65
 327 00f8 01       		.byte	1
 328 00f9 C0       		.byte	-64
 329 00fa 80       		.byte	-128
 330 00fb 41       		.byte	65
 331 00fc 00       		.byte	0
 332 00fd C1       		.byte	-63
 333 00fe 81       		.byte	-127
 334 00ff 40       		.byte	64
 335              		.section	.rodata.table_crc_lo,"a",%progbits
 336              		.align	2
 339              	table_crc_lo:
 340 0000 00       		.byte	0
 341 0001 C0       		.byte	-64
 342 0002 C1       		.byte	-63
 343 0003 01       		.byte	1
 344 0004 C3       		.byte	-61
 345 0005 03       		.byte	3
 346 0006 02       		.byte	2
 347 0007 C2       		.byte	-62
 348 0008 C6       		.byte	-58
 349 0009 06       		.byte	6
 350 000a 07       		.byte	7
 351 000b C7       		.byte	-57
 352 000c 05       		.byte	5
 353 000d C5       		.byte	-59
 354 000e C4       		.byte	-60
 355 000f 04       		.byte	4
 356 0010 CC       		.byte	-52
 357 0011 0C       		.byte	12
 358 0012 0D       		.byte	13
 359 0013 CD       		.byte	-51
 360 0014 0F       		.byte	15
 361 0015 CF       		.byte	-49
 362 0016 CE       		.byte	-50
 363 0017 0E       		.byte	14
 364 0018 0A       		.byte	10
 365 0019 CA       		.byte	-54
 366 001a CB       		.byte	-53
 367 001b 0B       		.byte	11
 368 001c C9       		.byte	-55
 369 001d 09       		.byte	9
 370 001e 08       		.byte	8
 371 001f C8       		.byte	-56
 372 0020 D8       		.byte	-40
 373 0021 18       		.byte	24
 374 0022 19       		.byte	25
 375 0023 D9       		.byte	-39
 376 0024 1B       		.byte	27
 377 0025 DB       		.byte	-37
 378 0026 DA       		.byte	-38
 379 0027 1A       		.byte	26
 380 0028 1E       		.byte	30
 381 0029 DE       		.byte	-34
 382 002a DF       		.byte	-33
 383 002b 1F       		.byte	31
 384 002c DD       		.byte	-35
 385 002d 1D       		.byte	29
 386 002e 1C       		.byte	28
 387 002f DC       		.byte	-36
 388 0030 14       		.byte	20
 389 0031 D4       		.byte	-44
 390 0032 D5       		.byte	-43
 391 0033 15       		.byte	21
 392 0034 D7       		.byte	-41
 393 0035 17       		.byte	23
 394 0036 16       		.byte	22
 395 0037 D6       		.byte	-42
 396 0038 D2       		.byte	-46
 397 0039 12       		.byte	18
 398 003a 13       		.byte	19
 399 003b D3       		.byte	-45
 400 003c 11       		.byte	17
 401 003d D1       		.byte	-47
 402 003e D0       		.byte	-48
 403 003f 10       		.byte	16
 404 0040 F0       		.byte	-16
 405 0041 30       		.byte	48
 406 0042 31       		.byte	49
 407 0043 F1       		.byte	-15
 408 0044 33       		.byte	51
 409 0045 F3       		.byte	-13
 410 0046 F2       		.byte	-14
 411 0047 32       		.byte	50
 412 0048 36       		.byte	54
 413 0049 F6       		.byte	-10
 414 004a F7       		.byte	-9
 415 004b 37       		.byte	55
 416 004c F5       		.byte	-11
 417 004d 35       		.byte	53
 418 004e 34       		.byte	52
 419 004f F4       		.byte	-12
 420 0050 3C       		.byte	60
 421 0051 FC       		.byte	-4
 422 0052 FD       		.byte	-3
 423 0053 3D       		.byte	61
 424 0054 FF       		.byte	-1
 425 0055 3F       		.byte	63
 426 0056 3E       		.byte	62
 427 0057 FE       		.byte	-2
 428 0058 FA       		.byte	-6
 429 0059 3A       		.byte	58
 430 005a 3B       		.byte	59
 431 005b FB       		.byte	-5
 432 005c 39       		.byte	57
 433 005d F9       		.byte	-7
 434 005e F8       		.byte	-8
 435 005f 38       		.byte	56
 436 0060 28       		.byte	40
 437 0061 E8       		.byte	-24
 438 0062 E9       		.byte	-23
 439 0063 29       		.byte	41
 440 0064 EB       		.byte	-21
 441 0065 2B       		.byte	43
 442 0066 2A       		.byte	42
 443 0067 EA       		.byte	-22
 444 0068 EE       		.byte	-18
 445 0069 2E       		.byte	46
 446 006a 2F       		.byte	47
 447 006b EF       		.byte	-17
 448 006c 2D       		.byte	45
 449 006d ED       		.byte	-19
 450 006e EC       		.byte	-20
 451 006f 2C       		.byte	44
 452 0070 E4       		.byte	-28
 453 0071 24       		.byte	36
 454 0072 25       		.byte	37
 455 0073 E5       		.byte	-27
 456 0074 27       		.byte	39
 457 0075 E7       		.byte	-25
 458 0076 E6       		.byte	-26
 459 0077 26       		.byte	38
 460 0078 22       		.byte	34
 461 0079 E2       		.byte	-30
 462 007a E3       		.byte	-29
 463 007b 23       		.byte	35
 464 007c E1       		.byte	-31
 465 007d 21       		.byte	33
 466 007e 20       		.byte	32
 467 007f E0       		.byte	-32
 468 0080 A0       		.byte	-96
 469 0081 60       		.byte	96
 470 0082 61       		.byte	97
 471 0083 A1       		.byte	-95
 472 0084 63       		.byte	99
 473 0085 A3       		.byte	-93
 474 0086 A2       		.byte	-94
 475 0087 62       		.byte	98
 476 0088 66       		.byte	102
 477 0089 A6       		.byte	-90
 478 008a A7       		.byte	-89
 479 008b 67       		.byte	103
 480 008c A5       		.byte	-91
 481 008d 65       		.byte	101
 482 008e 64       		.byte	100
 483 008f A4       		.byte	-92
 484 0090 6C       		.byte	108
 485 0091 AC       		.byte	-84
 486 0092 AD       		.byte	-83
 487 0093 6D       		.byte	109
 488 0094 AF       		.byte	-81
 489 0095 6F       		.byte	111
 490 0096 6E       		.byte	110
 491 0097 AE       		.byte	-82
 492 0098 AA       		.byte	-86
 493 0099 6A       		.byte	106
 494 009a 6B       		.byte	107
 495 009b AB       		.byte	-85
 496 009c 69       		.byte	105
 497 009d A9       		.byte	-87
 498 009e A8       		.byte	-88
 499 009f 68       		.byte	104
 500 00a0 78       		.byte	120
 501 00a1 B8       		.byte	-72
 502 00a2 B9       		.byte	-71
 503 00a3 79       		.byte	121
 504 00a4 BB       		.byte	-69
 505 00a5 7B       		.byte	123
 506 00a6 7A       		.byte	122
 507 00a7 BA       		.byte	-70
 508 00a8 BE       		.byte	-66
 509 00a9 7E       		.byte	126
 510 00aa 7F       		.byte	127
 511 00ab BF       		.byte	-65
 512 00ac 7D       		.byte	125
 513 00ad BD       		.byte	-67
 514 00ae BC       		.byte	-68
 515 00af 7C       		.byte	124
 516 00b0 B4       		.byte	-76
 517 00b1 74       		.byte	116
 518 00b2 75       		.byte	117
 519 00b3 B5       		.byte	-75
 520 00b4 77       		.byte	119
 521 00b5 B7       		.byte	-73
 522 00b6 B6       		.byte	-74
 523 00b7 76       		.byte	118
 524 00b8 72       		.byte	114
 525 00b9 B2       		.byte	-78
 526 00ba B3       		.byte	-77
 527 00bb 73       		.byte	115
 528 00bc B1       		.byte	-79
 529 00bd 71       		.byte	113
 530 00be 70       		.byte	112
 531 00bf B0       		.byte	-80
 532 00c0 50       		.byte	80
 533 00c1 90       		.byte	-112
 534 00c2 91       		.byte	-111
 535 00c3 51       		.byte	81
 536 00c4 93       		.byte	-109
 537 00c5 53       		.byte	83
 538 00c6 52       		.byte	82
 539 00c7 92       		.byte	-110
 540 00c8 96       		.byte	-106
 541 00c9 56       		.byte	86
 542 00ca 57       		.byte	87
 543 00cb 97       		.byte	-105
 544 00cc 55       		.byte	85
 545 00cd 95       		.byte	-107
 546 00ce 94       		.byte	-108
 547 00cf 54       		.byte	84
 548 00d0 9C       		.byte	-100
 549 00d1 5C       		.byte	92
 550 00d2 5D       		.byte	93
 551 00d3 9D       		.byte	-99
 552 00d4 5F       		.byte	95
 553 00d5 9F       		.byte	-97
 554 00d6 9E       		.byte	-98
 555 00d7 5E       		.byte	94
 556 00d8 5A       		.byte	90
 557 00d9 9A       		.byte	-102
 558 00da 9B       		.byte	-101
 559 00db 5B       		.byte	91
 560 00dc 99       		.byte	-103
 561 00dd 59       		.byte	89
 562 00de 58       		.byte	88
 563 00df 98       		.byte	-104
 564 00e0 88       		.byte	-120
 565 00e1 48       		.byte	72
 566 00e2 49       		.byte	73
 567 00e3 89       		.byte	-119
 568 00e4 4B       		.byte	75
 569 00e5 8B       		.byte	-117
 570 00e6 8A       		.byte	-118
 571 00e7 4A       		.byte	74
 572 00e8 4E       		.byte	78
 573 00e9 8E       		.byte	-114
 574 00ea 8F       		.byte	-113
 575 00eb 4F       		.byte	79
 576 00ec 8D       		.byte	-115
 577 00ed 4D       		.byte	77
 578 00ee 4C       		.byte	76
 579 00ef 8C       		.byte	-116
 580 00f0 44       		.byte	68
 581 00f1 84       		.byte	-124
 582 00f2 85       		.byte	-123
 583 00f3 45       		.byte	69
 584 00f4 87       		.byte	-121
 585 00f5 47       		.byte	71
 586 00f6 46       		.byte	70
 587 00f7 86       		.byte	-122
 588 00f8 82       		.byte	-126
 589 00f9 42       		.byte	66
 590 00fa 43       		.byte	67
 591 00fb 83       		.byte	-125
 592 00fc 41       		.byte	65
 593 00fd 81       		.byte	-127
 594 00fe 80       		.byte	-128
 595 00ff 40       		.byte	64
 596              		.comm	fd,4,4
 597              		.comm	received_string,513,4
 598              		.comm	rx_length,4,4
 599              		.section	.bss.xHigherPriorityTaskWoken_usart,"aw",%nobits
 600              		.align	2
 603              	xHigherPriorityTaskWoken_usart:
 604 0000 00000000 		.space	4
 605              		.comm	input_Register,20,4
 606              		.section	.text.init_USARTx,"ax",%progbits
 607              		.align	2
 608              		.global	init_USARTx
 609              		.thumb
 610              		.thumb_func
 612              	init_USARTx:
 613              	.LFB110:
 614              		.file 1 "App/STM32F4-Discovery/modbus_mk.c"
   1:App/STM32F4-Discovery/modbus_mk.c **** /*! \file modbus_mk.c
   2:App/STM32F4-Discovery/modbus_mk.c ****  *  \brief modbus protocol functions and motor control
   3:App/STM32F4-Discovery/modbus_mk.c ****  */
   4:App/STM32F4-Discovery/modbus_mk.c **** 
   5:App/STM32F4-Discovery/modbus_mk.c **** 
   6:App/STM32F4-Discovery/modbus_mk.c **** #include "modbus_mk.h"
   7:App/STM32F4-Discovery/modbus_mk.c **** 
   8:App/STM32F4-Discovery/modbus_mk.c **** 
   9:App/STM32F4-Discovery/modbus_mk.c **** /* This funcion initializes the USART1 peripheral
  10:App/STM32F4-Discovery/modbus_mk.c ****  * 
  11:App/STM32F4-Discovery/modbus_mk.c ****  * Arguments: baudrate --> the baudrate at which the USART is 
  12:App/STM32F4-Discovery/modbus_mk.c ****  * 						   supposed to operate
  13:App/STM32F4-Discovery/modbus_mk.c ****  */
  14:App/STM32F4-Discovery/modbus_mk.c **** 
  15:App/STM32F4-Discovery/modbus_mk.c **** #define pdFalse 0
  16:App/STM32F4-Discovery/modbus_mk.c **** #define pdTrue 	1
  17:App/STM32F4-Discovery/modbus_mk.c **** 
  18:App/STM32F4-Discovery/modbus_mk.c **** 
  19:App/STM32F4-Discovery/modbus_mk.c **** void init_USARTx(void)
  20:App/STM32F4-Discovery/modbus_mk.c **** {
 615              		.loc 1 20 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 32
 618              		@ frame_needed = 1, uses_anonymous_args = 0
 619 0000 80B5     		push	{r7, lr}
 620              	.LCFI0:
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 7, -8
 623              		.cfi_offset 14, -4
 624 0002 88B0     		sub	sp, sp, #32
 625              	.LCFI1:
 626              		.cfi_def_cfa_offset 40
 627 0004 00AF     		add	r7, sp, #0
 628              	.LCFI2:
 629              		.cfi_def_cfa_register 7
  21:App/STM32F4-Discovery/modbus_mk.c **** 	
  22:App/STM32F4-Discovery/modbus_mk.c **** 	
  23:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
  24:App/STM32F4-Discovery/modbus_mk.c **** 	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
  25:App/STM32F4-Discovery/modbus_mk.c **** 	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrup
  26:App/STM32F4-Discovery/modbus_mk.c **** 	
  27:App/STM32F4-Discovery/modbus_mk.c **** 	/* enable APB2 peripheral clock for USART1 
  28:App/STM32F4-Discovery/modbus_mk.c **** 	 * note that only USART1 and USART6 are connected to APB2
  29:App/STM32F4-Discovery/modbus_mk.c **** 	 * the other USARTs are connected to APB1
  30:App/STM32F4-Discovery/modbus_mk.c **** 	 */
  31:App/STM32F4-Discovery/modbus_mk.c **** 	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 630              		.loc 1 31 0
 631 0006 2020     		movs	r0, #32
 632 0008 0121     		movs	r1, #1
 633 000a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  32:App/STM32F4-Discovery/modbus_mk.c **** 	
  33:App/STM32F4-Discovery/modbus_mk.c **** 	/* enable the peripheral clock for the pins used by 
  34:App/STM32F4-Discovery/modbus_mk.c **** 	 * USART1, PB6 for TX and PB7 for RX 
  35:App/STM32F4-Discovery/modbus_mk.c **** 	 */
  36:App/STM32F4-Discovery/modbus_mk.c **** 	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 634              		.loc 1 36 0
 635 000e 0420     		movs	r0, #4
 636 0010 0121     		movs	r1, #1
 637 0012 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  37:App/STM32F4-Discovery/modbus_mk.c **** 	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 638              		.loc 1 37 0
 639 0016 0420     		movs	r0, #4
 640 0018 0121     		movs	r1, #1
 641 001a FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  38:App/STM32F4-Discovery/modbus_mk.c **** 	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 642              		.loc 1 38 0
 643 001e 4020     		movs	r0, #64
 644 0020 0121     		movs	r1, #1
 645 0022 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  39:App/STM32F4-Discovery/modbus_mk.c **** 
  40:App/STM32F4-Discovery/modbus_mk.c **** 	
  41:App/STM32F4-Discovery/modbus_mk.c **** 	/* This sequence sets up the TX and RX pins 
  42:App/STM32F4-Discovery/modbus_mk.c **** 	 * so they work correctly with the USART1 peripheral
  43:App/STM32F4-Discovery/modbus_mk.c **** 	 */
  44:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are 
 646              		.loc 1 44 0
 647 0026 C023     		movs	r3, #192
 648 0028 BB61     		str	r3, [r7, #24]
  45:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so t
 649              		.loc 1 45 0
 650 002a 0223     		movs	r3, #2
 651 002c 3B77     		strb	r3, [r7, #28]
  46:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to d
 652              		.loc 1 46 0
 653 002e 0323     		movs	r3, #3
 654 0030 7B77     		strb	r3, [r7, #29]
  47:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (a
 655              		.loc 1 47 0
 656 0032 0023     		movs	r3, #0
 657 0034 BB77     		strb	r3, [r7, #30]
  48:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 658              		.loc 1 48 0
 659 0036 0123     		movs	r3, #1
 660 0038 FB77     		strb	r3, [r7, #31]
  49:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO
 661              		.loc 1 49 0
 662 003a 07F11803 		add	r3, r7, #24
 663 003e 2948     		ldr	r0, .L2
 664 0040 1946     		mov	r1, r3
 665 0042 FFF7FEFF 		bl	GPIO_Init
  50:App/STM32F4-Discovery/modbus_mk.c **** 	
  51:App/STM32F4-Discovery/modbus_mk.c **** 	
  52:App/STM32F4-Discovery/modbus_mk.c **** 	
  53:App/STM32F4-Discovery/modbus_mk.c **** 	/* Configure the chip select pin in this case we will use PG8 */
  54:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 666              		.loc 1 54 0
 667 0046 4FF48073 		mov	r3, #256
 668 004a BB61     		str	r3, [r7, #24]
  55:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 669              		.loc 1 55 0
 670 004c 0123     		movs	r3, #1
 671 004e 3B77     		strb	r3, [r7, #28]
  56:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 672              		.loc 1 56 0
 673 0050 0023     		movs	r3, #0
 674 0052 BB77     		strb	r3, [r7, #30]
  57:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 675              		.loc 1 57 0
 676 0054 0323     		movs	r3, #3
 677 0056 7B77     		strb	r3, [r7, #29]
  58:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 678              		.loc 1 58 0
 679 0058 0123     		movs	r3, #1
 680 005a FB77     		strb	r3, [r7, #31]
  59:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 681              		.loc 1 59 0
 682 005c 07F11803 		add	r3, r7, #24
 683 0060 2148     		ldr	r0, .L2+4
 684 0062 1946     		mov	r1, r3
 685 0064 FFF7FEFF 		bl	GPIO_Init
  60:App/STM32F4-Discovery/modbus_mk.c **** 
  61:App/STM32F4-Discovery/modbus_mk.c **** 	DD() // set PG8 high
 686              		.loc 1 61 0
 687 0068 1F4B     		ldr	r3, .L2+4
 688 006a 1F4A     		ldr	r2, .L2+4
 689 006c 128B     		ldrh	r2, [r2, #24]	@ movhi
 690 006e 92B2     		uxth	r2, r2
 691 0070 42F48072 		orr	r2, r2, #256
 692 0074 92B2     		uxth	r2, r2
 693 0076 1A83     		strh	r2, [r3, #24]	@ movhi
  62:App/STM32F4-Discovery/modbus_mk.c **** 	
  63:App/STM32F4-Discovery/modbus_mk.c **** 	
  64:App/STM32F4-Discovery/modbus_mk.c **** 	/* The RX and TX pins are now connected to their AF
  65:App/STM32F4-Discovery/modbus_mk.c **** 	 * so that the USART1 can take over control of the 
  66:App/STM32F4-Discovery/modbus_mk.c **** 	 * pins
  67:App/STM32F4-Discovery/modbus_mk.c **** 	 */
  68:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 694              		.loc 1 68 0
 695 0078 1A48     		ldr	r0, .L2
 696 007a 0621     		movs	r1, #6
 697 007c 0822     		movs	r2, #8
 698 007e FFF7FEFF 		bl	GPIO_PinAFConfig
  69:App/STM32F4-Discovery/modbus_mk.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 699              		.loc 1 69 0
 700 0082 1848     		ldr	r0, .L2
 701 0084 0721     		movs	r1, #7
 702 0086 0822     		movs	r2, #8
 703 0088 FFF7FEFF 		bl	GPIO_PinAFConfig
  70:App/STM32F4-Discovery/modbus_mk.c **** 	
  71:App/STM32F4-Discovery/modbus_mk.c **** 	/* Now the USART_InitStruct is used to define the 
  72:App/STM32F4-Discovery/modbus_mk.c **** 	 * properties of USART1 
  73:App/STM32F4-Discovery/modbus_mk.c **** 	 */
  74:App/STM32F4-Discovery/modbus_mk.c **** 	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into thi
 704              		.loc 1 74 0
 705 008c 4FF41643 		mov	r3, #38400
 706 0090 BB60     		str	r3, [r7, #8]
  75:App/STM32F4-Discovery/modbus_mk.c **** 	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bit
 707              		.loc 1 75 0
 708 0092 0023     		movs	r3, #0
 709 0094 BB81     		strh	r3, [r7, #12]	@ movhi
  76:App/STM32F4-Discovery/modbus_mk.c **** 	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 710              		.loc 1 76 0
 711 0096 0023     		movs	r3, #0
 712 0098 FB81     		strh	r3, [r7, #14]	@ movhi
  77:App/STM32F4-Discovery/modbus_mk.c **** 	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 713              		.loc 1 77 0
 714 009a 0023     		movs	r3, #0
 715 009c 3B82     		strh	r3, [r7, #16]	@ movhi
  78:App/STM32F4-Discovery/modbus_mk.c **** 	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow
 716              		.loc 1 78 0
 717 009e 0023     		movs	r3, #0
 718 00a0 BB82     		strh	r3, [r7, #20]	@ movhi
  79:App/STM32F4-Discovery/modbus_mk.c **** 	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter 
 719              		.loc 1 79 0
 720 00a2 0C23     		movs	r3, #12
 721 00a4 7B82     		strh	r3, [r7, #18]	@ movhi
  80:App/STM32F4-Discovery/modbus_mk.c **** 	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Ini
 722              		.loc 1 80 0
 723 00a6 07F10803 		add	r3, r7, #8
 724 00aa 1048     		ldr	r0, .L2+8
 725 00ac 1946     		mov	r1, r3
 726 00ae FFF7FEFF 		bl	USART_Init
  81:App/STM32F4-Discovery/modbus_mk.c **** 	
  82:App/STM32F4-Discovery/modbus_mk.c **** 	
  83:App/STM32F4-Discovery/modbus_mk.c **** 	/* Here the USART1 receive interrupt is enabled
  84:App/STM32F4-Discovery/modbus_mk.c **** 	 * and the interrupt controller is configured 
  85:App/STM32F4-Discovery/modbus_mk.c **** 	 * to jump to the USART1_IRQHandler() function
  86:App/STM32F4-Discovery/modbus_mk.c **** 	 * if the USART1 receive interrupt occurs
  87:App/STM32F4-Discovery/modbus_mk.c **** 	 */
  88:App/STM32F4-Discovery/modbus_mk.c **** 	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 727              		.loc 1 88 0
 728 00b2 0E48     		ldr	r0, .L2+8
 729 00b4 40F22551 		movw	r1, #1317
 730 00b8 0122     		movs	r2, #1
 731 00ba FFF7FEFF 		bl	USART_ITConfig
  89:App/STM32F4-Discovery/modbus_mk.c **** 	
  90:App/STM32F4-Discovery/modbus_mk.c **** 	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 732              		.loc 1 90 0
 733 00be 4723     		movs	r3, #71
 734 00c0 3B71     		strb	r3, [r7, #4]
  91:App/STM32F4-Discovery/modbus_mk.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORIT
 735              		.loc 1 91 0
 736 00c2 0923     		movs	r3, #9
 737 00c4 7B71     		strb	r3, [r7, #5]
  92:App/STM32F4-Discovery/modbus_mk.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x6;		 // this sets the subpriority inside the gro
 738              		.loc 1 92 0
 739 00c6 0623     		movs	r3, #6
 740 00c8 BB71     		strb	r3, [r7, #6]
  93:App/STM32F4-Discovery/modbus_mk.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 741              		.loc 1 93 0
 742 00ca 0123     		movs	r3, #1
 743 00cc FB71     		strb	r3, [r7, #7]
  94:App/STM32F4-Discovery/modbus_mk.c **** 	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which take
 744              		.loc 1 94 0
 745 00ce 3B1D     		adds	r3, r7, #4
 746 00d0 1846     		mov	r0, r3
 747 00d2 FFF7FEFF 		bl	NVIC_Init
  95:App/STM32F4-Discovery/modbus_mk.c **** 
  96:App/STM32F4-Discovery/modbus_mk.c **** 	// finally this enables the complete USART1 peripheral
  97:App/STM32F4-Discovery/modbus_mk.c **** 	USART_Cmd(USART6, ENABLE);
 748              		.loc 1 97 0
 749 00d6 0548     		ldr	r0, .L2+8
 750 00d8 0121     		movs	r1, #1
 751 00da FFF7FEFF 		bl	USART_Cmd
  98:App/STM32F4-Discovery/modbus_mk.c **** }
 752              		.loc 1 98 0
 753 00de 2037     		adds	r7, r7, #32
 754 00e0 BD46     		mov	sp, r7
 755              		@ sp needed
 756 00e2 80BD     		pop	{r7, pc}
 757              	.L3:
 758              		.align	2
 759              	.L2:
 760 00e4 00080240 		.word	1073874944
 761 00e8 00180240 		.word	1073879040
 762 00ec 00140140 		.word	1073812480
 763              		.cfi_endproc
 764              	.LFE110:
 766              		.section	.text.USART_puts,"ax",%progbits
 767              		.align	2
 768              		.global	USART_puts
 769              		.thumb
 770              		.thumb_func
 772              	USART_puts:
 773              	.LFB111:
  99:App/STM32F4-Discovery/modbus_mk.c **** 
 100:App/STM32F4-Discovery/modbus_mk.c **** 
 101:App/STM32F4-Discovery/modbus_mk.c **** void USART_puts(uint8_t *s, int nb)
 102:App/STM32F4-Discovery/modbus_mk.c **** {
 774              		.loc 1 102 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 16
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779 0000 80B4     		push	{r7}
 780              	.LCFI3:
 781              		.cfi_def_cfa_offset 4
 782              		.cfi_offset 7, -4
 783 0002 85B0     		sub	sp, sp, #20
 784              	.LCFI4:
 785              		.cfi_def_cfa_offset 24
 786 0004 00AF     		add	r7, sp, #0
 787              	.LCFI5:
 788              		.cfi_def_cfa_register 7
 789 0006 7860     		str	r0, [r7, #4]
 790 0008 3960     		str	r1, [r7]
 103:App/STM32F4-Discovery/modbus_mk.c **** 
 104:App/STM32F4-Discovery/modbus_mk.c **** 	/*! This function is used to transmit a string of characters via 
 105:App/STM32F4-Discovery/modbus_mk.c **** 	 * the USART specified in USARTx.
 106:App/STM32F4-Discovery/modbus_mk.c **** 	 * 
 107:App/STM32F4-Discovery/modbus_mk.c **** 	 * It takes two arguments: USARTx --> can be any of the USARTs e.g. USART1, USART2 etc.
 108:App/STM32F4-Discovery/modbus_mk.c **** 	 * 						   (volatile) char *s is the string you want to send
 109:App/STM32F4-Discovery/modbus_mk.c **** 	 * 
 110:App/STM32F4-Discovery/modbus_mk.c **** 	 * Note: The string has to be passed to the function as a pointer because
 111:App/STM32F4-Discovery/modbus_mk.c **** 	 * 		 the compiler doesn't know the 'string' data type. In standard
 112:App/STM32F4-Discovery/modbus_mk.c **** 	 * 		 C a string is just an array of characters
 113:App/STM32F4-Discovery/modbus_mk.c **** 	 * 
 114:App/STM32F4-Discovery/modbus_mk.c **** 	 * Note 2: At the moment it takes a volatile char because the received_string variable
 115:App/STM32F4-Discovery/modbus_mk.c **** 	 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 116:App/STM32F4-Discovery/modbus_mk.c **** 	 * */
 117:App/STM32F4-Discovery/modbus_mk.c **** 
 118:App/STM32F4-Discovery/modbus_mk.c **** 	int i = 0;
 791              		.loc 1 118 0
 792 000a 0023     		movs	r3, #0
 793 000c FB60     		str	r3, [r7, #12]
 119:App/STM32F4-Discovery/modbus_mk.c **** 	while(i < nb && *s){
 794              		.loc 1 119 0
 795 000e 10E0     		b	.L5
 796              	.L8:
 120:App/STM32F4-Discovery/modbus_mk.c **** 		// wait until data register is empty
 121:App/STM32F4-Discovery/modbus_mk.c **** 		while( !(USARTx->SR & 0x00000040) ); 
 797              		.loc 1 121 0
 798 0010 00BF     		nop
 799              	.L6:
 800              		.loc 1 121 0 is_stmt 0 discriminator 1
 801 0012 0E4B     		ldr	r3, .L9
 802 0014 1B88     		ldrh	r3, [r3]	@ movhi
 803 0016 9BB2     		uxth	r3, r3
 804 0018 03F04003 		and	r3, r3, #64
 805 001c 002B     		cmp	r3, #0
 806 001e F8D0     		beq	.L6
 122:App/STM32F4-Discovery/modbus_mk.c **** 		//USART_SendData(USART6, s[i]);
 123:App/STM32F4-Discovery/modbus_mk.c **** 		USARTx->DR = s[i];
 807              		.loc 1 123 0 is_stmt 1
 808 0020 0A4B     		ldr	r3, .L9
 809 0022 FA68     		ldr	r2, [r7, #12]
 810 0024 7968     		ldr	r1, [r7, #4]
 811 0026 0A44     		add	r2, r2, r1
 812 0028 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 813 002a 9A80     		strh	r2, [r3, #4]	@ movhi
 124:App/STM32F4-Discovery/modbus_mk.c **** 		i++;
 814              		.loc 1 124 0
 815 002c FB68     		ldr	r3, [r7, #12]
 816 002e 0133     		adds	r3, r3, #1
 817 0030 FB60     		str	r3, [r7, #12]
 818              	.L5:
 119:App/STM32F4-Discovery/modbus_mk.c **** 	while(i < nb && *s){
 819              		.loc 1 119 0 discriminator 1
 820 0032 FA68     		ldr	r2, [r7, #12]
 821 0034 3B68     		ldr	r3, [r7]
 822 0036 9A42     		cmp	r2, r3
 823 0038 03DA     		bge	.L4
 119:App/STM32F4-Discovery/modbus_mk.c **** 	while(i < nb && *s){
 824              		.loc 1 119 0 is_stmt 0 discriminator 2
 825 003a 7B68     		ldr	r3, [r7, #4]
 826 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 827 003e 002B     		cmp	r3, #0
 828 0040 E6D1     		bne	.L8
 829              	.L4:
 125:App/STM32F4-Discovery/modbus_mk.c **** 	
 126:App/STM32F4-Discovery/modbus_mk.c **** 	}
 127:App/STM32F4-Discovery/modbus_mk.c **** 	
 128:App/STM32F4-Discovery/modbus_mk.c **** 	
 129:App/STM32F4-Discovery/modbus_mk.c **** }
 830              		.loc 1 129 0 is_stmt 1
 831 0042 1437     		adds	r7, r7, #20
 832 0044 BD46     		mov	sp, r7
 833              		@ sp needed
 834 0046 5DF8047B 		ldr	r7, [sp], #4
 835 004a 7047     		bx	lr
 836              	.L10:
 837              		.align	2
 838              	.L9:
 839 004c 00140140 		.word	1073812480
 840              		.cfi_endproc
 841              	.LFE111:
 843              		.section	.text.USART6_IRQHandler,"ax",%progbits
 844              		.align	2
 845              		.global	USART6_IRQHandler
 846              		.thumb
 847              		.thumb_func
 849              	USART6_IRQHandler:
 850              	.LFB112:
 130:App/STM32F4-Discovery/modbus_mk.c **** 
 131:App/STM32F4-Discovery/modbus_mk.c **** // this is the interrupt request handler (IRQ) for ALL USART6 interrupts
 132:App/STM32F4-Discovery/modbus_mk.c **** void USART6_IRQHandler(void){
 851              		.loc 1 132 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 8
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0000 80B5     		push	{r7, lr}
 856              	.LCFI6:
 857              		.cfi_def_cfa_offset 8
 858              		.cfi_offset 7, -8
 859              		.cfi_offset 14, -4
 860 0002 82B0     		sub	sp, sp, #8
 861              	.LCFI7:
 862              		.cfi_def_cfa_offset 16
 863 0004 00AF     		add	r7, sp, #0
 864              	.LCFI8:
 865              		.cfi_def_cfa_register 7
 133:App/STM32F4-Discovery/modbus_mk.c **** 	
 134:App/STM32F4-Discovery/modbus_mk.c **** 	
 135:App/STM32F4-Discovery/modbus_mk.c **** 
 136:App/STM32F4-Discovery/modbus_mk.c **** 	// check if the USART1 receive interrupt flag was set
 137:App/STM32F4-Discovery/modbus_mk.c **** 	if( USART_GetITStatus(USARTx, USART_IT_RXNE) ){
 866              		.loc 1 137 0
 867 0006 1E48     		ldr	r0, .L14
 868 0008 40F22551 		movw	r1, #1317
 869 000c FFF7FEFF 		bl	USART_GetITStatus
 870 0010 0346     		mov	r3, r0
 871 0012 002B     		cmp	r3, #0
 872 0014 30D0     		beq	.L11
 873              	.LBB2:
 138:App/STM32F4-Discovery/modbus_mk.c **** 		
 139:App/STM32F4-Discovery/modbus_mk.c **** 		
 140:App/STM32F4-Discovery/modbus_mk.c **** 		static uint8_t cnt = 0; // this counter is used to determine the string length
 141:App/STM32F4-Discovery/modbus_mk.c **** 		volatile char t = USARTx->DR; // the character from the USART1 data register is saved in t
 874              		.loc 1 141 0
 875 0016 1A4B     		ldr	r3, .L14
 876 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 877 001a 9BB2     		uxth	r3, r3
 878 001c DBB2     		uxtb	r3, r3
 879 001e FB71     		strb	r3, [r7, #7]
 142:App/STM32F4-Discovery/modbus_mk.c **** 		
 143:App/STM32F4-Discovery/modbus_mk.c **** 		/* check if the received character is not the LF character (used to determine end of string) 
 144:App/STM32F4-Discovery/modbus_mk.c **** 		 * or the if the maximum string length has been been reached 
 145:App/STM32F4-Discovery/modbus_mk.c **** 		 */
 146:App/STM32F4-Discovery/modbus_mk.c **** 		xHigherPriorityTaskWoken_usart = pdFalse;
 880              		.loc 1 146 0
 881 0020 184B     		ldr	r3, .L14+4
 882 0022 0022     		movs	r2, #0
 883 0024 1A60     		str	r2, [r3]
 147:App/STM32F4-Discovery/modbus_mk.c **** 
 148:App/STM32F4-Discovery/modbus_mk.c **** 		
 149:App/STM32F4-Discovery/modbus_mk.c **** 		if( (cnt < rx_length  ) && (cnt < MAX_STRLEN) ){ 
 884              		.loc 1 149 0
 885 0026 184B     		ldr	r3, .L14+8
 886 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 887 002a 1A46     		mov	r2, r3
 888 002c 174B     		ldr	r3, .L14+12
 889 002e 1B68     		ldr	r3, [r3]
 890 0030 9A42     		cmp	r2, r3
 891 0032 0CDA     		bge	.L13
 150:App/STM32F4-Discovery/modbus_mk.c **** 			received_string[cnt] = t;
 892              		.loc 1 150 0
 893 0034 144B     		ldr	r3, .L14+8
 894 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 895 0038 FA79     		ldrb	r2, [r7, #7]
 896 003a D1B2     		uxtb	r1, r2
 897 003c 144A     		ldr	r2, .L14+16
 898 003e D154     		strb	r1, [r2, r3]
 151:App/STM32F4-Discovery/modbus_mk.c **** 			cnt++;
 899              		.loc 1 151 0
 900 0040 114B     		ldr	r3, .L14+8
 901 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 902 0044 0133     		adds	r3, r3, #1
 903 0046 DAB2     		uxtb	r2, r3
 904 0048 0F4B     		ldr	r3, .L14+8
 905 004a 1A70     		strb	r2, [r3]
 906 004c 14E0     		b	.L11
 907              	.L13:
 152:App/STM32F4-Discovery/modbus_mk.c **** 		}
 153:App/STM32F4-Discovery/modbus_mk.c **** 		else{ // otherwise reset the character counter and print the received string
 154:App/STM32F4-Discovery/modbus_mk.c **** 			received_string[cnt] = t; 
 908              		.loc 1 154 0
 909 004e 0E4B     		ldr	r3, .L14+8
 910 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 911 0052 FA79     		ldrb	r2, [r7, #7]
 912 0054 D1B2     		uxtb	r1, r2
 913 0056 0E4A     		ldr	r2, .L14+16
 914 0058 D154     		strb	r1, [r2, r3]
 155:App/STM32F4-Discovery/modbus_mk.c **** 			cnt = 0;
 915              		.loc 1 155 0
 916 005a 0B4B     		ldr	r3, .L14+8
 917 005c 0022     		movs	r2, #0
 918 005e 1A70     		strb	r2, [r3]
 156:App/STM32F4-Discovery/modbus_mk.c **** 		//	USART_ITConfig(USART6, USART_IT_RXNE, DISABLE); 
 157:App/STM32F4-Discovery/modbus_mk.c **** 		taskENTER_CRITICAL();
 919              		.loc 1 157 0
 920 0060 FFF7FEFF 		bl	vPortEnterCritical
 158:App/STM32F4-Discovery/modbus_mk.c **** 			xSemaphoreGiveFromISR(xSmphrUSART,&xHigherPriorityTaskWoken_usart );
 921              		.loc 1 158 0
 922 0064 0B4B     		ldr	r3, .L14+20
 923 0066 1B68     		ldr	r3, [r3]
 924 0068 1846     		mov	r0, r3
 925 006a 0021     		movs	r1, #0
 926 006c 054A     		ldr	r2, .L14+4
 927 006e 0023     		movs	r3, #0
 928 0070 FFF7FEFF 		bl	xQueueGenericSendFromISR
 159:App/STM32F4-Discovery/modbus_mk.c **** 		taskEXIT_CRITICAL();
 929              		.loc 1 159 0
 930 0074 FFF7FEFF 		bl	vPortExitCritical
 931              	.L11:
 932              	.LBE2:
 160:App/STM32F4-Discovery/modbus_mk.c **** 			//USART_puts(USART1, received_string);
 161:App/STM32F4-Discovery/modbus_mk.c **** 		}
 162:App/STM32F4-Discovery/modbus_mk.c **** 
 163:App/STM32F4-Discovery/modbus_mk.c **** 
 164:App/STM32F4-Discovery/modbus_mk.c **** 	}
 165:App/STM32F4-Discovery/modbus_mk.c **** 	
 166:App/STM32F4-Discovery/modbus_mk.c **** }
 933              		.loc 1 166 0
 934 0078 0837     		adds	r7, r7, #8
 935 007a BD46     		mov	sp, r7
 936              		@ sp needed
 937 007c 80BD     		pop	{r7, pc}
 938              	.L15:
 939 007e 00BF     		.align	2
 940              	.L14:
 941 0080 00140140 		.word	1073812480
 942 0084 00000000 		.word	xHigherPriorityTaskWoken_usart
 943 0088 00000000 		.word	cnt.9315
 944 008c 00000000 		.word	rx_length
 945 0090 00000000 		.word	received_string
 946 0094 00000000 		.word	xSmphrUSART
 947              		.cfi_endproc
 948              	.LFE112:
 950              		.section	.text.crc16,"ax",%progbits
 951              		.align	2
 952              		.global	crc16
 953              		.thumb
 954              		.thumb_func
 956              	crc16:
 957              	.LFB113:
 167:App/STM32F4-Discovery/modbus_mk.c **** 
 168:App/STM32F4-Discovery/modbus_mk.c **** 
 169:App/STM32F4-Discovery/modbus_mk.c **** 
 170:App/STM32F4-Discovery/modbus_mk.c **** /* function for  */
 171:App/STM32F4-Discovery/modbus_mk.c **** uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
 172:App/STM32F4-Discovery/modbus_mk.c **** {
 958              		.loc 1 172 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 16
 961              		@ frame_needed = 1, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963 0000 80B4     		push	{r7}
 964              	.LCFI9:
 965              		.cfi_def_cfa_offset 4
 966              		.cfi_offset 7, -4
 967 0002 85B0     		sub	sp, sp, #20
 968              	.LCFI10:
 969              		.cfi_def_cfa_offset 24
 970 0004 00AF     		add	r7, sp, #0
 971              	.LCFI11:
 972              		.cfi_def_cfa_register 7
 973 0006 7860     		str	r0, [r7, #4]
 974 0008 0B46     		mov	r3, r1
 975 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 173:App/STM32F4-Discovery/modbus_mk.c ****      uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 976              		.loc 1 173 0
 977 000c FF23     		movs	r3, #255
 978 000e FB73     		strb	r3, [r7, #15]
 174:App/STM32F4-Discovery/modbus_mk.c ****      uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 979              		.loc 1 174 0
 980 0010 FF23     		movs	r3, #255
 981 0012 BB73     		strb	r3, [r7, #14]
 175:App/STM32F4-Discovery/modbus_mk.c ****      unsigned int i; /* will index into CRC lookup */
 176:App/STM32F4-Discovery/modbus_mk.c ****  
 177:App/STM32F4-Discovery/modbus_mk.c ****      /* pass through message buffer */
 178:App/STM32F4-Discovery/modbus_mk.c ****      while (buffer_length--) {
 982              		.loc 1 178 0
 983 0014 13E0     		b	.L17
 984              	.L18:
 179:App/STM32F4-Discovery/modbus_mk.c ****          i = crc_hi ^ *buffer++; /* calculate the CRC  */
 985              		.loc 1 179 0
 986 0016 7B68     		ldr	r3, [r7, #4]
 987 0018 5A1C     		adds	r2, r3, #1
 988 001a 7A60     		str	r2, [r7, #4]
 989 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 990 001e FB7B     		ldrb	r3, [r7, #15]
 991 0020 5340     		eors	r3, r3, r2
 992 0022 DBB2     		uxtb	r3, r3
 993 0024 BB60     		str	r3, [r7, #8]
 180:App/STM32F4-Discovery/modbus_mk.c ****          crc_hi = crc_lo ^ table_crc_hi[i];
 994              		.loc 1 180 0
 995 0026 0F4A     		ldr	r2, .L20
 996 0028 BB68     		ldr	r3, [r7, #8]
 997 002a 1344     		add	r3, r3, r2
 998 002c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 999 002e BB7B     		ldrb	r3, [r7, #14]
 1000 0030 5340     		eors	r3, r3, r2
 1001 0032 FB73     		strb	r3, [r7, #15]
 181:App/STM32F4-Discovery/modbus_mk.c ****          crc_lo = table_crc_lo[i];
 1002              		.loc 1 181 0
 1003 0034 0C4A     		ldr	r2, .L20+4
 1004 0036 BB68     		ldr	r3, [r7, #8]
 1005 0038 1344     		add	r3, r3, r2
 1006 003a 1B78     		ldrb	r3, [r3]
 1007 003c BB73     		strb	r3, [r7, #14]
 1008              	.L17:
 178:App/STM32F4-Discovery/modbus_mk.c ****      while (buffer_length--) {
 1009              		.loc 1 178 0 discriminator 1
 1010 003e 7B88     		ldrh	r3, [r7, #2]
 1011 0040 5A1E     		subs	r2, r3, #1
 1012 0042 7A80     		strh	r2, [r7, #2]	@ movhi
 1013 0044 002B     		cmp	r3, #0
 1014 0046 E6D1     		bne	.L18
 182:App/STM32F4-Discovery/modbus_mk.c ****      }
 183:App/STM32F4-Discovery/modbus_mk.c ****  
 184:App/STM32F4-Discovery/modbus_mk.c ****      return (crc_hi << 8 | crc_lo);
 1015              		.loc 1 184 0
 1016 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1017 004a 1B02     		lsls	r3, r3, #8
 1018 004c 9AB2     		uxth	r2, r3
 1019 004e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1020 0050 9BB2     		uxth	r3, r3
 1021 0052 1343     		orrs	r3, r3, r2
 1022 0054 9BB2     		uxth	r3, r3
 1023 0056 9BB2     		uxth	r3, r3
 185:App/STM32F4-Discovery/modbus_mk.c **** }
 1024              		.loc 1 185 0
 1025 0058 1846     		mov	r0, r3
 1026 005a 1437     		adds	r7, r7, #20
 1027 005c BD46     		mov	sp, r7
 1028              		@ sp needed
 1029 005e 5DF8047B 		ldr	r7, [sp], #4
 1030 0062 7047     		bx	lr
 1031              	.L21:
 1032              		.align	2
 1033              	.L20:
 1034 0064 00000000 		.word	table_crc_hi
 1035 0068 00000000 		.word	table_crc_lo
 1036              		.cfi_endproc
 1037              	.LFE113:
 1039              		.section	.text.modbus_confirmation,"ax",%progbits
 1040              		.align	2
 1041              		.global	modbus_confirmation
 1042              		.thumb
 1043              		.thumb_func
 1045              	modbus_confirmation:
 1046              	.LFB114:
 186:App/STM32F4-Discovery/modbus_mk.c **** 
 187:App/STM32F4-Discovery/modbus_mk.c **** /* modbus_confirmation */ 
 188:App/STM32F4-Discovery/modbus_mk.c **** 
 189:App/STM32F4-Discovery/modbus_mk.c **** int modbus_confirmation ( uint8_t * req, uint8_t * rsp, uint16_t write_len, uint16_t read_len)
 190:App/STM32F4-Discovery/modbus_mk.c **** {
 1047              		.loc 1 190 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 24
 1050              		@ frame_needed = 1, uses_anonymous_args = 0
 1051 0000 80B5     		push	{r7, lr}
 1052              	.LCFI12:
 1053              		.cfi_def_cfa_offset 8
 1054              		.cfi_offset 7, -8
 1055              		.cfi_offset 14, -4
 1056 0002 86B0     		sub	sp, sp, #24
 1057              	.LCFI13:
 1058              		.cfi_def_cfa_offset 32
 1059 0004 00AF     		add	r7, sp, #0
 1060              	.LCFI14:
 1061              		.cfi_def_cfa_register 7
 1062 0006 F860     		str	r0, [r7, #12]
 1063 0008 B960     		str	r1, [r7, #8]
 1064 000a FA80     		strh	r2, [r7, #6]	@ movhi
 1065 000c BB80     		strh	r3, [r7, #4]	@ movhi
 191:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t crc = crc16(rsp, read_len - 2 );
 1066              		.loc 1 191 0
 1067 000e BB88     		ldrh	r3, [r7, #4]	@ movhi
 1068 0010 023B     		subs	r3, r3, #2
 1069 0012 9BB2     		uxth	r3, r3
 1070 0014 B868     		ldr	r0, [r7, #8]
 1071 0016 1946     		mov	r1, r3
 1072 0018 FFF7FEFF 		bl	crc16
 1073 001c 0346     		mov	r3, r0
 1074 001e FB82     		strh	r3, [r7, #22]	@ movhi
 192:App/STM32F4-Discovery/modbus_mk.c **** 
 193:App/STM32F4-Discovery/modbus_mk.c **** 	if (	rsp[read_len -1 ] == ( crc & 0x00ff ) && 
 1075              		.loc 1 193 0
 1076 0020 BB88     		ldrh	r3, [r7, #4]
 1077 0022 013B     		subs	r3, r3, #1
 1078 0024 BA68     		ldr	r2, [r7, #8]
 1079 0026 1344     		add	r3, r3, r2
 1080 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1081 002a 1A46     		mov	r2, r3
 1082 002c FB8A     		ldrh	r3, [r7, #22]
 1083 002e DBB2     		uxtb	r3, r3
 1084 0030 9A42     		cmp	r2, r3
 1085 0032 0CD1     		bne	.L23
 194:App/STM32F4-Discovery/modbus_mk.c **** 		rsp[read_len - 2 ] == ( crc >> 8 ) ) return 1; 
 1086              		.loc 1 194 0 discriminator 1
 1087 0034 BB88     		ldrh	r3, [r7, #4]
 1088 0036 023B     		subs	r3, r3, #2
 1089 0038 BA68     		ldr	r2, [r7, #8]
 1090 003a 1344     		add	r3, r3, r2
 1091 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1092 003e 1A46     		mov	r2, r3
 1093 0040 FB8A     		ldrh	r3, [r7, #22]
 1094 0042 1B0A     		lsrs	r3, r3, #8
 1095 0044 9BB2     		uxth	r3, r3
 193:App/STM32F4-Discovery/modbus_mk.c **** 	if (	rsp[read_len -1 ] == ( crc & 0x00ff ) && 
 1096              		.loc 1 193 0 discriminator 1
 1097 0046 9A42     		cmp	r2, r3
 1098 0048 01D1     		bne	.L23
 1099              		.loc 1 194 0
 1100 004a 0123     		movs	r3, #1
 1101 004c 00E0     		b	.L24
 1102              	.L23:
 195:App/STM32F4-Discovery/modbus_mk.c **** 	return 0; 
 1103              		.loc 1 195 0
 1104 004e 0023     		movs	r3, #0
 1105              	.L24:
 196:App/STM32F4-Discovery/modbus_mk.c **** 	
 197:App/STM32F4-Discovery/modbus_mk.c **** }
 1106              		.loc 1 197 0
 1107 0050 1846     		mov	r0, r3
 1108 0052 1837     		adds	r7, r7, #24
 1109 0054 BD46     		mov	sp, r7
 1110              		@ sp needed
 1111 0056 80BD     		pop	{r7, pc}
 1112              		.cfi_endproc
 1113              	.LFE114:
 1115              		.section	.text.write_read_modbus,"ax",%progbits
 1116              		.align	2
 1117              		.global	write_read_modbus
 1118              		.thumb
 1119              		.thumb_func
 1121              	write_read_modbus:
 1122              	.LFB115:
 198:App/STM32F4-Discovery/modbus_mk.c **** 
 199:App/STM32F4-Discovery/modbus_mk.c **** /* write to modbus */
 200:App/STM32F4-Discovery/modbus_mk.c **** void write_read_modbus( uint8_t * req, uint8_t * rsp, int write_len, int read_len )
 201:App/STM32F4-Discovery/modbus_mk.c **** {
 1123              		.loc 1 201 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 24
 1126              		@ frame_needed = 1, uses_anonymous_args = 0
 1127 0000 80B5     		push	{r7, lr}
 1128              	.LCFI15:
 1129              		.cfi_def_cfa_offset 8
 1130              		.cfi_offset 7, -8
 1131              		.cfi_offset 14, -4
 1132 0002 86B0     		sub	sp, sp, #24
 1133              	.LCFI16:
 1134              		.cfi_def_cfa_offset 32
 1135 0004 00AF     		add	r7, sp, #0
 1136              	.LCFI17:
 1137              		.cfi_def_cfa_register 7
 1138 0006 F860     		str	r0, [r7, #12]
 1139 0008 B960     		str	r1, [r7, #8]
 1140 000a 7A60     		str	r2, [r7, #4]
 1141 000c 3B60     		str	r3, [r7]
 202:App/STM32F4-Discovery/modbus_mk.c **** 	int i; 
 203:App/STM32F4-Discovery/modbus_mk.c **** 
 204:App/STM32F4-Discovery/modbus_mk.c **** 	// tell ISR we expect only specific amount of data
 205:App/STM32F4-Discovery/modbus_mk.c **** 	rx_length = read_len + write_len - 1 ; 
 1142              		.loc 1 205 0
 1143 000e 3A68     		ldr	r2, [r7]
 1144 0010 7B68     		ldr	r3, [r7, #4]
 1145 0012 1344     		add	r3, r3, r2
 1146 0014 5A1E     		subs	r2, r3, #1
 1147 0016 254B     		ldr	r3, .L32
 1148 0018 1A60     		str	r2, [r3]
 206:App/STM32F4-Discovery/modbus_mk.c **** 
 207:App/STM32F4-Discovery/modbus_mk.c **** 	// driver disable 
 208:App/STM32F4-Discovery/modbus_mk.c **** 	DD();
 1149              		.loc 1 208 0
 1150 001a 254B     		ldr	r3, .L32+4
 1151 001c 244A     		ldr	r2, .L32+4
 1152 001e 128B     		ldrh	r2, [r2, #24]	@ movhi
 1153 0020 92B2     		uxth	r2, r2
 1154 0022 42F48072 		orr	r2, r2, #256
 1155 0026 92B2     		uxth	r2, r2
 1156 0028 1A83     		strh	r2, [r3, #24]	@ movhi
 209:App/STM32F4-Discovery/modbus_mk.c **** 	for (i=0; i < 4000; i++) ;
 1157              		.loc 1 209 0
 1158 002a 0023     		movs	r3, #0
 1159 002c 7B61     		str	r3, [r7, #20]
 1160 002e 02E0     		b	.L26
 1161              	.L27:
 1162              		.loc 1 209 0 is_stmt 0 discriminator 2
 1163 0030 7B69     		ldr	r3, [r7, #20]
 1164 0032 0133     		adds	r3, r3, #1
 1165 0034 7B61     		str	r3, [r7, #20]
 1166              	.L26:
 1167              		.loc 1 209 0 discriminator 1
 1168 0036 7B69     		ldr	r3, [r7, #20]
 1169 0038 B3F57A6F 		cmp	r3, #4000
 1170 003c F8DB     		blt	.L27
 210:App/STM32F4-Discovery/modbus_mk.c **** 	USART_puts(req,write_len);
 1171              		.loc 1 210 0 is_stmt 1
 1172 003e F868     		ldr	r0, [r7, #12]
 1173 0040 7968     		ldr	r1, [r7, #4]
 1174 0042 FFF7FEFF 		bl	USART_puts
 211:App/STM32F4-Discovery/modbus_mk.c **** 	for (i = 0; i < 4100; i++);
 1175              		.loc 1 211 0
 1176 0046 0023     		movs	r3, #0
 1177 0048 7B61     		str	r3, [r7, #20]
 1178 004a 02E0     		b	.L28
 1179              	.L29:
 1180              		.loc 1 211 0 is_stmt 0 discriminator 2
 1181 004c 7B69     		ldr	r3, [r7, #20]
 1182 004e 0133     		adds	r3, r3, #1
 1183 0050 7B61     		str	r3, [r7, #20]
 1184              	.L28:
 1185              		.loc 1 211 0 discriminator 1
 1186 0052 7A69     		ldr	r2, [r7, #20]
 1187 0054 41F20303 		movw	r3, #4099
 1188 0058 9A42     		cmp	r2, r3
 1189 005a F7DD     		ble	.L29
 212:App/STM32F4-Discovery/modbus_mk.c **** 	// driver enable 
 213:App/STM32F4-Discovery/modbus_mk.c **** 	DE();
 1190              		.loc 1 213 0 is_stmt 1
 1191 005c 144B     		ldr	r3, .L32+4
 1192 005e 144A     		ldr	r2, .L32+4
 1193 0060 528B     		ldrh	r2, [r2, #26]	@ movhi
 1194 0062 92B2     		uxth	r2, r2
 1195 0064 42F48072 		orr	r2, r2, #256
 1196 0068 92B2     		uxth	r2, r2
 1197 006a 5A83     		strh	r2, [r3, #26]	@ movhi
 214:App/STM32F4-Discovery/modbus_mk.c **** 
 215:App/STM32F4-Discovery/modbus_mk.c **** 	xSemaphoreTake(xSmphrUSART, portMAX_DELAY);
 1198              		.loc 1 215 0
 1199 006c 114B     		ldr	r3, .L32+8
 1200 006e 1B68     		ldr	r3, [r3]
 1201 0070 1846     		mov	r0, r3
 1202 0072 0021     		movs	r1, #0
 1203 0074 4FF0FF32 		mov	r2, #-1
 1204 0078 0023     		movs	r3, #0
 1205 007a FFF7FEFF 		bl	xQueueGenericReceive
 216:App/STM32F4-Discovery/modbus_mk.c **** 	
 217:App/STM32F4-Discovery/modbus_mk.c **** 	for (i = 0; i < read_len; i++) 
 1206              		.loc 1 217 0
 1207 007e 0023     		movs	r3, #0
 1208 0080 7B61     		str	r3, [r7, #20]
 1209 0082 0CE0     		b	.L30
 1210              	.L31:
 218:App/STM32F4-Discovery/modbus_mk.c **** 		rsp[i] = received_string[i+write_len]; 
 1211              		.loc 1 218 0 discriminator 2
 1212 0084 7B69     		ldr	r3, [r7, #20]
 1213 0086 BA68     		ldr	r2, [r7, #8]
 1214 0088 1344     		add	r3, r3, r2
 1215 008a 7969     		ldr	r1, [r7, #20]
 1216 008c 7A68     		ldr	r2, [r7, #4]
 1217 008e 0A44     		add	r2, r2, r1
 1218 0090 0949     		ldr	r1, .L32+12
 1219 0092 8A5C     		ldrb	r2, [r1, r2]
 1220 0094 D2B2     		uxtb	r2, r2
 1221 0096 1A70     		strb	r2, [r3]
 217:App/STM32F4-Discovery/modbus_mk.c **** 	for (i = 0; i < read_len; i++) 
 1222              		.loc 1 217 0 discriminator 2
 1223 0098 7B69     		ldr	r3, [r7, #20]
 1224 009a 0133     		adds	r3, r3, #1
 1225 009c 7B61     		str	r3, [r7, #20]
 1226              	.L30:
 217:App/STM32F4-Discovery/modbus_mk.c **** 	for (i = 0; i < read_len; i++) 
 1227              		.loc 1 217 0 is_stmt 0 discriminator 1
 1228 009e 7A69     		ldr	r2, [r7, #20]
 1229 00a0 3B68     		ldr	r3, [r7]
 1230 00a2 9A42     		cmp	r2, r3
 1231 00a4 EEDB     		blt	.L31
 219:App/STM32F4-Discovery/modbus_mk.c **** 
 220:App/STM32F4-Discovery/modbus_mk.c **** }
 1232              		.loc 1 220 0 is_stmt 1
 1233 00a6 1837     		adds	r7, r7, #24
 1234 00a8 BD46     		mov	sp, r7
 1235              		@ sp needed
 1236 00aa 80BD     		pop	{r7, pc}
 1237              	.L33:
 1238              		.align	2
 1239              	.L32:
 1240 00ac 00000000 		.word	rx_length
 1241 00b0 00180240 		.word	1073879040
 1242 00b4 00000000 		.word	xSmphrUSART
 1243 00b8 00000000 		.word	received_string
 1244              		.cfi_endproc
 1245              	.LFE115:
 1247              		.section	.text.modbus_RIB,"ax",%progbits
 1248              		.align	2
 1249              		.global	modbus_RIB
 1250              		.thumb
 1251              		.thumb_func
 1253              	modbus_RIB:
 1254              	.LFB116:
 221:App/STM32F4-Discovery/modbus_mk.c **** 
 222:App/STM32F4-Discovery/modbus_mk.c **** 
 223:App/STM32F4-Discovery/modbus_mk.c **** /* modbus read input bits */
 224:App/STM32F4-Discovery/modbus_mk.c **** uint8_t modbus_RIB( int16_t address, int nb, uint8_t *dst )
 225:App/STM32F4-Discovery/modbus_mk.c **** {
 1255              		.loc 1 225 0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 536
 1258              		@ frame_needed = 1, uses_anonymous_args = 0
 1259 0000 80B5     		push	{r7, lr}
 1260              	.LCFI18:
 1261              		.cfi_def_cfa_offset 8
 1262              		.cfi_offset 7, -8
 1263              		.cfi_offset 14, -4
 1264 0002 ADF5067D 		sub	sp, sp, #536
 1265              	.LCFI19:
 1266              		.cfi_def_cfa_offset 544
 1267 0006 00AF     		add	r7, sp, #0
 1268              	.LCFI20:
 1269              		.cfi_def_cfa_register 7
 1270 0008 07F10803 		add	r3, r7, #8
 1271 000c 1960     		str	r1, [r3]
 1272 000e 3B1D     		adds	r3, r7, #4
 1273 0010 1A60     		str	r2, [r3]
 1274 0012 07F10E03 		add	r3, r7, #14
 1275 0016 0246     		mov	r2, r0	@ movhi
 1276 0018 1A80     		strh	r2, [r3]	@ movhi
 226:App/STM32F4-Discovery/modbus_mk.c **** 	/* first send request */
 227:App/STM32F4-Discovery/modbus_mk.c **** 
 228:App/STM32F4-Discovery/modbus_mk.c **** 	uint8_t req[REQ_MAX_LEN];
 229:App/STM32F4-Discovery/modbus_mk.c **** 	int req_length; 
 230:App/STM32F4-Discovery/modbus_mk.c **** 	
 231:App/STM32F4-Discovery/modbus_mk.c **** 	req[0] = 0x36; 
 1277              		.loc 1 231 0
 1278 001a 07F11003 		add	r3, r7, #16
 1279 001e 3622     		movs	r2, #54
 1280 0020 1A70     		strb	r2, [r3]
 232:App/STM32F4-Discovery/modbus_mk.c **** 	req[1] = 0x2;
 1281              		.loc 1 232 0
 1282 0022 07F11003 		add	r3, r7, #16
 1283 0026 0222     		movs	r2, #2
 1284 0028 5A70     		strb	r2, [r3, #1]
 233:App/STM32F4-Discovery/modbus_mk.c **** 	req[2] = address >> 8;
 1285              		.loc 1 233 0
 1286 002a 07F10E03 		add	r3, r7, #14
 1287 002e B3F90030 		ldrsh	r3, [r3]
 1288 0032 1B12     		asrs	r3, r3, #8
 1289 0034 9BB2     		uxth	r3, r3
 1290 0036 DAB2     		uxtb	r2, r3
 1291 0038 07F11003 		add	r3, r7, #16
 1292 003c 9A70     		strb	r2, [r3, #2]
 234:App/STM32F4-Discovery/modbus_mk.c **** 	req[3] = address & 0x00ff;
 1293              		.loc 1 234 0
 1294 003e 07F10E03 		add	r3, r7, #14
 1295 0042 1B88     		ldrh	r3, [r3]	@ movhi
 1296 0044 DAB2     		uxtb	r2, r3
 1297 0046 07F11003 		add	r3, r7, #16
 1298 004a DA70     		strb	r2, [r3, #3]
 235:App/STM32F4-Discovery/modbus_mk.c **** 	req[4] = nb >> 8;
 1299              		.loc 1 235 0
 1300 004c 07F10803 		add	r3, r7, #8
 1301 0050 1B68     		ldr	r3, [r3]
 1302 0052 1B12     		asrs	r3, r3, #8
 1303 0054 DAB2     		uxtb	r2, r3
 1304 0056 07F11003 		add	r3, r7, #16
 1305 005a 1A71     		strb	r2, [r3, #4]
 236:App/STM32F4-Discovery/modbus_mk.c **** 	req[5] = nb & 0x00ff; 
 1306              		.loc 1 236 0
 1307 005c 07F10803 		add	r3, r7, #8
 1308 0060 1B68     		ldr	r3, [r3]
 1309 0062 DAB2     		uxtb	r2, r3
 1310 0064 07F11003 		add	r3, r7, #16
 1311 0068 5A71     		strb	r2, [r3, #5]
 237:App/STM32F4-Discovery/modbus_mk.c **** 	req_length = 6;
 1312              		.loc 1 237 0
 1313 006a 0623     		movs	r3, #6
 1314 006c C7F81432 		str	r3, [r7, #532]
 238:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t crc = crc16(req, req_length);
 1315              		.loc 1 238 0
 1316 0070 D7F81432 		ldr	r3, [r7, #532]
 1317 0074 9BB2     		uxth	r3, r3
 1318 0076 07F11002 		add	r2, r7, #16
 1319 007a 1046     		mov	r0, r2
 1320 007c 1946     		mov	r1, r3
 1321 007e FFF7FEFF 		bl	crc16
 1322 0082 0346     		mov	r3, r0
 1323 0084 A7F81232 		strh	r3, [r7, #530]	@ movhi
 239:App/STM32F4-Discovery/modbus_mk.c **** 
 240:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc >> 8; 
 1324              		.loc 1 240 0
 1325 0088 D7F81432 		ldr	r3, [r7, #532]
 1326 008c 5A1C     		adds	r2, r3, #1
 1327 008e C7F81422 		str	r2, [r7, #532]
 1328 0092 B7F81222 		ldrh	r2, [r7, #530]
 1329 0096 120A     		lsrs	r2, r2, #8
 1330 0098 92B2     		uxth	r2, r2
 1331 009a D1B2     		uxtb	r1, r2
 1332 009c 07F11002 		add	r2, r7, #16
 1333 00a0 D154     		strb	r1, [r2, r3]
 241:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc & 0x00ff; 
 1334              		.loc 1 241 0
 1335 00a2 D7F81432 		ldr	r3, [r7, #532]
 1336 00a6 5A1C     		adds	r2, r3, #1
 1337 00a8 C7F81422 		str	r2, [r7, #532]
 1338 00ac B7F81222 		ldrh	r2, [r7, #530]	@ movhi
 1339 00b0 D1B2     		uxtb	r1, r2
 1340 00b2 07F11002 		add	r2, r7, #16
 1341 00b6 D154     		strb	r1, [r2, r3]
 242:App/STM32F4-Discovery/modbus_mk.c **** 	
 243:App/STM32F4-Discovery/modbus_mk.c **** 	write_read_modbus( req, dst, req_length, 6);
 1342              		.loc 1 243 0
 1343 00b8 07F11002 		add	r2, r7, #16
 1344 00bc 3B1D     		adds	r3, r7, #4
 1345 00be 1046     		mov	r0, r2
 1346 00c0 1968     		ldr	r1, [r3]
 1347 00c2 D7F81422 		ldr	r2, [r7, #532]
 1348 00c6 0623     		movs	r3, #6
 1349 00c8 FFF7FEFF 		bl	write_read_modbus
 244:App/STM32F4-Discovery/modbus_mk.c **** 	return modbus_confirmation (req, dst, req_length, 6);
 1350              		.loc 1 244 0
 1351 00cc D7F81432 		ldr	r3, [r7, #532]
 1352 00d0 9BB2     		uxth	r3, r3
 1353 00d2 07F11001 		add	r1, r7, #16
 1354 00d6 3A1D     		adds	r2, r7, #4
 1355 00d8 0846     		mov	r0, r1
 1356 00da 1168     		ldr	r1, [r2]
 1357 00dc 1A46     		mov	r2, r3
 1358 00de 0623     		movs	r3, #6
 1359 00e0 FFF7FEFF 		bl	modbus_confirmation
 1360 00e4 0346     		mov	r3, r0
 1361 00e6 DBB2     		uxtb	r3, r3
 245:App/STM32F4-Discovery/modbus_mk.c **** 
 246:App/STM32F4-Discovery/modbus_mk.c **** }
 1362              		.loc 1 246 0
 1363 00e8 1846     		mov	r0, r3
 1364 00ea 07F50677 		add	r7, r7, #536
 1365 00ee BD46     		mov	sp, r7
 1366              		@ sp needed
 1367 00f0 80BD     		pop	{r7, pc}
 1368              		.cfi_endproc
 1369              	.LFE116:
 1371 00f2 00BF     		.section	.text.modbus_WIB,"ax",%progbits
 1372              		.align	2
 1373              		.global	modbus_WIB
 1374              		.thumb
 1375              		.thumb_func
 1377              	modbus_WIB:
 1378              	.LFB117:
 247:App/STM32F4-Discovery/modbus_mk.c **** 
 248:App/STM32F4-Discovery/modbus_mk.c **** 
 249:App/STM32F4-Discovery/modbus_mk.c **** /* modbus write input bits */
 250:App/STM32F4-Discovery/modbus_mk.c **** uint8_t modbus_WIB( uint16_t address, int nb, uint8_t *src )
 251:App/STM32F4-Discovery/modbus_mk.c **** {
 1379              		.loc 1 251 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 1072
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383 0000 80B5     		push	{r7, lr}
 1384              	.LCFI21:
 1385              		.cfi_def_cfa_offset 8
 1386              		.cfi_offset 7, -8
 1387              		.cfi_offset 14, -4
 1388 0002 ADF5866D 		sub	sp, sp, #1072
 1389              	.LCFI22:
 1390              		.cfi_def_cfa_offset 1080
 1391 0006 00AF     		add	r7, sp, #0
 1392              	.LCFI23:
 1393              		.cfi_def_cfa_register 7
 1394 0008 07F10803 		add	r3, r7, #8
 1395 000c 1960     		str	r1, [r3]
 1396 000e 3B1D     		adds	r3, r7, #4
 1397 0010 1A60     		str	r2, [r3]
 1398 0012 07F10E03 		add	r3, r7, #14
 1399 0016 0246     		mov	r2, r0	@ movhi
 1400 0018 1A80     		strh	r2, [r3]	@ movhi
 252:App/STM32F4-Discovery/modbus_mk.c **** 	/* first send request */
 253:App/STM32F4-Discovery/modbus_mk.c **** 
 254:App/STM32F4-Discovery/modbus_mk.c **** 	uint8_t req[REQ_MAX_LEN];
 255:App/STM32F4-Discovery/modbus_mk.c **** 	uint8_t rsp[REQ_MAX_LEN];
 256:App/STM32F4-Discovery/modbus_mk.c **** 	int byte_count; 
 257:App/STM32F4-Discovery/modbus_mk.c **** 	int req_length; 
 258:App/STM32F4-Discovery/modbus_mk.c **** 	int bit_check = 0; 
 1401              		.loc 1 258 0
 1402 001a 0023     		movs	r3, #0
 1403 001c C7F82834 		str	r3, [r7, #1064]
 259:App/STM32F4-Discovery/modbus_mk.c **** 	int pos = 0; 
 1404              		.loc 1 259 0
 1405 0020 0023     		movs	r3, #0
 1406 0022 C7F82434 		str	r3, [r7, #1060]
 260:App/STM32F4-Discovery/modbus_mk.c **** 	
 261:App/STM32F4-Discovery/modbus_mk.c **** 	req[0] = 0x36; 
 1407              		.loc 1 261 0
 1408 0026 07F50573 		add	r3, r7, #532
 1409 002a 3622     		movs	r2, #54
 1410 002c 1A70     		strb	r2, [r3]
 262:App/STM32F4-Discovery/modbus_mk.c **** 	req[1] = 0xF;
 1411              		.loc 1 262 0
 1412 002e 07F50573 		add	r3, r7, #532
 1413 0032 0F22     		movs	r2, #15
 1414 0034 5A70     		strb	r2, [r3, #1]
 263:App/STM32F4-Discovery/modbus_mk.c **** 	req[2] = address >> 8;
 1415              		.loc 1 263 0
 1416 0036 07F10E03 		add	r3, r7, #14
 1417 003a 1B88     		ldrh	r3, [r3]
 1418 003c 1B0A     		lsrs	r3, r3, #8
 1419 003e 9BB2     		uxth	r3, r3
 1420 0040 DAB2     		uxtb	r2, r3
 1421 0042 07F50573 		add	r3, r7, #532
 1422 0046 9A70     		strb	r2, [r3, #2]
 264:App/STM32F4-Discovery/modbus_mk.c **** 	req[3] = address & 0x00ff;
 1423              		.loc 1 264 0
 1424 0048 07F10E03 		add	r3, r7, #14
 1425 004c 1B88     		ldrh	r3, [r3]	@ movhi
 1426 004e DAB2     		uxtb	r2, r3
 1427 0050 07F50573 		add	r3, r7, #532
 1428 0054 DA70     		strb	r2, [r3, #3]
 265:App/STM32F4-Discovery/modbus_mk.c **** 	req[4] = nb >> 8;
 1429              		.loc 1 265 0
 1430 0056 07F10803 		add	r3, r7, #8
 1431 005a 1B68     		ldr	r3, [r3]
 1432 005c 1B12     		asrs	r3, r3, #8
 1433 005e DAB2     		uxtb	r2, r3
 1434 0060 07F50573 		add	r3, r7, #532
 1435 0064 1A71     		strb	r2, [r3, #4]
 266:App/STM32F4-Discovery/modbus_mk.c **** 	req[5] = nb & 0x00ff; 
 1436              		.loc 1 266 0
 1437 0066 07F10803 		add	r3, r7, #8
 1438 006a 1B68     		ldr	r3, [r3]
 1439 006c DAB2     		uxtb	r2, r3
 1440 006e 07F50573 		add	r3, r7, #532
 1441 0072 5A71     		strb	r2, [r3, #5]
 267:App/STM32F4-Discovery/modbus_mk.c **** 	req_length = 6; 
 1442              		.loc 1 267 0
 1443 0074 0623     		movs	r3, #6
 1444 0076 C7F82C34 		str	r3, [r7, #1068]
 268:App/STM32F4-Discovery/modbus_mk.c **** 	
 269:App/STM32F4-Discovery/modbus_mk.c ****     	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
 1445              		.loc 1 269 0
 1446 007a 07F10803 		add	r3, r7, #8
 1447 007e 1B68     		ldr	r3, [r3]
 1448 0080 002B     		cmp	r3, #0
 1449 0082 00DA     		bge	.L37
 1450 0084 0733     		adds	r3, r3, #7
 1451              	.L37:
 1452 0086 DB10     		asrs	r3, r3, #3
 1453 0088 1A46     		mov	r2, r3
 1454 008a 07F10803 		add	r3, r7, #8
 1455 008e 1B68     		ldr	r3, [r3]
 1456 0090 03F00703 		and	r3, r3, #7
 1457 0094 002B     		cmp	r3, #0
 1458 0096 0CBF     		ite	eq
 1459 0098 0023     		moveq	r3, #0
 1460 009a 0123     		movne	r3, #1
 1461 009c DBB2     		uxtb	r3, r3
 1462 009e 1344     		add	r3, r3, r2
 1463 00a0 C7F81834 		str	r3, [r7, #1048]
 270:App/STM32F4-Discovery/modbus_mk.c ****   	req[req_length++] = byte_count;
 1464              		.loc 1 270 0
 1465 00a4 D7F82C34 		ldr	r3, [r7, #1068]
 1466 00a8 5A1C     		adds	r2, r3, #1
 1467 00aa C7F82C24 		str	r2, [r7, #1068]
 1468 00ae D7F81824 		ldr	r2, [r7, #1048]
 1469 00b2 D1B2     		uxtb	r1, r2
 1470 00b4 07F50572 		add	r2, r7, #532
 1471 00b8 D154     		strb	r1, [r2, r3]
 271:App/STM32F4-Discovery/modbus_mk.c **** 
 272:App/STM32F4-Discovery/modbus_mk.c **** 	int i; 
 273:App/STM32F4-Discovery/modbus_mk.c ****     	for (i = 0; i < byte_count; i++) {
 1472              		.loc 1 273 0
 1473 00ba 0023     		movs	r3, #0
 1474 00bc C7F82034 		str	r3, [r7, #1056]
 1475 00c0 5CE0     		b	.L38
 1476              	.L44:
 1477              	.LBB3:
 274:App/STM32F4-Discovery/modbus_mk.c ****         
 275:App/STM32F4-Discovery/modbus_mk.c **** 		int bit;
 276:App/STM32F4-Discovery/modbus_mk.c **** 		bit = 0x01;
 1478              		.loc 1 276 0
 1479 00c2 0123     		movs	r3, #1
 1480 00c4 C7F81C34 		str	r3, [r7, #1052]
 277:App/STM32F4-Discovery/modbus_mk.c ****         	req[req_length] = 0;
 1481              		.loc 1 277 0
 1482 00c8 07F50572 		add	r2, r7, #532
 1483 00cc D7F82C34 		ldr	r3, [r7, #1068]
 1484 00d0 1344     		add	r3, r3, r2
 1485 00d2 0022     		movs	r2, #0
 1486 00d4 1A70     		strb	r2, [r3]
 278:App/STM32F4-Discovery/modbus_mk.c **** 
 279:App/STM32F4-Discovery/modbus_mk.c ****         	while ((bit & 0xFF) && (bit_check++ < nb)) {
 1487              		.loc 1 279 0
 1488 00d6 38E0     		b	.L39
 1489              	.L43:
 280:App/STM32F4-Discovery/modbus_mk.c ****             		if (src[pos++])
 1490              		.loc 1 280 0
 1491 00d8 D7F82434 		ldr	r3, [r7, #1060]
 1492 00dc 5A1C     		adds	r2, r3, #1
 1493 00de C7F82424 		str	r2, [r7, #1060]
 1494 00e2 3A1D     		adds	r2, r7, #4
 1495 00e4 1268     		ldr	r2, [r2]
 1496 00e6 1344     		add	r3, r3, r2
 1497 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1498 00ea 002B     		cmp	r3, #0
 1499 00ec 13D0     		beq	.L40
 281:App/STM32F4-Discovery/modbus_mk.c ****                 		req[req_length] |= bit;
 1500              		.loc 1 281 0
 1501 00ee 07F50572 		add	r2, r7, #532
 1502 00f2 D7F82C34 		ldr	r3, [r7, #1068]
 1503 00f6 1344     		add	r3, r3, r2
 1504 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1505 00fa DAB2     		uxtb	r2, r3
 1506 00fc D7F81C34 		ldr	r3, [r7, #1052]
 1507 0100 DBB2     		uxtb	r3, r3
 1508 0102 1343     		orrs	r3, r3, r2
 1509 0104 DBB2     		uxtb	r3, r3
 1510 0106 DAB2     		uxtb	r2, r3
 1511 0108 07F50571 		add	r1, r7, #532
 1512 010c D7F82C34 		ldr	r3, [r7, #1068]
 1513 0110 0B44     		add	r3, r3, r1
 1514 0112 1A70     		strb	r2, [r3]
 1515 0114 14E0     		b	.L41
 1516              	.L40:
 282:App/STM32F4-Discovery/modbus_mk.c ****             		else
 283:App/STM32F4-Discovery/modbus_mk.c ****                 		req[req_length] &=~ bit;
 1517              		.loc 1 283 0
 1518 0116 07F50572 		add	r2, r7, #532
 1519 011a D7F82C34 		ldr	r3, [r7, #1068]
 1520 011e 1344     		add	r3, r3, r2
 1521 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1522 0122 DAB2     		uxtb	r2, r3
 1523 0124 D7F81C34 		ldr	r3, [r7, #1052]
 1524 0128 DBB2     		uxtb	r3, r3
 1525 012a DB43     		mvns	r3, r3
 1526 012c DBB2     		uxtb	r3, r3
 1527 012e 1340     		ands	r3, r3, r2
 1528 0130 DBB2     		uxtb	r3, r3
 1529 0132 DAB2     		uxtb	r2, r3
 1530 0134 07F50571 		add	r1, r7, #532
 1531 0138 D7F82C34 		ldr	r3, [r7, #1068]
 1532 013c 0B44     		add	r3, r3, r1
 1533 013e 1A70     		strb	r2, [r3]
 1534              	.L41:
 284:App/STM32F4-Discovery/modbus_mk.c **** 
 285:App/STM32F4-Discovery/modbus_mk.c ****             		bit = bit << 1;
 1535              		.loc 1 285 0
 1536 0140 D7F81C34 		ldr	r3, [r7, #1052]
 1537 0144 5B00     		lsls	r3, r3, #1
 1538 0146 C7F81C34 		str	r3, [r7, #1052]
 1539              	.L39:
 279:App/STM32F4-Discovery/modbus_mk.c ****         	while ((bit & 0xFF) && (bit_check++ < nb)) {
 1540              		.loc 1 279 0 discriminator 1
 1541 014a D7F81C34 		ldr	r3, [r7, #1052]
 1542 014e DBB2     		uxtb	r3, r3
 1543 0150 002B     		cmp	r3, #0
 1544 0152 09D0     		beq	.L42
 279:App/STM32F4-Discovery/modbus_mk.c ****         	while ((bit & 0xFF) && (bit_check++ < nb)) {
 1545              		.loc 1 279 0 is_stmt 0 discriminator 2
 1546 0154 D7F82834 		ldr	r3, [r7, #1064]
 1547 0158 5A1C     		adds	r2, r3, #1
 1548 015a C7F82824 		str	r2, [r7, #1064]
 1549 015e 07F10802 		add	r2, r7, #8
 1550 0162 1268     		ldr	r2, [r2]
 1551 0164 9342     		cmp	r3, r2
 1552 0166 B7DB     		blt	.L43
 1553              	.L42:
 286:App/STM32F4-Discovery/modbus_mk.c ****         	}	
 287:App/STM32F4-Discovery/modbus_mk.c ****         	
 288:App/STM32F4-Discovery/modbus_mk.c **** 		req_length++;
 1554              		.loc 1 288 0 is_stmt 1
 1555 0168 D7F82C34 		ldr	r3, [r7, #1068]
 1556 016c 0133     		adds	r3, r3, #1
 1557 016e C7F82C34 		str	r3, [r7, #1068]
 1558              	.LBE3:
 273:App/STM32F4-Discovery/modbus_mk.c ****     	for (i = 0; i < byte_count; i++) {
 1559              		.loc 1 273 0
 1560 0172 D7F82034 		ldr	r3, [r7, #1056]
 1561 0176 0133     		adds	r3, r3, #1
 1562 0178 C7F82034 		str	r3, [r7, #1056]
 1563              	.L38:
 273:App/STM32F4-Discovery/modbus_mk.c ****     	for (i = 0; i < byte_count; i++) {
 1564              		.loc 1 273 0 is_stmt 0 discriminator 1
 1565 017c D7F82024 		ldr	r2, [r7, #1056]
 1566 0180 D7F81834 		ldr	r3, [r7, #1048]
 1567 0184 9A42     		cmp	r2, r3
 1568 0186 9CDB     		blt	.L44
 289:App/STM32F4-Discovery/modbus_mk.c **** 	 }
 290:App/STM32F4-Discovery/modbus_mk.c **** 
 291:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t crc = crc16(req, req_length);
 1569              		.loc 1 291 0 is_stmt 1
 1570 0188 D7F82C34 		ldr	r3, [r7, #1068]
 1571 018c 9BB2     		uxth	r3, r3
 1572 018e 07F50572 		add	r2, r7, #532
 1573 0192 1046     		mov	r0, r2
 1574 0194 1946     		mov	r1, r3
 1575 0196 FFF7FEFF 		bl	crc16
 1576 019a 0346     		mov	r3, r0
 1577 019c A7F81634 		strh	r3, [r7, #1046]	@ movhi
 292:App/STM32F4-Discovery/modbus_mk.c **** 
 293:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc >> 8; 
 1578              		.loc 1 293 0
 1579 01a0 D7F82C34 		ldr	r3, [r7, #1068]
 1580 01a4 5A1C     		adds	r2, r3, #1
 1581 01a6 C7F82C24 		str	r2, [r7, #1068]
 1582 01aa B7F81624 		ldrh	r2, [r7, #1046]
 1583 01ae 120A     		lsrs	r2, r2, #8
 1584 01b0 92B2     		uxth	r2, r2
 1585 01b2 D1B2     		uxtb	r1, r2
 1586 01b4 07F50572 		add	r2, r7, #532
 1587 01b8 D154     		strb	r1, [r2, r3]
 294:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc & 0x00ff; 
 1588              		.loc 1 294 0
 1589 01ba D7F82C34 		ldr	r3, [r7, #1068]
 1590 01be 5A1C     		adds	r2, r3, #1
 1591 01c0 C7F82C24 		str	r2, [r7, #1068]
 1592 01c4 B7F81624 		ldrh	r2, [r7, #1046]	@ movhi
 1593 01c8 D1B2     		uxtb	r1, r2
 1594 01ca 07F50572 		add	r2, r7, #532
 1595 01ce D154     		strb	r1, [r2, r3]
 295:App/STM32F4-Discovery/modbus_mk.c **** 	
 296:App/STM32F4-Discovery/modbus_mk.c **** 	/* write request  to modbus line */
 297:App/STM32F4-Discovery/modbus_mk.c **** 	write_read_modbus( req,rsp, req_length ,8); 
 1596              		.loc 1 297 0
 1597 01d0 07F50572 		add	r2, r7, #532
 1598 01d4 07F11403 		add	r3, r7, #20
 1599 01d8 1046     		mov	r0, r2
 1600 01da 1946     		mov	r1, r3
 1601 01dc D7F82C24 		ldr	r2, [r7, #1068]
 1602 01e0 0823     		movs	r3, #8
 1603 01e2 FFF7FEFF 		bl	write_read_modbus
 298:App/STM32F4-Discovery/modbus_mk.c **** 	return modbus_confirmation (req, rsp,req_length, 8); 
 1604              		.loc 1 298 0
 1605 01e6 D7F82C34 		ldr	r3, [r7, #1068]
 1606 01ea 9BB2     		uxth	r3, r3
 1607 01ec 07F50571 		add	r1, r7, #532
 1608 01f0 07F11402 		add	r2, r7, #20
 1609 01f4 0846     		mov	r0, r1
 1610 01f6 1146     		mov	r1, r2
 1611 01f8 1A46     		mov	r2, r3
 1612 01fa 0823     		movs	r3, #8
 1613 01fc FFF7FEFF 		bl	modbus_confirmation
 1614 0200 0346     		mov	r3, r0
 1615 0202 DBB2     		uxtb	r3, r3
 299:App/STM32F4-Discovery/modbus_mk.c **** 
 300:App/STM32F4-Discovery/modbus_mk.c **** 	
 301:App/STM32F4-Discovery/modbus_mk.c **** }
 1616              		.loc 1 301 0
 1617 0204 1846     		mov	r0, r3
 1618 0206 07F58667 		add	r7, r7, #1072
 1619 020a BD46     		mov	sp, r7
 1620              		@ sp needed
 1621 020c 80BD     		pop	{r7, pc}
 1622              		.cfi_endproc
 1623              	.LFE117:
 1625 020e 00BF     		.section	.text.modbus_WR,"ax",%progbits
 1626              		.align	2
 1627              		.global	modbus_WR
 1628              		.thumb
 1629              		.thumb_func
 1631              	modbus_WR:
 1632              	.LFB118:
 302:App/STM32F4-Discovery/modbus_mk.c **** 
 303:App/STM32F4-Discovery/modbus_mk.c **** /* Write the values from the array to the registers of the remote device */
 304:App/STM32F4-Discovery/modbus_mk.c **** uint8_t modbus_WR( int address, int nb, const uint16_t *src)
 305:App/STM32F4-Discovery/modbus_mk.c **** {
 1633              		.loc 1 305 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 1056
 1636              		@ frame_needed = 1, uses_anonymous_args = 0
 1637 0000 80B5     		push	{r7, lr}
 1638              	.LCFI24:
 1639              		.cfi_def_cfa_offset 8
 1640              		.cfi_offset 7, -8
 1641              		.cfi_offset 14, -4
 1642 0002 ADF5846D 		sub	sp, sp, #1056
 1643              	.LCFI25:
 1644              		.cfi_def_cfa_offset 1064
 1645 0006 00AF     		add	r7, sp, #0
 1646              	.LCFI26:
 1647              		.cfi_def_cfa_register 7
 1648 0008 07F10C03 		add	r3, r7, #12
 1649 000c 1860     		str	r0, [r3]
 1650 000e 07F10803 		add	r3, r7, #8
 1651 0012 1960     		str	r1, [r3]
 1652 0014 3B1D     		adds	r3, r7, #4
 1653 0016 1A60     		str	r2, [r3]
 306:App/STM32F4-Discovery/modbus_mk.c **** 	int rc;
 307:App/STM32F4-Discovery/modbus_mk.c **** 	int i;
 308:App/STM32F4-Discovery/modbus_mk.c ****     	int req_length;
 309:App/STM32F4-Discovery/modbus_mk.c ****     	int byte_count;
 310:App/STM32F4-Discovery/modbus_mk.c **** 
 311:App/STM32F4-Discovery/modbus_mk.c ****     	uint8_t req[REQ_MAX_LEN];
 312:App/STM32F4-Discovery/modbus_mk.c **** 	uint8_t rsp[REQ_MAX_LEN];
 313:App/STM32F4-Discovery/modbus_mk.c **** 
 314:App/STM32F4-Discovery/modbus_mk.c **** 	req[0] = 0x36; 
 1654              		.loc 1 314 0
 1655 0018 07F50473 		add	r3, r7, #528
 1656 001c 3622     		movs	r2, #54
 1657 001e 1A70     		strb	r2, [r3]
 315:App/STM32F4-Discovery/modbus_mk.c **** 	req[1] = 0x10;
 1658              		.loc 1 315 0
 1659 0020 07F50473 		add	r3, r7, #528
 1660 0024 1022     		movs	r2, #16
 1661 0026 5A70     		strb	r2, [r3, #1]
 316:App/STM32F4-Discovery/modbus_mk.c **** 	req[2] = address >> 8;
 1662              		.loc 1 316 0
 1663 0028 07F10C03 		add	r3, r7, #12
 1664 002c 1B68     		ldr	r3, [r3]
 1665 002e 1B12     		asrs	r3, r3, #8
 1666 0030 DAB2     		uxtb	r2, r3
 1667 0032 07F50473 		add	r3, r7, #528
 1668 0036 9A70     		strb	r2, [r3, #2]
 317:App/STM32F4-Discovery/modbus_mk.c **** 	req[3] = address & 0x00ff;
 1669              		.loc 1 317 0
 1670 0038 07F10C03 		add	r3, r7, #12
 1671 003c 1B68     		ldr	r3, [r3]
 1672 003e DAB2     		uxtb	r2, r3
 1673 0040 07F50473 		add	r3, r7, #528
 1674 0044 DA70     		strb	r2, [r3, #3]
 318:App/STM32F4-Discovery/modbus_mk.c **** 	req[4] = nb >> 8;
 1675              		.loc 1 318 0
 1676 0046 07F10803 		add	r3, r7, #8
 1677 004a 1B68     		ldr	r3, [r3]
 1678 004c 1B12     		asrs	r3, r3, #8
 1679 004e DAB2     		uxtb	r2, r3
 1680 0050 07F50473 		add	r3, r7, #528
 1681 0054 1A71     		strb	r2, [r3, #4]
 319:App/STM32F4-Discovery/modbus_mk.c **** 	req[5] = nb & 0x00ff; 
 1682              		.loc 1 319 0
 1683 0056 07F10803 		add	r3, r7, #8
 1684 005a 1B68     		ldr	r3, [r3]
 1685 005c DAB2     		uxtb	r2, r3
 1686 005e 07F50473 		add	r3, r7, #528
 1687 0062 5A71     		strb	r2, [r3, #5]
 320:App/STM32F4-Discovery/modbus_mk.c **** 	req_length = 6; 
 1688              		.loc 1 320 0
 1689 0064 0623     		movs	r3, #6
 1690 0066 C7F81834 		str	r3, [r7, #1048]
 321:App/STM32F4-Discovery/modbus_mk.c **** 	
 322:App/STM32F4-Discovery/modbus_mk.c ****    	byte_count = nb * 2;
 1691              		.loc 1 322 0
 1692 006a 07F10803 		add	r3, r7, #8
 1693 006e 1B68     		ldr	r3, [r3]
 1694 0070 5B00     		lsls	r3, r3, #1
 1695 0072 C7F81434 		str	r3, [r7, #1044]
 323:App/STM32F4-Discovery/modbus_mk.c ****     	req[req_length++] = byte_count;
 1696              		.loc 1 323 0
 1697 0076 D7F81834 		ldr	r3, [r7, #1048]
 1698 007a 5A1C     		adds	r2, r3, #1
 1699 007c C7F81824 		str	r2, [r7, #1048]
 1700 0080 D7F81424 		ldr	r2, [r7, #1044]
 1701 0084 D1B2     		uxtb	r1, r2
 1702 0086 07F50472 		add	r2, r7, #528
 1703 008a D154     		strb	r1, [r2, r3]
 324:App/STM32F4-Discovery/modbus_mk.c **** 
 325:App/STM32F4-Discovery/modbus_mk.c ****     for (i = 0; i < nb; i++) {
 1704              		.loc 1 325 0
 1705 008c 0023     		movs	r3, #0
 1706 008e C7F81C34 		str	r3, [r7, #1052]
 1707 0092 26E0     		b	.L47
 1708              	.L48:
 326:App/STM32F4-Discovery/modbus_mk.c **** 		req[req_length++] = src[i] >> 8;
 1709              		.loc 1 326 0 discriminator 2
 1710 0094 D7F81834 		ldr	r3, [r7, #1048]
 1711 0098 5A1C     		adds	r2, r3, #1
 1712 009a C7F81824 		str	r2, [r7, #1048]
 1713 009e D7F81C24 		ldr	r2, [r7, #1052]
 1714 00a2 5200     		lsls	r2, r2, #1
 1715 00a4 391D     		adds	r1, r7, #4
 1716 00a6 0968     		ldr	r1, [r1]
 1717 00a8 0A44     		add	r2, r2, r1
 1718 00aa 1288     		ldrh	r2, [r2]
 1719 00ac 120A     		lsrs	r2, r2, #8
 1720 00ae 92B2     		uxth	r2, r2
 1721 00b0 D1B2     		uxtb	r1, r2
 1722 00b2 07F50472 		add	r2, r7, #528
 1723 00b6 D154     		strb	r1, [r2, r3]
 327:App/STM32F4-Discovery/modbus_mk.c ****         	req[req_length++] = src[i] & 0x00ff;
 1724              		.loc 1 327 0 discriminator 2
 1725 00b8 D7F81834 		ldr	r3, [r7, #1048]
 1726 00bc 5A1C     		adds	r2, r3, #1
 1727 00be C7F81824 		str	r2, [r7, #1048]
 1728 00c2 D7F81C24 		ldr	r2, [r7, #1052]
 1729 00c6 5200     		lsls	r2, r2, #1
 1730 00c8 391D     		adds	r1, r7, #4
 1731 00ca 0968     		ldr	r1, [r1]
 1732 00cc 0A44     		add	r2, r2, r1
 1733 00ce 1288     		ldrh	r2, [r2]
 1734 00d0 D1B2     		uxtb	r1, r2
 1735 00d2 07F50472 		add	r2, r7, #528
 1736 00d6 D154     		strb	r1, [r2, r3]
 325:App/STM32F4-Discovery/modbus_mk.c ****     for (i = 0; i < nb; i++) {
 1737              		.loc 1 325 0 discriminator 2
 1738 00d8 D7F81C34 		ldr	r3, [r7, #1052]
 1739 00dc 0133     		adds	r3, r3, #1
 1740 00de C7F81C34 		str	r3, [r7, #1052]
 1741              	.L47:
 325:App/STM32F4-Discovery/modbus_mk.c ****     for (i = 0; i < nb; i++) {
 1742              		.loc 1 325 0 is_stmt 0 discriminator 1
 1743 00e2 07F10803 		add	r3, r7, #8
 1744 00e6 D7F81C24 		ldr	r2, [r7, #1052]
 1745 00ea 1B68     		ldr	r3, [r3]
 1746 00ec 9A42     		cmp	r2, r3
 1747 00ee D1DB     		blt	.L48
 328:App/STM32F4-Discovery/modbus_mk.c ****     	}
 329:App/STM32F4-Discovery/modbus_mk.c **** 
 330:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t crc = crc16(req, req_length);
 1748              		.loc 1 330 0 is_stmt 1
 1749 00f0 D7F81834 		ldr	r3, [r7, #1048]
 1750 00f4 9BB2     		uxth	r3, r3
 1751 00f6 07F50472 		add	r2, r7, #528
 1752 00fa 1046     		mov	r0, r2
 1753 00fc 1946     		mov	r1, r3
 1754 00fe FFF7FEFF 		bl	crc16
 1755 0102 0346     		mov	r3, r0
 1756 0104 A7F81234 		strh	r3, [r7, #1042]	@ movhi
 331:App/STM32F4-Discovery/modbus_mk.c **** 
 332:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc >> 8; 
 1757              		.loc 1 332 0
 1758 0108 D7F81834 		ldr	r3, [r7, #1048]
 1759 010c 5A1C     		adds	r2, r3, #1
 1760 010e C7F81824 		str	r2, [r7, #1048]
 1761 0112 B7F81224 		ldrh	r2, [r7, #1042]
 1762 0116 120A     		lsrs	r2, r2, #8
 1763 0118 92B2     		uxth	r2, r2
 1764 011a D1B2     		uxtb	r1, r2
 1765 011c 07F50472 		add	r2, r7, #528
 1766 0120 D154     		strb	r1, [r2, r3]
 333:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc & 0x00ff;
 1767              		.loc 1 333 0
 1768 0122 D7F81834 		ldr	r3, [r7, #1048]
 1769 0126 5A1C     		adds	r2, r3, #1
 1770 0128 C7F81824 		str	r2, [r7, #1048]
 1771 012c B7F81224 		ldrh	r2, [r7, #1042]	@ movhi
 1772 0130 D1B2     		uxtb	r1, r2
 1773 0132 07F50472 		add	r2, r7, #528
 1774 0136 D154     		strb	r1, [r2, r3]
 334:App/STM32F4-Discovery/modbus_mk.c **** 
 335:App/STM32F4-Discovery/modbus_mk.c **** 	/* write request  to modbus line */
 336:App/STM32F4-Discovery/modbus_mk.c **** 	write_read_modbus( req, rsp, req_length, 8); 
 1775              		.loc 1 336 0
 1776 0138 07F50472 		add	r2, r7, #528
 1777 013c 07F11003 		add	r3, r7, #16
 1778 0140 1046     		mov	r0, r2
 1779 0142 1946     		mov	r1, r3
 1780 0144 D7F81824 		ldr	r2, [r7, #1048]
 1781 0148 0823     		movs	r3, #8
 1782 014a FFF7FEFF 		bl	write_read_modbus
 337:App/STM32F4-Discovery/modbus_mk.c **** 	return modbus_confirmation (req, rsp,req_length, 8); 
 1783              		.loc 1 337 0
 1784 014e D7F81834 		ldr	r3, [r7, #1048]
 1785 0152 9BB2     		uxth	r3, r3
 1786 0154 07F50471 		add	r1, r7, #528
 1787 0158 07F11002 		add	r2, r7, #16
 1788 015c 0846     		mov	r0, r1
 1789 015e 1146     		mov	r1, r2
 1790 0160 1A46     		mov	r2, r3
 1791 0162 0823     		movs	r3, #8
 1792 0164 FFF7FEFF 		bl	modbus_confirmation
 1793 0168 0346     		mov	r3, r0
 1794 016a DBB2     		uxtb	r3, r3
 338:App/STM32F4-Discovery/modbus_mk.c **** 
 339:App/STM32F4-Discovery/modbus_mk.c **** 
 340:App/STM32F4-Discovery/modbus_mk.c **** 
 341:App/STM32F4-Discovery/modbus_mk.c **** }
 1795              		.loc 1 341 0
 1796 016c 1846     		mov	r0, r3
 1797 016e 07F58467 		add	r7, r7, #1056
 1798 0172 BD46     		mov	sp, r7
 1799              		@ sp needed
 1800 0174 80BD     		pop	{r7, pc}
 1801              		.cfi_endproc
 1802              	.LFE118:
 1804 0176 00BF     		.section	.text.modbus_WSR,"ax",%progbits
 1805              		.align	2
 1806              		.global	modbus_WSR
 1807              		.thumb
 1808              		.thumb_func
 1810              	modbus_WSR:
 1811              	.LFB119:
 342:App/STM32F4-Discovery/modbus_mk.c **** 
 343:App/STM32F4-Discovery/modbus_mk.c **** /* Write the values from the array to the registers of the remote device */
 344:App/STM32F4-Discovery/modbus_mk.c **** uint8_t modbus_WSR( int address, const uint16_t src)
 345:App/STM32F4-Discovery/modbus_mk.c **** {
 1812              		.loc 1 345 0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 1048
 1815              		@ frame_needed = 1, uses_anonymous_args = 0
 1816 0000 80B5     		push	{r7, lr}
 1817              	.LCFI27:
 1818              		.cfi_def_cfa_offset 8
 1819              		.cfi_offset 7, -8
 1820              		.cfi_offset 14, -4
 1821 0002 ADF5836D 		sub	sp, sp, #1048
 1822              	.LCFI28:
 1823              		.cfi_def_cfa_offset 1056
 1824 0006 00AF     		add	r7, sp, #0
 1825              	.LCFI29:
 1826              		.cfi_def_cfa_register 7
 1827 0008 3B1D     		adds	r3, r7, #4
 1828 000a 1860     		str	r0, [r3]
 1829 000c 0A46     		mov	r2, r1
 1830 000e BB1C     		adds	r3, r7, #2
 1831 0010 1A80     		strh	r2, [r3]	@ movhi
 346:App/STM32F4-Discovery/modbus_mk.c **** 	int nb = 1; 
 1832              		.loc 1 346 0
 1833 0012 0123     		movs	r3, #1
 1834 0014 C7F81434 		str	r3, [r7, #1044]
 347:App/STM32F4-Discovery/modbus_mk.c **** 	int rc;
 348:App/STM32F4-Discovery/modbus_mk.c **** 	int i;
 349:App/STM32F4-Discovery/modbus_mk.c ****     	int req_length;
 350:App/STM32F4-Discovery/modbus_mk.c ****     	int byte_count;
 351:App/STM32F4-Discovery/modbus_mk.c **** 
 352:App/STM32F4-Discovery/modbus_mk.c ****     	uint8_t req[REQ_MAX_LEN];
 353:App/STM32F4-Discovery/modbus_mk.c **** 	uint8_t rsp[REQ_MAX_LEN];
 354:App/STM32F4-Discovery/modbus_mk.c **** 
 355:App/STM32F4-Discovery/modbus_mk.c **** 	req[0] = 0x36; 
 1835              		.loc 1 355 0
 1836 0018 07F50273 		add	r3, r7, #520
 1837 001c 3622     		movs	r2, #54
 1838 001e 1A70     		strb	r2, [r3]
 356:App/STM32F4-Discovery/modbus_mk.c **** 	req[1] = 0x6;
 1839              		.loc 1 356 0
 1840 0020 07F50273 		add	r3, r7, #520
 1841 0024 0622     		movs	r2, #6
 1842 0026 5A70     		strb	r2, [r3, #1]
 357:App/STM32F4-Discovery/modbus_mk.c **** 	req[2] = address >> 8;
 1843              		.loc 1 357 0
 1844 0028 3B1D     		adds	r3, r7, #4
 1845 002a 1B68     		ldr	r3, [r3]
 1846 002c 1B12     		asrs	r3, r3, #8
 1847 002e DAB2     		uxtb	r2, r3
 1848 0030 07F50273 		add	r3, r7, #520
 1849 0034 9A70     		strb	r2, [r3, #2]
 358:App/STM32F4-Discovery/modbus_mk.c **** 	req[3] = address & 0x00ff;
 1850              		.loc 1 358 0
 1851 0036 3B1D     		adds	r3, r7, #4
 1852 0038 1B68     		ldr	r3, [r3]
 1853 003a DAB2     		uxtb	r2, r3
 1854 003c 07F50273 		add	r3, r7, #520
 1855 0040 DA70     		strb	r2, [r3, #3]
 359:App/STM32F4-Discovery/modbus_mk.c **** //	req[4] = nb >> 8;
 360:App/STM32F4-Discovery/modbus_mk.c **** //	req[5] = nb & 0x00ff; 
 361:App/STM32F4-Discovery/modbus_mk.c **** 	req_length = 4; 
 1856              		.loc 1 361 0
 1857 0042 0423     		movs	r3, #4
 1858 0044 C7F81034 		str	r3, [r7, #1040]
 362:App/STM32F4-Discovery/modbus_mk.c **** 	
 363:App/STM32F4-Discovery/modbus_mk.c ****    	byte_count = nb * 2;
 1859              		.loc 1 363 0
 1860 0048 D7F81434 		ldr	r3, [r7, #1044]
 1861 004c 5B00     		lsls	r3, r3, #1
 1862 004e C7F80C34 		str	r3, [r7, #1036]
 364:App/STM32F4-Discovery/modbus_mk.c ****     	req[req_length++] = byte_count;
 1863              		.loc 1 364 0
 1864 0052 D7F81034 		ldr	r3, [r7, #1040]
 1865 0056 5A1C     		adds	r2, r3, #1
 1866 0058 C7F81024 		str	r2, [r7, #1040]
 1867 005c D7F80C24 		ldr	r2, [r7, #1036]
 1868 0060 D1B2     		uxtb	r1, r2
 1869 0062 07F50272 		add	r2, r7, #520
 1870 0066 D154     		strb	r1, [r2, r3]
 365:App/STM32F4-Discovery/modbus_mk.c **** 
 366:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = src >> 8;
 1871              		.loc 1 366 0
 1872 0068 D7F81034 		ldr	r3, [r7, #1040]
 1873 006c 5A1C     		adds	r2, r3, #1
 1874 006e C7F81024 		str	r2, [r7, #1040]
 1875 0072 BA1C     		adds	r2, r7, #2
 1876 0074 1288     		ldrh	r2, [r2]
 1877 0076 120A     		lsrs	r2, r2, #8
 1878 0078 92B2     		uxth	r2, r2
 1879 007a D1B2     		uxtb	r1, r2
 1880 007c 07F50272 		add	r2, r7, #520
 1881 0080 D154     		strb	r1, [r2, r3]
 367:App/STM32F4-Discovery/modbus_mk.c ****        	req[req_length++] = src & 0x00ff;
 1882              		.loc 1 367 0
 1883 0082 D7F81034 		ldr	r3, [r7, #1040]
 1884 0086 5A1C     		adds	r2, r3, #1
 1885 0088 C7F81024 		str	r2, [r7, #1040]
 1886 008c BA1C     		adds	r2, r7, #2
 1887 008e 1288     		ldrh	r2, [r2]	@ movhi
 1888 0090 D1B2     		uxtb	r1, r2
 1889 0092 07F50272 		add	r2, r7, #520
 1890 0096 D154     		strb	r1, [r2, r3]
 368:App/STM32F4-Discovery/modbus_mk.c ****     	
 369:App/STM32F4-Discovery/modbus_mk.c **** 
 370:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t crc = crc16(req, req_length);
 1891              		.loc 1 370 0
 1892 0098 D7F81034 		ldr	r3, [r7, #1040]
 1893 009c 9BB2     		uxth	r3, r3
 1894 009e 07F50272 		add	r2, r7, #520
 1895 00a2 1046     		mov	r0, r2
 1896 00a4 1946     		mov	r1, r3
 1897 00a6 FFF7FEFF 		bl	crc16
 1898 00aa 0346     		mov	r3, r0
 1899 00ac A7F80A34 		strh	r3, [r7, #1034]	@ movhi
 371:App/STM32F4-Discovery/modbus_mk.c **** 
 372:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc >> 8; 
 1900              		.loc 1 372 0
 1901 00b0 D7F81034 		ldr	r3, [r7, #1040]
 1902 00b4 5A1C     		adds	r2, r3, #1
 1903 00b6 C7F81024 		str	r2, [r7, #1040]
 1904 00ba B7F80A24 		ldrh	r2, [r7, #1034]
 1905 00be 120A     		lsrs	r2, r2, #8
 1906 00c0 92B2     		uxth	r2, r2
 1907 00c2 D1B2     		uxtb	r1, r2
 1908 00c4 07F50272 		add	r2, r7, #520
 1909 00c8 D154     		strb	r1, [r2, r3]
 373:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc & 0x00ff;
 1910              		.loc 1 373 0
 1911 00ca D7F81034 		ldr	r3, [r7, #1040]
 1912 00ce 5A1C     		adds	r2, r3, #1
 1913 00d0 C7F81024 		str	r2, [r7, #1040]
 1914 00d4 B7F80A24 		ldrh	r2, [r7, #1034]	@ movhi
 1915 00d8 D1B2     		uxtb	r1, r2
 1916 00da 07F50272 		add	r2, r7, #520
 1917 00de D154     		strb	r1, [r2, r3]
 374:App/STM32F4-Discovery/modbus_mk.c **** 
 375:App/STM32F4-Discovery/modbus_mk.c **** 	/* write request  to modbus line */
 376:App/STM32F4-Discovery/modbus_mk.c **** 	write_read_modbus( req, rsp, req_length, 5); 
 1918              		.loc 1 376 0
 1919 00e0 07F50272 		add	r2, r7, #520
 1920 00e4 07F10803 		add	r3, r7, #8
 1921 00e8 1046     		mov	r0, r2
 1922 00ea 1946     		mov	r1, r3
 1923 00ec D7F81024 		ldr	r2, [r7, #1040]
 1924 00f0 0523     		movs	r3, #5
 1925 00f2 FFF7FEFF 		bl	write_read_modbus
 377:App/STM32F4-Discovery/modbus_mk.c **** 	return modbus_confirmation (req, rsp,req_length, 5); 
 1926              		.loc 1 377 0
 1927 00f6 D7F81034 		ldr	r3, [r7, #1040]
 1928 00fa 9BB2     		uxth	r3, r3
 1929 00fc 07F50271 		add	r1, r7, #520
 1930 0100 07F10802 		add	r2, r7, #8
 1931 0104 0846     		mov	r0, r1
 1932 0106 1146     		mov	r1, r2
 1933 0108 1A46     		mov	r2, r3
 1934 010a 0523     		movs	r3, #5
 1935 010c FFF7FEFF 		bl	modbus_confirmation
 1936 0110 0346     		mov	r3, r0
 1937 0112 DBB2     		uxtb	r3, r3
 378:App/STM32F4-Discovery/modbus_mk.c **** 
 379:App/STM32F4-Discovery/modbus_mk.c **** 
 380:App/STM32F4-Discovery/modbus_mk.c **** 
 381:App/STM32F4-Discovery/modbus_mk.c **** }
 1938              		.loc 1 381 0
 1939 0114 1846     		mov	r0, r3
 1940 0116 07F58367 		add	r7, r7, #1048
 1941 011a BD46     		mov	sp, r7
 1942              		@ sp needed
 1943 011c 80BD     		pop	{r7, pc}
 1944              		.cfi_endproc
 1945              	.LFE119:
 1947 011e 00BF     		.section	.text.modbus_RR,"ax",%progbits
 1948              		.align	2
 1949              		.global	modbus_RR
 1950              		.thumb
 1951              		.thumb_func
 1953              	modbus_RR:
 1954              	.LFB120:
 382:App/STM32F4-Discovery/modbus_mk.c **** 
 383:App/STM32F4-Discovery/modbus_mk.c **** 
 384:App/STM32F4-Discovery/modbus_mk.c **** /* Read the values from the array to the registers of the remote device */
 385:App/STM32F4-Discovery/modbus_mk.c **** uint8_t modbus_RR( int address, int nb, uint16_t *src)
 386:App/STM32F4-Discovery/modbus_mk.c **** {
 1955              		.loc 1 386 0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 1064
 1958              		@ frame_needed = 1, uses_anonymous_args = 0
 1959 0000 80B5     		push	{r7, lr}
 1960              	.LCFI30:
 1961              		.cfi_def_cfa_offset 8
 1962              		.cfi_offset 7, -8
 1963              		.cfi_offset 14, -4
 1964 0002 ADF5856D 		sub	sp, sp, #1064
 1965              	.LCFI31:
 1966              		.cfi_def_cfa_offset 1072
 1967 0006 00AF     		add	r7, sp, #0
 1968              	.LCFI32:
 1969              		.cfi_def_cfa_register 7
 1970 0008 07F10C03 		add	r3, r7, #12
 1971 000c 1860     		str	r0, [r3]
 1972 000e 07F10803 		add	r3, r7, #8
 1973 0012 1960     		str	r1, [r3]
 1974 0014 3B1D     		adds	r3, r7, #4
 1975 0016 1A60     		str	r2, [r3]
 387:App/STM32F4-Discovery/modbus_mk.c ****     	int rc;
 388:App/STM32F4-Discovery/modbus_mk.c ****     	int i;
 389:App/STM32F4-Discovery/modbus_mk.c ****     	int req_length;
 390:App/STM32F4-Discovery/modbus_mk.c **** 	int byte_count;
 391:App/STM32F4-Discovery/modbus_mk.c ****     	uint8_t req[REQ_MAX_LEN];
 392:App/STM32F4-Discovery/modbus_mk.c ****   	uint8_t rsp[REQ_MAX_LEN];
 393:App/STM32F4-Discovery/modbus_mk.c **** 
 394:App/STM32F4-Discovery/modbus_mk.c **** 	req[0] = 0x36; 
 1976              		.loc 1 394 0
 1977 0018 07F50573 		add	r3, r7, #532
 1978 001c 3622     		movs	r2, #54
 1979 001e 1A70     		strb	r2, [r3]
 395:App/STM32F4-Discovery/modbus_mk.c **** 	req[1] = 0x4;
 1980              		.loc 1 395 0
 1981 0020 07F50573 		add	r3, r7, #532
 1982 0024 0422     		movs	r2, #4
 1983 0026 5A70     		strb	r2, [r3, #1]
 396:App/STM32F4-Discovery/modbus_mk.c **** 	req[2] = address >> 8;
 1984              		.loc 1 396 0
 1985 0028 07F10C03 		add	r3, r7, #12
 1986 002c 1B68     		ldr	r3, [r3]
 1987 002e 1B12     		asrs	r3, r3, #8
 1988 0030 DAB2     		uxtb	r2, r3
 1989 0032 07F50573 		add	r3, r7, #532
 1990 0036 9A70     		strb	r2, [r3, #2]
 397:App/STM32F4-Discovery/modbus_mk.c **** 	req[3] = address & 0x00ff;
 1991              		.loc 1 397 0
 1992 0038 07F10C03 		add	r3, r7, #12
 1993 003c 1B68     		ldr	r3, [r3]
 1994 003e DAB2     		uxtb	r2, r3
 1995 0040 07F50573 		add	r3, r7, #532
 1996 0044 DA70     		strb	r2, [r3, #3]
 398:App/STM32F4-Discovery/modbus_mk.c **** 	req[4] = nb >> 8;
 1997              		.loc 1 398 0
 1998 0046 07F10803 		add	r3, r7, #8
 1999 004a 1B68     		ldr	r3, [r3]
 2000 004c 1B12     		asrs	r3, r3, #8
 2001 004e DAB2     		uxtb	r2, r3
 2002 0050 07F50573 		add	r3, r7, #532
 2003 0054 1A71     		strb	r2, [r3, #4]
 399:App/STM32F4-Discovery/modbus_mk.c **** 	req[5] = nb & 0x00ff; 
 2004              		.loc 1 399 0
 2005 0056 07F10803 		add	r3, r7, #8
 2006 005a 1B68     		ldr	r3, [r3]
 2007 005c DAB2     		uxtb	r2, r3
 2008 005e 07F50573 		add	r3, r7, #532
 2009 0062 5A71     		strb	r2, [r3, #5]
 400:App/STM32F4-Discovery/modbus_mk.c **** 	req_length = 6; 
 2010              		.loc 1 400 0
 2011 0064 0623     		movs	r3, #6
 2012 0066 C7F82034 		str	r3, [r7, #1056]
 401:App/STM32F4-Discovery/modbus_mk.c ****    	
 402:App/STM32F4-Discovery/modbus_mk.c **** 	byte_count = nb * 2;
 2013              		.loc 1 402 0
 2014 006a 07F10803 		add	r3, r7, #8
 2015 006e 1B68     		ldr	r3, [r3]
 2016 0070 5B00     		lsls	r3, r3, #1
 2017 0072 C7F81C34 		str	r3, [r7, #1052]
 403:App/STM32F4-Discovery/modbus_mk.c ****     	req[req_length++] = byte_count;
 2018              		.loc 1 403 0
 2019 0076 D7F82034 		ldr	r3, [r7, #1056]
 2020 007a 5A1C     		adds	r2, r3, #1
 2021 007c C7F82024 		str	r2, [r7, #1056]
 2022 0080 D7F81C24 		ldr	r2, [r7, #1052]
 2023 0084 D1B2     		uxtb	r1, r2
 2024 0086 07F50572 		add	r2, r7, #532
 2025 008a D154     		strb	r1, [r2, r3]
 404:App/STM32F4-Discovery/modbus_mk.c **** 	
 405:App/STM32F4-Discovery/modbus_mk.c **** 	
 406:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t crc = crc16(req, req_length);
 2026              		.loc 1 406 0
 2027 008c D7F82034 		ldr	r3, [r7, #1056]
 2028 0090 9BB2     		uxth	r3, r3
 2029 0092 07F50572 		add	r2, r7, #532
 2030 0096 1046     		mov	r0, r2
 2031 0098 1946     		mov	r1, r3
 2032 009a FFF7FEFF 		bl	crc16
 2033 009e 0346     		mov	r3, r0
 2034 00a0 A7F81A34 		strh	r3, [r7, #1050]	@ movhi
 407:App/STM32F4-Discovery/modbus_mk.c **** 
 408:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc >> 8; 
 2035              		.loc 1 408 0
 2036 00a4 D7F82034 		ldr	r3, [r7, #1056]
 2037 00a8 5A1C     		adds	r2, r3, #1
 2038 00aa C7F82024 		str	r2, [r7, #1056]
 2039 00ae B7F81A24 		ldrh	r2, [r7, #1050]
 2040 00b2 120A     		lsrs	r2, r2, #8
 2041 00b4 92B2     		uxth	r2, r2
 2042 00b6 D1B2     		uxtb	r1, r2
 2043 00b8 07F50572 		add	r2, r7, #532
 2044 00bc D154     		strb	r1, [r2, r3]
 409:App/STM32F4-Discovery/modbus_mk.c **** 	req[req_length++] = crc & 0x00ff; 
 2045              		.loc 1 409 0
 2046 00be D7F82034 		ldr	r3, [r7, #1056]
 2047 00c2 5A1C     		adds	r2, r3, #1
 2048 00c4 C7F82024 		str	r2, [r7, #1056]
 2049 00c8 B7F81A24 		ldrh	r2, [r7, #1050]	@ movhi
 2050 00cc D1B2     		uxtb	r1, r2
 2051 00ce 07F50572 		add	r2, r7, #532
 2052 00d2 D154     		strb	r1, [r2, r3]
 410:App/STM32F4-Discovery/modbus_mk.c **** 	
 411:App/STM32F4-Discovery/modbus_mk.c **** 	/* write request  to modbus line */
 412:App/STM32F4-Discovery/modbus_mk.c **** 	write_read_modbus( req, rsp,  req_length, nb*2 + 5); 
 2053              		.loc 1 412 0
 2054 00d4 07F10803 		add	r3, r7, #8
 2055 00d8 1B68     		ldr	r3, [r3]
 2056 00da 5B00     		lsls	r3, r3, #1
 2057 00dc 0533     		adds	r3, r3, #5
 2058 00de 07F50571 		add	r1, r7, #532
 2059 00e2 07F11402 		add	r2, r7, #20
 2060 00e6 0846     		mov	r0, r1
 2061 00e8 1146     		mov	r1, r2
 2062 00ea D7F82024 		ldr	r2, [r7, #1056]
 2063 00ee FFF7FEFF 		bl	write_read_modbus
 413:App/STM32F4-Discovery/modbus_mk.c **** 	
 414:App/STM32F4-Discovery/modbus_mk.c **** 	int offset = 2;
 2064              		.loc 1 414 0
 2065 00f2 0223     		movs	r3, #2
 2066 00f4 C7F81434 		str	r3, [r7, #1044]
 415:App/STM32F4-Discovery/modbus_mk.c **** 	
 416:App/STM32F4-Discovery/modbus_mk.c **** 	for (i = 0; i < nb; i++) {
 2067              		.loc 1 416 0
 2068 00f8 0023     		movs	r3, #0
 2069 00fa C7F82434 		str	r3, [r7, #1060]
 2070 00fe 24E0     		b	.L53
 2071              	.L54:
 417:App/STM32F4-Discovery/modbus_mk.c ****             /* shift reg hi_byte to temp OR with lo_byte */
 418:App/STM32F4-Discovery/modbus_mk.c ****             src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 2072              		.loc 1 418 0 discriminator 2
 2073 0100 D7F82434 		ldr	r3, [r7, #1060]
 2074 0104 5B00     		lsls	r3, r3, #1
 2075 0106 3A1D     		adds	r2, r7, #4
 2076 0108 1268     		ldr	r2, [r2]
 2077 010a 1344     		add	r3, r3, r2
 2078 010c D7F81424 		ldr	r2, [r7, #1044]
 2079 0110 511C     		adds	r1, r2, #1
 2080 0112 D7F82424 		ldr	r2, [r7, #1060]
 2081 0116 5200     		lsls	r2, r2, #1
 2082 0118 0A44     		add	r2, r2, r1
 2083 011a 07F11401 		add	r1, r7, #20
 2084 011e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2085 0120 1202     		lsls	r2, r2, #8
 2086 0122 91B2     		uxth	r1, r2
 419:App/STM32F4-Discovery/modbus_mk.c ****                 rsp[offset + 2 + (i << 1)];
 2087              		.loc 1 419 0 discriminator 2
 2088 0124 D7F81424 		ldr	r2, [r7, #1044]
 2089 0128 901C     		adds	r0, r2, #2
 2090 012a D7F82424 		ldr	r2, [r7, #1060]
 2091 012e 5200     		lsls	r2, r2, #1
 2092 0130 0244     		add	r2, r2, r0
 2093 0132 07F11400 		add	r0, r7, #20
 2094 0136 825C     		ldrb	r2, [r0, r2]	@ zero_extendqisi2
 418:App/STM32F4-Discovery/modbus_mk.c ****             src[i] = (rsp[offset + 1 + (i << 1)] << 8) |
 2095              		.loc 1 418 0 discriminator 2
 2096 0138 0A43     		orrs	r2, r2, r1
 2097 013a 92B2     		uxth	r2, r2
 2098 013c 92B2     		uxth	r2, r2
 2099 013e 1A80     		strh	r2, [r3]	@ movhi
 416:App/STM32F4-Discovery/modbus_mk.c **** 	for (i = 0; i < nb; i++) {
 2100              		.loc 1 416 0 discriminator 2
 2101 0140 D7F82434 		ldr	r3, [r7, #1060]
 2102 0144 0133     		adds	r3, r3, #1
 2103 0146 C7F82434 		str	r3, [r7, #1060]
 2104              	.L53:
 416:App/STM32F4-Discovery/modbus_mk.c **** 	for (i = 0; i < nb; i++) {
 2105              		.loc 1 416 0 is_stmt 0 discriminator 1
 2106 014a 07F10803 		add	r3, r7, #8
 2107 014e D7F82424 		ldr	r2, [r7, #1060]
 2108 0152 1B68     		ldr	r3, [r3]
 2109 0154 9A42     		cmp	r2, r3
 2110 0156 D3DB     		blt	.L54
 420:App/STM32F4-Discovery/modbus_mk.c **** 		
 421:App/STM32F4-Discovery/modbus_mk.c ****         }
 422:App/STM32F4-Discovery/modbus_mk.c **** 
 423:App/STM32F4-Discovery/modbus_mk.c **** 	return modbus_confirmation (req, rsp,req_length, nb*2 + 5); 
 2111              		.loc 1 423 0 is_stmt 1
 2112 0158 D7F82034 		ldr	r3, [r7, #1056]
 2113 015c 9AB2     		uxth	r2, r3
 2114 015e 07F10803 		add	r3, r7, #8
 2115 0162 1B68     		ldr	r3, [r3]
 2116 0164 9BB2     		uxth	r3, r3
 2117 0166 5B00     		lsls	r3, r3, #1
 2118 0168 9BB2     		uxth	r3, r3
 2119 016a 0533     		adds	r3, r3, #5
 2120 016c 9BB2     		uxth	r3, r3
 2121 016e 07F50570 		add	r0, r7, #532
 2122 0172 07F11401 		add	r1, r7, #20
 2123 0176 FFF7FEFF 		bl	modbus_confirmation
 2124 017a 0346     		mov	r3, r0
 2125 017c DBB2     		uxtb	r3, r3
 424:App/STM32F4-Discovery/modbus_mk.c **** 
 425:App/STM32F4-Discovery/modbus_mk.c **** 
 426:App/STM32F4-Discovery/modbus_mk.c **** }
 2126              		.loc 1 426 0
 2127 017e 1846     		mov	r0, r3
 2128 0180 07F58567 		add	r7, r7, #1064
 2129 0184 BD46     		mov	sp, r7
 2130              		@ sp needed
 2131 0186 80BD     		pop	{r7, pc}
 2132              		.cfi_endproc
 2133              	.LFE120:
 2135              		.section	.text.motorHeartBeat_task,"ax",%progbits
 2136              		.align	2
 2137              		.global	motorHeartBeat_task
 2138              		.thumb
 2139              		.thumb_func
 2141              	motorHeartBeat_task:
 2142              	.LFB121:
 427:App/STM32F4-Discovery/modbus_mk.c **** 
 428:App/STM32F4-Discovery/modbus_mk.c **** 
 429:App/STM32F4-Discovery/modbus_mk.c **** 
 430:App/STM32F4-Discovery/modbus_mk.c **** /*===================================================================================
 431:App/STM32F4-Discovery/modbus_mk.c **** =====================================================================================
 432:App/STM32F4-Discovery/modbus_mk.c **** ============    		TASKS SECTION			===================== 
 433:App/STM32F4-Discovery/modbus_mk.c **** =====================================================================================
 434:App/STM32F4-Discovery/modbus_mk.c **** ====================================================================================*/
 435:App/STM32F4-Discovery/modbus_mk.c **** void motorHeartBeat_task(void * pvParameters)
 436:App/STM32F4-Discovery/modbus_mk.c **** {
 2143              		.loc 1 436 0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 32
 2146              		@ frame_needed = 1, uses_anonymous_args = 0
 2147 0000 80B5     		push	{r7, lr}
 2148              	.LCFI33:
 2149              		.cfi_def_cfa_offset 8
 2150              		.cfi_offset 7, -8
 2151              		.cfi_offset 14, -4
 2152 0002 88B0     		sub	sp, sp, #32
 2153              	.LCFI34:
 2154              		.cfi_def_cfa_offset 40
 2155 0004 00AF     		add	r7, sp, #0
 2156              	.LCFI35:
 2157              		.cfi_def_cfa_register 7
 2158 0006 7860     		str	r0, [r7, #4]
 437:App/STM32F4-Discovery/modbus_mk.c **** 	/*! sets speed of motor */
 438:App/STM32F4-Discovery/modbus_mk.c **** 
 439:App/STM32F4-Discovery/modbus_mk.c **** 	
 440:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t tab_reg[10];
 441:App/STM32F4-Discovery/modbus_mk.c **** 	
 442:App/STM32F4-Discovery/modbus_mk.c **** 	vTaskSuspend(NULL); 
 2159              		.loc 1 442 0
 2160 0008 0020     		movs	r0, #0
 2161 000a FFF7FEFF 		bl	vTaskSuspend
 2162              	.L57:
 443:App/STM32F4-Discovery/modbus_mk.c **** 	
 444:App/STM32F4-Discovery/modbus_mk.c **** 	while(1)
 445:App/STM32F4-Discovery/modbus_mk.c **** 	{
 446:App/STM32F4-Discovery/modbus_mk.c **** 
 447:App/STM32F4-Discovery/modbus_mk.c **** 		
 448:App/STM32F4-Discovery/modbus_mk.c **** 		modbus_RR(0,10,tab_reg);
 2163              		.loc 1 448 0 discriminator 1
 2164 000e 07F10C03 		add	r3, r7, #12
 2165 0012 0020     		movs	r0, #0
 2166 0014 0A21     		movs	r1, #10
 2167 0016 1A46     		mov	r2, r3
 2168 0018 FFF7FEFF 		bl	modbus_RR
 449:App/STM32F4-Discovery/modbus_mk.c **** 
 450:App/STM32F4-Discovery/modbus_mk.c **** 		vTaskDelay(1000/portTICK_RATE_MS);
 2169              		.loc 1 450 0 discriminator 1
 2170 001c 4FF47A70 		mov	r0, #1000
 2171 0020 FFF7FEFF 		bl	vTaskDelay
 451:App/STM32F4-Discovery/modbus_mk.c **** 
 452:App/STM32F4-Discovery/modbus_mk.c **** 	}
 2172              		.loc 1 452 0 discriminator 1
 2173 0024 F3E7     		b	.L57
 2174              		.cfi_endproc
 2175              	.LFE121:
 2177 0026 00BF     		.section	.text.motorControl_task,"ax",%progbits
 2178              		.align	2
 2179              		.global	motorControl_task
 2180              		.thumb
 2181              		.thumb_func
 2183              	motorControl_task:
 2184              	.LFB122:
 453:App/STM32F4-Discovery/modbus_mk.c **** 	/* Tasks must not attempt to return from their implementing
 454:App/STM32F4-Discovery/modbus_mk.c ****         function or otherwise exit.  In newer FreeRTOS port
 455:App/STM32F4-Discovery/modbus_mk.c ****         attempting to do so will result in an configASSERT() being
 456:App/STM32F4-Discovery/modbus_mk.c ****         called if it is defined.  If it is necessary for a task to
 457:App/STM32F4-Discovery/modbus_mk.c ****         exit then have the task call vTaskDelete( NULL ) to ensure
 458:App/STM32F4-Discovery/modbus_mk.c ****         its exit is clean. */
 459:App/STM32F4-Discovery/modbus_mk.c **** 	closesocket(socket_0);		
 460:App/STM32F4-Discovery/modbus_mk.c ****         vTaskDelete( NULL );
 461:App/STM32F4-Discovery/modbus_mk.c **** 
 462:App/STM32F4-Discovery/modbus_mk.c **** 
 463:App/STM32F4-Discovery/modbus_mk.c **** 
 464:App/STM32F4-Discovery/modbus_mk.c **** 
 465:App/STM32F4-Discovery/modbus_mk.c **** }
 466:App/STM32F4-Discovery/modbus_mk.c **** 
 467:App/STM32F4-Discovery/modbus_mk.c **** void motorControl_task(void * pvParameters)
 468:App/STM32F4-Discovery/modbus_mk.c **** {
 2185              		.loc 1 468 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 88
 2188              		@ frame_needed = 1, uses_anonymous_args = 0
 2189 0000 80B5     		push	{r7, lr}
 2190              	.LCFI36:
 2191              		.cfi_def_cfa_offset 8
 2192              		.cfi_offset 7, -8
 2193              		.cfi_offset 14, -4
 2194 0002 96B0     		sub	sp, sp, #88
 2195              	.LCFI37:
 2196              		.cfi_def_cfa_offset 96
 2197 0004 00AF     		add	r7, sp, #0
 2198              	.LCFI38:
 2199              		.cfi_def_cfa_register 7
 2200 0006 7860     		str	r0, [r7, #4]
 469:App/STM32F4-Discovery/modbus_mk.c **** 	
 470:App/STM32F4-Discovery/modbus_mk.c **** 
 471:App/STM32F4-Discovery/modbus_mk.c **** 	uint8_t src[4];
 472:App/STM32F4-Discovery/modbus_mk.c **** 	uint16_t spd[5]; 
 473:App/STM32F4-Discovery/modbus_mk.c **** 	
 474:App/STM32F4-Discovery/modbus_mk.c **** 
 475:App/STM32F4-Discovery/modbus_mk.c **** 	
 476:App/STM32F4-Discovery/modbus_mk.c **** 
 477:App/STM32F4-Discovery/modbus_mk.c **** 	src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 2201              		.loc 1 477 0
 2202 0008 0123     		movs	r3, #1
 2203 000a 87F84C30 		strb	r3, [r7, #76]
 2204 000e 0123     		movs	r3, #1
 2205 0010 87F84D30 		strb	r3, [r7, #77]
 2206 0014 0123     		movs	r3, #1
 2207 0016 87F84E30 		strb	r3, [r7, #78]
 2208 001a 0123     		movs	r3, #1
 2209 001c 87F84F30 		strb	r3, [r7, #79]
 478:App/STM32F4-Discovery/modbus_mk.c **** 	
 479:App/STM32F4-Discovery/modbus_mk.c **** //	spd[0]=1500;spd[1]=0;spd[2]=2250;spd[3]=10;spd[4]=10;
 480:App/STM32F4-Discovery/modbus_mk.c **** 	
 481:App/STM32F4-Discovery/modbus_mk.c **** 	// create usart semaphore 
 482:App/STM32F4-Discovery/modbus_mk.c **** 	xSmphrUSART = xSemaphoreCreateBinary();	
 2210              		.loc 1 482 0
 2211 0020 0120     		movs	r0, #1
 2212 0022 0021     		movs	r1, #0
 2213 0024 0322     		movs	r2, #3
 2214 0026 FFF7FEFF 		bl	xQueueGenericCreate
 2215 002a 0246     		mov	r2, r0
 2216 002c 7C4B     		ldr	r3, .L73
 2217 002e 1A60     		str	r2, [r3]
 483:App/STM32F4-Discovery/modbus_mk.c **** 	
 484:App/STM32F4-Discovery/modbus_mk.c **** 	portTickType xDelay = portMAX_DELAY;//3000 / portTICK_RATE_MS;	
 2218              		.loc 1 484 0
 2219 0030 4FF0FF33 		mov	r3, #-1
 2220 0034 7B65     		str	r3, [r7, #84]
 485:App/STM32F4-Discovery/modbus_mk.c **** 	
 486:App/STM32F4-Discovery/modbus_mk.c **** 
 487:App/STM32F4-Discovery/modbus_mk.c **** 	QueueTelegram telegramR, telegramS; 
 488:App/STM32F4-Discovery/modbus_mk.c **** 
 489:App/STM32F4-Discovery/modbus_mk.c **** 	int HB_flag = 0;
 2221              		.loc 1 489 0
 2222 0036 0023     		movs	r3, #0
 2223 0038 3B65     		str	r3, [r7, #80]
 2224              	.L72:
 490:App/STM32F4-Discovery/modbus_mk.c **** 	
 491:App/STM32F4-Discovery/modbus_mk.c **** 	while (1)
 492:App/STM32F4-Discovery/modbus_mk.c **** 	{
 493:App/STM32F4-Discovery/modbus_mk.c **** 
 494:App/STM32F4-Discovery/modbus_mk.c **** 		
 495:App/STM32F4-Discovery/modbus_mk.c **** 	
 496:App/STM32F4-Discovery/modbus_mk.c **** 		if (xQueueReceive(QSpd_handle, (void *)&telegramR, xDelay  ) == pdPASS)
 2225              		.loc 1 496 0
 2226 003a 7A4B     		ldr	r3, .L73+4
 2227 003c 1A68     		ldr	r2, [r3]
 2228 003e 07F12403 		add	r3, r7, #36
 2229 0042 1046     		mov	r0, r2
 2230 0044 1946     		mov	r1, r3
 2231 0046 7A6D     		ldr	r2, [r7, #84]
 2232 0048 0023     		movs	r3, #0
 2233 004a FFF7FEFF 		bl	xQueueGenericReceive
 2234 004e 0346     		mov	r3, r0
 2235 0050 012B     		cmp	r3, #1
 2236 0052 40F0E480 		bne	.L59
 497:App/STM32F4-Discovery/modbus_mk.c **** 		{
 498:App/STM32F4-Discovery/modbus_mk.c **** 			switch ( telegramR.Qcmd )
 2237              		.loc 1 498 0
 2238 0056 97F82430 		ldrb	r3, [r7, #36]	@ zero_extendqisi2
 2239 005a 052B     		cmp	r3, #5
 2240 005c 00F2D280 		bhi	.L60
 2241 0060 01A2     		adr	r2, .L62
 2242 0062 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2243 0066 00BF     		.p2align 2
 2244              	.L62:
 2245 0068 81000000 		.word	.L61+1
 2246 006c F5000000 		.word	.L63+1
 2247 0070 05020000 		.word	.L60+1
 2248 0074 05020000 		.word	.L60+1
 2249 0078 31010000 		.word	.L64+1
 2250 007c B3010000 		.word	.L65+1
 2251              		.p2align 1
 2252              	.L61:
 499:App/STM32F4-Discovery/modbus_mk.c **** 			{
 500:App/STM32F4-Discovery/modbus_mk.c **** 				case SETDATA:
 501:App/STM32F4-Discovery/modbus_mk.c **** 
 502:App/STM32F4-Discovery/modbus_mk.c **** 					src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 2253              		.loc 1 502 0
 2254 0080 0123     		movs	r3, #1
 2255 0082 87F84C30 		strb	r3, [r7, #76]
 2256 0086 0123     		movs	r3, #1
 2257 0088 87F84D30 		strb	r3, [r7, #77]
 2258 008c 0123     		movs	r3, #1
 2259 008e 87F84E30 		strb	r3, [r7, #78]
 2260 0092 0123     		movs	r3, #1
 2261 0094 87F84F30 		strb	r3, [r7, #79]
 503:App/STM32F4-Discovery/modbus_mk.c **** 
 504:App/STM32F4-Discovery/modbus_mk.c **** 					if ( !modbus_WIB( 0 , 3, src))
 2262              		.loc 1 504 0
 2263 0098 07F14C03 		add	r3, r7, #76
 2264 009c 0020     		movs	r0, #0
 2265 009e 0321     		movs	r1, #3
 2266 00a0 1A46     		mov	r2, r3
 2267 00a2 FFF7FEFF 		bl	modbus_WIB
 2268 00a6 0346     		mov	r3, r0
 2269 00a8 002B     		cmp	r3, #0
 2270 00aa 01D1     		bne	.L66
 505:App/STM32F4-Discovery/modbus_mk.c **** 					{
 506:App/STM32F4-Discovery/modbus_mk.c **** 							// send response to CLI 
 507:App/STM32F4-Discovery/modbus_mk.c **** 						telegramS.Qcmd = ERROR_MODBUS;
 2271              		.loc 1 507 0
 2272 00ac 0723     		movs	r3, #7
 2273 00ae 3B72     		strb	r3, [r7, #8]
 2274              	.L66:
 508:App/STM32F4-Discovery/modbus_mk.c **** 					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
 509:App/STM32F4-Discovery/modbus_mk.c **** 					//	break;
 510:App/STM32F4-Discovery/modbus_mk.c **** 					}
 511:App/STM32F4-Discovery/modbus_mk.c **** 					vTaskDelay ( 1000 / portTICK_RATE_MS);
 2275              		.loc 1 511 0
 2276 00b0 4FF47A70 		mov	r0, #1000
 2277 00b4 FFF7FEFF 		bl	vTaskDelay
 512:App/STM32F4-Discovery/modbus_mk.c **** 					
 513:App/STM32F4-Discovery/modbus_mk.c **** 					if (!modbus_WR(0, 5, telegramR.data))
 2278              		.loc 1 513 0
 2279 00b8 07F12403 		add	r3, r7, #36
 2280 00bc 0833     		adds	r3, r3, #8
 2281 00be 0020     		movs	r0, #0
 2282 00c0 0521     		movs	r1, #5
 2283 00c2 1A46     		mov	r2, r3
 2284 00c4 FFF7FEFF 		bl	modbus_WR
 2285 00c8 0346     		mov	r3, r0
 2286 00ca 002B     		cmp	r3, #0
 2287 00cc 01D1     		bne	.L67
 514:App/STM32F4-Discovery/modbus_mk.c **** 					{
 515:App/STM32F4-Discovery/modbus_mk.c **** 							// send response to CLI 
 516:App/STM32F4-Discovery/modbus_mk.c **** 						telegramS.Qcmd = ERROR_MODBUS;
 2288              		.loc 1 516 0
 2289 00ce 0723     		movs	r3, #7
 2290 00d0 3B72     		strb	r3, [r7, #8]
 2291              	.L67:
 517:App/STM32F4-Discovery/modbus_mk.c **** 					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
 518:App/STM32F4-Discovery/modbus_mk.c **** 					//	break;
 519:App/STM32F4-Discovery/modbus_mk.c **** 					}
 520:App/STM32F4-Discovery/modbus_mk.c **** 
 521:App/STM32F4-Discovery/modbus_mk.c **** 					vTaskDelay ( 1000 / portTICK_RATE_MS);
 2292              		.loc 1 521 0
 2293 00d2 4FF47A70 		mov	r0, #1000
 2294 00d6 FFF7FEFF 		bl	vTaskDelay
 522:App/STM32F4-Discovery/modbus_mk.c **** 
 523:App/STM32F4-Discovery/modbus_mk.c **** 					// send response to CLI 
 524:App/STM32F4-Discovery/modbus_mk.c **** 					telegramS.Qcmd = SUCCSESS;
 2295              		.loc 1 524 0
 2296 00da 0623     		movs	r3, #6
 2297 00dc 3B72     		strb	r3, [r7, #8]
 525:App/STM32F4-Discovery/modbus_mk.c **** 					xQueueSend(QSpd_handle, &telegramS, xDelay);
 2298              		.loc 1 525 0
 2299 00de 514B     		ldr	r3, .L73+4
 2300 00e0 1A68     		ldr	r2, [r3]
 2301 00e2 07F10803 		add	r3, r7, #8
 2302 00e6 1046     		mov	r0, r2
 2303 00e8 1946     		mov	r1, r3
 2304 00ea 7A6D     		ldr	r2, [r7, #84]
 2305 00ec 0023     		movs	r3, #0
 2306 00ee FFF7FEFF 		bl	xQueueGenericSend
 526:App/STM32F4-Discovery/modbus_mk.c **** 
 527:App/STM32F4-Discovery/modbus_mk.c **** 					break;
 2307              		.loc 1 527 0
 2308 00f2 94E0     		b	.L59
 2309              	.L63:
 528:App/STM32F4-Discovery/modbus_mk.c **** 				       	
 529:App/STM32F4-Discovery/modbus_mk.c **** 				
 530:App/STM32F4-Discovery/modbus_mk.c **** 				case GETDATA:
 531:App/STM32F4-Discovery/modbus_mk.c **** 				
 532:App/STM32F4-Discovery/modbus_mk.c **** 					if ( !modbus_RR(0, 10, telegramS.data))
 2310              		.loc 1 532 0
 2311 00f4 07F10803 		add	r3, r7, #8
 2312 00f8 0833     		adds	r3, r3, #8
 2313 00fa 0020     		movs	r0, #0
 2314 00fc 0A21     		movs	r1, #10
 2315 00fe 1A46     		mov	r2, r3
 2316 0100 FFF7FEFF 		bl	modbus_RR
 2317 0104 0346     		mov	r3, r0
 2318 0106 002B     		cmp	r3, #0
 2319 0108 01D1     		bne	.L68
 533:App/STM32F4-Discovery/modbus_mk.c **** 					{
 534:App/STM32F4-Discovery/modbus_mk.c **** 							// send response to CLI 
 535:App/STM32F4-Discovery/modbus_mk.c **** 						telegramS.Qcmd = ERROR_MODBUS;
 2320              		.loc 1 535 0
 2321 010a 0723     		movs	r3, #7
 2322 010c 3B72     		strb	r3, [r7, #8]
 2323              	.L68:
 536:App/STM32F4-Discovery/modbus_mk.c **** 					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
 537:App/STM32F4-Discovery/modbus_mk.c **** 					//	break;
 538:App/STM32F4-Discovery/modbus_mk.c **** 					}
 539:App/STM32F4-Discovery/modbus_mk.c **** 
 540:App/STM32F4-Discovery/modbus_mk.c **** 					vTaskDelay ( 1000 / portTICK_RATE_MS);
 2324              		.loc 1 540 0
 2325 010e 4FF47A70 		mov	r0, #1000
 2326 0112 FFF7FEFF 		bl	vTaskDelay
 541:App/STM32F4-Discovery/modbus_mk.c **** 
 542:App/STM32F4-Discovery/modbus_mk.c **** 					// send response to CLI 
 543:App/STM32F4-Discovery/modbus_mk.c **** 					telegramS.Qcmd = SUCCSESS;
 2327              		.loc 1 543 0
 2328 0116 0623     		movs	r3, #6
 2329 0118 3B72     		strb	r3, [r7, #8]
 544:App/STM32F4-Discovery/modbus_mk.c **** 					xQueueSend(QSpd_handle, &telegramS, xDelay);
 2330              		.loc 1 544 0
 2331 011a 424B     		ldr	r3, .L73+4
 2332 011c 1A68     		ldr	r2, [r3]
 2333 011e 07F10803 		add	r3, r7, #8
 2334 0122 1046     		mov	r0, r2
 2335 0124 1946     		mov	r1, r3
 2336 0126 7A6D     		ldr	r2, [r7, #84]
 2337 0128 0023     		movs	r3, #0
 2338 012a FFF7FEFF 		bl	xQueueGenericSend
 545:App/STM32F4-Discovery/modbus_mk.c **** 
 546:App/STM32F4-Discovery/modbus_mk.c **** 					break;
 2339              		.loc 1 546 0
 2340 012e 76E0     		b	.L59
 2341              	.L64:
 547:App/STM32F4-Discovery/modbus_mk.c **** 
 548:App/STM32F4-Discovery/modbus_mk.c **** 				
 549:App/STM32F4-Discovery/modbus_mk.c **** 				case START: 
 550:App/STM32F4-Discovery/modbus_mk.c **** 					HB_flag = 1; 
 2342              		.loc 1 550 0
 2343 0130 0123     		movs	r3, #1
 2344 0132 3B65     		str	r3, [r7, #80]
 551:App/STM32F4-Discovery/modbus_mk.c **** 					// set motor speed to 10% 
 552:App/STM32F4-Discovery/modbus_mk.c **** 				         src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 2345              		.loc 1 552 0
 2346 0134 0123     		movs	r3, #1
 2347 0136 87F84C30 		strb	r3, [r7, #76]
 2348 013a 0123     		movs	r3, #1
 2349 013c 87F84D30 		strb	r3, [r7, #77]
 2350 0140 0123     		movs	r3, #1
 2351 0142 87F84E30 		strb	r3, [r7, #78]
 2352 0146 0123     		movs	r3, #1
 2353 0148 87F84F30 		strb	r3, [r7, #79]
 553:App/STM32F4-Discovery/modbus_mk.c **** 
 554:App/STM32F4-Discovery/modbus_mk.c **** 					if( !modbus_WIB( 0 , 3, src) )
 2354              		.loc 1 554 0
 2355 014c 07F14C03 		add	r3, r7, #76
 2356 0150 0020     		movs	r0, #0
 2357 0152 0321     		movs	r1, #3
 2358 0154 1A46     		mov	r2, r3
 2359 0156 FFF7FEFF 		bl	modbus_WIB
 2360 015a 0346     		mov	r3, r0
 2361 015c 002B     		cmp	r3, #0
 2362 015e 01D1     		bne	.L69
 555:App/STM32F4-Discovery/modbus_mk.c **** 					{
 556:App/STM32F4-Discovery/modbus_mk.c **** 							// send response to CLI 
 557:App/STM32F4-Discovery/modbus_mk.c **** 						telegramS.Qcmd = ERROR_MODBUS;
 2363              		.loc 1 557 0
 2364 0160 0723     		movs	r3, #7
 2365 0162 3B72     		strb	r3, [r7, #8]
 2366              	.L69:
 558:App/STM32F4-Discovery/modbus_mk.c **** 					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
 559:App/STM32F4-Discovery/modbus_mk.c **** 					//	break;
 560:App/STM32F4-Discovery/modbus_mk.c **** 					}
 561:App/STM32F4-Discovery/modbus_mk.c **** 
 562:App/STM32F4-Discovery/modbus_mk.c **** 					vTaskDelay ( 1000 / portTICK_RATE_MS);
 2367              		.loc 1 562 0
 2368 0164 4FF47A70 		mov	r0, #1000
 2369 0168 FFF7FEFF 		bl	vTaskDelay
 563:App/STM32F4-Discovery/modbus_mk.c **** 
 564:App/STM32F4-Discovery/modbus_mk.c **** 					if (!modbus_WR( 0, 5, telegramR.data))
 2370              		.loc 1 564 0
 2371 016c 07F12403 		add	r3, r7, #36
 2372 0170 0833     		adds	r3, r3, #8
 2373 0172 0020     		movs	r0, #0
 2374 0174 0521     		movs	r1, #5
 2375 0176 1A46     		mov	r2, r3
 2376 0178 FFF7FEFF 		bl	modbus_WR
 2377 017c 0346     		mov	r3, r0
 2378 017e 002B     		cmp	r3, #0
 2379 0180 01D1     		bne	.L70
 565:App/STM32F4-Discovery/modbus_mk.c **** 					{
 566:App/STM32F4-Discovery/modbus_mk.c **** 							// send response to CLI 
 567:App/STM32F4-Discovery/modbus_mk.c **** 						telegramS.Qcmd = ERROR_MODBUS;
 2380              		.loc 1 567 0
 2381 0182 0723     		movs	r3, #7
 2382 0184 3B72     		strb	r3, [r7, #8]
 2383              	.L70:
 568:App/STM32F4-Discovery/modbus_mk.c **** 					//	xQueueSend(QSpd_handle, &telegramS, xDelay);
 569:App/STM32F4-Discovery/modbus_mk.c **** 					//	break;
 570:App/STM32F4-Discovery/modbus_mk.c **** 					}
 571:App/STM32F4-Discovery/modbus_mk.c **** 
 572:App/STM32F4-Discovery/modbus_mk.c **** 					vTaskDelay ( 1000 / portTICK_RATE_MS);
 2384              		.loc 1 572 0
 2385 0186 4FF47A70 		mov	r0, #1000
 2386 018a FFF7FEFF 		bl	vTaskDelay
 573:App/STM32F4-Discovery/modbus_mk.c **** 
 574:App/STM32F4-Discovery/modbus_mk.c **** 					vTaskResume(motorHeartBeatHandle);
 2387              		.loc 1 574 0
 2388 018e 264B     		ldr	r3, .L73+8
 2389 0190 1B68     		ldr	r3, [r3]
 2390 0192 1846     		mov	r0, r3
 2391 0194 FFF7FEFF 		bl	vTaskResume
 575:App/STM32F4-Discovery/modbus_mk.c **** 
 576:App/STM32F4-Discovery/modbus_mk.c **** 					// send response to CLI 
 577:App/STM32F4-Discovery/modbus_mk.c **** 					telegramS.Qcmd = SUCCSESS;
 2392              		.loc 1 577 0
 2393 0198 0623     		movs	r3, #6
 2394 019a 3B72     		strb	r3, [r7, #8]
 578:App/STM32F4-Discovery/modbus_mk.c **** 					xQueueSend(QSpd_handle, &telegramS, xDelay);
 2395              		.loc 1 578 0
 2396 019c 214B     		ldr	r3, .L73+4
 2397 019e 1A68     		ldr	r2, [r3]
 2398 01a0 07F10803 		add	r3, r7, #8
 2399 01a4 1046     		mov	r0, r2
 2400 01a6 1946     		mov	r1, r3
 2401 01a8 7A6D     		ldr	r2, [r7, #84]
 2402 01aa 0023     		movs	r3, #0
 2403 01ac FFF7FEFF 		bl	xQueueGenericSend
 579:App/STM32F4-Discovery/modbus_mk.c **** 
 580:App/STM32F4-Discovery/modbus_mk.c **** 					break;
 2404              		.loc 1 580 0
 2405 01b0 35E0     		b	.L59
 2406              	.L65:
 581:App/STM32F4-Discovery/modbus_mk.c **** 				
 582:App/STM32F4-Discovery/modbus_mk.c **** 				case STOP:
 583:App/STM32F4-Discovery/modbus_mk.c **** 					
 584:App/STM32F4-Discovery/modbus_mk.c **** 					// send stop bits to motor 
 585:App/STM32F4-Discovery/modbus_mk.c **** 					src[0]=0; src[1]=0; src[2]=0; src[3]=0;
 2407              		.loc 1 585 0
 2408 01b2 0023     		movs	r3, #0
 2409 01b4 87F84C30 		strb	r3, [r7, #76]
 2410 01b8 0023     		movs	r3, #0
 2411 01ba 87F84D30 		strb	r3, [r7, #77]
 2412 01be 0023     		movs	r3, #0
 2413 01c0 87F84E30 		strb	r3, [r7, #78]
 2414 01c4 0023     		movs	r3, #0
 2415 01c6 87F84F30 		strb	r3, [r7, #79]
 586:App/STM32F4-Discovery/modbus_mk.c **** 
 587:App/STM32F4-Discovery/modbus_mk.c **** 					if (!modbus_WIB( 0 , 3, src)) 
 2416              		.loc 1 587 0
 2417 01ca 07F14C03 		add	r3, r7, #76
 2418 01ce 0020     		movs	r0, #0
 2419 01d0 0321     		movs	r1, #3
 2420 01d2 1A46     		mov	r2, r3
 2421 01d4 FFF7FEFF 		bl	modbus_WIB
 2422 01d8 0346     		mov	r3, r0
 2423 01da 002B     		cmp	r3, #0
 2424 01dc 01D1     		bne	.L71
 588:App/STM32F4-Discovery/modbus_mk.c **** 					{
 589:App/STM32F4-Discovery/modbus_mk.c **** 							// send response to CLI 
 590:App/STM32F4-Discovery/modbus_mk.c **** 						telegramS.Qcmd = ERROR_MODBUS;
 2425              		.loc 1 590 0
 2426 01de 0723     		movs	r3, #7
 2427 01e0 3B72     		strb	r3, [r7, #8]
 2428              	.L71:
 591:App/STM32F4-Discovery/modbus_mk.c **** 				//		xQueueSend(QSpd_handle, &telegramS, xDelay);
 592:App/STM32F4-Discovery/modbus_mk.c **** 					//	break;
 593:App/STM32F4-Discovery/modbus_mk.c **** 					}
 594:App/STM32F4-Discovery/modbus_mk.c **** 
 595:App/STM32F4-Discovery/modbus_mk.c **** 					vTaskDelay ( 1000 / portTICK_RATE_MS);
 2429              		.loc 1 595 0
 2430 01e2 4FF47A70 		mov	r0, #1000
 2431 01e6 FFF7FEFF 		bl	vTaskDelay
 596:App/STM32F4-Discovery/modbus_mk.c **** 
 597:App/STM32F4-Discovery/modbus_mk.c **** 
 598:App/STM32F4-Discovery/modbus_mk.c **** //					vTaskSuspend (motorHeartBeatHandle);					// send response to CLI 
 599:App/STM32F4-Discovery/modbus_mk.c **** 					telegramS.Qcmd = SUCCSESS;
 2432              		.loc 1 599 0
 2433 01ea 0623     		movs	r3, #6
 2434 01ec 3B72     		strb	r3, [r7, #8]
 600:App/STM32F4-Discovery/modbus_mk.c **** 					xQueueSend(QSpd_handle, &telegramS, xDelay);
 2435              		.loc 1 600 0
 2436 01ee 0D4B     		ldr	r3, .L73+4
 2437 01f0 1A68     		ldr	r2, [r3]
 2438 01f2 07F10803 		add	r3, r7, #8
 2439 01f6 1046     		mov	r0, r2
 2440 01f8 1946     		mov	r1, r3
 2441 01fa 7A6D     		ldr	r2, [r7, #84]
 2442 01fc 0023     		movs	r3, #0
 2443 01fe FFF7FEFF 		bl	xQueueGenericSend
 601:App/STM32F4-Discovery/modbus_mk.c **** 
 602:App/STM32F4-Discovery/modbus_mk.c **** 					break; 
 2444              		.loc 1 602 0
 2445 0202 0CE0     		b	.L59
 2446              	.L60:
 603:App/STM32F4-Discovery/modbus_mk.c **** 
 604:App/STM32F4-Discovery/modbus_mk.c **** 				default:
 605:App/STM32F4-Discovery/modbus_mk.c **** 
 606:App/STM32F4-Discovery/modbus_mk.c **** 					telegramS.Qcmd = ERROR_MODBUS;
 2447              		.loc 1 606 0
 2448 0204 0723     		movs	r3, #7
 2449 0206 3B72     		strb	r3, [r7, #8]
 607:App/STM32F4-Discovery/modbus_mk.c **** 					xQueueSend(QSpd_handle, &telegramS, xDelay);
 2450              		.loc 1 607 0
 2451 0208 064B     		ldr	r3, .L73+4
 2452 020a 1A68     		ldr	r2, [r3]
 2453 020c 07F10803 		add	r3, r7, #8
 2454 0210 1046     		mov	r0, r2
 2455 0212 1946     		mov	r1, r3
 2456 0214 7A6D     		ldr	r2, [r7, #84]
 2457 0216 0023     		movs	r3, #0
 2458 0218 FFF7FEFF 		bl	xQueueGenericSend
 608:App/STM32F4-Discovery/modbus_mk.c **** 					break;
 2459              		.loc 1 608 0
 2460 021c 00BF     		nop
 2461              	.L59:
 609:App/STM32F4-Discovery/modbus_mk.c **** 
 610:App/STM32F4-Discovery/modbus_mk.c **** 					
 611:App/STM32F4-Discovery/modbus_mk.c **** 
 612:App/STM32F4-Discovery/modbus_mk.c **** 
 613:App/STM32F4-Discovery/modbus_mk.c **** 					
 614:App/STM32F4-Discovery/modbus_mk.c **** 			}
 615:App/STM32F4-Discovery/modbus_mk.c **** 		}
 616:App/STM32F4-Discovery/modbus_mk.c **** 	
 617:App/STM32F4-Discovery/modbus_mk.c **** 		
 618:App/STM32F4-Discovery/modbus_mk.c **** 	
 619:App/STM32F4-Discovery/modbus_mk.c **** 	}
 2462              		.loc 1 619 0
 2463 021e 0CE7     		b	.L72
 2464              	.L74:
 2465              		.align	2
 2466              	.L73:
 2467 0220 00000000 		.word	xSmphrUSART
 2468 0224 00000000 		.word	QSpd_handle
 2469 0228 00000000 		.word	motorHeartBeatHandle
 2470              		.cfi_endproc
 2471              	.LFE122:
 2473              		.section	.bss.cnt.9315,"aw",%nobits
 2476              	cnt.9315:
 2477 0000 00       		.space	1
 2478              		.text
 2479              	.Letext0:
 2480              		.file 2 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/lib/gcc/arm-none-eabi/4.8.4/include/std
 2481              		.file 3 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/machine/_default_
 2482              		.file 4 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/stdint.h"
 2483              		.file 5 "App/STM32F4-Discovery/Libraries/CMSIS/ST/STM32F4xx/Include/stm32f4xx.h"
 2484              		.file 6 "App/STM32F4-Discovery/Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 2485              		.file 7 "App/STM32F4-Discovery/Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 2486              		.file 8 "App/STM32F4-Discovery/Libraries/STM32F4xx_StdPeriph_Driver/inc/misc.h"
 2487              		.file 9 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 2488              		.file 10 "Source/include/task.h"
 2489              		.file 11 "Source/include/queue.h"
 2490              		.file 12 "Source/include/semphr.h"
 2491              		.file 13 "Source/FreeRTOS-Plus-CLI/FreeRTOS_CLI.h"
 2492              		.file 14 "App/STM32F4-Discovery/tcpCLI.h"
 2493              		.file 15 "App/STM32F4-Discovery/main.h"
 2494              		.file 16 "App/STM32F4-Discovery/modbus_mk.h"
 2495              		.file 17 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
 2496              		.file 18 "App/STM32F4-Discovery/spi.h"
 2497              		.file 19 "App/STM32F4-Discovery/W5200.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 modbus_mk.c
                            *COM*:0000000000000004 xSemaphoreDMASPI
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:21     .bss.xHigherPriorityTaskWoken:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:24     .bss.xHigherPriorityTaskWoken:0000000000000000 xHigherPriorityTaskWoken
                            *COM*:0000000000000004 xSmphrUSART
                            *COM*:0000000000000004 motorHeartBeatHandle
                            *COM*:0000000000000004 motorHBHandle
                            *COM*:0000000000000004 QSpd_handle
                            *COM*:0000000000000004 QStatus_handle
                            *COM*:0000000000000004 socket_0
                            *COM*:00000000000007d0 bufferTX
                            *COM*:00000000000007d0 bufferRX
                            *COM*:0000000000000004 bufferRXidx
                            *COM*:0000000000000004 bufferTXidx
                            *COM*:0000000000000004 dat_lengthRX
                            *COM*:0000000000000004 dat_lengthTX
                            *COM*:0000000000000004 set_macTaskHandle
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:40     .rodata:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:48     .rodata.xMotorCommand:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:51     .rodata.xMotorCommand:0000000000000000 xMotorCommand
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:65     .rodata.xTaskStatsCommand:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:68     .rodata.xTaskStatsCommand:0000000000000000 xTaskStatsCommand
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:75     .rodata.table_crc_hi:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:78     .rodata.table_crc_hi:0000000000000000 table_crc_hi
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:336    .rodata.table_crc_lo:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:339    .rodata.table_crc_lo:0000000000000000 table_crc_lo
                            *COM*:0000000000000004 fd
                            *COM*:0000000000000201 received_string
                            *COM*:0000000000000004 rx_length
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:600    .bss.xHigherPriorityTaskWoken_usart:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:603    .bss.xHigherPriorityTaskWoken_usart:0000000000000000 xHigherPriorityTaskWoken_usart
                            *COM*:0000000000000014 input_Register
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:607    .text.init_USARTx:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:612    .text.init_USARTx:0000000000000000 init_USARTx
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:760    .text.init_USARTx:00000000000000e4 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:767    .text.USART_puts:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:772    .text.USART_puts:0000000000000000 USART_puts
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:839    .text.USART_puts:000000000000004c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:844    .text.USART6_IRQHandler:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:849    .text.USART6_IRQHandler:0000000000000000 USART6_IRQHandler
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:941    .text.USART6_IRQHandler:0000000000000080 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2476   .bss.cnt.9315:0000000000000000 cnt.9315
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:951    .text.crc16:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:956    .text.crc16:0000000000000000 crc16
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1034   .text.crc16:0000000000000064 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1040   .text.modbus_confirmation:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1045   .text.modbus_confirmation:0000000000000000 modbus_confirmation
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1116   .text.write_read_modbus:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1121   .text.write_read_modbus:0000000000000000 write_read_modbus
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1240   .text.write_read_modbus:00000000000000ac $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1248   .text.modbus_RIB:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1253   .text.modbus_RIB:0000000000000000 modbus_RIB
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1372   .text.modbus_WIB:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1377   .text.modbus_WIB:0000000000000000 modbus_WIB
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1626   .text.modbus_WR:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1631   .text.modbus_WR:0000000000000000 modbus_WR
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1805   .text.modbus_WSR:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1810   .text.modbus_WSR:0000000000000000 modbus_WSR
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1948   .text.modbus_RR:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:1953   .text.modbus_RR:0000000000000000 modbus_RR
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2136   .text.motorHeartBeat_task:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2141   .text.motorHeartBeat_task:0000000000000000 motorHeartBeat_task
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2178   .text.motorControl_task:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2183   .text.motorControl_task:0000000000000000 motorControl_task
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2245   .text.motorControl_task:0000000000000068 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2251   .text.motorControl_task:0000000000000080 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2467   .text.motorControl_task:0000000000000220 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cc0itpBR.s:2477   .bss.cnt.9315:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
prvMotorCommand
prvTaskStatsCommand
RCC_APB2PeriphClockCmd
RCC_AHB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
USART_Init
USART_ITConfig
NVIC_Init
USART_Cmd
USART_GetITStatus
vPortEnterCritical
xQueueGenericSendFromISR
vPortExitCritical
xQueueGenericReceive
vTaskSuspend
vTaskDelay
xQueueGenericCreate
xQueueGenericSend
vTaskResume
